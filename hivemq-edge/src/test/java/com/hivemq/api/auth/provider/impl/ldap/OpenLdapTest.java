/*
 * Copyright 2019-present HiveMQ GmbH
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.hivemq.api.auth.provider.impl.ldap;

import com.hivemq.api.auth.provider.impl.ldap.testcontainer.LdapTestConnection;
import com.hivemq.api.auth.provider.impl.ldap.testcontainer.OpenLdapContainer;
import com.unboundid.ldap.sdk.BindRequest;
import com.unboundid.ldap.sdk.BindResult;
import com.unboundid.ldap.sdk.LDAPConnection;
import com.unboundid.ldap.sdk.LDAPConnectionPool;
import com.unboundid.ldap.sdk.ResultCode;
import com.unboundid.ldap.sdk.SearchRequest;
import com.unboundid.ldap.sdk.SearchResult;
import com.unboundid.ldap.sdk.SearchResultEntry;
import com.unboundid.ldap.sdk.SearchScope;
import com.unboundid.ldap.sdk.SimpleBindRequest;
import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;
import org.testcontainers.junit.jupiter.Container;
import org.testcontainers.junit.jupiter.Testcontainers;

import java.nio.charset.StandardCharsets;
import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;

/**
 * Integration tests using OpenLDAP testcontainer.
 * <p>
 * This test demonstrates:
 * <ul>
 *     <li>Setting up an OpenLDAP server using osixia/openldap Docker image</li>
 *     <li>Seeding the LDAP directory with test data from an external LDIF file</li>
 *     <li>Basic connectivity and authentication</li>
 *     <li>Searching for users and groups</li>
 *     <li>Testing DN resolution strategies</li>
 *     <li>START_TLS connection upgrades (plain to encrypted)</li>
 * </ul>
 * <p>
 * OpenLDAP container configuration:
 * <ul>
 *     <li>Image: osixia/openldap:1.5.0</li>
 *     <li>Domain: example.org (dc=example,dc=org)</li>
 *     <li>Admin DN: cn=admin,dc=example,dc=org</li>
 *     <li>Admin Password: admin</li>
 *     <li>TLS: Enabled (supports START_TLS and LDAPS with self-signed certificates)</li>
 *     <li>Test data loaded from: src/test/resources/ldap/test-data.ldif</li>
 * </ul>
 * <p>
 * <strong>Note on START_TLS Tests:</strong> START_TLS tests use {@code acceptAnyCertificateForTesting}
 * to trust the self-signed certificates generated by the OpenLDAP container. This is safe for integration
 * tests but should <strong>never</strong> be used in production.
 */
@Testcontainers
class OpenLdapTest {

    /**
     * OpenLDAP container with test data seeded from LDIF file and TLS enabled.
     * <p>
     * The container is configured with:
     * - Domain: example.org
     * - Admin password: admin
     * - TLS enabled for START_TLS testing
     * - Custom LDIF file loaded from classpath: ldap/test-data.ldif
     * <p>
     * OpenLDAP will automatically load all LDIF files from the bootstrap directory on startup.
     * The osixia/openldap image generates self-signed certificates automatically when TLS is enabled.
     * START_TLS tests use acceptAnyCertificateForTesting to trust these self-signed certificates.
     */
    @Container
    private static final OpenLdapContainer OPENLDAP_CONTAINER = OpenLdapContainer.builder()
            .withTls(true)  // Enable TLS for START_TLS testing
            .withLdifFile("ldap/test-data.ldif")
            .build();

    private static LdapClient ldapClient;
    private static LdapConnectionProperties connectionProperties;

    @BeforeAll
    static void setUp() throws Exception {
        // Get dynamically mapped port
        final String host = OPENLDAP_CONTAINER.getHost();
        final int port = OPENLDAP_CONTAINER.getLdapPort();

        // Create LdapSimpleBind for OpenLDAP admin authentication
        // OpenLDAP admin DN: cn=admin,{baseDn}
        final LdapConnectionProperties.LdapSimpleBind ldapSimpleBind =
                new LdapConnectionProperties.LdapSimpleBind(
                        "cn=admin",
                        OPENLDAP_CONTAINER.getAdminPassword());

        // Create connection properties
        connectionProperties = new LdapConnectionProperties(
                new LdapConnectionProperties.LdapServers(new String[]{host}, new int[]{port}),
                TlsMode.NONE, // Plain LDAP for this test
                null,
                5000,
                10000,
                1,
                "uid",
                OPENLDAP_CONTAINER.getBaseDn(),
                null,
                SearchScope.SUB,
                5,
                "ADMIN",
                false,
                ldapSimpleBind);

        // Create and start LDAP client
        ldapClient = new LdapClient(connectionProperties);
        ldapClient.start();

        // Wait for OpenLDAP to finish loading LDIF files and TLS configuration
        // When TLS is enabled, the container needs time to generate certificates
        Thread.sleep(8000);
    }

    @AfterAll
    static void tearDown() {
        if (ldapClient != null && ldapClient.isStarted()) {
            ldapClient.stop();
        }
        OPENLDAP_CONTAINER.stop();
    }

    /**
     * Tests basic connectivity to OpenLDAP server.
     * <p>
     * Verifies that:
     * - Container is running
     * - LDAP port is accessible
     * - Admin bind succeeds
     */
    @Test
    void testBasicConnectivity() throws Exception {
        // Act - Connect and bind as admin
        final var testconnection = new LdapTestConnection(connectionProperties);
        try (final LDAPConnection connection = testconnection.createConnection()) {
            final BindRequest bindRequest = new SimpleBindRequest(OPENLDAP_CONTAINER.getAdminDn(), OPENLDAP_CONTAINER.getAdminPassword());
            final BindResult bindResult = connection.bind(bindRequest);

            // Assert
            assertThat(bindResult.getResultCode())
                    .as("Admin bind should succeed")
                    .isEqualTo(ResultCode.SUCCESS);

            assertThat(connection.isConnected())
                    .as("Connection should be active")
                    .isTrue();
        }
    }

    /**
     * Tests that LDIF file data was successfully loaded into the directory.
     * <p>
     * This test verifies:
     * - Organizational units exist (ou=people, ou=groups)
     * - Users were created from LDIF (alice, bob, charlie)
     * - Groups were created from LDIF (developers, administrators)
     * - User attributes are correct
     */
    @Test
    void testLdifDataLoaded() throws Exception {
        final var testconnection = new LdapTestConnection(connectionProperties);
        try (final LDAPConnection connection = testconnection.createConnection()) {
            // Bind as admin
            connection.bind(OPENLDAP_CONTAINER.getAdminDn(), OPENLDAP_CONTAINER.getAdminPassword());

            // Search for all users in ou=people
            final SearchRequest searchRequest = new SearchRequest(
                    "ou=people," + OPENLDAP_CONTAINER.getBaseDn(),
                    SearchScope.ONE,
                    "(objectClass=inetOrgPerson)");

            final SearchResult searchResult = connection.search(searchRequest);

            // Assert - Should find 3 users (alice, bob, charlie)
            assertThat(searchResult.getResultCode()).isEqualTo(ResultCode.SUCCESS);
            assertThat(searchResult.getEntryCount())
                    .as("Should have loaded 3 users from LDIF file")
                    .isEqualTo(3);

            // Verify alice exists with correct attributes
            final SearchResultEntry alice = searchResult.getSearchEntries().stream()
                    .filter(entry -> entry.getAttributeValue("uid").equals("alice"))
                    .findFirst()
                    .orElseThrow(() -> new AssertionError("Alice not found"));

            assertThat(alice.getAttributeValue("cn")).isEqualTo("Alice Anderson");
            assertThat(alice.getAttributeValue("sn")).isEqualTo("Anderson");
            assertThat(alice.getAttributeValue("mail")).isEqualTo("alice@example.org");
            assertThat(alice.getAttributeValue("description")).isEqualTo("Software Engineer");
        }
    }

    /**
     * Tests authentication with users loaded from LDIF file.
     * <p>
     * Demonstrates that users from the LDIF file can authenticate successfully.
     */
    @Test
    void testAuthenticationWithLdifUsers() throws Exception {
        // Test alice
        final boolean aliceAuth = ldapClient.authenticateUser("alice", "alice123".getBytes(StandardCharsets.UTF_8));
        assertThat(aliceAuth)
                .as("Alice should authenticate with correct password")
                .isTrue();

        // Test bob
        final boolean bobAuth = ldapClient.authenticateUser("bob", "bob456".getBytes(StandardCharsets.UTF_8));
        assertThat(bobAuth)
                .as("Bob should authenticate with correct password")
                .isTrue();

        // Test charlie
        final boolean charlieAuth = ldapClient.authenticateUser("charlie", "charlie789".getBytes(StandardCharsets.UTF_8));
        assertThat(charlieAuth)
                .as("Charlie should authenticate with correct password")
                .isTrue();

        // Test wrong password
        final boolean wrongAuth = ldapClient.authenticateUser("alice", "wrongpassword".getBytes(StandardCharsets.UTF_8));
        assertThat(wrongAuth)
                .as("Authentication should fail with wrong password")
                .isFalse();
    }

    /**
     * Tests searching for groups loaded from LDIF file.
     * <p>
     * Verifies that groups and their members are correctly loaded.
     */
    @Test
    void testGroupsFromLdif() throws Exception {
        final var testconnection = new LdapTestConnection(connectionProperties);
        try (final LDAPConnection connection = testconnection.createConnection()) {
            // Bind as admin
            connection.bind(OPENLDAP_CONTAINER.getAdminDn(), OPENLDAP_CONTAINER.getAdminPassword());

            // Search for the developers group
            final SearchRequest searchRequest = new SearchRequest(
                    "cn=developers,ou=groups," + OPENLDAP_CONTAINER.getBaseDn(),
                    SearchScope.BASE,
                    "(objectClass=groupOfNames)");

            final SearchResult searchResult = connection.search(searchRequest);

            // Assert
            assertThat(searchResult.getResultCode()).isEqualTo(ResultCode.SUCCESS);
            assertThat(searchResult.getEntryCount()).isEqualTo(1);

            final SearchResultEntry developersGroup = searchResult.getSearchEntries().getFirst();

            // Verify group members
            final String[] members = developersGroup.getAttributeValues("member");
            assertThat(members)
                    .as("Developers group should have 2 members")
                    .hasSize(2)
                    .contains(
                            "uid=alice,ou=people," + OPENLDAP_CONTAINER.getBaseDn(),
                            "uid=bob,ou=people," + OPENLDAP_CONTAINER.getBaseDn()
                    );

            assertThat(developersGroup.getAttributeValue("description"))
                    .isEqualTo("Software Development Team");
        }
    }

    /**
     * Tests SearchFilterDnResolver with OpenLDAP and LDIF data.
     * <p>
     * Demonstrates using search filters to find users by different attributes.
     */
    @Test
    void testSearchFilterDnResolver() throws Exception {
        final var testconnection = new LdapTestConnection(connectionProperties);
        try (final LDAPConnection connection = testconnection.createConnection()) {
            // Bind as admin to create authenticated pool
            connection.bind(OPENLDAP_CONTAINER.getAdminDn(), OPENLDAP_CONTAINER.getAdminPassword());

            try (final LDAPConnectionPool pool = new LDAPConnectionPool(connection, 1, 5)) {
                // Test 1: Search by UID
                final SearchFilterDnResolver uidResolver = new SearchFilterDnResolver(
                        pool,
                        OPENLDAP_CONTAINER.getBaseDn(),
                        "uid",
                        null,
                        SearchScope.SUB,
                        5);

                String dn = uidResolver.resolveDn("alice");
                assertThat(dn).as("Should resolve alice's DN by UID")
                        .isEqualTo("uid=alice,ou=people," + OPENLDAP_CONTAINER.getBaseDn());

                // Test 2: Search by email
                final SearchFilterDnResolver emailResolver = new SearchFilterDnResolver(pool,
                        OPENLDAP_CONTAINER.getBaseDn(),
                        "mail",
                        null,
                        SearchScope.SUB,
                        5);

                dn = emailResolver.resolveDn("bob@example.org");
                assertThat(dn).as("Should resolve bob's DN by email")
                        .isEqualTo("uid=bob,ou=people," + OPENLDAP_CONTAINER.getBaseDn());

                // Test 3: Search by common name
                final SearchFilterDnResolver cnResolver = new SearchFilterDnResolver(pool,
                        OPENLDAP_CONTAINER.getBaseDn(),
                        "cn",
                        null,
                        SearchScope.SUB,
                        5);

                dn = cnResolver.resolveDn("Charlie Chen");
                assertThat(dn).as("Should resolve charlie's DN by common name")
                        .isEqualTo("uid=charlie,ou=people," + OPENLDAP_CONTAINER.getBaseDn());

            }
        }
    }

    /**
     * Tests searching for users by attributes from LDIF data.
     * <p>
     * Demonstrates various LDAP search queries on the loaded test data.
     */
    @Test
    void testComplexSearchQueries() throws Exception {
        final var testconnection = new LdapTestConnection(connectionProperties);
        try (final LDAPConnection connection = testconnection.createConnection()) {
            // Bind as admin
            connection.bind(OPENLDAP_CONTAINER.getAdminDn(), OPENLDAP_CONTAINER.getAdminPassword());

            // Search 1: Find all users with email ending in @example.org
            final SearchRequest search1 = new SearchRequest(
                    OPENLDAP_CONTAINER.getBaseDn(),
                    SearchScope.SUB,
                    "(mail=*@example.org)");

            final SearchResult result1 = connection.search(search1);
            assertThat(result1.getEntryCount())
                    .as("All users should have @example.org email")
                    .isEqualTo(3);

            // Search 2: Find users with uidNumber >= 10002
            final SearchRequest search2 = new SearchRequest(
                    OPENLDAP_CONTAINER.getBaseDn(),
                    SearchScope.SUB,
                    "(uidNumber>=10002)");

            final SearchResult result2 = connection.search(search2);
            assertThat(result2.getEntryCount())
                    .as("Bob and Charlie have uidNumber >= 10002")
                    .isEqualTo(2);

            // Search 3: Find all groups
            final SearchRequest search3 = new SearchRequest(
                    "ou=groups," + OPENLDAP_CONTAINER.getBaseDn(),
                    SearchScope.ONE,
                    "(objectClass=groupOfNames)");

            final SearchResult result3 = connection.search(search3);
            assertThat(result3.getEntryCount())
                    .as("Should have 2 groups from LDIF")
                    .isEqualTo(2);

            // Verify group names
            final List<String> groupNames = result3.getSearchEntries().stream()
                    .map(entry -> entry.getAttributeValue("cn"))
                    .toList();

            assertThat(groupNames)
                    .containsExactlyInAnyOrder("developers", "administrators");
        }
    }

    /**
     * Demonstrates verifying organizational structure from LDIF.
     * <p>
     * Tests that the organizational units (ou=people, ou=groups) exist.
     */
    @Test
    void testOrganizationalStructure() throws Exception {
        final var testconnection = new LdapTestConnection(connectionProperties);
        try (final LDAPConnection connection = testconnection.createConnection()) {
            // Bind as admin
            connection.bind(OPENLDAP_CONTAINER.getAdminDn(), OPENLDAP_CONTAINER.getAdminPassword());

            // Verify ou=people exists
            final SearchRequest peopleSearch = new SearchRequest(
                    "ou=people," + OPENLDAP_CONTAINER.getBaseDn(),
                    SearchScope.BASE,
                    "(objectClass=organizationalUnit)");

            final SearchResult peopleResult = connection.search(peopleSearch);
            assertThat(peopleResult.getEntryCount())
                    .as("ou=people should exist")
                    .isEqualTo(1);

            assertThat(peopleResult.getSearchEntries().getFirst().getAttributeValue("description"))
                    .isEqualTo("Container for user accounts");

            // Verify ou=groups exists
            final SearchRequest groupsSearch = new SearchRequest(
                    "ou=groups," + OPENLDAP_CONTAINER.getBaseDn(),
                    SearchScope.BASE,
                    "(objectClass=organizationalUnit)");

            final SearchResult groupsResult = connection.search(groupsSearch);
            assertThat(groupsResult.getEntryCount())
                    .as("ou=groups should exist")
                    .isEqualTo(1);

            assertThat(groupsResult.getSearchEntries().getFirst().getAttributeValue("description"))
                    .isEqualTo("Container for group definitions");
        }
    }

    /**
     * Tests authentication over START_TLS (upgrade from plain to encrypted).
     * <p>
     * START_TLS is a common approach where:
     * <ul>
     *     <li>Client connects on standard LDAP port (389)</li>
     *     <li>Client sends StartTLS extended operation</li>
     *     <li>Connection is upgraded to TLS</li>
     *     <li>All subsequent traffic is encrypted</li>
     * </ul>
     * <p>
     * This is different from LDAPS which uses TLS from the start on port 636.
     * <p>
     * <strong>Note:</strong> This test uses acceptAnyCertificateForTesting to trust
     * the self-signed certificate generated by the OpenLDAP container. This is safe
     * for integration tests but should <strong>never</strong> be used in production.
     */
    @Test
    void testStartTlsAuthentication() throws Exception {
        // Arrange
        final String host = OPENLDAP_CONTAINER.getHost();
        final int port = OPENLDAP_CONTAINER.getLdapPort();

        // Note: Using acceptAnyCertificateForTesting to trust self-signed cert from OpenLDAP container
        // In production, use proper CA-signed certificates and validate them
        final LdapConnectionProperties.LdapSimpleBind ldapSimpleBind =
                new LdapConnectionProperties.LdapSimpleBind(
                        "cn=admin",
                        OPENLDAP_CONTAINER.getAdminPassword());

        final LdapConnectionProperties startTlsProps = new LdapConnectionProperties(
                new LdapConnectionProperties.LdapServers(new String[]{host}, new int[]{port}),
                TlsMode.START_TLS,
                null,  // No truststore needed
                5000,
                10000,
                1,
                "uid",
                OPENLDAP_CONTAINER.getBaseDn(),
                null,
                SearchScope.SUB,
                5,
                "ADMIN",
                true,  // TEST ONLY: Accept any certificate
                ldapSimpleBind);

        final LdapClient startTlsClient = new LdapClient(startTlsProps);

        // Act
        startTlsClient.start();

        try {
            // Authenticate alice over START_TLS
            final boolean aliceAuth = startTlsClient.authenticateUser("alice", "alice123".getBytes(StandardCharsets.UTF_8));
            assertThat(aliceAuth)
                    .as("Alice should authenticate with correct password over START_TLS")
                    .isTrue();

            // Authenticate bob over START_TLS
            final boolean bobAuth = startTlsClient.authenticateUser("bob", "bob456".getBytes(StandardCharsets.UTF_8));
            assertThat(bobAuth)
                    .as("Bob should authenticate with correct password over START_TLS")
                    .isTrue();

            // Verify wrong password fails even over START_TLS
            final boolean wrongPasswordAuth = startTlsClient.authenticateUser("alice", "wrongpassword".getBytes(StandardCharsets.UTF_8));
            assertThat(wrongPasswordAuth)
                    .as("Authentication should fail with wrong password even over START_TLS")
                    .isFalse();

        } finally {
            if (startTlsClient.isStarted()) {
                startTlsClient.stop();
            }
        }
    }

    /**
     * Tests START_TLS connection upgrade is working correctly.
     * <p>
     * This test verifies that:
     * <ul>
     *     <li>Connection starts in plain mode</li>
     *     <li>Successfully upgrades to TLS via START_TLS</li>
     *     <li>Authentication works after upgrade</li>
     *     <li>Multiple operations can be performed over the encrypted connection</li>
     * </ul>
     */
    @Test
    void testStartTlsEncryptionIsActive() throws Exception {
        // Arrange
        final String host = OPENLDAP_CONTAINER.getHost();
        final int port = OPENLDAP_CONTAINER.getLdapPort();

        final LdapConnectionProperties.LdapSimpleBind ldapSimpleBind =
                new LdapConnectionProperties.LdapSimpleBind(
                        "cn=admin",
                        OPENLDAP_CONTAINER.getAdminPassword());

        final LdapConnectionProperties startTlsProps = new LdapConnectionProperties(
                new LdapConnectionProperties.LdapServers(new String[]{host}, new int[]{port}),
                TlsMode.START_TLS,
                null,  // No truststore needed
                5000,
                10000,
                1,
                "uid",
                OPENLDAP_CONTAINER.getBaseDn(),
                null,
                SearchScope.SUB,
                5,
                "ADMIN",
                true,  // TEST ONLY: Accept any certificate
                ldapSimpleBind);


        final LdapClient startTlsClient = new LdapClient(startTlsProps);

        // Act
        startTlsClient.start();

        try {
            // Multiple authentication attempts to verify encryption stays active
            for (int i = 0; i < 3; i++) {
                final boolean authenticated = startTlsClient.authenticateUser("alice", "alice123".getBytes(StandardCharsets.UTF_8));
                assertThat(authenticated)
                        .as("Authentication attempt %d should succeed over encrypted connection", i + 1)
                        .isTrue();
            }

            // Also test with different users
            assertThat(startTlsClient.authenticateUser("bob", "bob456".getBytes(StandardCharsets.UTF_8)))
                    .as("Bob should authenticate over encrypted connection")
                    .isTrue();

            assertThat(startTlsClient.authenticateUser("charlie", "charlie789".getBytes(StandardCharsets.UTF_8)))
                    .as("Charlie should authenticate over encrypted connection")
                    .isTrue();

        } finally {
            if (startTlsClient.isStarted()) {
                startTlsClient.stop();
            }
        }
    }

    /**
     * Compares plain LDAP vs START_TLS to demonstrate the difference.
     * <p>
     * This test shows that:
     * <ul>
     *     <li>Both plain and START_TLS connections can authenticate</li>
     *     <li>START_TLS provides encryption after upgrade</li>
     *     <li>Both use the same port (389)</li>
     * </ul>
     * <p>
     * The key difference is that START_TLS encrypts all traffic after the upgrade,
     * while plain LDAP sends credentials and data in cleartext.
     */
    @Test
    void testComparisonPlainVsStartTls() throws Exception {
        // Arrange
        final String host = OPENLDAP_CONTAINER.getHost();
        final int port = OPENLDAP_CONTAINER.getLdapPort();

        final LdapConnectionProperties.LdapSimpleBind ldapSimpleBind =
                new LdapConnectionProperties.LdapSimpleBind(
                        "cn=admin",
                        OPENLDAP_CONTAINER.getAdminPassword());

        // Plain LDAP client
        final LdapConnectionProperties plainProps = new LdapConnectionProperties(
                new LdapConnectionProperties.LdapServers(new String[]{host}, new int[]{port}),
                TlsMode.NONE,
                null,  // No truststore needed
                5000,
                10000,
                1,
                "uid",
                OPENLDAP_CONTAINER.getBaseDn(),
                null,
                SearchScope.SUB,
                5,
                "ADMIN",
                true,  // TEST ONLY: Accept any certificate
                ldapSimpleBind);

        final LdapClient plainClient = new LdapClient(plainProps);

        // START_TLS client
        final LdapConnectionProperties startTlsProps = new LdapConnectionProperties(
                new LdapConnectionProperties.LdapServers(new String[]{host}, new int[]{port}),
                TlsMode.START_TLS,
                null,  // No truststore needed
                5000,
                10000,
                1,
                "uid",
                OPENLDAP_CONTAINER.getBaseDn(),
                null,
                SearchScope.SUB,
                5,
                "ADMIN",
                true,  // TEST ONLY: Accept any certificate
                ldapSimpleBind);

        final LdapClient startTlsClient = new LdapClient(startTlsProps);

        // Act & Assert
        try {
            // Both should start successfully (same port!)
            plainClient.start();
            startTlsClient.start();

            // Both should authenticate successfully
            final boolean plainAuth = plainClient.authenticateUser("alice", "alice123".getBytes(StandardCharsets.UTF_8));
            final boolean startTlsAuth = startTlsClient.authenticateUser("alice", "alice123".getBytes(StandardCharsets.UTF_8));

            assertThat(plainAuth)
                    .as("Plain LDAP authentication should succeed")
                    .isTrue();

            assertThat(startTlsAuth)
                    .as("START_TLS authentication should succeed")
                    .isTrue();

            // Key difference: START_TLS encrypts credentials and data,
            // while plain LDAP sends everything in cleartext.
            // We can't easily verify encryption in the test, but the fact that
            // START_TLS works proves the upgrade mechanism is functioning.

        } finally {
            if (plainClient.isStarted()) {
                plainClient.stop();
            }
            if (startTlsClient.isStarted()) {
                startTlsClient.stop();
            }
        }
    }

    /**
     * Tests START_TLS with SearchFilterDnResolver to ensure encrypted search operations work.
     * <p>
     * This demonstrates that complex LDAP operations (not just authentication)
     * work correctly over START_TLS encrypted connections.
     * <p>
     * Note: This test creates a manually authenticated connection pool because
     * SearchFilterDnResolver requires admin privileges to search the directory.
     */
    @Test
    void testStartTlsWithSearchFilterDnResolver() throws Exception {
        // Create a START_TLS connection and bind as admin to enable searches
        final var testconnection = new LdapTestConnection(connectionProperties);
        try (final LDAPConnection connection = testconnection.createConnection()) {
            // Bind as admin to create authenticated pool
            connection.bind(OPENLDAP_CONTAINER.getAdminDn(), OPENLDAP_CONTAINER.getAdminPassword());

            try (final LDAPConnectionPool pool = new LDAPConnectionPool(connection, 1, 5)) {
                // Test search operations over encrypted connection
                final SearchFilterDnResolver resolver = new SearchFilterDnResolver(pool,
                        OPENLDAP_CONTAINER.getBaseDn(),
                        "uid",
                        null,
                        SearchScope.SUB,
                        5);

                // Act - Perform searches over START_TLS
                final String aliceDn = resolver.resolveDn("alice");
                final String bobDn = resolver.resolveDn("bob");
                final String charlieDn = resolver.resolveDn("charlie");

                // Assert - All searches should work over encrypted connection
                assertThat(aliceDn).as("Should resolve alice's DN over START_TLS")
                        .isEqualTo("uid=alice,ou=people," + OPENLDAP_CONTAINER.getBaseDn());

                assertThat(bobDn).as("Should resolve bob's DN over START_TLS")
                        .isEqualTo("uid=bob,ou=people," + OPENLDAP_CONTAINER.getBaseDn());

                assertThat(charlieDn).as("Should resolve charlie's DN over START_TLS")
                        .isEqualTo("uid=charlie,ou=people," + OPENLDAP_CONTAINER.getBaseDn());

            }
        }
    }
}
