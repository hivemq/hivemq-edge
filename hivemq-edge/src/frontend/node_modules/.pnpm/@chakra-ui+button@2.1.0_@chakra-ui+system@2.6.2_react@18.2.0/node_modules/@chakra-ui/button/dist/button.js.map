{"version":3,"sources":["../src/button.tsx","../src/button-context.ts","../src/button-icon.tsx","../src/button-spinner.tsx","../src/use-button-type.tsx"],"sourcesContent":["import { useMergeRefs } from \"@chakra-ui/react-use-merge-refs\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  SystemStyleObject,\n  ThemingProps,\n  useStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx, dataAttr } from \"@chakra-ui/shared-utils\"\n\nimport { useMemo } from \"react\"\nimport { useButtonGroup } from \"./button-context\"\nimport { ButtonIcon } from \"./button-icon\"\nimport { ButtonSpinner } from \"./button-spinner\"\nimport { ButtonOptions } from \"./button-types\"\nimport { useButtonType } from \"./use-button-type\"\n\nexport interface ButtonProps\n  extends HTMLChakraProps<\"button\">,\n    ButtonOptions,\n    ThemingProps<\"Button\"> {}\n\n/**\n * Button component is used to trigger an action or event, such as submitting a form, opening a Dialog, canceling an action, or performing a delete operation.\n *\n * @see Docs https://chakra-ui.com/docs/components/button\n * @see WAI-ARIA https://www.w3.org/WAI/ARIA/apg/patterns/button/\n */\nexport const Button = forwardRef<ButtonProps, \"button\">((props, ref) => {\n  const group = useButtonGroup()\n  const styles = useStyleConfig(\"Button\", { ...group, ...props })\n\n  const {\n    isDisabled = group?.isDisabled,\n    isLoading,\n    isActive,\n    children,\n    leftIcon,\n    rightIcon,\n    loadingText,\n    iconSpacing = \"0.5rem\",\n    type,\n    spinner,\n    spinnerPlacement = \"start\",\n    className,\n    as,\n    ...rest\n  } = omitThemingProps(props)\n\n  /**\n   * When button is used within ButtonGroup (i.e. flushed with sibling buttons),\n   * it is important to add a `zIndex` on focus.\n   *\n   * So let's read the component styles and then add `zIndex` to it.\n   */\n  const buttonStyles: SystemStyleObject = useMemo(() => {\n    // @ts-ignore\n    const _focus = { ...styles?.[\"_focus\"], zIndex: 1 }\n    return {\n      display: \"inline-flex\",\n      appearance: \"none\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      userSelect: \"none\",\n      position: \"relative\",\n      whiteSpace: \"nowrap\",\n      verticalAlign: \"middle\",\n      outline: \"none\",\n      ...styles,\n      ...(!!group && { _focus }),\n    }\n  }, [styles, group])\n\n  const { ref: _ref, type: defaultType } = useButtonType(as)\n\n  const contentProps = { rightIcon, leftIcon, iconSpacing, children }\n\n  return (\n    <chakra.button\n      ref={useMergeRefs(ref, _ref)}\n      as={as}\n      type={type ?? defaultType}\n      data-active={dataAttr(isActive)}\n      data-loading={dataAttr(isLoading)}\n      __css={buttonStyles}\n      className={cx(\"chakra-button\", className)}\n      {...rest}\n      disabled={isDisabled || isLoading}\n    >\n      {isLoading && spinnerPlacement === \"start\" && (\n        <ButtonSpinner\n          className=\"chakra-button__spinner--start\"\n          label={loadingText}\n          placement=\"start\"\n          spacing={iconSpacing}\n        >\n          {spinner}\n        </ButtonSpinner>\n      )}\n\n      {isLoading ? (\n        loadingText || (\n          <chakra.span opacity={0}>\n            <ButtonContent {...contentProps} />\n          </chakra.span>\n        )\n      ) : (\n        <ButtonContent {...contentProps} />\n      )}\n\n      {isLoading && spinnerPlacement === \"end\" && (\n        <ButtonSpinner\n          className=\"chakra-button__spinner--end\"\n          label={loadingText}\n          placement=\"end\"\n          spacing={iconSpacing}\n        >\n          {spinner}\n        </ButtonSpinner>\n      )}\n    </chakra.button>\n  )\n})\n\nButton.displayName = \"Button\"\n\ntype ButtonContentProps = Pick<\n  ButtonProps,\n  \"leftIcon\" | \"rightIcon\" | \"children\" | \"iconSpacing\"\n>\n\nfunction ButtonContent(props: ButtonContentProps) {\n  const { leftIcon, rightIcon, children, iconSpacing } = props\n  return (\n    <>\n      {leftIcon && <ButtonIcon marginEnd={iconSpacing}>{leftIcon}</ButtonIcon>}\n      {children}\n      {rightIcon && (\n        <ButtonIcon marginStart={iconSpacing}>{rightIcon}</ButtonIcon>\n      )}\n    </>\n  )\n}\n","import { createContext } from \"@chakra-ui/react-context\"\nimport { ThemingProps } from \"@chakra-ui/system\"\n\nexport interface ButtonGroupContext extends ThemingProps<\"Button\"> {\n  /**\n   * @default false\n   */\n  isDisabled?: boolean\n}\n\nexport const [ButtonGroupProvider, useButtonGroup] =\n  createContext<ButtonGroupContext>({\n    strict: false,\n    name: \"ButtonGroupContext\",\n  })\n","import { chakra, HTMLChakraProps } from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { cloneElement, isValidElement } from \"react\"\n\nexport function ButtonIcon(props: HTMLChakraProps<\"span\">) {\n  const { children, className, ...rest } = props\n\n  const _children = isValidElement(children)\n    ? cloneElement<any>(children, {\n        \"aria-hidden\": true,\n        focusable: false,\n      })\n    : children\n\n  const _className = cx(\"chakra-button__icon\", className)\n\n  return (\n    <chakra.span\n      display=\"inline-flex\"\n      alignSelf=\"center\"\n      flexShrink={0}\n      {...rest}\n      className={_className}\n    >\n      {_children}\n    </chakra.span>\n  )\n}\n\nButtonIcon.displayName = \"ButtonIcon\"\n","import { Spinner } from \"@chakra-ui/spinner\"\nimport { chakra, HTMLChakraProps, SystemStyleObject } from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { useMemo } from \"react\"\nimport { ButtonSpinnerOptions } from \"./button-types\"\n\ninterface ButtonSpinnerProps\n  extends HTMLChakraProps<\"div\">,\n    ButtonSpinnerOptions {}\n\nexport function ButtonSpinner(props: ButtonSpinnerProps) {\n  const {\n    label,\n    placement,\n    spacing = \"0.5rem\",\n    children = <Spinner color=\"currentColor\" width=\"1em\" height=\"1em\" />,\n    className,\n    __css,\n    ...rest\n  } = props\n\n  const _className = cx(\"chakra-button__spinner\", className)\n\n  const marginProp = placement === \"start\" ? \"marginEnd\" : \"marginStart\"\n\n  const spinnerStyles: SystemStyleObject = useMemo(\n    () => ({\n      display: \"flex\",\n      alignItems: \"center\",\n      position: label ? \"relative\" : \"absolute\",\n      [marginProp]: label ? spacing : 0,\n      fontSize: \"1em\",\n      lineHeight: \"normal\",\n      ...__css,\n    }),\n    [__css, label, marginProp, spacing],\n  )\n\n  return (\n    <chakra.div className={_className} {...rest} __css={spinnerStyles}>\n      {children}\n    </chakra.div>\n  )\n}\nButtonSpinner.displayName = \"ButtonSpinner\"\n","import { useCallback, useState } from \"react\"\n\nexport function useButtonType(value?: React.ElementType) {\n  const [isButton, setIsButton] = useState(!value)\n  const refCallback = useCallback((node: HTMLElement | null) => {\n    if (!node) return\n    setIsButton(node.tagName === \"BUTTON\")\n  }, [])\n  const type = isButton ? \"button\" : undefined\n  return { ref: refCallback, type } as const\n}\n"],"mappings":"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","names":["import_system","import_shared_utils","import_react","import_system","import_shared_utils","import_react","import_jsx_runtime","import_react","import_jsx_runtime"]}