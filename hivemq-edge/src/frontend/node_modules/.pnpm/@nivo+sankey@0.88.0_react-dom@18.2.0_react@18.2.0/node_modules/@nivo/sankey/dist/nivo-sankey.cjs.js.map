{"version":3,"file":"nivo-sankey.cjs.js","sources":["../src/SankeyNodeTooltip.tsx","../src/SankeyLinkTooltip.tsx","../src/props.ts","../src/hooks.ts","../src/SankeyNodesItem.tsx","../src/SankeyNodes.tsx","../src/SankeyLinkGradient.tsx","../src/SankeyLinksItem.tsx","../src/SankeyLinks.tsx","../src/links.ts","../src/SankeyLabels.tsx","../src/Sankey.tsx","../src/ResponsiveSankey.tsx"],"sourcesContent":["import { BasicTooltip } from '@nivo/tooltip'\nimport { DefaultLink, DefaultNode, SankeyNodeDatum } from './types'\n\nexport interface SankeyNodeTooltipProps<N extends DefaultNode, L extends DefaultLink> {\n    node: SankeyNodeDatum<N, L>\n}\n\nexport const SankeyNodeTooltip = <N extends DefaultNode, L extends DefaultLink>({\n    node,\n}: SankeyNodeTooltipProps<N, L>) => (\n    <BasicTooltip id={node.label} enableChip={true} color={node.color} />\n)\n","import { BasicTooltip, Chip } from '@nivo/tooltip'\nimport { DefaultLink, DefaultNode, SankeyLinkDatum } from './types'\n\nconst tooltipStyles = {\n    container: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    sourceChip: {\n        marginRight: 7,\n    },\n    targetChip: {\n        marginLeft: 7,\n        marginRight: 7,\n    },\n}\n\nexport interface SankeyLinkTooltipProps<N extends DefaultNode, L extends DefaultLink> {\n    link: SankeyLinkDatum<N, L>\n}\n\nexport const SankeyLinkTooltip = <N extends DefaultNode, L extends DefaultLink>({\n    link,\n}: SankeyLinkTooltipProps<N, L>) => (\n    <BasicTooltip\n        id={\n            <span style={tooltipStyles.container}>\n                <Chip color={link.source.color} style={tooltipStyles.sourceChip} />\n                <strong>{link.source.label}</strong>\n                {' > '}\n                <strong>{link.target.label}</strong>\n                <Chip color={link.target.color} style={tooltipStyles.targetChip} />\n                <strong>{link.formattedValue}</strong>\n            </span>\n        }\n    />\n)\n","import { sankeyCenter, sankeyJustify, sankeyLeft, sankeyRight } from 'd3-sankey'\nimport { SankeyLayerId, SankeyNodeDatum, SankeyAlignType } from './types'\nimport { InheritedColorConfig } from '@nivo/colors'\nimport { SankeyNodeTooltip } from './SankeyNodeTooltip'\nimport { SankeyLinkTooltip } from './SankeyLinkTooltip'\n\nexport const sankeyAlignmentPropMapping = {\n    center: sankeyCenter,\n    justify: sankeyJustify,\n    start: sankeyLeft,\n    end: sankeyRight,\n}\n\nexport const sankeyAlignmentPropKeys = Object.keys(sankeyAlignmentPropMapping) as SankeyAlignType[]\n\nexport const sankeyAlignmentFromProp = (prop: SankeyAlignType) => sankeyAlignmentPropMapping[prop]\n\nexport const svgDefaultProps = {\n    layout: 'horizontal' as const,\n    align: 'center' as const,\n    sort: 'auto' as const,\n\n    colors: { scheme: 'nivo' as const },\n\n    nodeOpacity: 0.75,\n    nodeHoverOpacity: 1,\n    nodeHoverOthersOpacity: 0.15,\n    nodeThickness: 12,\n    nodeSpacing: 12,\n    nodeInnerPadding: 0,\n    nodeBorderWidth: 1,\n    nodeBorderColor: { from: 'color', modifiers: [['darker', 0.5]] } as InheritedColorConfig<\n        SankeyNodeDatum<any, any>\n    >,\n    nodeBorderRadius: 0,\n\n    linkOpacity: 0.25,\n    linkHoverOpacity: 0.6,\n    linkHoverOthersOpacity: 0.15,\n    linkContract: 0,\n    linkBlendMode: 'multiply' as const,\n    enableLinkGradient: false,\n\n    enableLabels: true,\n    label: 'id',\n    labelPosition: 'inside' as const,\n    labelPadding: 9,\n    labelOrientation: 'horizontal' as const,\n    labelTextColor: { from: 'color', modifiers: [['darker', 0.8]] } as InheritedColorConfig<\n        SankeyNodeDatum<any, any>\n    >,\n\n    isInteractive: true,\n    nodeTooltip: SankeyNodeTooltip,\n    linkTooltip: SankeyLinkTooltip,\n\n    legends: [],\n\n    layers: ['links', 'nodes', 'labels', 'legends'] as SankeyLayerId[],\n\n    role: 'img',\n\n    animate: true,\n    motionConfig: 'gentle',\n}\n","import { useState, useMemo } from 'react'\nimport cloneDeep from 'lodash/cloneDeep'\nimport { sankey as d3Sankey } from 'd3-sankey'\nimport { useTheme, usePropertyAccessor, useValueFormatter } from '@nivo/core'\nimport { useOrdinalColorScale, useInheritedColor } from '@nivo/colors'\nimport { sankeyAlignmentFromProp } from './props'\nimport {\n    DefaultLink,\n    DefaultNode,\n    SankeyAlignFunction,\n    SankeyCommonProps,\n    SankeyDataProps,\n    SankeyLinkDatum,\n    SankeyNodeDatum,\n    SankeySortFunction,\n} from './types'\n\nconst getId = <N extends DefaultNode>(node: N) => node.id\n\nexport const computeNodeAndLinks = <N extends DefaultNode, L extends DefaultLink>({\n    data: _data,\n    formatValue,\n    layout,\n    alignFunction,\n    sortFunction,\n    linkSortMode,\n    nodeThickness,\n    nodeSpacing,\n    nodeInnerPadding,\n    width,\n    height,\n    getColor,\n    getLabel,\n}: {\n    data: SankeyDataProps<N, L>['data']\n    formatValue: (value: number) => string\n    layout: SankeyCommonProps<N, L>['layout']\n    alignFunction: SankeyAlignFunction\n    sortFunction: null | undefined | SankeySortFunction<N, L>\n    linkSortMode: null | undefined\n    nodeThickness: SankeyCommonProps<N, L>['nodeThickness']\n    nodeSpacing: SankeyCommonProps<N, L>['nodeSpacing']\n    nodeInnerPadding: SankeyCommonProps<N, L>['nodeInnerPadding']\n    width: number\n    height: number\n    getColor: (node: Omit<SankeyNodeDatum<N, L>, 'color' | 'label'>) => string\n    getLabel: (node: Omit<SankeyNodeDatum<N, L>, 'color' | 'label'>) => string\n}) => {\n    const sankey = d3Sankey()\n        .nodeAlign(alignFunction)\n        // @ts-ignore: this method signature is incorrect in current @types/d3-sankey\n        .nodeSort(sortFunction)\n        // @ts-ignore: this method is not available in current @types/d3-sankey\n        .linkSort(linkSortMode)\n        .nodeWidth(nodeThickness)\n        .nodePadding(nodeSpacing)\n        .size(layout === 'horizontal' ? [width, height] : [height, width])\n        .nodeId(getId)\n\n    // deep clone is required as the sankey diagram mutates data\n    // we need a different identity for correct updates\n    const data = cloneDeep(_data) as unknown as {\n        nodes: SankeyNodeDatum<N, L>[]\n        links: SankeyLinkDatum<N, L>[]\n    }\n    sankey(data)\n\n    data.nodes.forEach(node => {\n        node.color = getColor(node)\n        node.label = getLabel(node)\n        node.formattedValue = formatValue(node.value)\n\n        if (layout === 'horizontal') {\n            node.x = node.x0 + nodeInnerPadding\n            node.y = node.y0\n            node.width = Math.max(node.x1 - node.x0 - nodeInnerPadding * 2, 0)\n            node.height = Math.max(node.y1 - node.y0, 0)\n        } else {\n            node.x = node.y0\n            node.y = node.x0 + nodeInnerPadding\n            node.width = Math.max(node.y1 - node.y0, 0)\n            node.height = Math.max(node.x1 - node.x0 - nodeInnerPadding * 2, 0)\n\n            const oldX0 = node.x0\n            const oldX1 = node.x1\n\n            node.x0 = node.y0\n            node.x1 = node.y1\n            node.y0 = oldX0\n            node.y1 = oldX1\n        }\n    })\n\n    data.links.forEach(link => {\n        link.formattedValue = formatValue(link.value)\n        link.color = link.source.color\n        // @ts-ignore\n        link.pos0 = link.y0\n        // @ts-ignore\n        link.pos1 = link.y1\n        // @ts-ignore\n        link.thickness = link.width\n        // @ts-ignore\n        delete link.y0\n        // @ts-ignore\n        delete link.y1\n        // @ts-ignore\n        delete link.width\n    })\n\n    return data\n}\n\nexport const useSankey = <N extends DefaultNode, L extends DefaultLink>({\n    data,\n    valueFormat,\n    layout,\n    width,\n    height,\n    sort,\n    align,\n    colors,\n    nodeThickness,\n    nodeSpacing,\n    nodeInnerPadding,\n    nodeBorderColor,\n    label,\n    labelTextColor,\n}: {\n    data: SankeyDataProps<N, L>['data']\n    valueFormat?: SankeyCommonProps<N, L>['valueFormat']\n    layout: SankeyCommonProps<N, L>['layout']\n    width: number\n    height: number\n    sort: SankeyCommonProps<N, L>['sort']\n    align: SankeyCommonProps<N, L>['align']\n    colors: SankeyCommonProps<N, L>['colors']\n    nodeThickness: SankeyCommonProps<N, L>['nodeThickness']\n    nodeSpacing: SankeyCommonProps<N, L>['nodeSpacing']\n    nodeInnerPadding: SankeyCommonProps<N, L>['nodeInnerPadding']\n    nodeBorderColor: SankeyCommonProps<N, L>['nodeBorderColor']\n    label: SankeyCommonProps<N, L>['label']\n    labelTextColor: SankeyCommonProps<N, L>['labelTextColor']\n}) => {\n    const [currentNode, setCurrentNode] = useState<SankeyNodeDatum<N, L> | null>(null)\n    const [currentLink, setCurrentLink] = useState<SankeyLinkDatum<N, L> | null>(null)\n\n    const sortFunction = useMemo(() => {\n        if (sort === 'auto') return undefined\n        if (sort === 'input') return null\n        if (sort === 'ascending') {\n            return (a: SankeyNodeDatum<N, L>, b: SankeyNodeDatum<N, L>) => a.value - b.value\n        }\n        if (sort === 'descending') {\n            return (a: SankeyNodeDatum<N, L>, b: SankeyNodeDatum<N, L>) => b.value - a.value\n        }\n\n        return sort\n    }, [sort])\n\n    // If \"input\" sorting is used, apply this setting to links, too.\n    // (In d3, `null` means input sorting and `undefined` is the default)\n    const linkSortMode = sort === 'input' ? null : undefined\n\n    const alignFunction = useMemo(() => {\n        if (typeof align === 'function') return align\n        return sankeyAlignmentFromProp(align)\n    }, [align])\n\n    const theme = useTheme()\n\n    const getColor = useOrdinalColorScale(colors, 'id')\n    const getNodeBorderColor = useInheritedColor(nodeBorderColor, theme)\n\n    const getLabel = usePropertyAccessor<Omit<SankeyNodeDatum<N, L>, 'color' | 'label'>, string>(\n        label\n    )\n    const getLabelTextColor = useInheritedColor(labelTextColor, theme)\n    const formatValue = useValueFormatter<number>(valueFormat)\n\n    const { nodes, links } = useMemo(\n        () =>\n            computeNodeAndLinks<N, L>({\n                data,\n                formatValue,\n                layout,\n                alignFunction,\n                sortFunction,\n                linkSortMode,\n                nodeThickness,\n                nodeSpacing,\n                nodeInnerPadding,\n                width,\n                height,\n                getColor,\n                getLabel,\n            }),\n        [\n            data,\n            formatValue,\n            layout,\n            alignFunction,\n            sortFunction,\n            linkSortMode,\n            nodeThickness,\n            nodeSpacing,\n            nodeInnerPadding,\n            width,\n            height,\n            getColor,\n            getLabel,\n        ]\n    )\n\n    const legendData = useMemo(\n        () =>\n            nodes.map(node => ({\n                id: node.id,\n                label: node.label,\n                color: node.color,\n            })),\n        [nodes]\n    )\n\n    return {\n        nodes,\n        links,\n        legendData,\n        getNodeBorderColor,\n        currentNode,\n        setCurrentNode,\n        currentLink,\n        setCurrentLink,\n        getLabelTextColor,\n    }\n}\n","import { createElement, useCallback, MouseEvent } from 'react'\nimport { useSpring, animated } from '@react-spring/web'\nimport { useMotionConfig } from '@nivo/core'\nimport { useTooltip } from '@nivo/tooltip'\nimport { DefaultLink, DefaultNode, SankeyCommonProps, SankeyNodeDatum } from './types'\n\ninterface SankeyNodesItemProps<N extends DefaultNode, L extends DefaultLink> {\n    node: SankeyNodeDatum<N, L>\n    x: number\n    y: number\n    width: number\n    height: number\n    color: string\n    opacity: number\n    borderWidth: SankeyCommonProps<N, L>['nodeBorderWidth']\n    borderColor: string\n    borderRadius: SankeyCommonProps<N, L>['nodeBorderRadius']\n    setCurrent: (node: SankeyNodeDatum<N, L> | null) => void\n    isInteractive: SankeyCommonProps<N, L>['isInteractive']\n    onClick?: SankeyCommonProps<N, L>['onClick']\n    tooltip: SankeyCommonProps<N, L>['nodeTooltip']\n}\n\nexport const SankeyNodesItem = <N extends DefaultNode, L extends DefaultLink>({\n    node,\n    x,\n    y,\n    width,\n    height,\n    color,\n    opacity,\n    borderWidth,\n    borderColor,\n    borderRadius,\n    setCurrent,\n    isInteractive,\n    onClick,\n    tooltip,\n}: SankeyNodesItemProps<N, L>) => {\n    const { animate, config: springConfig } = useMotionConfig()\n    const animatedProps = useSpring({\n        x,\n        y,\n        width,\n        height,\n        opacity,\n        color,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseEnter = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            setCurrent(node)\n            showTooltipFromEvent(createElement(tooltip, { node }), event, 'left')\n        },\n        [setCurrent, node, showTooltipFromEvent, tooltip]\n    )\n\n    const handleMouseMove = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            showTooltipFromEvent(createElement(tooltip, { node }), event, 'left')\n        },\n        [showTooltipFromEvent, node, tooltip]\n    )\n\n    const handleMouseLeave = useCallback(() => {\n        setCurrent(null)\n        hideTooltip()\n    }, [setCurrent, hideTooltip])\n\n    const handleClick = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onClick?.(node, event)\n        },\n        [onClick, node]\n    )\n\n    return (\n        <animated.rect\n            x={animatedProps.x}\n            y={animatedProps.y}\n            rx={borderRadius}\n            ry={borderRadius}\n            width={animatedProps.width.to(v => Math.max(v, 0))}\n            height={animatedProps.height.to(v => Math.max(v, 0))}\n            fill={animatedProps.color}\n            fillOpacity={animatedProps.opacity}\n            strokeWidth={borderWidth}\n            stroke={borderColor}\n            strokeOpacity={opacity}\n            onMouseEnter={isInteractive ? handleMouseEnter : undefined}\n            onMouseMove={isInteractive ? handleMouseMove : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onClick={isInteractive ? handleClick : undefined}\n        />\n    )\n}\n","import {\n    DefaultLink,\n    DefaultNode,\n    SankeyCommonProps,\n    SankeyLinkDatum,\n    SankeyNodeDatum,\n} from './types'\nimport { SankeyNodesItem } from './SankeyNodesItem'\n\ninterface SankeyNodesProps<N extends DefaultNode, L extends DefaultLink> {\n    nodes: SankeyNodeDatum<N, L>[]\n    nodeOpacity: SankeyCommonProps<N, L>['nodeOpacity']\n    nodeHoverOpacity: SankeyCommonProps<N, L>['nodeHoverOpacity']\n    nodeHoverOthersOpacity: SankeyCommonProps<N, L>['nodeHoverOthersOpacity']\n    borderWidth: SankeyCommonProps<N, L>['nodeBorderWidth']\n    getBorderColor: (node: SankeyNodeDatum<N, L>) => string\n    borderRadius: SankeyCommonProps<N, L>['nodeBorderRadius']\n    setCurrentNode: (node: SankeyNodeDatum<N, L> | null) => void\n    currentNode: SankeyNodeDatum<N, L> | null\n    currentLink: SankeyLinkDatum<N, L> | null\n    isCurrentNode: (node: SankeyNodeDatum<N, L>) => boolean\n    isInteractive: SankeyCommonProps<N, L>['isInteractive']\n    onClick?: SankeyCommonProps<N, L>['onClick']\n    tooltip: SankeyCommonProps<N, L>['nodeTooltip']\n}\n\nexport const SankeyNodes = <N extends DefaultNode, L extends DefaultLink>({\n    nodes,\n    nodeOpacity,\n    nodeHoverOpacity,\n    nodeHoverOthersOpacity,\n    borderWidth,\n    getBorderColor,\n    borderRadius,\n    setCurrentNode,\n    currentNode,\n    currentLink,\n    isCurrentNode,\n    isInteractive,\n    onClick,\n    tooltip,\n}: SankeyNodesProps<N, L>) => {\n    const getOpacity = (node: SankeyNodeDatum<N, L>) => {\n        if (!currentNode && !currentLink) return nodeOpacity\n        if (isCurrentNode(node)) return nodeHoverOpacity\n        return nodeHoverOthersOpacity\n    }\n\n    return (\n        <>\n            {nodes.map(node => (\n                <SankeyNodesItem<N, L>\n                    key={node.id}\n                    node={node}\n                    x={node.x}\n                    y={node.y}\n                    width={node.width}\n                    height={node.height}\n                    color={node.color}\n                    opacity={getOpacity(node)}\n                    borderWidth={borderWidth}\n                    borderColor={getBorderColor(node)}\n                    borderRadius={borderRadius}\n                    setCurrent={setCurrentNode}\n                    isInteractive={isInteractive}\n                    onClick={onClick}\n                    tooltip={tooltip}\n                />\n            ))}\n        </>\n    )\n}\n","import { SankeyCommonProps } from './types'\n\ninterface SankeyLinkGradientProps {\n    id: string\n    layout: SankeyCommonProps<any, any>['layout']\n    startColor: string\n    endColor: string\n}\n\nexport const SankeyLinkGradient = ({\n    id,\n    layout,\n    startColor,\n    endColor,\n}: SankeyLinkGradientProps) => {\n    let gradientProps: {\n        x1: string\n        x2: string\n        y1: string\n        y2: string\n    }\n    if (layout === 'horizontal') {\n        gradientProps = {\n            x1: '0%',\n            x2: '100%',\n            y1: '0%',\n            y2: '0%',\n        }\n    } else {\n        gradientProps = {\n            x1: '0%',\n            x2: '0%',\n            y1: '0%',\n            y2: '100%',\n        }\n    }\n\n    return (\n        <linearGradient id={id} spreadMethod=\"pad\" {...gradientProps}>\n            <stop offset=\"0%\" stopColor={startColor} />\n            <stop offset=\"100%\" stopColor={endColor} />\n        </linearGradient>\n    )\n}\n","import { createElement, useCallback, MouseEvent } from 'react'\nimport { useSpring, animated } from '@react-spring/web'\nimport { useAnimatedPath, useMotionConfig } from '@nivo/core'\nimport { useTooltip } from '@nivo/tooltip'\nimport { SankeyLinkGradient } from './SankeyLinkGradient'\nimport { DefaultLink, DefaultNode, SankeyCommonProps, SankeyLinkDatum } from './types'\n\ninterface SankeyLinksItemProps<N extends DefaultNode, L extends DefaultLink> {\n    link: SankeyLinkDatum<N, L>\n    layout: SankeyCommonProps<N, L>['layout']\n    path: string\n    color: string\n    opacity: number\n    blendMode: SankeyCommonProps<N, L>['linkBlendMode']\n    enableGradient: SankeyCommonProps<N, L>['enableLinkGradient']\n    setCurrent: (link: SankeyLinkDatum<N, L> | null) => void\n    isInteractive: SankeyCommonProps<N, L>['isInteractive']\n    onClick?: SankeyCommonProps<N, L>['onClick']\n    tooltip: SankeyCommonProps<N, L>['linkTooltip']\n}\n\nexport const SankeyLinksItem = <N extends DefaultNode, L extends DefaultLink>({\n    link,\n    layout,\n    path,\n    color,\n    opacity,\n    blendMode,\n    enableGradient,\n    setCurrent,\n    tooltip,\n    isInteractive,\n    onClick,\n}: SankeyLinksItemProps<N, L>) => {\n    const linkId = `${link.source.id}.${link.target.id}.${link.index}`\n\n    const { animate, config: springConfig } = useMotionConfig()\n    const animatedPath = useAnimatedPath(path)\n    const animatedProps = useSpring({\n        color,\n        opacity,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseEnter = useCallback(\n        (event: MouseEvent<SVGPathElement>) => {\n            setCurrent(link)\n            showTooltipFromEvent(createElement(tooltip, { link }), event, 'left')\n        },\n        [setCurrent, link, showTooltipFromEvent, tooltip]\n    )\n\n    const handleMouseMove = useCallback(\n        (event: MouseEvent<SVGPathElement>) => {\n            showTooltipFromEvent(createElement(tooltip, { link }), event, 'left')\n        },\n        [showTooltipFromEvent, link, tooltip]\n    )\n\n    const handleMouseLeave = useCallback(() => {\n        setCurrent(null)\n        hideTooltip()\n    }, [setCurrent, hideTooltip])\n\n    const handleClick = useCallback(\n        (event: MouseEvent<SVGPathElement>) => {\n            onClick?.(link, event)\n        },\n        [onClick, link]\n    )\n\n    return (\n        <>\n            {enableGradient && (\n                <SankeyLinkGradient\n                    id={linkId}\n                    layout={layout}\n                    startColor={link.startColor || link.source.color}\n                    endColor={link.endColor || link.target.color}\n                />\n            )}\n            <animated.path\n                fill={enableGradient ? `url(\"#${encodeURI(linkId)}\")` : animatedProps.color}\n                d={animatedPath}\n                fillOpacity={animatedProps.opacity}\n                onMouseEnter={isInteractive ? handleMouseEnter : undefined}\n                onMouseMove={isInteractive ? handleMouseMove : undefined}\n                onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n                onClick={isInteractive ? handleClick : undefined}\n                style={{ mixBlendMode: blendMode }}\n            />\n        </>\n    )\n}\n","import { sankeyLinkHorizontal, sankeyLinkVertical } from './links'\nimport {\n    DefaultLink,\n    DefaultNode,\n    SankeyCommonProps,\n    SankeyLinkDatum,\n    SankeyNodeDatum,\n} from './types'\nimport { SankeyLinksItem } from './SankeyLinksItem'\nimport { useMemo } from 'react'\n\ninterface SankeyLinksProps<N extends DefaultNode, L extends DefaultLink> {\n    layout: SankeyCommonProps<N, L>['layout']\n    links: SankeyLinkDatum<N, L>[]\n    linkOpacity: SankeyCommonProps<N, L>['linkOpacity']\n    linkHoverOpacity: SankeyCommonProps<N, L>['linkHoverOpacity']\n    linkHoverOthersOpacity: SankeyCommonProps<N, L>['linkHoverOthersOpacity']\n    linkContract: SankeyCommonProps<N, L>['linkContract']\n    linkBlendMode: SankeyCommonProps<N, L>['linkBlendMode']\n    enableLinkGradient: SankeyCommonProps<N, L>['enableLinkGradient']\n    tooltip: SankeyCommonProps<N, L>['linkTooltip']\n    setCurrentLink: (link: SankeyLinkDatum<N, L> | null) => void\n    currentLink: SankeyLinkDatum<N, L> | null\n    currentNode: SankeyNodeDatum<N, L> | null\n    isCurrentLink: (link: SankeyLinkDatum<N, L>) => boolean\n    isInteractive: SankeyCommonProps<N, L>['isInteractive']\n    onClick?: SankeyCommonProps<N, L>['onClick']\n}\n\nexport const SankeyLinks = <N extends DefaultNode, L extends DefaultLink>({\n    links,\n    layout,\n    linkOpacity,\n    linkHoverOpacity,\n    linkHoverOthersOpacity,\n    linkContract,\n    linkBlendMode,\n    enableLinkGradient,\n    setCurrentLink,\n    currentLink,\n    currentNode,\n    isCurrentLink,\n    isInteractive,\n    onClick,\n    tooltip,\n}: SankeyLinksProps<N, L>) => {\n    const getOpacity = (link: SankeyLinkDatum<N, L>) => {\n        if (!currentNode && !currentLink) return linkOpacity\n        if (isCurrentLink(link)) return linkHoverOpacity\n        return linkHoverOthersOpacity\n    }\n\n    const getLinkPath = useMemo(\n        () => (layout === 'horizontal' ? sankeyLinkHorizontal() : sankeyLinkVertical()),\n        [layout]\n    )\n\n    return (\n        <>\n            {links.map(link => (\n                <SankeyLinksItem<N, L>\n                    key={`${link.source.id}.${link.target.id}.${link.index}`}\n                    link={link}\n                    layout={layout}\n                    path={getLinkPath(link, linkContract)}\n                    color={link.color}\n                    opacity={getOpacity(link)}\n                    blendMode={linkBlendMode}\n                    enableGradient={enableLinkGradient}\n                    setCurrent={setCurrentLink}\n                    isInteractive={isInteractive}\n                    onClick={onClick}\n                    tooltip={tooltip}\n                />\n            ))}\n        </>\n    )\n}\n","import { line, curveMonotoneX, curveMonotoneY } from 'd3-shape'\nimport { DefaultLink, DefaultNode, SankeyLinkDatum } from './types'\n\nexport const sankeyLinkHorizontal = <N extends DefaultNode, L extends DefaultLink>() => {\n    const lineGenerator = line().curve(curveMonotoneX)\n\n    return (link: SankeyLinkDatum<N, L>, contract: number) => {\n        const thickness = Math.max(1, link.thickness - contract * 2)\n        const halfThickness = thickness / 2\n        const linkLength = link.target.x0 - link.source.x1\n        const padLength = linkLength * 0.12\n\n        const dots: [number, number][] = [\n            [link.source.x1, link.pos0 - halfThickness],\n            [link.source.x1 + padLength, link.pos0 - halfThickness],\n            [link.target.x0 - padLength, link.pos1 - halfThickness],\n            [link.target.x0, link.pos1 - halfThickness],\n            [link.target.x0, link.pos1 + halfThickness],\n            [link.target.x0 - padLength, link.pos1 + halfThickness],\n            [link.source.x1 + padLength, link.pos0 + halfThickness],\n            [link.source.x1, link.pos0 + halfThickness],\n            [link.source.x1, link.pos0 - halfThickness],\n        ]\n\n        return lineGenerator(dots) + 'Z'\n    }\n}\n\nexport const sankeyLinkVertical = <N extends DefaultNode, L extends DefaultLink>() => {\n    const lineGenerator = line().curve(curveMonotoneY)\n\n    return (link: SankeyLinkDatum<N, L>, contract: number) => {\n        const thickness = Math.max(1, link.thickness - contract * 2)\n        const halfThickness = thickness / 2\n        const linkLength = link.target.y0 - link.source.y1\n        const padLength = linkLength * 0.12\n\n        const dots: [number, number][] = [\n            [link.pos0 + halfThickness, link.source.y1],\n            [link.pos0 + halfThickness, link.source.y1 + padLength],\n            [link.pos1 + halfThickness, link.target.y0 - padLength],\n            [link.pos1 + halfThickness, link.target.y0],\n            [link.pos1 - halfThickness, link.target.y0],\n            [link.pos1 - halfThickness, link.target.y0 - padLength],\n            [link.pos0 - halfThickness, link.source.y1 + padLength],\n            [link.pos0 - halfThickness, link.source.y1],\n            [link.pos0 + halfThickness, link.source.y1],\n        ]\n\n        return lineGenerator(dots) + 'Z'\n    }\n}\n","import { useSprings, animated } from '@react-spring/web'\nimport { useTheme, useMotionConfig } from '@nivo/core'\nimport { DefaultLink, DefaultNode, SankeyCommonProps, SankeyNodeDatum } from './types'\n\ninterface SankeyLabelsProps<N extends DefaultNode, L extends DefaultLink> {\n    nodes: SankeyNodeDatum<N, L>[]\n    layout: SankeyCommonProps<N, L>['layout']\n    width: number\n    height: number\n    labelPosition: SankeyCommonProps<N, L>['labelPosition']\n    labelPadding: SankeyCommonProps<N, L>['labelPadding']\n    labelOrientation: SankeyCommonProps<N, L>['labelOrientation']\n    getLabelTextColor: (node: SankeyNodeDatum<N, L>) => string\n}\n\nexport const SankeyLabels = <N extends DefaultNode, L extends DefaultLink>({\n    nodes,\n    layout,\n    width,\n    height,\n    labelPosition,\n    labelPadding,\n    labelOrientation,\n    getLabelTextColor,\n}: SankeyLabelsProps<N, L>) => {\n    const theme = useTheme()\n\n    const labelRotation = labelOrientation === 'vertical' ? -90 : 0\n    const labels = nodes.map(node => {\n        let x\n        let y\n        let textAnchor\n        if (layout === 'horizontal') {\n            y = node.y + node.height / 2\n            if (node.x < width / 2) {\n                if (labelPosition === 'inside') {\n                    x = node.x1 + labelPadding\n                    textAnchor = labelOrientation === 'vertical' ? 'middle' : 'start'\n                } else {\n                    x = node.x - labelPadding\n                    textAnchor = labelOrientation === 'vertical' ? 'middle' : 'end'\n                }\n            } else {\n                if (labelPosition === 'inside') {\n                    x = node.x - labelPadding\n                    textAnchor = labelOrientation === 'vertical' ? 'middle' : 'end'\n                } else {\n                    x = node.x1 + labelPadding\n                    textAnchor = labelOrientation === 'vertical' ? 'middle' : 'start'\n                }\n            }\n        } else if (layout === 'vertical') {\n            x = node.x + node.width / 2\n            if (node.y < height / 2) {\n                if (labelPosition === 'inside') {\n                    y = node.y1 + labelPadding\n                    textAnchor = labelOrientation === 'vertical' ? 'end' : 'middle'\n                } else {\n                    y = node.y - labelPadding\n                    textAnchor = labelOrientation === 'vertical' ? 'start' : 'middle'\n                }\n            } else {\n                if (labelPosition === 'inside') {\n                    y = node.y - labelPadding\n                    textAnchor = labelOrientation === 'vertical' ? 'start' : 'middle'\n                } else {\n                    y = node.y1 + labelPadding\n                    textAnchor = labelOrientation === 'vertical' ? 'end' : 'middle'\n                }\n            }\n        }\n\n        return {\n            id: node.id,\n            label: node.label,\n            x,\n            y,\n            textAnchor,\n            color: getLabelTextColor(node),\n        }\n    })\n\n    const { animate, config: springConfig } = useMotionConfig()\n    const springs = useSprings(\n        labels.length,\n        labels.map(label => ({\n            transform: `translate(${label.x}, ${label.y}) rotate(${labelRotation})`,\n            color: label.color,\n            config: springConfig,\n            immediate: !animate,\n        }))\n    )\n\n    return (\n        <>\n            {springs.map((animatedProps, index) => {\n                const label = labels[index]\n\n                return (\n                    <animated.text\n                        key={label.id}\n                        dominantBaseline=\"central\"\n                        textAnchor={label.textAnchor}\n                        transform={animatedProps.transform}\n                        style={{\n                            ...theme.labels.text,\n                            fill: animatedProps.color,\n                            pointerEvents: 'none',\n                        }}\n                    >\n                        {label.label}\n                    </animated.text>\n                )\n            })}\n        </>\n    )\n}\n","import { createElement, Fragment, ReactNode } from 'react'\nimport uniq from 'lodash/uniq'\nimport { SvgWrapper, useDimensions, Container } from '@nivo/core'\nimport { BoxLegendSvg } from '@nivo/legends'\nimport { svgDefaultProps } from './props'\nimport { useSankey } from './hooks'\nimport { SankeyNodes } from './SankeyNodes'\nimport { SankeyLinks } from './SankeyLinks'\nimport { SankeyLabels } from './SankeyLabels'\nimport {\n    DefaultLink,\n    DefaultNode,\n    SankeyLayerId,\n    SankeyLinkDatum,\n    SankeyNodeDatum,\n    SankeySvgProps,\n} from './types'\n\ntype InnerSankeyProps<N extends DefaultNode, L extends DefaultLink> = Omit<\n    SankeySvgProps<N, L>,\n    'animate' | 'motionConfig' | 'renderWrapper' | 'theme'\n>\n\nconst InnerSankey = <N extends DefaultNode, L extends DefaultLink>({\n    data,\n    valueFormat,\n    layout = svgDefaultProps.layout,\n    sort = svgDefaultProps.sort,\n    align = svgDefaultProps.align,\n    width,\n    height,\n    margin: partialMargin,\n    colors = svgDefaultProps.colors,\n    nodeThickness = svgDefaultProps.nodeThickness,\n    nodeSpacing = svgDefaultProps.nodeThickness,\n    nodeInnerPadding = svgDefaultProps.nodeInnerPadding,\n    nodeBorderColor = svgDefaultProps.nodeBorderColor,\n    nodeOpacity = svgDefaultProps.nodeOpacity,\n    nodeHoverOpacity = svgDefaultProps.nodeHoverOpacity,\n    nodeHoverOthersOpacity = svgDefaultProps.nodeHoverOthersOpacity,\n    nodeBorderWidth = svgDefaultProps.nodeBorderWidth,\n    nodeBorderRadius = svgDefaultProps.nodeBorderRadius,\n    linkOpacity = svgDefaultProps.linkOpacity,\n    linkHoverOpacity = svgDefaultProps.linkHoverOpacity,\n    linkHoverOthersOpacity = svgDefaultProps.linkHoverOthersOpacity,\n    linkContract = svgDefaultProps.linkContract,\n    linkBlendMode = svgDefaultProps.linkBlendMode,\n    enableLinkGradient = svgDefaultProps.enableLinkGradient,\n    enableLabels = svgDefaultProps.enableLabels,\n    labelPosition = svgDefaultProps.labelPosition,\n    labelPadding = svgDefaultProps.labelPadding,\n    labelOrientation = svgDefaultProps.labelOrientation,\n    label = svgDefaultProps.label,\n    labelTextColor = svgDefaultProps.labelTextColor,\n    nodeTooltip = svgDefaultProps.nodeTooltip,\n    linkTooltip = svgDefaultProps.linkTooltip,\n    isInteractive = svgDefaultProps.isInteractive,\n    onClick,\n    legends = svgDefaultProps.legends,\n    layers = svgDefaultProps.layers,\n    role = svgDefaultProps.role,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n}: InnerSankeyProps<N, L>) => {\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const {\n        nodes,\n        links,\n        legendData,\n        getNodeBorderColor,\n        currentNode,\n        setCurrentNode,\n        currentLink,\n        setCurrentLink,\n        getLabelTextColor,\n    } = useSankey<N, L>({\n        data,\n        valueFormat,\n        layout,\n        width: innerWidth,\n        height: innerHeight,\n        sort,\n        align,\n        colors,\n        nodeThickness,\n        nodeSpacing,\n        nodeInnerPadding,\n        nodeBorderColor,\n        label,\n        labelTextColor,\n    })\n\n    let isCurrentNode: (node: SankeyNodeDatum<N, L>) => boolean = () => false\n    let isCurrentLink: (link: SankeyLinkDatum<N, L>) => boolean = () => false\n\n    if (currentLink) {\n        isCurrentNode = ({ id }: SankeyNodeDatum<N, L>) =>\n            id === currentLink.source.id || id === currentLink.target.id\n        isCurrentLink = ({ source, target }: SankeyLinkDatum<N, L>) =>\n            source.id === currentLink.source.id && target.id === currentLink.target.id\n    }\n\n    if (currentNode) {\n        let currentNodeIds = [currentNode.id]\n        links\n            .filter(\n                ({ source, target }) => source.id === currentNode.id || target.id === currentNode.id\n            )\n            .forEach(({ source, target }) => {\n                currentNodeIds.push(source.id)\n                currentNodeIds.push(target.id)\n            })\n\n        currentNodeIds = uniq(currentNodeIds)\n        isCurrentNode = ({ id }) => currentNodeIds.includes(id)\n        isCurrentLink = ({ source, target }) =>\n            source.id === currentNode.id || target.id === currentNode.id\n    }\n\n    const layerProps = {\n        links,\n        nodes,\n        margin,\n        width,\n        height,\n        outerWidth,\n        outerHeight,\n    }\n\n    const layerById: Record<SankeyLayerId, ReactNode> = {\n        links: null,\n        nodes: null,\n        labels: null,\n        legends: null,\n    }\n\n    if (layers.includes('links')) {\n        layerById.links = (\n            <SankeyLinks<N, L>\n                key=\"links\"\n                links={links}\n                layout={layout}\n                linkContract={linkContract}\n                linkOpacity={linkOpacity}\n                linkHoverOpacity={linkHoverOpacity}\n                linkHoverOthersOpacity={linkHoverOthersOpacity}\n                linkBlendMode={linkBlendMode}\n                enableLinkGradient={enableLinkGradient}\n                setCurrentLink={setCurrentLink}\n                currentNode={currentNode}\n                currentLink={currentLink}\n                isCurrentLink={isCurrentLink}\n                isInteractive={isInteractive}\n                onClick={onClick}\n                tooltip={linkTooltip}\n            />\n        )\n    }\n\n    if (layers.includes('nodes')) {\n        layerById.nodes = (\n            <SankeyNodes<N, L>\n                key=\"nodes\"\n                nodes={nodes}\n                nodeOpacity={nodeOpacity}\n                nodeHoverOpacity={nodeHoverOpacity}\n                nodeHoverOthersOpacity={nodeHoverOthersOpacity}\n                borderWidth={nodeBorderWidth}\n                borderRadius={nodeBorderRadius}\n                getBorderColor={getNodeBorderColor}\n                setCurrentNode={setCurrentNode}\n                currentNode={currentNode}\n                currentLink={currentLink}\n                isCurrentNode={isCurrentNode}\n                isInteractive={isInteractive}\n                onClick={onClick}\n                tooltip={nodeTooltip}\n            />\n        )\n    }\n\n    if (layers.includes('labels') && enableLabels) {\n        layerById.labels = (\n            <SankeyLabels<N, L>\n                key=\"labels\"\n                nodes={nodes}\n                layout={layout}\n                width={innerWidth}\n                height={innerHeight}\n                labelPosition={labelPosition}\n                labelPadding={labelPadding}\n                labelOrientation={labelOrientation}\n                getLabelTextColor={getLabelTextColor}\n            />\n        )\n    }\n\n    if (layers.includes('legends')) {\n        layerById.legends = (\n            <Fragment key=\"legends\">\n                {legends.map((legend, i) => (\n                    <BoxLegendSvg\n                        key={`legend${i}`}\n                        {...legend}\n                        containerWidth={innerWidth}\n                        containerHeight={innerHeight}\n                        data={legendData}\n                    />\n                ))}\n            </Fragment>\n        )\n    }\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            role={role}\n            ariaLabel={ariaLabel}\n            ariaLabelledBy={ariaLabelledBy}\n            ariaDescribedBy={ariaDescribedBy}\n        >\n            {layers.map((layer, i) => {\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, layerProps)}</Fragment>\n                }\n\n                return layerById?.[layer] ?? null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const Sankey = <N extends DefaultNode = DefaultNode, L extends DefaultLink = DefaultLink>({\n    isInteractive = svgDefaultProps.isInteractive,\n    animate = svgDefaultProps.animate,\n    motionConfig = svgDefaultProps.motionConfig,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: SankeySvgProps<N, L>) => (\n    <Container\n        {...{\n            animate,\n            isInteractive,\n            motionConfig,\n            renderWrapper,\n            theme,\n        }}\n    >\n        <InnerSankey<N, L> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { DefaultLink, DefaultNode, SankeySvgProps } from './types'\nimport { Sankey } from './Sankey'\n\nexport const ResponsiveSankey = <\n    N extends DefaultNode = DefaultNode,\n    L extends DefaultLink = DefaultLink\n>(\n    props: Omit<SankeySvgProps<N, L>, 'height' | 'width'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <Sankey<N, L> width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n"],"names":["tooltipStyles","container","display","alignItems","sourceChip","marginRight","targetChip","marginLeft","sankeyAlignmentPropMapping","center","sankeyCenter","justify","sankeyJustify","start","sankeyLeft","end","sankeyRight","sankeyAlignmentPropKeys","Object","keys","sankeyAlignmentFromProp","prop","svgDefaultProps","layout","align","sort","colors","scheme","nodeOpacity","nodeHoverOpacity","nodeHoverOthersOpacity","nodeThickness","nodeSpacing","nodeInnerPadding","nodeBorderWidth","nodeBorderColor","from","modifiers","nodeBorderRadius","linkOpacity","linkHoverOpacity","linkHoverOthersOpacity","linkContract","linkBlendMode","enableLinkGradient","enableLabels","label","labelPosition","labelPadding","labelOrientation","labelTextColor","isInteractive","nodeTooltip","_ref","node","_jsx","BasicTooltip","id","enableChip","color","linkTooltip","link","_jsxs","jsxs","style","children","jsx","Chip","source","target","formattedValue","legends","layers","role","animate","motionConfig","getId","useSankey","_ref2","data","valueFormat","width","height","_useState","useState","currentNode","setCurrentNode","_useState2","currentLink","setCurrentLink","sortFunction","useMemo","a","b","value","linkSortMode","undefined","alignFunction","theme","useTheme","getColor","useOrdinalColorScale","getNodeBorderColor","useInheritedColor","getLabel","usePropertyAccessor","getLabelTextColor","formatValue","useValueFormatter","_useMemo","_data","sankey","d3Sankey","nodeAlign","nodeSort","linkSort","nodeWidth","nodePadding","size","nodeId","cloneDeep","nodes","forEach","x","x0","y","y0","Math","max","x1","y1","oldX0","oldX1","links","pos0","pos1","thickness","computeNodeAndLinks","legendData","map","SankeyNodesItem","opacity","borderWidth","borderColor","borderRadius","setCurrent","onClick","tooltip","_useMotionConfig","useMotionConfig","springConfig","config","animatedProps","useSpring","immediate","_useTooltip","useTooltip","showTooltipFromEvent","hideTooltip","handleMouseEnter","useCallback","event","createElement","handleMouseMove","handleMouseLeave","handleClick","animated","rect","rx","ry","to","v","fill","fillOpacity","strokeWidth","stroke","strokeOpacity","onMouseEnter","onMouseMove","onMouseLeave","SankeyNodes","getBorderColor","isCurrentNode","getOpacity","_Fragment","SankeyLinkGradient","gradientProps","startColor","endColor","x2","y2","_extends","spreadMethod","offset","stopColor","SankeyLinksItem","path","blendMode","enableGradient","linkId","index","animatedPath","useAnimatedPath","encodeURI","d","mixBlendMode","SankeyLinks","isCurrentLink","getLinkPath","lineGenerator","line","curve","curveMonotoneX","contract","halfThickness","padLength","dots","curveMonotoneY","sankeyLinkVertical","SankeyLabels","labelRotation","labels","textAnchor","springs","useSprings","length","transform","text","dominantBaseline","pointerEvents","InnerSankey","_ref$layout","_ref$sort","_ref$align","partialMargin","margin","_ref$colors","_ref$nodeThickness","_ref$nodeSpacing","_ref$nodeInnerPadding","_ref$nodeBorderColor","_ref$nodeOpacity","_ref$nodeHoverOpacity","_ref$nodeHoverOthersO","_ref$nodeBorderWidth","_ref$nodeBorderRadius","_ref$linkOpacity","_ref$linkHoverOpacity","_ref$linkHoverOthersO","_ref$linkContract","_ref$linkBlendMode","_ref$enableLinkGradie","_ref$enableLabels","_ref$labelPosition","_ref$labelPadding","_ref$labelOrientation","_ref$label","_ref$labelTextColor","_ref$nodeTooltip","_ref$linkTooltip","_ref$isInteractive","_ref$legends","_ref$layers","_ref$role","ariaLabel","ariaLabelledBy","ariaDescribedBy","_useDimensions","useDimensions","innerWidth","innerHeight","outerWidth","outerHeight","_useSankey","_ref3","currentNodeIds","filter","_ref4","_ref5","push","uniq","_ref6","includes","_ref7","layerProps","layerById","Fragment","legend","i","BoxLegendSvg","containerWidth","containerHeight","SvgWrapper","layer","_layerById$layer","Sankey","_ref8","_ref8$isInteractive","_ref8$animate","_ref8$motionConfig","renderWrapper","otherProps","_objectWithoutPropertiesLoose","_excluded","Container","props","ResponsiveWrapper"],"mappings":"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"}