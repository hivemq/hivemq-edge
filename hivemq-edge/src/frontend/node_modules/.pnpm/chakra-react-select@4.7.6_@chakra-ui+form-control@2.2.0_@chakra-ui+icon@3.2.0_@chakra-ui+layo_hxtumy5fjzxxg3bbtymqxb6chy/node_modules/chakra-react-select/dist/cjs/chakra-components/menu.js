"use strict";

exports.__esModule = true;
exports["default"] = exports.Option = exports.NoOptionsMessage = exports.MenuList = exports.LoadingMessage = exports.GroupHeading = exports.Group = void 0;
var _react = _interopRequireDefault(require("react"));
var _layout = require("@chakra-ui/layout");
var _menu = require("@chakra-ui/menu");
var _system = require("@chakra-ui/system");
var _utils = require("../utils");
var _excluded = ["data"];
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
var alignToControl = function alignToControl(placement) {
  var placementToCSSProp = {
    bottom: "top",
    top: "bottom"
  };
  return placement ? placementToCSSProp[placement] : "top";
};
var Menu = function Menu(props) {
  var _initialSx;
  var className = props.className,
    cx = props.cx,
    children = props.children,
    innerProps = props.innerProps,
    innerRef = props.innerRef,
    placement = props.placement,
    chakraStyles = props.selectProps.chakraStyles;
  var initialSx = (_initialSx = {
    position: "absolute"
  }, _initialSx[alignToControl(placement)] = "100%", _initialSx.marginY = "8px", _initialSx.width = "100%", _initialSx.zIndex = 1, _initialSx);
  var sx = chakraStyles != null && chakraStyles.menu ? chakraStyles.menu(initialSx, props) : initialSx;
  return /*#__PURE__*/_react["default"].createElement(_menu.Menu, null, /*#__PURE__*/_react["default"].createElement(_layout.Box, _extends({}, innerProps, {
    ref: innerRef,
    className: cx({
      menu: true
    }, className),
    sx: sx
  }), children));
};
var _default = exports["default"] = Menu;
var MenuList = exports.MenuList = function MenuList(props) {
  var _menuStyles$list;
  var className = props.className,
    cx = props.cx,
    innerRef = props.innerRef,
    children = props.children,
    maxHeight = props.maxHeight,
    isMulti = props.isMulti,
    innerProps = props.innerProps,
    _props$selectProps = props.selectProps,
    chakraStyles = _props$selectProps.chakraStyles,
    sizeProp = _props$selectProps.size,
    variant = _props$selectProps.variant,
    focusBorderColor = _props$selectProps.focusBorderColor,
    errorBorderColor = _props$selectProps.errorBorderColor;
  var menuStyles = (0, _system.useMultiStyleConfig)("Menu");

  // We're pulling in the border radius from the theme for the input component
  // so we can match the menu lists' border radius to it, but in 2.8.0 the value
  // was changed to being pulled from a theme variable instead of being hardcoded
  var size = (0, _utils.useSize)(sizeProp);
  var inputStyles = (0, _system.useMultiStyleConfig)("Input", {
    size: size,
    variant: variant,
    focusBorderColor: focusBorderColor,
    errorBorderColor: errorBorderColor
  });
  var fieldStyles = inputStyles.field;
  var initialSx = _extends({}, menuStyles.list, {
    minW: "100%",
    maxHeight: maxHeight + "px",
    overflowY: "auto",
    // This is hacky, but it works. May be removed in the future
    "--input-border-radius": fieldStyles == null ? void 0 : fieldStyles["--input-border-radius"],
    borderRadius: (fieldStyles == null ? void 0 : fieldStyles.borderRadius) || ((_menuStyles$list = menuStyles.list) == null ? void 0 : _menuStyles$list.borderRadius),
    position: "relative",
    // required for offset[Height, Top] > keyboard scroll
    WebkitOverflowScrolling: "touch"
  });
  var sx = chakraStyles != null && chakraStyles.menuList ? chakraStyles.menuList(initialSx, props) : initialSx;
  return /*#__PURE__*/_react["default"].createElement(_layout.Box, _extends({
    role: "listbox"
  }, innerProps, {
    className: cx({
      "menu-list": true,
      "menu-list--is-multi": isMulti
    }, className),
    sx: sx,
    ref: innerRef
  }), children);
};
var LoadingMessage = exports.LoadingMessage = function LoadingMessage(props) {
  var children = props.children,
    className = props.className,
    cx = props.cx,
    innerProps = props.innerProps,
    _props$selectProps2 = props.selectProps,
    chakraStyles = _props$selectProps2.chakraStyles,
    sizeProp = _props$selectProps2.size;
  var size = (0, _utils.useSize)(sizeProp);
  var verticalPaddings = {
    sm: "6px",
    md: "8px",
    lg: "10px"
  };
  var initialSx = {
    color: "chakra-subtle-text",
    textAlign: "center",
    paddingY: verticalPaddings[size],
    fontSize: size
  };
  var sx = chakraStyles != null && chakraStyles.loadingMessage ? chakraStyles.loadingMessage(initialSx, props) : initialSx;
  return /*#__PURE__*/_react["default"].createElement(_layout.Box, _extends({}, innerProps, {
    className: cx({
      "menu-notice": true,
      "menu-notice--loading": true
    }, className),
    sx: sx
  }), children);
};
var NoOptionsMessage = exports.NoOptionsMessage = function NoOptionsMessage(props) {
  var children = props.children,
    className = props.className,
    cx = props.cx,
    innerProps = props.innerProps,
    _props$selectProps3 = props.selectProps,
    chakraStyles = _props$selectProps3.chakraStyles,
    sizeProp = _props$selectProps3.size;
  var size = (0, _utils.useSize)(sizeProp);
  var verticalPaddings = {
    sm: "6px",
    md: "8px",
    lg: "10px"
  };
  var initialSx = {
    color: "chakra-subtle-text",
    textAlign: "center",
    paddingY: verticalPaddings[size],
    fontSize: size
  };
  var sx = chakraStyles != null && chakraStyles.noOptionsMessage ? chakraStyles.noOptionsMessage(initialSx, props) : initialSx;
  return /*#__PURE__*/_react["default"].createElement(_layout.Box, _extends({}, innerProps, {
    className: cx({
      "menu-notice": true,
      "menu-notice--no-options": true
    }, className),
    sx: sx
  }), children);
};
var Group = exports.Group = function Group(props) {
  var children = props.children,
    className = props.className,
    cx = props.cx,
    theme = props.theme,
    getStyles = props.getStyles,
    Heading = props.Heading,
    headingProps = props.headingProps,
    label = props.label,
    selectProps = props.selectProps,
    innerProps = props.innerProps,
    getClassNames = props.getClassNames;
  var chakraStyles = selectProps.chakraStyles;
  var initialSx = {};
  var sx = chakraStyles != null && chakraStyles.group ? chakraStyles.group(initialSx, props) : initialSx;
  return /*#__PURE__*/_react["default"].createElement(_layout.Box, _extends({}, innerProps, {
    className: cx({
      group: true
    }, className),
    sx: sx
  }), /*#__PURE__*/_react["default"].createElement(Heading, _extends({}, headingProps, {
    selectProps: selectProps,
    cx: cx,
    theme: theme,
    getStyles: getStyles,
    getClassNames: getClassNames
  }), label), /*#__PURE__*/_react["default"].createElement(_layout.Box, null, children));
};
var GroupHeading = exports.GroupHeading = function GroupHeading(props) {
  var cx = props.cx,
    className = props.className,
    _props$selectProps4 = props.selectProps,
    chakraStyles = _props$selectProps4.chakraStyles,
    sizeProp = _props$selectProps4.size,
    hasStickyGroupHeaders = _props$selectProps4.hasStickyGroupHeaders;
  var _cleanCommonProps = (0, _utils.cleanCommonProps)(props),
    data = _cleanCommonProps.data,
    innerProps = _objectWithoutPropertiesLoose(_cleanCommonProps, _excluded);
  var menuStyles = (0, _system.useMultiStyleConfig)("Menu");
  var size = (0, _utils.useSize)(sizeProp);
  var fontSizes = {
    sm: "xs",
    md: "sm",
    lg: "md"
  };
  var paddings = {
    sm: "0.4rem 0.8rem",
    md: "0.5rem 1rem",
    lg: "0.6rem 1.2rem"
  };
  var initialSx = _extends({}, menuStyles.groupTitle, {
    fontSize: fontSizes[size],
    padding: paddings[size],
    margin: 0,
    borderBottomWidth: hasStickyGroupHeaders ? "1px" : 0,
    position: hasStickyGroupHeaders ? "sticky" : "static",
    top: -2,
    bg: menuStyles.list.bg,
    zIndex: 1
  });
  var sx = chakraStyles != null && chakraStyles.groupHeading ? chakraStyles.groupHeading(initialSx, props) : initialSx;
  return /*#__PURE__*/_react["default"].createElement(_layout.Box, _extends({}, innerProps, {
    className: cx({
      "group-heading": true
    }, className),
    sx: sx
  }));
};

/**
 * The `CheckIcon` component from the Chakra UI Menu
 *
 * @see {@link https://github.com/chakra-ui/chakra-ui/blob/eb0316ddf96dd259433724062e923c33e6eee729/packages/components/menu/src/menu-item-option.tsx#L10-L17}
 */
var CheckIcon = function CheckIcon(props) {
  return /*#__PURE__*/_react["default"].createElement("svg", _extends({
    viewBox: "0 0 14 14",
    width: "1em",
    height: "1em"
  }, props), /*#__PURE__*/_react["default"].createElement("polygon", {
    fill: "currentColor",
    points: "5.5 11.9993304 14 3.49933039 12.5 2 5.5 8.99933039 1.5 4.9968652 0 6.49933039"
  }));
};
var Option = exports.Option = function Option(props) {
  var className = props.className,
    cx = props.cx,
    innerRef = props.innerRef,
    innerProps = props.innerProps,
    children = props.children,
    isFocused = props.isFocused,
    isDisabled = props.isDisabled,
    isSelected = props.isSelected,
    _props$selectProps5 = props.selectProps,
    chakraStyles = _props$selectProps5.chakraStyles,
    sizeProp = _props$selectProps5.size,
    isMulti = _props$selectProps5.isMulti,
    hideSelectedOptions = _props$selectProps5.hideSelectedOptions,
    selectedOptionStyle = _props$selectProps5.selectedOptionStyle,
    selectedOptionColorScheme = _props$selectProps5.selectedOptionColorScheme;
  var menuItemStyles = (0, _system.useMultiStyleConfig)("Menu").item;
  var size = (0, _utils.useSize)(sizeProp);
  var horizontalPaddingOptions = {
    sm: "0.6rem",
    md: "0.8rem",
    lg: "1rem"
  };
  var verticalPaddingOptions = {
    sm: "0.3rem",
    md: "0.4rem",
    lg: "0.5rem"
  };

  /**
   * Use the same selected color as the border/shadow of the select/input components
   *
   * @see {@link https://github.com/chakra-ui/chakra-ui/blob/61f965a/packages/components/theme/src/components/input.ts#L92-L93}
   */
  var selectedBg = (0, _system.useColorModeValue)(selectedOptionColorScheme + ".500", selectedOptionColorScheme + ".300");
  var selectedColor = (0, _system.useColorModeValue)("white", "black");

  // Don't create exta space for the checkmark if using a multi select with
  // options that dissapear when they're selected
  var showCheckIcon = selectedOptionStyle === "check" && (!isMulti || hideSelectedOptions === false);
  var shouldHighlight = selectedOptionStyle === "color";
  var initialSx = _extends({}, menuItemStyles, {
    cursor: "pointer",
    display: "flex",
    alignItems: "center",
    width: "100%",
    textAlign: "start",
    fontSize: size,
    paddingX: horizontalPaddingOptions[size],
    paddingY: verticalPaddingOptions[size]
  }, shouldHighlight && {
    _selected: {
      bg: selectedBg,
      color: selectedColor,
      _active: {
        bg: selectedBg
      }
    }
  });
  var sx = chakraStyles != null && chakraStyles.option ? chakraStyles.option(initialSx, props) : initialSx;
  return /*#__PURE__*/_react["default"].createElement(_layout.Box, _extends({
    role: "option"
  }, innerProps, {
    className: cx({
      option: true,
      "option--is-disabled": isDisabled,
      "option--is-focused": isFocused,
      "option--is-selected": isSelected
    }, className),
    sx: sx,
    ref: innerRef,
    "data-focus": isFocused ? true : undefined,
    "aria-disabled": isDisabled ? true : undefined,
    "aria-selected": isSelected
  }), showCheckIcon && /*#__PURE__*/_react["default"].createElement(_menu.MenuIcon, {
    fontSize: "0.8em",
    marginEnd: "0.75rem",
    opacity: isSelected ? 1 : 0
  }, /*#__PURE__*/_react["default"].createElement(CheckIcon, null)), children);
};
//# sourceMappingURL=menu.js.map