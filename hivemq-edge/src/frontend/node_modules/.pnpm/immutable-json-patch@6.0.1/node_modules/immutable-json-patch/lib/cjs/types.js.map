{"version":3,"file":"types.js","names":[],"sources":["../../src/types.ts"],"sourcesContent":["export type JSONPointer = string // a string containing a JSONPointer like '/array/3/name'\nexport type JSONPath = string[] // an array like ['array', '3', 'name']\n\nexport interface JSONPatchAdd {\n  op: 'add'\n  path: JSONPointer\n  value: unknown\n}\n\nexport interface JSONPatchRemove {\n  op: 'remove'\n  path: JSONPointer\n}\n\nexport interface JSONPatchReplace {\n  op: 'replace'\n  path: JSONPointer\n  value: unknown\n}\n\nexport interface JSONPatchCopy {\n  op: 'copy'\n  path: JSONPointer\n  from: JSONPointer\n}\n\nexport interface JSONPatchMove {\n  op: 'move'\n  path: JSONPointer\n  from: JSONPointer\n}\n\nexport interface JSONPatchTest {\n  op: 'test'\n  path: JSONPointer\n  value: unknown\n}\n\nexport type JSONPatchOperation =\n  | JSONPatchAdd\n  | JSONPatchRemove\n  | JSONPatchReplace\n  | JSONPatchCopy\n  | JSONPatchMove\n  | JSONPatchTest\n\nexport type JSONPatchDocument = JSONPatchOperation[]\n\nexport type JSONPatchOptions<T = unknown, U = unknown, V = unknown, W = unknown, X = unknown> = {\n  before?: (document: T, operation: JSONPatchOperation)\n    => { document?: U, operation?: JSONPatchOperation }\n\n  after?: (document: V, operation: JSONPatchOperation, previousDocument: W)\n    => X\n}\n\nexport type RevertJSONPatchOptions<T = unknown, U = unknown> = {\n  before?: (document: T, operation: JSONPatchOperation, revertOperations: JSONPatchOperation[])\n    => { document?: U, revertOperations?: JSONPatchOperation[] }\n}\n\n/**\n * @deprecated use generics or `unknown` instead\n */\nexport type JSONPrimitive = string | number | boolean | null\n\n/**\n * @deprecated use generics or `unknown` instead\n */\nexport type JSONValue =\n  | { [key: string]: JSONValue } // object\n  | JSONValue[] // array\n  | JSONPrimitive // value\n\n/**\n * @deprecated use generics or `unknown` instead\n */\nexport type JSONObject = { [key: string]: JSONValue }\n\n/**\n * @deprecated use generics or `unknown` instead\n */\nexport type JSONArray = JSONValue[]\n"],"mappings":""}