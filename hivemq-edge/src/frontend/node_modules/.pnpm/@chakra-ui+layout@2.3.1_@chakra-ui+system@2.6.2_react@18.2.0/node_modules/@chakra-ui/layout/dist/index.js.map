{"version":3,"sources":["../src/index.ts","../src/aspect-ratio.tsx","../src/badge.tsx","../src/box.tsx","../src/center.tsx","../src/code.tsx","../src/container.tsx","../src/divider.tsx","../src/flex.tsx","../src/grid.tsx","../src/grid-item.tsx","../src/heading.tsx","../src/highlight.tsx","../src/kbd.tsx","../src/link.tsx","../src/link-box.tsx","../src/list.tsx","../src/simple-grid.tsx","../src/spacer.tsx","../src/stack/h-stack.tsx","../src/stack/stack.tsx","../src/stack/stack-item.tsx","../src/stack/stack.utils.tsx","../src/stack/stack-divider.tsx","../src/stack/v-stack.tsx","../src/text.tsx","../src/wrap.tsx","../src/indicator.tsx"],"sourcesContent":["export { AspectRatio } from \"./aspect-ratio\"\nexport type { AspectRatioProps } from \"./aspect-ratio\"\nexport { Badge } from \"./badge\"\nexport type { BadgeProps } from \"./badge\"\nexport { Box, Square, Circle } from \"./box\"\nexport type { BoxProps, SquareProps } from \"./box\"\nexport {\n  AbsoluteCenter,\n  Center,\n  type AbsoluteCenterProps,\n  type CenterProps,\n} from \"./center\"\nexport { Code } from \"./code\"\nexport type { CodeProps } from \"./code\"\nexport { Container } from \"./container\"\nexport type { ContainerProps } from \"./container\"\nexport { Divider } from \"./divider\"\nexport type { DividerProps } from \"./divider\"\nexport { Flex } from \"./flex\"\nexport type { FlexProps } from \"./flex\"\nexport { Grid } from \"./grid\"\nexport type { GridProps } from \"./grid\"\nexport { GridItem } from \"./grid-item\"\nexport type { GridItemProps } from \"./grid-item\"\nexport { Heading } from \"./heading\"\nexport type { HeadingProps } from \"./heading\"\nexport { Highlight, Mark, useHighlight } from \"./highlight\"\nexport type { HighlightProps, MarkProps, UseHighlightProps } from \"./highlight\"\nexport { Kbd } from \"./kbd\"\nexport type { KbdProps } from \"./kbd\"\nexport { Link } from \"./link\"\nexport type { LinkProps } from \"./link\"\nexport { LinkBox, LinkOverlay } from \"./link-box\"\nexport type { LinkBoxProps, LinkOverlayProps } from \"./link-box\"\nexport {\n  List,\n  ListIcon,\n  ListItem,\n  OrderedList,\n  UnorderedList,\n  useListStyles,\n} from \"./list\"\nexport type { ListItemProps, ListProps } from \"./list\"\nexport { SimpleGrid } from \"./simple-grid\"\nexport type { SimpleGridProps } from \"./simple-grid\"\nexport { Spacer } from \"./spacer\"\nexport type { SpacerProps } from \"./spacer\"\nexport { HStack, Stack, StackDivider, StackItem, VStack } from \"./stack\"\nexport type { StackDirection, StackDividerProps, StackProps } from \"./stack\"\nexport { Text } from \"./text\"\nexport type { TextProps } from \"./text\"\nexport { Wrap, WrapItem } from \"./wrap\"\nexport type { WrapItemProps, WrapProps } from \"./wrap\"\nexport { Indicator } from \"./indicator\"\nexport type { IndicatorProps } from \"./indicator\"\n","import {\n  chakra,\n  forwardRef,\n  ResponsiveValue,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { mapResponsive } from \"@chakra-ui/breakpoint-utils\"\nimport { cx } from \"@chakra-ui/shared-utils\"\n\nimport { Children } from \"react\"\n\ninterface AspectRatioOptions {\n  /**\n   * The aspect ratio of the Box. Common values are:\n   *\n   * `21/9`, `16/9`, `9/16`, `4/3`, `1.85/1`\n   */\n  ratio?: ResponsiveValue<number>\n}\n\nexport interface AspectRatioProps\n  extends Omit<HTMLChakraProps<\"div\">, \"aspectRatio\">,\n    AspectRatioOptions {}\n\n/**\n * React component used to cropping media (videos, images and maps)\n * to a desired aspect ratio.\n *\n * @see Docs https://chakra-ui.com/aspectratiobox\n */\nexport const AspectRatio = forwardRef<AspectRatioProps, \"div\">(function (\n  props,\n  ref,\n) {\n  const { ratio = 4 / 3, children, className, ...rest } = props\n\n  // enforce single child\n  const child = Children.only(children)\n\n  const _className = cx(\"chakra-aspect-ratio\", className)\n\n  return (\n    <chakra.div\n      ref={ref}\n      position=\"relative\"\n      className={_className}\n      _before={{\n        height: 0,\n        content: `\"\"`,\n        display: \"block\",\n        paddingBottom: mapResponsive(ratio, (r) => `${(1 / r) * 100}%`),\n      }}\n      __css={{\n        \"& > *:not(style)\": {\n          overflow: \"hidden\",\n          position: \"absolute\",\n          top: \"0\",\n          right: \"0\",\n          bottom: \"0\",\n          left: \"0\",\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          width: \"100%\",\n          height: \"100%\",\n        },\n        \"& > img, & > video\": {\n          objectFit: \"cover\",\n        },\n      }}\n      {...rest}\n    >\n      {child}\n    </chakra.div>\n  )\n})\n\nAspectRatio.displayName = \"AspectRatio\"\n","import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\n\nexport interface BadgeProps\n  extends HTMLChakraProps<\"span\">,\n    ThemingProps<\"Badge\"> {}\n\n/**\n * React component used to display notifications, messages, or\n * statuses in different shapes and sizes.\n *\n * @see Docs https://chakra-ui.com/badge\n */\nexport const Badge = forwardRef<BadgeProps, \"span\">(function Badge(props, ref) {\n  const styles = useStyleConfig(\"Badge\", props)\n  const { className, ...rest } = omitThemingProps(props)\n\n  return (\n    <chakra.span\n      ref={ref}\n      className={cx(\"chakra-badge\", props.className)}\n      {...rest}\n      __css={{\n        display: \"inline-block\",\n        whiteSpace: \"nowrap\",\n        verticalAlign: \"middle\",\n        ...styles,\n      }}\n    />\n  )\n})\n\nBadge.displayName = \"Badge\"\n","import {\n  chakra,\n  forwardRef,\n  SystemStyleObject,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\n\nexport interface BoxProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * Box is the most abstract component on top of which other chakra\n * components are built. It renders a `div` element by default.\n *\n * @see Docs https://chakra-ui.com/box\n */\nexport const Box = chakra(\"div\")\n\nBox.displayName = \"Box\"\n\n/**\n * As a constraint, you can't pass size related props\n * Only `size` would be allowed\n */\ntype Omitted = \"size\" | \"boxSize\" | \"width\" | \"height\" | \"w\" | \"h\"\n\nexport interface SquareProps extends Omit<BoxProps, Omitted> {\n  /**\n   * The size (width and height) of the square\n   */\n  size?: BoxProps[\"width\"]\n  /**\n   * If `true`, the content will be centered in the square\n   *\n   * @default false\n   */\n  centerContent?: boolean\n}\n\nexport const Square = forwardRef<SquareProps, \"div\">(function Square(\n  props,\n  ref,\n) {\n  const { size, centerContent = true, ...rest } = props\n\n  const styles: SystemStyleObject = centerContent\n    ? { display: \"flex\", alignItems: \"center\", justifyContent: \"center\" }\n    : {}\n\n  return (\n    <Box\n      ref={ref}\n      boxSize={size}\n      __css={{\n        ...styles,\n        flexShrink: 0,\n        flexGrow: 0,\n      }}\n      {...rest}\n    />\n  )\n})\n\nSquare.displayName = \"Square\"\n\nexport const Circle = forwardRef<SquareProps, \"div\">(function Circle(\n  props,\n  ref,\n) {\n  const { size, ...rest } = props\n  return <Square size={size} ref={ref} borderRadius=\"9999px\" {...rest} />\n})\n\nCircle.displayName = \"Circle\"\n","import { chakra, forwardRef, HTMLChakraProps } from \"@chakra-ui/system\"\n\nexport interface CenterProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * React component used to horizontally and vertically center its child.\n * It uses the popular `display: flex` centering technique.\n *\n * @see Docs https://chakra-ui.com/center\n */\nexport const Center = chakra(\"div\", {\n  baseStyle: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n})\n\nCenter.displayName = \"Center\"\n\nexport interface AbsoluteCenterProps extends HTMLChakraProps<\"div\"> {\n  axis?: \"horizontal\" | \"vertical\" | \"both\"\n}\n\nconst centerStyles = {\n  horizontal: {\n    insetStart: \"50%\",\n    transform: \"translateX(-50%)\",\n  },\n  vertical: {\n    top: \"50%\",\n    transform: \"translateY(-50%)\",\n  },\n  both: {\n    insetStart: \"50%\",\n    top: \"50%\",\n    transform: \"translate(-50%, -50%)\",\n  },\n}\n\n/**\n * React component used to horizontally and vertically center an element\n * relative to its parent dimensions.\n *\n * It uses the `position: absolute` strategy.\n *\n * @see Docs https://chakra-ui.com/center\n * @see WebDev https://web.dev/centering-in-css/#5.-pop-and-plop\n */\nexport const AbsoluteCenter = forwardRef<AbsoluteCenterProps, \"div\">(\n  function AbsoluteCenter(props, ref) {\n    const { axis = \"both\", ...rest } = props\n    return (\n      <chakra.div\n        ref={ref}\n        __css={centerStyles[axis]}\n        {...rest}\n        position=\"absolute\"\n      />\n    )\n  },\n)\n","import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\n\nexport interface CodeProps\n  extends HTMLChakraProps<\"code\">,\n    ThemingProps<\"Code\"> {}\n\n/**\n * React component to render inline code snippets.\n *\n * @see Docs https://chakra-ui.com/code\n */\nexport const Code = forwardRef<CodeProps, \"code\">(function Code(props, ref) {\n  const styles = useStyleConfig(\"Code\", props)\n  const { className, ...rest } = omitThemingProps(props)\n\n  return (\n    <chakra.code\n      ref={ref}\n      className={cx(\"chakra-code\", props.className)}\n      {...rest}\n      __css={{\n        display: \"inline-block\",\n        ...styles,\n      }}\n    />\n  )\n})\n\nCode.displayName = \"Code\"\n","import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\n\nexport interface ContainerProps\n  extends HTMLChakraProps<\"div\">,\n    ThemingProps<\"Container\"> {\n  /**\n   * If `true`, container will center its children\n   * regardless of their width.\n   *\n   * @default false\n   */\n  centerContent?: boolean\n}\n\n/**\n * Layout component used to wrap app or website content\n *\n * It sets `margin-left` and `margin-right` to `auto`,\n * to keep its content centered.\n *\n * It also sets a default max-width of `60ch` (60 characters).\n *\n * @see Docs https://chakra-ui.com/docs/components/container\n */\nexport const Container = forwardRef<ContainerProps, \"div\">(function Container(\n  props,\n  ref,\n) {\n  const { className, centerContent, ...rest } = omitThemingProps(props)\n\n  const styles = useStyleConfig(\"Container\", props)\n\n  return (\n    <chakra.div\n      ref={ref}\n      className={cx(\"chakra-container\", className)}\n      {...rest}\n      __css={{\n        ...styles,\n        ...(centerContent && {\n          display: \"flex\",\n          flexDirection: \"column\",\n          alignItems: \"center\",\n        }),\n      }}\n    />\n  )\n})\n\nContainer.displayName = \"Container\"\n","import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\n\n/**\n * Layout component used to visually separate content in a list or group.\n * It displays a thin horizontal or vertical line, and renders a `hr` tag.\n *\n * @see Docs https://chakra-ui.com/divider\n */\nexport const Divider = forwardRef<DividerProps, \"hr\">(function Divider(\n  props,\n  ref,\n) {\n  const {\n    borderLeftWidth,\n    borderBottomWidth,\n    borderTopWidth,\n    borderRightWidth,\n    borderWidth,\n    borderStyle,\n    borderColor,\n    ...styles\n  } = useStyleConfig(\"Divider\", props)\n  const {\n    className,\n    orientation = \"horizontal\",\n    __css,\n    ...rest\n  } = omitThemingProps(props)\n\n  const dividerStyles = {\n    vertical: {\n      borderLeftWidth:\n        borderLeftWidth || borderRightWidth || borderWidth || \"1px\",\n      height: \"100%\",\n    },\n    horizontal: {\n      borderBottomWidth:\n        borderBottomWidth || borderTopWidth || borderWidth || \"1px\",\n      width: \"100%\",\n    },\n  }\n\n  return (\n    <chakra.hr\n      ref={ref}\n      aria-orientation={orientation}\n      {...rest}\n      __css={{\n        ...styles,\n        border: \"0\",\n\n        borderColor,\n        borderStyle,\n        ...dividerStyles[orientation],\n        ...__css,\n      }}\n      className={cx(\"chakra-divider\", className)}\n    />\n  )\n})\n\nexport interface DividerProps\n  extends HTMLChakraProps<\"div\">,\n    ThemingProps<\"Divider\"> {\n  orientation?: \"horizontal\" | \"vertical\"\n}\n\nDivider.displayName = \"Divider\"\n","import {\n  chakra,\n  forwardRef,\n  SystemProps,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\n\nexport interface FlexOptions {\n  /**\n   * Shorthand for `alignItems` style prop\n   * @type SystemProps[\"alignItems\"]\n   */\n  align?: SystemProps[\"alignItems\"]\n\n  /**\n   * Shorthand for `justifyContent` style prop\n   * @type SystemProps[\"justifyContent\"]\n   */\n  justify?: SystemProps[\"justifyContent\"]\n\n  /**\n   * Shorthand for `flexWrap` style prop\n   * @type SystemProps[\"flexWrap\"]\n   */\n  wrap?: SystemProps[\"flexWrap\"]\n\n  /**\n   * Shorthand for `flexDirection` style prop\n   * @type SystemProps[\"flexDirection\"]\n   * @default \"row\"\n   */\n  direction?: SystemProps[\"flexDirection\"]\n\n  /**\n   * Shorthand for `flexBasis` style prop\n   * @type SystemProps[\"flexBasis\"]\n   */\n  basis?: SystemProps[\"flexBasis\"]\n\n  /**\n   * Shorthand for `flexGrow` style prop\n   * @type SystemProps[\"flexGrow\"]\n   */\n  grow?: SystemProps[\"flexGrow\"]\n\n  /**\n   * Shorthand for `flexShrink` style prop\n   * @type SystemProps[\"flexShrink\"]\n   */\n  shrink?: SystemProps[\"flexShrink\"]\n}\n\nexport interface FlexProps extends HTMLChakraProps<\"div\">, FlexOptions {}\n\n/**\n * React component used to create flexbox layouts.\n *\n * It renders a `div` with `display: flex` and\n * comes with helpful style shorthand.\n *\n * @see Docs https://chakra-ui.com/flex\n */\nexport const Flex = forwardRef<FlexProps, \"div\">(function Flex(props, ref) {\n  const { direction, align, justify, wrap, basis, grow, shrink, ...rest } =\n    props\n\n  const styles = {\n    display: \"flex\",\n    flexDirection: direction,\n    alignItems: align,\n    justifyContent: justify,\n    flexWrap: wrap,\n    flexBasis: basis,\n    flexGrow: grow,\n    flexShrink: shrink,\n  }\n\n  return <chakra.div ref={ref} __css={styles} {...rest} />\n})\n\nFlex.displayName = \"Flex\"\n","import {\n  chakra,\n  forwardRef,\n  SystemProps,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\n\nexport interface GridOptions {\n  /**\n   * Shorthand prop for `gridTemplateColumns`\n   * @type SystemProps[\"gridTemplateColumns\"]\n   */\n  templateColumns?: SystemProps[\"gridTemplateColumns\"]\n  /**\n   * Shorthand prop for `gridGap`\n   * @type SystemProps[\"gridGap\"]\n   */\n  gap?: SystemProps[\"gridGap\"]\n  /**\n   * Shorthand prop for `gridRowGap`\n   * @type SystemProps[\"gridRowGap\"]\n   */\n  rowGap?: SystemProps[\"gridRowGap\"]\n  /**\n   * Shorthand prop for `gridColumnGap`\n   * @type SystemProps[\"gridColumnGap\"]\n   */\n  columnGap?: SystemProps[\"gridColumnGap\"]\n  /**\n   * Shorthand prop for `gridAutoFlow`\n   * @type SystemProps[\"gridAutoFlow\"]\n   */\n  autoFlow?: SystemProps[\"gridAutoFlow\"]\n  /**\n   * Shorthand prop for `gridAutoRows`\n   * @type SystemProps[\"gridAutoRows\"]\n   */\n  autoRows?: SystemProps[\"gridAutoRows\"]\n  /**\n   * Shorthand prop for `gridAutoColumns`\n   * @type SystemProps[\"gridAutoColumns\"]\n   */\n  autoColumns?: SystemProps[\"gridAutoColumns\"]\n  /**\n   * Shorthand prop for `gridTemplateRows`\n   * @type SystemProps[\"gridTemplateRows\"]\n   */\n  templateRows?: SystemProps[\"gridTemplateRows\"]\n  /**\n   * Shorthand prop for `gridTemplateAreas`\n   * @type SystemProps[\"gridTemplateAreas\"]\n   */\n  templateAreas?: SystemProps[\"gridTemplateAreas\"]\n  /**\n   * Shorthand prop for `gridColumn`\n   * @type SystemProps[\"gridColumn\"]\n   */\n  column?: SystemProps[\"gridColumn\"]\n  /**\n   * Shorthand prop for `gridRow`\n   * @type SystemProps[\"gridRow\"]\n   */\n  row?: SystemProps[\"gridRow\"]\n}\n\nexport interface GridProps\n  extends Omit<HTMLChakraProps<\"div\">, keyof GridOptions>,\n    GridOptions {}\n\n/**\n * React component used to create grid layouts.\n *\n * It renders a `div` with `display: grid` and\n * comes with helpful style shorthand.\n *\n * @see Docs https://chakra-ui.com/grid\n */\nexport const Grid = forwardRef<GridProps, \"div\">(function Grid(props, ref) {\n  const {\n    templateAreas,\n    gap,\n    rowGap,\n    columnGap,\n    column,\n    row,\n    autoFlow,\n    autoRows,\n    templateRows,\n    autoColumns,\n    templateColumns,\n    ...rest\n  } = props\n\n  const styles = {\n    display: \"grid\",\n    gridTemplateAreas: templateAreas,\n    gridGap: gap,\n    gridRowGap: rowGap,\n    gridColumnGap: columnGap,\n    gridAutoColumns: autoColumns,\n    gridColumn: column,\n    gridRow: row,\n    gridAutoFlow: autoFlow,\n    gridAutoRows: autoRows,\n    gridTemplateRows: templateRows,\n    gridTemplateColumns: templateColumns,\n  }\n\n  return <chakra.div ref={ref} __css={styles} {...rest} />\n})\n\nGrid.displayName = \"Grid\"\n","import {\n  ResponsiveValue,\n  SystemProps,\n  forwardRef,\n  chakra,\n} from \"@chakra-ui/system\"\nimport { compact } from \"@chakra-ui/object-utils\"\nimport { mapResponsive } from \"@chakra-ui/breakpoint-utils\"\n\nimport { BoxProps } from \"./box\"\n\nexport interface GridItemProps extends BoxProps {\n  /**\n   * Shorthand prop for `gridArea`\n   * @type SystemProps[\"gridArea\"]\n   */\n  area?: SystemProps[\"gridArea\"]\n  /**\n   * The number of columns the grid item should `span`.\n   * @type ResponsiveValue<number | \"auto\">\n   */\n  colSpan?: ResponsiveValue<number | \"auto\">\n  /**\n   * The column number the grid item should start.\n   * @type ResponsiveValue<number | \"auto\">\n   */\n  colStart?: ResponsiveValue<number | \"auto\">\n  /**\n   * @type ResponsiveValue<number | \"auto\">\n   */\n  colEnd?: ResponsiveValue<number | \"auto\">\n  /**\n   * @type ResponsiveValue<number | \"auto\">\n   */\n  rowStart?: ResponsiveValue<number | \"auto\">\n  /**\n   * @type ResponsiveValue<number | \"auto\">\n   */\n  rowEnd?: ResponsiveValue<number | \"auto\">\n  /**\n   * @type ResponsiveValue<number | \"auto\">\n   */\n  rowSpan?: ResponsiveValue<number | \"auto\">\n}\n\nfunction spanFn(span?: ResponsiveValue<number | \"auto\">) {\n  return mapResponsive(span, (value) =>\n    value === \"auto\" ? \"auto\" : `span ${value}/span ${value}`,\n  )\n}\n\nexport const GridItem = forwardRef<GridItemProps, \"div\">(function GridItem(\n  props,\n  ref,\n) {\n  const {\n    area,\n    colSpan,\n    colStart,\n    colEnd,\n    rowEnd,\n    rowSpan,\n    rowStart,\n    ...rest\n  } = props\n\n  const styles = compact({\n    gridArea: area,\n    gridColumn: spanFn(colSpan),\n    gridRow: spanFn(rowSpan),\n    gridColumnStart: colStart,\n    gridColumnEnd: colEnd,\n    gridRowStart: rowStart,\n    gridRowEnd: rowEnd,\n  })\n\n  return <chakra.div ref={ref} __css={styles} {...rest} />\n})\n\nGridItem.displayName = \"GridItem\"\n","import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\n\nexport interface HeadingProps\n  extends HTMLChakraProps<\"h2\">,\n    ThemingProps<\"Heading\"> {}\n\n/**\n * `Heading` is used to render semantic HTML heading elements.\n *\n * By default, renders as `h2` with themantic size `xl`\n *\n * @see Docs https://chakra-ui.com/docs/components/heading\n */\nexport const Heading = forwardRef<HeadingProps, \"h2\">(function Heading(\n  props,\n  ref,\n) {\n  const styles = useStyleConfig(\"Heading\", props)\n  const { className, ...rest } = omitThemingProps(props)\n\n  return (\n    <chakra.h2\n      ref={ref}\n      className={cx(\"chakra-heading\", props.className)}\n      {...rest}\n      __css={styles}\n    />\n  )\n})\n\nHeading.displayName = \"Heading\"\n","import {\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  SystemStyleObject,\n  ThemingProps,\n  useStyleConfig,\n} from \"@chakra-ui/system\"\nimport { Fragment, useMemo } from \"react\"\nimport { Box } from \"./box\"\n\ntype Chunk = {\n  text: string\n  match: boolean\n}\n\ntype HighlightOptions = {\n  text: string\n  query: string | string[]\n}\n\nconst escapeRegexp = (term: string): string =>\n  term.replace(/[|\\\\{}()[\\]^$+*?.-]/g, (char: string) => `\\\\${char}`)\n\nfunction buildRegex(query: string[]) {\n  const _query = query\n    .filter((text) => text.length !== 0)\n    .map((text) => escapeRegexp(text.trim()))\n  if (!_query.length) {\n    return null\n  }\n\n  return new RegExp(`(${_query.join(\"|\")})`, \"ig\")\n}\n\nfunction highlightWords({ text, query }: HighlightOptions): Chunk[] {\n  const regex = buildRegex(Array.isArray(query) ? query : [query])\n  if (!regex) {\n    return [{ text, match: false }]\n  }\n  const result = text.split(regex).filter(Boolean)\n  return result.map((str) => ({ text: str, match: regex.test(str) }))\n}\n\nexport type UseHighlightProps = HighlightOptions\n\nexport function useHighlight(props: UseHighlightProps) {\n  const { text, query } = props\n  return useMemo(() => highlightWords({ text, query }), [text, query])\n}\n\nexport type HighlightProps = {\n  query: string | string[]\n  children: string | ((props: Chunk[]) => React.ReactNode)\n  styles?: SystemStyleObject\n}\n\nexport type MarkProps = ThemingProps<\"Mark\"> & HTMLChakraProps<\"mark\">\n\nexport const Mark = forwardRef<MarkProps, \"mark\">(function Mark(props, ref) {\n  const styles = useStyleConfig(\"Mark\", props)\n  const ownProps = omitThemingProps(props)\n  return (\n    <Box\n      ref={ref}\n      {...ownProps}\n      as=\"mark\"\n      __css={{ bg: \"transparent\", whiteSpace: \"nowrap\", ...styles }}\n    />\n  )\n})\n\n/**\n * `Highlight` allows you to highlight substrings of a text.\n *\n * @see Docs https://chakra-ui.com/docs/components/highlight\n */\nexport function Highlight(props: HighlightProps): JSX.Element {\n  const { children, query, styles } = props\n\n  if (typeof children !== \"string\") {\n    throw new Error(\"The children prop of Highlight must be a string\")\n  }\n\n  const chunks = useHighlight({ query, text: children })\n\n  return (\n    <>\n      {chunks.map((chunk, index) => {\n        return chunk.match ? (\n          <Mark key={index} sx={styles}>\n            {chunk.text}\n          </Mark>\n        ) : (\n          <Fragment key={index}>{chunk.text}</Fragment>\n        )\n      })}\n    </>\n  )\n}\n","import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\n\nexport interface KbdProps extends HTMLChakraProps<\"kbd\">, ThemingProps<\"Kbd\"> {}\n\n/**\n * Semantic component to render a keyboard shortcut\n * within an application.\n *\n * @example\n *\n * ```jsx\n * <Kbd>⌘ + T</Kbd>\n * ```\n *\n * @see Docs https://chakra-ui.com/kbd\n */\nexport const Kbd = forwardRef<KbdProps, \"kbd\">(function Kbd(props, ref) {\n  const styles = useStyleConfig(\"Kbd\", props)\n  const { className, ...rest } = omitThemingProps(props)\n\n  return (\n    <chakra.kbd\n      ref={ref}\n      className={cx(\"chakra-kbd\", className)}\n      {...rest}\n      __css={{\n        fontFamily: \"mono\",\n        ...styles,\n      }}\n    />\n  )\n})\n\nKbd.displayName = \"Kbd\"\n","import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\n\nexport interface LinkProps extends HTMLChakraProps<\"a\">, ThemingProps<\"Link\"> {\n  /**\n   *  If `true`, the link will open in new tab\n   *\n   * @default false\n   */\n  isExternal?: boolean\n}\n\n/**\n * Links are accessible elements used primarily for navigation.\n *\n * It integrates well with other routing libraries like\n * React Router, Reach Router and Next.js Link.\n *\n * @example\n *\n * ```jsx\n * <Link as={ReactRouterLink} to=\"/home\">Home</Link>\n * ```\n *\n * @see Docs https://chakra-ui.com/link\n */\nexport const Link = forwardRef<LinkProps, \"a\">(function Link(props, ref) {\n  const styles = useStyleConfig(\"Link\", props)\n  const { className, isExternal, ...rest } = omitThemingProps(props)\n\n  return (\n    <chakra.a\n      target={isExternal ? \"_blank\" : undefined}\n      rel={isExternal ? \"noopener\" : undefined}\n      ref={ref}\n      className={cx(\"chakra-link\", className)}\n      {...rest}\n      __css={styles}\n    />\n  )\n})\n\nLink.displayName = \"Link\"\n","import { chakra, forwardRef, HTMLChakraProps } from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\n\nexport interface LinkOverlayProps extends HTMLChakraProps<\"a\"> {\n  /**\n   *  If `true`, the link will open in new tab\n   *\n   * @default false\n   */\n  isExternal?: boolean\n}\n\nexport const LinkOverlay = forwardRef<LinkOverlayProps, \"a\">(\n  function LinkOverlay(props, ref) {\n    const { isExternal, target, rel, className, ...rest } = props\n    return (\n      <chakra.a\n        {...rest}\n        ref={ref}\n        className={cx(\"chakra-linkbox__overlay\", className)}\n        rel={isExternal ? \"noopener noreferrer\" : rel}\n        target={isExternal ? \"_blank\" : target}\n        __css={{\n          position: \"static\",\n          \"&::before\": {\n            content: \"''\",\n            cursor: \"inherit\",\n            display: \"block\",\n            position: \"absolute\",\n            top: 0,\n            left: 0,\n            zIndex: 0,\n            width: \"100%\",\n            height: \"100%\",\n          },\n        }}\n      />\n    )\n  },\n)\n\nexport interface LinkBoxProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * `LinkBox` is used to wrap content areas within a link while ensuring semantic html\n *\n * @see Docs https://chakra-ui.com/docs/navigation/link-overlay\n * @see Resources https://www.sarasoueidan.com/blog/nested-links\n */\nexport const LinkBox = forwardRef<LinkBoxProps, \"div\">(function LinkBox(\n  props,\n  ref,\n) {\n  const { className, ...rest } = props\n\n  return (\n    <chakra.div\n      ref={ref}\n      position=\"relative\"\n      {...rest}\n      className={cx(\"chakra-linkbox\", className)}\n      __css={{\n        /* Elevate the links and abbreviations up */\n        \"a[href]:not(.chakra-linkbox__overlay), abbr[title]\": {\n          position: \"relative\",\n          zIndex: 1,\n        },\n      }}\n    />\n  )\n})\n","import { Icon, IconProps } from \"@chakra-ui/icon\"\nimport { createContext } from \"@chakra-ui/react-context\"\nimport { getValidChildren } from \"@chakra-ui/react-children-utils\"\nimport type {\n  HTMLChakraProps,\n  SystemProps,\n  ThemingProps,\n} from \"@chakra-ui/system\"\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  SystemStyleObject,\n  useMultiStyleConfig,\n} from \"@chakra-ui/system\"\n\nconst [ListStylesProvider, useListStyles] = createContext<\n  Record<string, SystemStyleObject>\n>({\n  name: `ListStylesContext`,\n  errorMessage: `useListStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<List />\" `,\n})\n\nexport { useListStyles }\n\ninterface ListOptions {\n  /**\n   * Shorthand prop for `listStyleType`\n   * @type SystemProps[\"listStyleType\"]\n   */\n  styleType?: SystemProps[\"listStyleType\"]\n  /**\n   * Shorthand prop for `listStylePosition`\n   * @type SystemProps[\"listStylePosition\"]\n   */\n  stylePosition?: SystemProps[\"listStylePosition\"]\n  /**\n   * The space between each list item\n   * @type SystemProps[\"margin\"]\n   */\n  spacing?: SystemProps[\"margin\"]\n}\n\nexport interface ListProps\n  extends HTMLChakraProps<\"ul\">,\n    ThemingProps<\"List\">,\n    ListOptions {}\n\n/**\n * List is used to display list items, it renders a `<ul>` by default.\n *\n * @see Docs https://chakra-ui.com/list\n */\nexport const List = forwardRef<ListProps, \"ul\">(function List(props, ref) {\n  const styles = useMultiStyleConfig(\"List\", props)\n  const {\n    children,\n    styleType = \"none\",\n    stylePosition,\n    spacing,\n    ...rest\n  } = omitThemingProps(props)\n\n  const validChildren = getValidChildren(children)\n\n  const selector = \"& > *:not(style) ~ *:not(style)\"\n\n  const spacingStyle = spacing ? { [selector]: { mt: spacing } } : {}\n\n  return (\n    <ListStylesProvider value={styles}>\n      <chakra.ul\n        ref={ref}\n        listStyleType={styleType}\n        listStylePosition={stylePosition}\n        /**\n         * We added this role to fix the Safari accessibility issue with list-style-type: none\n         * @see https://www.scottohara.me/blog/2019/01/12/lists-and-safari.html\n         */\n        role=\"list\"\n        __css={{ ...styles.container, ...spacingStyle }}\n        {...rest}\n      >\n        {validChildren}\n      </chakra.ul>\n    </ListStylesProvider>\n  )\n})\n\nList.displayName = \"List\"\n\nexport const OrderedList = forwardRef<ListProps, \"ol\">((props, ref) => {\n  const { as, ...rest } = props\n  return (\n    <List ref={ref} as=\"ol\" styleType=\"decimal\" marginStart=\"1em\" {...rest} />\n  )\n})\n\nOrderedList.displayName = \"OrderedList\"\n\nexport const UnorderedList = forwardRef<ListProps, \"ul\">(function UnorderedList(\n  props,\n  ref,\n) {\n  const { as, ...rest } = props\n  return (\n    <List ref={ref} as=\"ul\" styleType=\"initial\" marginStart=\"1em\" {...rest} />\n  )\n})\n\nUnorderedList.displayName = \"UnorderedList\"\n\nexport interface ListItemProps extends HTMLChakraProps<\"li\"> {}\n\n/**\n * ListItem\n *\n * Used to render a list item\n */\nexport const ListItem = forwardRef<ListItemProps, \"li\">(function ListItem(\n  props,\n  ref,\n) {\n  const styles = useListStyles()\n\n  return <chakra.li ref={ref} {...props} __css={styles.item} />\n})\n\nListItem.displayName = \"ListItem\"\n\n/**\n * ListIcon\n *\n * Used to render an icon beside the list item text\n */\nexport const ListIcon = forwardRef<IconProps, \"svg\">(function ListIcon(\n  props,\n  ref,\n) {\n  const styles = useListStyles()\n\n  return <Icon ref={ref} role=\"presentation\" {...props} __css={styles.icon} />\n})\n\nListIcon.displayName = \"ListIcon\"\n","import {\n  forwardRef,\n  getToken,\n  ResponsiveValue,\n  useTheme,\n} from \"@chakra-ui/system\"\nimport { mapResponsive } from \"@chakra-ui/breakpoint-utils\"\nimport { Grid, GridProps } from \"./grid\"\n\ninterface SimpleGridOptions {\n  /**\n   * The width at which child elements will break into columns. Pass a number for pixel values or a string for any other valid CSS length.\n   */\n  minChildWidth?: GridProps[\"minWidth\"]\n  /**\n   * The number of columns\n   */\n  columns?: ResponsiveValue<number>\n  /**\n   * The gap between the grid items\n   */\n  spacing?: GridProps[\"gridGap\"]\n  /**\n   * The column gap between the grid items\n   */\n  spacingX?: GridProps[\"gridGap\"]\n  /**\n   * The row gap between the grid items\n   */\n  spacingY?: GridProps[\"gridGap\"]\n}\n\nexport interface SimpleGridProps extends GridProps, SimpleGridOptions {}\n\n/**\n * SimpleGrid\n *\n * React component that uses the `Grid` component and provides\n * a simpler interface to create responsive grid layouts.\n *\n * Provides props that easily define columns and spacing.\n *\n * @see Docs https://chakra-ui.com/simplegrid\n */\nexport const SimpleGrid = forwardRef<SimpleGridProps, \"div\">(\n  function SimpleGrid(props, ref) {\n    const { columns, spacingX, spacingY, spacing, minChildWidth, ...rest } =\n      props\n\n    const theme = useTheme()\n    const templateColumns = minChildWidth\n      ? widthToColumns(minChildWidth, theme)\n      : countToColumns(columns)\n\n    return (\n      <Grid\n        ref={ref}\n        gap={spacing}\n        columnGap={spacingX}\n        rowGap={spacingY}\n        templateColumns={templateColumns}\n        {...rest}\n      />\n    )\n  },\n)\n\nSimpleGrid.displayName = \"SimpleGrid\"\n\nfunction toPx(n: string | number) {\n  return typeof n === \"number\" ? `${n}px` : n\n}\n\nfunction widthToColumns(width: any, theme: Record<string, any>) {\n  return mapResponsive(width, (value) => {\n    const _value = getToken(\"sizes\", value, toPx(value))(theme)\n    return value === null ? null : `repeat(auto-fit, minmax(${_value}, 1fr))`\n  })\n}\n\nfunction countToColumns(count: any) {\n  return mapResponsive(count, (value) =>\n    value === null ? null : `repeat(${value}, minmax(0, 1fr))`,\n  )\n}\n","import { chakra, HTMLChakraProps } from \"@chakra-ui/system\"\n\nexport interface SpacerProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * A flexible flex spacer that expands along the major axis of its containing flex layout.\n * It renders a `div` by default, and takes up any available space.\n *\n * @see Docs https://chakra-ui.com/flex#using-the-spacer\n */\nexport const Spacer = chakra(\"div\", {\n  baseStyle: {\n    flex: 1,\n    justifySelf: \"stretch\",\n    alignSelf: \"stretch\",\n  },\n})\n\nSpacer.displayName = \"Spacer\"\n","import { forwardRef } from \"@chakra-ui/system\"\n\nimport { Stack, StackProps } from \"./stack\"\n\n/**\n * A view that arranges its children in a horizontal line.\n *\n * @see Docs https://chakra-ui.com/docs/components/stack\n */\nexport const HStack = forwardRef<StackProps, \"div\">((props, ref) => (\n  <Stack align=\"center\" {...props} direction=\"row\" ref={ref} />\n))\n\nHStack.displayName = \"HStack\"\n","import { getValidChildren } from \"@chakra-ui/react-children-utils\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  SystemProps,\n} from \"@chakra-ui/system\"\nimport { cloneElement, Fragment, useMemo } from \"react\"\n\nimport { StackItem } from \"./stack-item\"\nimport type { StackDirection } from \"./stack.utils\"\nimport { getDividerStyles } from \"./stack.utils\"\n\nexport type { StackDirection }\n\ninterface StackOptions {\n  /**\n   * Shorthand for `alignItems` style prop\n   * @type SystemProps[\"alignItems\"]\n   */\n  align?: SystemProps[\"alignItems\"]\n  /**\n   * Shorthand for `justifyContent` style prop\n   * @type SystemProps[\"justifyContent\"]\n   */\n  justify?: SystemProps[\"justifyContent\"]\n  /**\n   * Shorthand for `flexWrap` style prop\n   * @type SystemProps[\"flexWrap\"]\n   */\n  wrap?: SystemProps[\"flexWrap\"]\n  /**\n   * The space between each stack item\n   * @type SystemProps[\"margin\"]\n   * @default \"0.5rem\"\n   */\n  spacing?: SystemProps[\"margin\"]\n  /**\n   * The direction to stack the items.\n   * @default \"column\"\n   */\n  direction?: StackDirection\n  /**\n   * If `true`, each stack item will show a divider\n   * @type React.ReactElement\n   */\n  divider?: React.ReactElement\n  /**\n   * If `true`, the children will be wrapped in a `Box` with\n   * `display: inline-block`, and the `Box` will take the spacing props\n   *\n   * @default false\n   */\n  shouldWrapChildren?: boolean\n  /**\n   * If `true` the items will be stacked horizontally.\n   *\n   * @default false\n   *\n   * @deprecated - Use `direction=\"row\"` or `HStack` instead\n   */\n  isInline?: boolean\n}\n\nexport interface StackProps extends HTMLChakraProps<\"div\">, StackOptions {}\n\n/**\n * Stacks help you easily create flexible and automatically distributed layouts\n *\n * You can stack elements in the horizontal or vertical direction,\n * and apply a space or/and divider between each element.\n *\n * It uses `display: flex` internally and renders a `div`.\n *\n * @see Docs https://chakra-ui.com/stack\n *\n */\nexport const Stack = forwardRef<StackProps, \"div\">((props, ref) => {\n  const {\n    isInline,\n    direction: directionProp,\n    align,\n    justify,\n    spacing = \"0.5rem\",\n    wrap,\n    children,\n    divider,\n    className,\n    shouldWrapChildren,\n    ...rest\n  } = props\n\n  const direction = isInline ? \"row\" : directionProp ?? \"column\"\n\n  const dividerStyle = useMemo(\n    () => getDividerStyles({ spacing, direction }),\n    [spacing, direction],\n  )\n\n  const hasDivider = !!divider\n  const shouldUseChildren = !shouldWrapChildren && !hasDivider\n\n  const clones = useMemo(() => {\n    const validChildren = getValidChildren(children)\n    return shouldUseChildren\n      ? validChildren\n      : validChildren.map((child, index) => {\n          // Prefer provided child key, fallback to index\n          const key = typeof child.key !== \"undefined\" ? child.key : index\n          const isLast = index + 1 === validChildren.length\n          const wrappedChild = <StackItem key={key}>{child}</StackItem>\n          const _child = shouldWrapChildren ? wrappedChild : child\n\n          if (!hasDivider) return _child\n\n          const clonedDivider = cloneElement(\n            divider as React.ReactElement<any>,\n            {\n              __css: dividerStyle,\n            },\n          )\n\n          const _divider = isLast ? null : clonedDivider\n\n          return (\n            <Fragment key={key}>\n              {_child}\n              {_divider}\n            </Fragment>\n          )\n        })\n  }, [\n    divider,\n    dividerStyle,\n    hasDivider,\n    shouldUseChildren,\n    shouldWrapChildren,\n    children,\n  ])\n\n  const _className = cx(\"chakra-stack\", className)\n\n  return (\n    <chakra.div\n      ref={ref}\n      display=\"flex\"\n      alignItems={align}\n      justifyContent={justify}\n      flexDirection={direction}\n      flexWrap={wrap}\n      gap={hasDivider ? undefined : spacing}\n      className={_className}\n      {...rest}\n    >\n      {clones}\n    </chakra.div>\n  )\n})\n\nStack.displayName = \"Stack\"\n","import { ChakraComponent, chakra } from \"@chakra-ui/system\"\n\nexport const StackItem: ChakraComponent<\"div\"> = (props) => (\n  <chakra.div\n    className=\"chakra-stack__item\"\n    {...props}\n    __css={{\n      display: \"inline-block\",\n      flex: \"0 0 auto\",\n      minWidth: 0,\n      ...props[\"__css\"],\n    }}\n  />\n)\n\nStackItem.displayName = \"StackItem\"\n","import { ResponsiveValue, SystemProps } from \"@chakra-ui/system\"\nimport { mapResponsive } from \"@chakra-ui/breakpoint-utils\"\n\nexport type StackDirection = ResponsiveValue<\n  \"row\" | \"column\" | \"row-reverse\" | \"column-reverse\"\n>\n\ninterface Options {\n  spacing: SystemProps[\"margin\"]\n  direction: StackDirection\n}\n\nexport function getDividerStyles(options: Options) {\n  const { spacing, direction } = options\n\n  const dividerStyles = {\n    column: {\n      my: spacing,\n      mx: 0,\n      borderLeftWidth: 0,\n      borderBottomWidth: \"1px\",\n    },\n    \"column-reverse\": {\n      my: spacing,\n      mx: 0,\n      borderLeftWidth: 0,\n      borderBottomWidth: \"1px\",\n    },\n    row: {\n      mx: spacing,\n      my: 0,\n      borderLeftWidth: \"1px\",\n      borderBottomWidth: 0,\n    },\n    \"row-reverse\": {\n      mx: spacing,\n      my: 0,\n      borderLeftWidth: \"1px\",\n      borderBottomWidth: 0,\n    },\n  }\n\n  return {\n    \"&\": mapResponsive(\n      direction,\n      (value: keyof typeof dividerStyles) => dividerStyles[value],\n    ),\n  }\n}\n","import { HTMLChakraProps, ChakraComponent, chakra } from \"@chakra-ui/system\"\n\nexport interface StackDividerProps extends HTMLChakraProps<\"div\"> {}\n\nexport const StackDivider: ChakraComponent<\"div\"> = (props) => (\n  <chakra.div\n    className=\"chakra-stack__divider\"\n    {...props}\n    __css={{\n      ...props[\"__css\"],\n      borderWidth: 0,\n      alignSelf: \"stretch\",\n      borderColor: \"inherit\",\n      width: \"auto\",\n      height: \"auto\",\n    }}\n  />\n)\n\nStackDivider.displayName = \"StackDivider\"\n","import { forwardRef } from \"@chakra-ui/system\"\n\nimport { Stack, StackProps } from \"./stack\"\n\n/**\n * A view that arranges its children in a vertical line.\n *\n * @see Docs https://chakra-ui.com/docs/components/stack\n */\nexport const VStack = forwardRef<StackProps, \"div\">((props, ref) => (\n  <Stack align=\"center\" {...props} direction=\"column\" ref={ref} />\n))\n\nVStack.displayName = \"VStack\"\n","import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  SystemProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { compact } from \"@chakra-ui/object-utils\"\n\nexport interface TextProps extends HTMLChakraProps<\"p\">, ThemingProps<\"Text\"> {\n  /**\n   * The CSS `text-align` property\n   * @type SystemProps[\"textAlign\"]\n   */\n  align?: SystemProps[\"textAlign\"]\n  /**\n   * The CSS `text-decoration` property\n   * @type SystemProps[\"textDecoration\"]\n   */\n  decoration?: SystemProps[\"textDecoration\"]\n  /**\n   * The CSS `text-transform` property\n   * @type SystemProps[\"textTransform\"]\n   */\n  casing?: SystemProps[\"textTransform\"]\n}\n\n/**\n * Used to render texts or paragraphs.\n *\n * @see Docs https://chakra-ui.com/text\n */\nexport const Text = forwardRef<TextProps, \"p\">(function Text(props, ref) {\n  const styles = useStyleConfig(\"Text\", props)\n  const { className, align, decoration, casing, ...rest } =\n    omitThemingProps(props)\n\n  const aliasedProps = compact({\n    textAlign: props.align,\n    textDecoration: props.decoration,\n    textTransform: props.casing,\n  })\n\n  return (\n    <chakra.p\n      ref={ref}\n      className={cx(\"chakra-text\", props.className)}\n      {...aliasedProps}\n      {...rest}\n      __css={styles}\n    />\n  )\n})\n\nText.displayName = \"Text\"\n","import { cx } from \"@chakra-ui/shared-utils\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  SystemProps,\n} from \"@chakra-ui/system\"\nimport { Children, useMemo } from \"react\"\n\nexport interface WrapProps extends HTMLChakraProps<\"div\"> {\n  /**\n   * The space between each child (even if it wraps)\n   * @type SystemProps[\"margin\"]\n   */\n  spacing?: SystemProps[\"margin\"]\n  /**\n   * The horizontal space between the each child (even if it wraps). Defaults to `spacing` if not defined.\n   * @type SystemProps[\"margin\"]\n   */\n  spacingX?: SystemProps[\"margin\"]\n  /**\n   * The vertical space between the each child (even if it wraps). Defaults to `spacing` if not defined.\n   * @type SystemProps[\"margin\"]\n   */\n  spacingY?: SystemProps[\"margin\"]\n  /**\n   * The `justify-content` value (for cross-axis alignment)\n   * @type SystemProps[\"justifyContent\"]\n   */\n  justify?: SystemProps[\"justifyContent\"]\n  /**\n   * The `align-items` value (for main axis alignment)\n   * @type SystemProps[\"alignItems\"]\n   */\n  align?: SystemProps[\"alignItems\"]\n  /**\n   * The `flex-direction` value\n   * @type SystemProps[\"flexDirection\"]\n   */\n  direction?: SystemProps[\"flexDirection\"]\n  /**\n   * If `true`, the children will be wrapped in a `WrapItem`\n   * @default false\n   */\n  shouldWrapChildren?: boolean\n}\n\n/**\n * Layout component used to stack elements that differ in length\n * and are liable to wrap.\n *\n * Common use cases:\n * - Buttons that appear together at the end of forms\n * - Lists of tags and chips\n *\n * @see Docs https://chakra-ui.com/wrap\n */\nexport const Wrap = forwardRef<WrapProps, \"div\">(function Wrap(props, ref) {\n  const {\n    spacing = \"0.5rem\",\n    spacingX,\n    spacingY,\n    children,\n    justify,\n    direction,\n    align,\n    className,\n    shouldWrapChildren,\n    ...rest\n  } = props\n\n  const _children = useMemo(\n    () =>\n      shouldWrapChildren\n        ? Children.map(children, (child, index) => (\n            <WrapItem key={index}>{child}</WrapItem>\n          ))\n        : children,\n    [children, shouldWrapChildren],\n  )\n\n  return (\n    <chakra.div ref={ref} className={cx(\"chakra-wrap\", className)} {...rest}>\n      <chakra.ul\n        className=\"chakra-wrap__list\"\n        __css={{\n          display: \"flex\",\n          flexWrap: \"wrap\",\n          justifyContent: justify,\n          alignItems: align,\n          flexDirection: direction,\n          listStyleType: \"none\",\n          gap: spacing,\n          columnGap: spacingX,\n          rowGap: spacingY,\n          padding: \"0\",\n        }}\n      >\n        {_children}\n      </chakra.ul>\n    </chakra.div>\n  )\n})\n\nWrap.displayName = \"Wrap\"\n\nexport interface WrapItemProps extends HTMLChakraProps<\"li\"> {}\n\nexport const WrapItem = forwardRef<WrapItemProps, \"li\">(function WrapItem(\n  props,\n  ref,\n) {\n  const { className, ...rest } = props\n  return (\n    <chakra.li\n      ref={ref}\n      __css={{ display: \"flex\", alignItems: \"flex-start\" }}\n      className={cx(\"chakra-wrap__listitem\", className)}\n      {...rest}\n    />\n  )\n})\n\nWrapItem.displayName = \"WrapItem\"\n","import { mapResponsive } from \"@chakra-ui/breakpoint-utils\"\nimport {\n  HTMLChakraProps,\n  ResponsiveValue,\n  SystemStyleObject,\n  chakra,\n  forwardRef,\n} from \"@chakra-ui/system\"\nimport { useMemo } from \"react\"\n\ntype Dict = Record<string, any>\n\nexport interface IndicatorOptions {\n  /**\n   * The x offset of the indicator\n   */\n  offsetX?: SystemStyleObject[\"left\"]\n  /**\n   * The y offset of the indicator\n   */\n  offsetY?: SystemStyleObject[\"top\"]\n  /**\n   * The x and y offset of the indicator\n   */\n  offset?: SystemStyleObject[\"top\"]\n  /**\n   * The placement of the indicator\n   * @default \"top-end\"\n   */\n  placement?: ResponsiveValue<\n    | \"bottom-end\"\n    | \"bottom-start\"\n    | \"top-end\"\n    | \"top-start\"\n    | \"bottom-center\"\n    | \"top-center\"\n    | \"middle-center\"\n    | \"middle-end\"\n    | \"middle-start\"\n  >\n}\n\nexport interface IndicatorProps\n  extends Omit<HTMLChakraProps<\"div\">, keyof IndicatorOptions>,\n    IndicatorOptions {}\n\nexport const Indicator = forwardRef<IndicatorProps, \"div\">(function Indicator(\n  props,\n  ref,\n) {\n  const {\n    offsetX,\n    offsetY,\n    offset = \"0\",\n    placement = \"top-end\",\n    ...rest\n  } = props\n\n  const styles: SystemStyleObject = useMemo(\n    () => ({\n      display: \"inline-flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      position: \"absolute\",\n      insetBlockStart: mapResponsive(placement, (v) => {\n        const [side] = v.split(\"-\")\n        const map: Dict = {\n          top: offsetY ?? offset,\n          middle: \"50%\",\n          bottom: \"auto\",\n        }\n        return map[side]\n      }),\n      insetBlockEnd: mapResponsive(placement, (v) => {\n        const [side] = v.split(\"-\")\n        const map: Dict = {\n          top: \"auto\",\n          middle: \"50%\",\n          bottom: offsetY ?? offset,\n        }\n        return map[side]\n      }),\n      insetStart: mapResponsive(placement, (v) => {\n        const [, align] = v.split(\"-\")\n        const map: Dict = {\n          start: offsetX ?? offset,\n          center: \"50%\",\n          end: \"auto\",\n        }\n        return map[align]\n      }),\n      insetEnd: mapResponsive(placement, (v) => {\n        const [, align] = v.split(\"-\")\n        const map: Dict = {\n          start: \"auto\",\n          center: \"50%\",\n          end: offsetX ?? offset,\n        }\n        return map[align]\n      }),\n      translate: mapResponsive(placement, (v) => {\n        const [side, align] = v.split(\"-\")\n        const mapX: Dict = { start: \"-50%\", center: \"-50%\", end: \"50%\" }\n        const mapY: Dict = { top: \"-50%\", middle: \"-50%\", bottom: \"50%\" }\n        return `${mapX[align]} ${mapY[side]}`\n      }),\n    }),\n    [offset, offsetX, offsetY, placement],\n  )\n\n  return <chakra.div ref={ref} __css={styles} {...rest} />\n})\n"],"mappings":"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","names":["import_system","import_shared_utils","import_jsx_runtime","Badge","import_system","import_jsx_runtime","Square","Circle","import_system","import_jsx_runtime","AbsoluteCenter","import_system","import_shared_utils","import_jsx_runtime","Code","import_system","import_shared_utils","import_jsx_runtime","Container","import_system","import_shared_utils","import_jsx_runtime","Divider","import_system","import_jsx_runtime","Flex","import_system","import_jsx_runtime","Grid","import_system","import_breakpoint_utils","import_jsx_runtime","GridItem","import_system","import_shared_utils","import_jsx_runtime","Heading","import_system","import_react","import_jsx_runtime","Mark","import_system","import_shared_utils","import_jsx_runtime","Kbd","import_system","import_shared_utils","import_jsx_runtime","Link","import_system","import_shared_utils","import_jsx_runtime","LinkOverlay","LinkBox","import_system","import_jsx_runtime","List","UnorderedList","ListItem","ListIcon","import_system","import_breakpoint_utils","import_jsx_runtime","SimpleGrid","import_system","import_system","import_react_children_utils","import_shared_utils","import_system","import_react","import_system","import_jsx_runtime","import_breakpoint_utils","import_jsx_runtime","import_jsx_runtime","import_system","import_jsx_runtime","import_system","import_jsx_runtime","import_system","import_shared_utils","import_object_utils","import_jsx_runtime","Text","import_shared_utils","import_system","import_react","import_jsx_runtime","Wrap","WrapItem","import_breakpoint_utils","import_system","import_react","import_jsx_runtime","Indicator"]}