{"version":3,"sources":["../src/text.tsx"],"sourcesContent":["import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  SystemProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { compact } from \"@chakra-ui/object-utils\"\n\nexport interface TextProps extends HTMLChakraProps<\"p\">, ThemingProps<\"Text\"> {\n  /**\n   * The CSS `text-align` property\n   * @type SystemProps[\"textAlign\"]\n   */\n  align?: SystemProps[\"textAlign\"]\n  /**\n   * The CSS `text-decoration` property\n   * @type SystemProps[\"textDecoration\"]\n   */\n  decoration?: SystemProps[\"textDecoration\"]\n  /**\n   * The CSS `text-transform` property\n   * @type SystemProps[\"textTransform\"]\n   */\n  casing?: SystemProps[\"textTransform\"]\n}\n\n/**\n * Used to render texts or paragraphs.\n *\n * @see Docs https://chakra-ui.com/text\n */\nexport const Text = forwardRef<TextProps, \"p\">(function Text(props, ref) {\n  const styles = useStyleConfig(\"Text\", props)\n  const { className, align, decoration, casing, ...rest } =\n    omitThemingProps(props)\n\n  const aliasedProps = compact({\n    textAlign: props.align,\n    textDecoration: props.decoration,\n    textTransform: props.casing,\n  })\n\n  return (\n    <chakra.p\n      ref={ref}\n      className={cx(\"chakra-text\", props.className)}\n      {...aliasedProps}\n      {...rest}\n      __css={styles}\n    />\n  )\n})\n\nText.displayName = \"Text\"\n"],"mappings":";;;AAAA;AAAA,EACE;AAAA,EACA;AAAA,EACA;AAAA,EAGA;AAAA,OAEK;AACP,SAAS,UAAU;AACnB,SAAS,eAAe;AAqCpB;AAZG,IAAM,OAAO,WAA2B,SAASA,MAAK,OAAO,KAAK;AACvE,QAAM,SAAS,eAAe,QAAQ,KAAK;AAC3C,QAAM,EAAE,WAAW,OAAO,YAAY,QAAQ,GAAG,KAAK,IACpD,iBAAiB,KAAK;AAExB,QAAM,eAAe,QAAQ;AAAA,IAC3B,WAAW,MAAM;AAAA,IACjB,gBAAgB,MAAM;AAAA,IACtB,eAAe,MAAM;AAAA,EACvB,CAAC;AAED,SACE;AAAA,IAAC,OAAO;AAAA,IAAP;AAAA,MACC;AAAA,MACA,WAAW,GAAG,eAAe,MAAM,SAAS;AAAA,MAC3C,GAAG;AAAA,MACH,GAAG;AAAA,MACJ,OAAO;AAAA;AAAA,EACT;AAEJ,CAAC;AAED,KAAK,cAAc;","names":["Text"]}