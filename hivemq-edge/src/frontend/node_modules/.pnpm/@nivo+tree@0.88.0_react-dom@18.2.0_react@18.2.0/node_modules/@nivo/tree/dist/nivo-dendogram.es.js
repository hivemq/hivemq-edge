import { useMemo, useCallback, createElement, useState, memo, Fragment as Fragment$1 } from 'react';
import { usePropertyAccessor, useTheme, useMotionConfig, Container, useDimensions, SvgWrapper, ResponsiveWrapper } from '@nivo/core';
import { animated, to, useTransition } from '@react-spring/web';
import { hierarchy, tree, cluster } from 'd3-hierarchy';
import { scaleLinear } from 'd3-scale';
import { link, curveBumpY, curveBumpX } from 'd3-shape';
import { useTooltip } from '@nivo/tooltip';
import { useOrdinalColorScale, useInheritedColor } from '@nivo/colors';
import { jsxDEV, Fragment } from 'react/jsx-dev-runtime';
import { Mesh as Mesh$1 } from '@nivo/voronoi';

function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}

var useRoot = function useRoot(_ref) {
  var data = _ref.data,
    mode = _ref.mode,
    getIdentity = _ref.getIdentity;
  return useMemo(function () {
    var root = hierarchy(data);
    var cluster$1 = mode === 'tree' ? tree() : cluster();
    root.eachBefore(function (node) {
      var ancestors = node.ancestors().filter(function (ancestor) {
        return ancestor !== node;
      }).reverse();
      var ancestorIds = ancestors.map(function (ancestor) {
        return getIdentity(ancestor.data);
      });
      node.ancestorIds = ancestorIds;
      node.uid = [].concat(ancestorIds, [getIdentity(node.data)]).join('.');
      node.ancestorUids = ancestors.map(function (ancestor) {
        return ancestor.uid;
      });
    });
    root.each(function (node) {
      node.descendantUids = node.descendants().filter(function (descendant) {
        return descendant !== node;
      }).map(function (descendant) {
        return descendant.uid;
      });
    });
    cluster$1(root);
    return root;
  }, [data, mode, getIdentity]);
};
var useCartesianScales = function useCartesianScales(_ref2) {
  var width = _ref2.width,
    height = _ref2.height,
    layout = _ref2.layout;
  return useMemo(function () {
    var xScale = scaleLinear().domain([0, 1]);
    var yScale = scaleLinear().domain([0, 1]);
    if (layout === 'top-to-bottom') {
      xScale.range([0, width]);
      yScale.range([0, height]);
    } else if (layout === 'right-to-left') {
      xScale.range([width, 0]);
      yScale.range([0, height]);
    } else if (layout === 'bottom-to-top') {
      xScale.range([width, 0]);
      yScale.range([height, 0]);
    } else if (layout === 'left-to-right') {
      xScale.range([0, width]);
      yScale.range([height, 0]);
    }
    return {
      xScale: xScale,
      yScale: yScale
    };
  }, [width, height, layout]);
};
var useNodeSize = function useNodeSize(size) {
  return useMemo(function () {
    if (typeof size === 'function') return size;
    return function () {
      return size;
    };
  }, [size]);
};
var useNodeSizeModifier = function useNodeSizeModifier(size) {
  return useMemo(function () {
    if (size === undefined) return function (node) {
      return node.size;
    };
    if (typeof size === 'function') return size;
    return function () {
      return size;
    };
  }, [size]);
};
var useNodes = function useNodes(_ref3) {
  var root = _ref3.root,
    xScale = _ref3.xScale,
    yScale = _ref3.yScale,
    layout = _ref3.layout,
    getIdentity = _ref3.getIdentity,
    nodeSize = _ref3.nodeSize,
    activeNodeSize = _ref3.activeNodeSize,
    inactiveNodeSize = _ref3.inactiveNodeSize,
    nodeColor = _ref3.nodeColor;
  var intermediateNodes = useMemo(function () {
    return root.descendants().map(function (node) {
      var x;
      var y;
      if (layout === 'top-to-bottom' || layout === 'bottom-to-top') {
        x = xScale(node.x);
        y = yScale(node.y);
      } else {
        x = xScale(node.y);
        y = yScale(node.x);
      }
      var id = getIdentity(node.data);
      return {
        path: [].concat(node.ancestorIds, [id]),
        uid: node.uid,
        ancestorIds: node.ancestorIds,
        ancestorUids: node.ancestorUids,
        descendantUids: node.descendantUids,
        id: id,
        data: node.data,
        depth: node.depth,
        height: node.height,
        x: x,
        y: y
      };
    });
  }, [root, getIdentity, layout, xScale, yScale]);
  var getNodeSize = useNodeSize(nodeSize);
  var getActiveNodeSize = useNodeSizeModifier(activeNodeSize);
  var getInactiveNodeSize = useNodeSizeModifier(inactiveNodeSize);
  var getNodeColor = useOrdinalColorScale(nodeColor, 'uid');
  var _useState = useState([]),
    activeNodeUids = _useState[0],
    setActiveNodeUids = _useState[1];
  var computed = useMemo(function () {
    var nodeByUid = {};
    var nodes = intermediateNodes.map(function (intermediateNode) {
      var computedNode = _extends({}, intermediateNode, {
        size: getNodeSize(intermediateNode),
        color: getNodeColor(intermediateNode),
        isActive: null
      });
      if (activeNodeUids.length > 0) {
        computedNode.isActive = activeNodeUids.includes(computedNode.uid);
        if (computedNode.isActive) {
          computedNode.size = getActiveNodeSize(computedNode);
        } else {
          computedNode.size = getInactiveNodeSize(computedNode);
        }
      }
      nodeByUid[computedNode.uid] = computedNode;
      return computedNode;
    });
    return {
      nodes: nodes,
      nodeByUid: nodeByUid
    };
  }, [intermediateNodes, getNodeSize, getActiveNodeSize, getInactiveNodeSize, getNodeColor, activeNodeUids]);
  return _extends({}, computed, {
    setActiveNodeUids: setActiveNodeUids
  });
};
var useLinkThicknessModifier = function useLinkThicknessModifier(thickness) {
  return useMemo(function () {
    if (thickness === undefined) return function (link) {
      return link.thickness;
    };
    if (typeof thickness === 'function') return thickness;
    return function () {
      return thickness;
    };
  }, [thickness]);
};
var useLinks = function useLinks(_ref4) {
  var root = _ref4.root,
    nodeByUid = _ref4.nodeByUid,
    linkThickness = _ref4.linkThickness,
    activeLinkThickness = _ref4.activeLinkThickness,
    inactiveLinkThickness = _ref4.inactiveLinkThickness,
    linkColor = _ref4.linkColor;
  var intermediateLinks = useMemo(function () {
    return root.links().map(function (link) {
      return {
        id: link.source.uid + ":" + link.target.uid,
        source: nodeByUid[link.source.uid],
        target: nodeByUid[link.target.uid]
      };
    });
  }, [root, nodeByUid]);
  var getLinkThickness = useMemo(function () {
    if (typeof linkThickness === 'function') return linkThickness;
    return function () {
      return linkThickness;
    };
  }, [linkThickness]);
  var getActiveLinkThickness = useLinkThicknessModifier(activeLinkThickness);
  var getInactiveLinkThickness = useLinkThicknessModifier(inactiveLinkThickness);
  var theme = useTheme();
  var getLinkColor = useInheritedColor(linkColor, theme);
  var _useState2 = useState([]),
    activeLinkIds = _useState2[0],
    setActiveLinkIds = _useState2[1];
  var links = useMemo(function () {
    return intermediateLinks.map(function (intermediateLink) {
      var computedLink = _extends({}, intermediateLink, {
        thickness: getLinkThickness(intermediateLink),
        color: getLinkColor(intermediateLink),
        isActive: null
      });
      if (activeLinkIds.length > 0) {
        computedLink.isActive = activeLinkIds.includes(computedLink.id);
        if (computedLink.isActive) {
          computedLink.thickness = getActiveLinkThickness(computedLink);
        } else {
          computedLink.thickness = getInactiveLinkThickness(computedLink);
        }
      }
      return computedLink;
    });
  }, [intermediateLinks, getLinkThickness, getActiveLinkThickness, getInactiveLinkThickness, getLinkColor, activeLinkIds]);
  return {
    links: links,
    setActiveLinkIds: setActiveLinkIds
  };
};
var useLinkGenerator = function useLinkGenerator(_ref5) {
  var layout = _ref5.layout;
  return useMemo(function () {
    if (layout === 'top-to-bottom' || layout === 'bottom-to-top') {
      return link(curveBumpY);
    } else {
      return link(curveBumpX);
    }
  }, [layout]);
};
var useSetCurrentNode = function useSetCurrentNode(_ref6) {
  var setActiveNodeUids = _ref6.setActiveNodeUids,
    highlightAncestorNodes = _ref6.highlightAncestorNodes,
    highlightDescendantNodes = _ref6.highlightDescendantNodes,
    links = _ref6.links,
    setActiveLinkIds = _ref6.setActiveLinkIds,
    highlightAncestorLinks = _ref6.highlightAncestorLinks,
    highlightDescendantLinks = _ref6.highlightDescendantLinks;
  return useCallback(function (node) {
    if (node === null) {
      setActiveNodeUids([]);
      setActiveLinkIds([]);
    } else {
      var nodeUids = [node.uid];
      if (highlightAncestorNodes) {
        nodeUids = [].concat(nodeUids, node.ancestorUids);
      }
      if (highlightDescendantNodes) {
        nodeUids = [].concat(nodeUids, node.descendantUids);
      }
      setActiveNodeUids(nodeUids);
      var linkIds = [];
      if (highlightAncestorLinks) {
        links.filter(function (link) {
          return link.target.uid === node.uid || node.ancestorUids.includes(link.target.uid);
        }).forEach(function (link) {
          linkIds.push(link.id);
        });
      }
      if (highlightDescendantLinks) {
        links.filter(function (link) {
          return link.source.uid === node.uid || node.descendantUids.includes(link.source.uid);
        }).forEach(function (link) {
          linkIds.push(link.id);
        });
      }
      setActiveLinkIds(linkIds);
    }
  }, [setActiveNodeUids, highlightAncestorNodes, highlightDescendantNodes, links, setActiveLinkIds, highlightAncestorLinks, highlightDescendantLinks]);
};
var useTree = function useTree(_ref7) {
  var data = _ref7.data,
    width = _ref7.width,
    height = _ref7.height,
    _ref7$identity = _ref7.identity,
    identity = _ref7$identity === void 0 ? commonDefaultProps.identity : _ref7$identity,
    _ref7$mode = _ref7.mode,
    mode = _ref7$mode === void 0 ? commonDefaultProps.mode : _ref7$mode,
    _ref7$layout = _ref7.layout,
    layout = _ref7$layout === void 0 ? commonDefaultProps.layout : _ref7$layout,
    _ref7$nodeSize = _ref7.nodeSize,
    nodeSize = _ref7$nodeSize === void 0 ? commonDefaultProps.nodeSize : _ref7$nodeSize,
    activeNodeSize = _ref7.activeNodeSize,
    inactiveNodeSize = _ref7.inactiveNodeSize,
    _ref7$nodeColor = _ref7.nodeColor,
    nodeColor = _ref7$nodeColor === void 0 ? commonDefaultProps.nodeColor : _ref7$nodeColor,
    _ref7$highlightAncest = _ref7.highlightAncestorNodes,
    highlightAncestorNodes = _ref7$highlightAncest === void 0 ? commonDefaultProps.highlightAncestorNodes : _ref7$highlightAncest,
    _ref7$highlightDescen = _ref7.highlightDescendantNodes,
    highlightDescendantNodes = _ref7$highlightDescen === void 0 ? commonDefaultProps.highlightDescendantNodes : _ref7$highlightDescen,
    _ref7$linkThickness = _ref7.linkThickness,
    linkThickness = _ref7$linkThickness === void 0 ? commonDefaultProps.linkThickness : _ref7$linkThickness,
    _ref7$linkColor = _ref7.linkColor,
    linkColor = _ref7$linkColor === void 0 ? commonDefaultProps.linkColor : _ref7$linkColor,
    activeLinkThickness = _ref7.activeLinkThickness,
    inactiveLinkThickness = _ref7.inactiveLinkThickness,
    _ref7$highlightAncest2 = _ref7.highlightAncestorLinks,
    highlightAncestorLinks = _ref7$highlightAncest2 === void 0 ? commonDefaultProps.highlightAncestorLinks : _ref7$highlightAncest2,
    _ref7$highlightDescen2 = _ref7.highlightDescendantLinks,
    highlightDescendantLinks = _ref7$highlightDescen2 === void 0 ? commonDefaultProps.highlightDescendantLinks : _ref7$highlightDescen2;
  var getIdentity = usePropertyAccessor(identity);
  var root = useRoot({
    data: data,
    mode: mode,
    getIdentity: getIdentity
  });
  var _useCartesianScales = useCartesianScales({
      width: width,
      height: height,
      layout: layout
    }),
    xScale = _useCartesianScales.xScale,
    yScale = _useCartesianScales.yScale;
  var _useNodes = useNodes({
      root: root,
      xScale: xScale,
      yScale: yScale,
      layout: layout,
      getIdentity: getIdentity,
      nodeSize: nodeSize,
      activeNodeSize: activeNodeSize,
      inactiveNodeSize: inactiveNodeSize,
      nodeColor: nodeColor
    }),
    nodes = _useNodes.nodes,
    nodeByUid = _useNodes.nodeByUid,
    setActiveNodeUids = _useNodes.setActiveNodeUids;
  var linkGenerator = useLinkGenerator({
    layout: layout
  });
  var _useLinks = useLinks({
      root: root,
      nodeByUid: nodeByUid,
      linkThickness: linkThickness,
      activeLinkThickness: activeLinkThickness,
      inactiveLinkThickness: inactiveLinkThickness,
      linkColor: linkColor
    }),
    links = _useLinks.links,
    setActiveLinkIds = _useLinks.setActiveLinkIds;
  var setCurrentNode = useSetCurrentNode({
    setActiveNodeUids: setActiveNodeUids,
    highlightAncestorNodes: highlightAncestorNodes,
    highlightDescendantNodes: highlightDescendantNodes,
    links: links,
    setActiveLinkIds: setActiveLinkIds,
    highlightAncestorLinks: highlightAncestorLinks,
    highlightDescendantLinks: highlightDescendantLinks
  });
  return {
    nodes: nodes,
    links: links,
    linkGenerator: linkGenerator,
    setCurrentNode: setCurrentNode
  };
};
var useNodeMouseEventHandlers = function useNodeMouseEventHandlers(node, _ref8) {
  var isInteractive = _ref8.isInteractive,
    onMouseEnter = _ref8.onMouseEnter,
    onMouseMove = _ref8.onMouseMove,
    onMouseLeave = _ref8.onMouseLeave,
    onClick = _ref8.onClick,
    setCurrentNode = _ref8.setCurrentNode,
    tooltip = _ref8.tooltip;
  var _useTooltip = useTooltip(),
    showTooltipFromEvent = _useTooltip.showTooltipFromEvent,
    hideTooltip = _useTooltip.hideTooltip;
  var showTooltip = useCallback(function (event) {
    tooltip !== undefined && showTooltipFromEvent(createElement(tooltip, {
      node: node
    }), event);
  }, [node, tooltip, showTooltipFromEvent]);
  var handleMouseEnter = useCallback(function (event) {
    setCurrentNode(node);
    showTooltip(event);
    onMouseEnter == null ? void 0 : onMouseEnter(node, event);
  }, [node, showTooltip, setCurrentNode, onMouseEnter]);
  var handleMouseMove = useCallback(function (event) {
    showTooltip(event);
    onMouseMove == null ? void 0 : onMouseMove(node, event);
  }, [node, showTooltip, onMouseMove]);
  var handleMouseLeave = useCallback(function (event) {
    setCurrentNode(null);
    hideTooltip();
    onMouseLeave == null ? void 0 : onMouseLeave(node, event);
  }, [node, hideTooltip, setCurrentNode, onMouseLeave]);
  var handleClick = useCallback(function (event) {
    onClick == null ? void 0 : onClick(node, event);
  }, [node, onClick]);
  return {
    onMouseEnter: isInteractive ? handleMouseEnter : undefined,
    onMouseMove: isInteractive ? handleMouseMove : undefined,
    onMouseLeave: isInteractive ? handleMouseLeave : undefined,
    onClick: isInteractive ? handleClick : undefined
  };
};
var useLinkMouseEventHandlers = function useLinkMouseEventHandlers(link, _ref9) {
  var isInteractive = _ref9.isInteractive,
    onMouseEnter = _ref9.onMouseEnter,
    onMouseMove = _ref9.onMouseMove,
    onMouseLeave = _ref9.onMouseLeave,
    onClick = _ref9.onClick,
    tooltip = _ref9.tooltip;
  var _useTooltip2 = useTooltip(),
    showTooltipFromEvent = _useTooltip2.showTooltipFromEvent,
    hideTooltip = _useTooltip2.hideTooltip;
  var showTooltip = useCallback(function (event) {
    tooltip !== undefined && showTooltipFromEvent(createElement(tooltip, {
      link: link
    }), event);
  }, [link, tooltip, showTooltipFromEvent]);
  var handleMouseEnter = useCallback(function (event) {
    showTooltip(event);
    onMouseEnter == null ? void 0 : onMouseEnter(link, event);
  }, [link, showTooltip, onMouseEnter]);
  var handleMouseMove = useCallback(function (event) {
    showTooltip(event);
    onMouseMove == null ? void 0 : onMouseMove(link, event);
  }, [link, showTooltip, onMouseMove]);
  var handleMouseLeave = useCallback(function (event) {
    hideTooltip();
    onMouseLeave == null ? void 0 : onMouseLeave(link, event);
  }, [link, hideTooltip, onMouseLeave]);
  var handleClick = useCallback(function (event) {
    onClick == null ? void 0 : onClick(link, event);
  }, [link, onClick]);
  return {
    onMouseEnter: isInteractive ? handleMouseEnter : undefined,
    onMouseMove: isInteractive ? handleMouseMove : undefined,
    onMouseLeave: isInteractive ? handleMouseLeave : undefined,
    onClick: isInteractive ? handleClick : undefined
  };
};

var _jsxFileName$4 = "/Users/raphaelbenitte/projects/plouc/nivo/packages/dendogram/src/Node.tsx",
  _this$4 = undefined;
var Node = function Node(_ref) {
  var node = _ref.node,
    isInteractive = _ref.isInteractive,
    onMouseEnter = _ref.onMouseEnter,
    onMouseMove = _ref.onMouseMove,
    onMouseLeave = _ref.onMouseLeave,
    onClick = _ref.onClick,
    setCurrentNode = _ref.setCurrentNode,
    tooltip = _ref.tooltip,
    animatedProps = _ref.animatedProps;
  var eventHandlers = useNodeMouseEventHandlers(node, {
    isInteractive: isInteractive,
    onMouseEnter: onMouseEnter,
    onMouseMove: onMouseMove,
    onMouseLeave: onMouseLeave,
    onClick: onClick,
    setCurrentNode: setCurrentNode,
    tooltip: tooltip
  });
  return jsxDEV(animated.circle, _extends({
    r: animatedProps.size.to(function (size) {
      return size / 2;
    }),
    fill: animatedProps.color,
    cx: animatedProps.x,
    cy: animatedProps.y
  }, eventHandlers), void 0, false, {
    fileName: _jsxFileName$4,
    lineNumber: 27,
    columnNumber: 9
  }, _this$4);
};

var _jsxFileName$3 = "/Users/raphaelbenitte/projects/plouc/nivo/packages/dendogram/src/Link.tsx",
  _this$3 = undefined;
var Link = function Link(_ref) {
  var link = _ref.link,
    linkGenerator = _ref.linkGenerator,
    animatedProps = _ref.animatedProps,
    isInteractive = _ref.isInteractive,
    onMouseEnter = _ref.onMouseEnter,
    onMouseMove = _ref.onMouseMove,
    onMouseLeave = _ref.onMouseLeave,
    onClick = _ref.onClick,
    tooltip = _ref.tooltip;
  var eventHandlers = useLinkMouseEventHandlers(link, {
    isInteractive: isInteractive,
    onMouseEnter: onMouseEnter,
    onMouseMove: onMouseMove,
    onMouseLeave: onMouseLeave,
    onClick: onClick,
    tooltip: tooltip
  });
  return jsxDEV(animated.path, _extends({
    d: to([animatedProps.sourceX, animatedProps.sourceY, animatedProps.targetX, animatedProps.targetY], function (sourceX, sourceY, targetX, targetY) {
      return linkGenerator({
        source: [sourceX, sourceY],
        target: [targetX, targetY]
      });
    }),
    fill: "none",
    strokeWidth: animatedProps.thickness,
    stroke: animatedProps.color
  }, eventHandlers), void 0, false, {
    fileName: _jsxFileName$3,
    lineNumber: 26,
    columnNumber: 9
  }, _this$3);
};

var commonDefaultProps = {
  identity: 'id',
  mode: 'dendogram',
  layout: 'top-to-bottom',
  nodeSize: 16,
  nodeColor: {
    scheme: 'nivo'
  },
  linkThickness: 1,
  linkColor: {
    from: 'source.color',
    modifiers: [['opacity', 0.3]]
  },
  isInteractive: true,
  useMesh: true,
  meshDetectionThreshold: Infinity,
  debugMesh: false,
  highlightAncestorNodes: true,
  highlightDescendantNodes: false,
  highlightAncestorLinks: true,
  highlightDescendantLinks: false,
  role: 'img',
  animate: true,
  motionConfig: 'gentle'
};
var svgDefaultProps = _extends({}, commonDefaultProps, {
  layers: ['links', 'nodes', 'mesh'],
  nodeComponent: Node,
  linkComponent: Link
});

var regularTransition$1 = function regularTransition(link) {
  return {
    sourceX: link.source.x,
    sourceY: link.source.y,
    targetX: link.target.x,
    targetY: link.target.y,
    thickness: link.thickness,
    color: link.color
  };
};
var leaveTransition$1 = function leaveTransition(link) {
  return {
    sourceX: link.source.x,
    sourceY: link.source.y,
    targetX: link.target.x,
    targetY: link.target.y,
    thickness: link.thickness,
    color: link.color
  };
};
var Links = function Links(_ref) {
  var links = _ref.links,
    linkComponent = _ref.linkComponent,
    linkGenerator = _ref.linkGenerator,
    isInteractive = _ref.isInteractive,
    onMouseEnter = _ref.onMouseEnter,
    onMouseMove = _ref.onMouseMove,
    onMouseLeave = _ref.onMouseLeave,
    onClick = _ref.onClick,
    tooltip = _ref.tooltip;
  var _useMotionConfig = useMotionConfig(),
    animate = _useMotionConfig.animate,
    springConfig = _useMotionConfig.config;
  var transition = useTransition(links, {
    keys: function keys(link) {
      return link.id;
    },
    from: regularTransition$1,
    enter: regularTransition$1,
    update: regularTransition$1,
    leave: leaveTransition$1,
    config: springConfig,
    immediate: !animate
  });
  return jsxDEV(Fragment, {
    children: transition(function (animatedProps, link) {
      return createElement(linkComponent, {
        link: link,
        linkGenerator: linkGenerator,
        animatedProps: animatedProps,
        isInteractive: isInteractive,
        onMouseEnter: onMouseEnter,
        onMouseMove: onMouseMove,
        onMouseLeave: onMouseLeave,
        onClick: onClick,
        tooltip: tooltip
      });
    })
  }, void 0, false);
};

var regularTransition = function regularTransition(node) {
  return {
    x: node.x,
    y: node.y,
    size: node.size,
    color: node.color
  };
};
var leaveTransition = function leaveTransition(node) {
  return {
    x: node.x,
    y: node.y,
    size: 0,
    color: node.color
  };
};
var Nodes = function Nodes(_ref) {
  var nodes = _ref.nodes,
    nodeComponent = _ref.nodeComponent,
    isInteractive = _ref.isInteractive,
    onMouseEnter = _ref.onMouseEnter,
    onMouseMove = _ref.onMouseMove,
    onMouseLeave = _ref.onMouseLeave,
    onClick = _ref.onClick,
    setCurrentNode = _ref.setCurrentNode,
    tooltip = _ref.tooltip;
  var _useMotionConfig = useMotionConfig(),
    animate = _useMotionConfig.animate,
    springConfig = _useMotionConfig.config;
  var transition = useTransition(nodes, {
    keys: function keys(node) {
      return node.uid;
    },
    from: regularTransition,
    enter: regularTransition,
    update: regularTransition,
    leave: leaveTransition,
    config: springConfig,
    immediate: !animate
  });
  return jsxDEV(Fragment, {
    children: transition(function (animatedProps, node) {
      return createElement(nodeComponent, {
        node: node,
        isInteractive: isInteractive,
        onMouseEnter: onMouseEnter,
        onMouseMove: onMouseMove,
        onMouseLeave: onMouseLeave,
        onClick: onClick,
        setCurrentNode: setCurrentNode,
        tooltip: tooltip,
        animatedProps: animatedProps
      });
    })
  }, void 0, false);
};

var _jsxFileName$2 = "/Users/raphaelbenitte/projects/plouc/nivo/packages/dendogram/src/Mesh.tsx",
  _this$2 = undefined;
var NonMemoizedMesh = function NonMemoizedMesh(_ref) {
  var nodes = _ref.nodes,
    width = _ref.width,
    height = _ref.height,
    margin = _ref.margin,
    onMouseEnter = _ref.onMouseEnter,
    onMouseMove = _ref.onMouseMove,
    onMouseLeave = _ref.onMouseLeave,
    onClick = _ref.onClick,
    setCurrentNode = _ref.setCurrentNode,
    tooltip = _ref.tooltip,
    detectionThreshold = _ref.detectionThreshold,
    debug = _ref.debug;
  var _useTooltip = useTooltip(),
    showTooltipAt = _useTooltip.showTooltipAt,
    hideTooltip = _useTooltip.hideTooltip;
  var handleMouseEnter = useCallback(function (node, event) {
    setCurrentNode(node);
    if (tooltip !== undefined) {
      var _node$y;
      showTooltipAt(createElement(tooltip, {
        node: node
      }), [node.x + margin.left, (_node$y = node.y) != null ? _node$y : 0 + margin.top], 'top');
    }
    onMouseEnter && onMouseEnter(node, event);
  }, [showTooltipAt, tooltip, margin.left, margin.top, setCurrentNode, onMouseEnter]);
  var handleMouseMove = useCallback(function (node, event) {
    setCurrentNode(node);
    if (tooltip !== undefined) {
      var _node$y2;
      showTooltipAt(createElement(tooltip, {
        node: node
      }), [node.x + margin.left, (_node$y2 = node.y) != null ? _node$y2 : 0 + margin.top], 'top');
    }
    onMouseMove && onMouseMove(node, event);
  }, [showTooltipAt, tooltip, margin.left, margin.top, setCurrentNode, onMouseMove]);
  var handleMouseLeave = useCallback(function (node, event) {
    setCurrentNode(null);
    hideTooltip();
    onMouseLeave && onMouseLeave(node, event);
  }, [hideTooltip, setCurrentNode, onMouseLeave]);
  var handleClick = useCallback(function (node, event) {
    onClick && onClick(node, event);
  }, [onClick]);
  return jsxDEV(Mesh$1, {
    nodes: nodes,
    width: width,
    height: height,
    onMouseEnter: handleMouseEnter,
    onMouseMove: handleMouseMove,
    onMouseLeave: handleMouseLeave,
    onClick: handleClick,
    detectionThreshold: detectionThreshold,
    debug: debug
  }, void 0, false, {
    fileName: _jsxFileName$2,
    lineNumber: 86,
    columnNumber: 9
  }, _this$2);
};
var Mesh = memo(NonMemoizedMesh);

var _excluded = ["isInteractive", "animate", "motionConfig", "theme", "renderWrapper"];
var _jsxFileName$1 = "/Users/raphaelbenitte/projects/plouc/nivo/packages/dendogram/src/Tree.tsx",
  _this$1 = undefined;
var InnerTree = function InnerTree(_ref) {
  var width = _ref.width,
    height = _ref.height,
    partialMargin = _ref.margin,
    data = _ref.data,
    identity = _ref.identity,
    _ref$mode = _ref.mode,
    mode = _ref$mode === void 0 ? svgDefaultProps.mode : _ref$mode,
    _ref$layout = _ref.layout,
    layout = _ref$layout === void 0 ? svgDefaultProps.layout : _ref$layout,
    _ref$nodeSize = _ref.nodeSize,
    nodeSize = _ref$nodeSize === void 0 ? svgDefaultProps.nodeSize : _ref$nodeSize,
    activeNodeSize = _ref.activeNodeSize,
    inactiveNodeSize = _ref.inactiveNodeSize,
    _ref$nodeColor = _ref.nodeColor,
    nodeColor = _ref$nodeColor === void 0 ? svgDefaultProps.nodeColor : _ref$nodeColor,
    _ref$nodeComponent = _ref.nodeComponent,
    nodeComponent = _ref$nodeComponent === void 0 ? svgDefaultProps.nodeComponent : _ref$nodeComponent,
    _ref$linkThickness = _ref.linkThickness,
    linkThickness = _ref$linkThickness === void 0 ? svgDefaultProps.linkThickness : _ref$linkThickness,
    activeLinkThickness = _ref.activeLinkThickness,
    inactiveLinkThickness = _ref.inactiveLinkThickness,
    _ref$linkColor = _ref.linkColor,
    linkColor = _ref$linkColor === void 0 ? svgDefaultProps.linkColor : _ref$linkColor,
    _ref$linkComponent = _ref.linkComponent,
    linkComponent = _ref$linkComponent === void 0 ? svgDefaultProps.linkComponent : _ref$linkComponent,
    _ref$layers = _ref.layers,
    layers = _ref$layers === void 0 ? svgDefaultProps.layers : _ref$layers,
    _ref$isInteractive = _ref.isInteractive,
    isInteractive = _ref$isInteractive === void 0 ? svgDefaultProps.isInteractive : _ref$isInteractive,
    _ref$useMesh = _ref.useMesh,
    useMesh = _ref$useMesh === void 0 ? svgDefaultProps.useMesh : _ref$useMesh,
    _ref$meshDetectionThr = _ref.meshDetectionThreshold,
    meshDetectionThreshold = _ref$meshDetectionThr === void 0 ? svgDefaultProps.meshDetectionThreshold : _ref$meshDetectionThr,
    _ref$debugMesh = _ref.debugMesh,
    debugMesh = _ref$debugMesh === void 0 ? svgDefaultProps.debugMesh : _ref$debugMesh,
    _ref$highlightAncesto = _ref.highlightAncestorNodes,
    highlightAncestorNodes = _ref$highlightAncesto === void 0 ? svgDefaultProps.highlightAncestorNodes : _ref$highlightAncesto,
    _ref$highlightDescend = _ref.highlightDescendantNodes,
    highlightDescendantNodes = _ref$highlightDescend === void 0 ? svgDefaultProps.highlightDescendantNodes : _ref$highlightDescend,
    _ref$highlightAncesto2 = _ref.highlightAncestorLinks,
    highlightAncestorLinks = _ref$highlightAncesto2 === void 0 ? svgDefaultProps.highlightAncestorLinks : _ref$highlightAncesto2,
    _ref$highlightDescend2 = _ref.highlightDescendantLinks,
    highlightDescendantLinks = _ref$highlightDescend2 === void 0 ? svgDefaultProps.highlightDescendantLinks : _ref$highlightDescend2,
    onNodeMouseEnter = _ref.onNodeMouseEnter,
    onNodeMouseMove = _ref.onNodeMouseMove,
    onNodeMouseLeave = _ref.onNodeMouseLeave,
    onNodeClick = _ref.onNodeClick,
    nodeTooltip = _ref.nodeTooltip,
    onLinkMouseEnter = _ref.onLinkMouseEnter,
    onLinkMouseMove = _ref.onLinkMouseMove,
    onLinkMouseLeave = _ref.onLinkMouseLeave,
    onLinkClick = _ref.onLinkClick,
    linkTooltip = _ref.linkTooltip,
    _ref$role = _ref.role,
    role = _ref$role === void 0 ? svgDefaultProps.role : _ref$role,
    ariaLabel = _ref.ariaLabel,
    ariaLabelledBy = _ref.ariaLabelledBy,
    ariaDescribedBy = _ref.ariaDescribedBy;
  var _useDimensions = useDimensions(width, height, partialMargin),
    outerWidth = _useDimensions.outerWidth,
    outerHeight = _useDimensions.outerHeight,
    margin = _useDimensions.margin,
    innerWidth = _useDimensions.innerWidth,
    innerHeight = _useDimensions.innerHeight;
  var _useTree = useTree({
      data: data,
      identity: identity,
      layout: layout,
      mode: mode,
      width: innerWidth,
      height: innerHeight,
      nodeSize: nodeSize,
      activeNodeSize: activeNodeSize,
      inactiveNodeSize: inactiveNodeSize,
      nodeColor: nodeColor,
      highlightAncestorNodes: highlightAncestorNodes,
      highlightDescendantNodes: highlightDescendantNodes,
      linkThickness: linkThickness,
      activeLinkThickness: activeLinkThickness,
      inactiveLinkThickness: inactiveLinkThickness,
      linkColor: linkColor,
      highlightAncestorLinks: highlightAncestorLinks,
      highlightDescendantLinks: highlightDescendantLinks
    }),
    nodes = _useTree.nodes,
    links = _useTree.links,
    linkGenerator = _useTree.linkGenerator,
    setCurrentNode = _useTree.setCurrentNode;
  var layerById = {
    links: null,
    nodes: null,
    labels: null,
    mesh: null
  };
  if (layers.includes('links')) {
    layerById.links = jsxDEV(Links, {
      links: links,
      linkComponent: linkComponent,
      linkGenerator: linkGenerator,
      isInteractive: isInteractive,
      onMouseEnter: onLinkMouseEnter,
      onMouseMove: onLinkMouseMove,
      onMouseLeave: onLinkMouseLeave,
      onClick: onLinkClick,
      tooltip: linkTooltip
    }, "links", false, {
      fileName: _jsxFileName$1,
      lineNumber: 93,
      columnNumber: 13
    }, _this$1);
  }
  if (layers.includes('nodes')) {
    layerById.nodes = jsxDEV(Nodes, {
      nodes: nodes,
      nodeComponent: nodeComponent,
      isInteractive: isInteractive,
      onMouseEnter: onNodeMouseEnter,
      onMouseMove: onNodeMouseMove,
      onMouseLeave: onNodeMouseLeave,
      onClick: onNodeClick,
      setCurrentNode: setCurrentNode,
      tooltip: nodeTooltip
    }, "nodes", false, {
      fileName: _jsxFileName$1,
      lineNumber: 110,
      columnNumber: 13
    }, _this$1);
  }
  if (layers.includes('mesh') && isInteractive && useMesh) {
    layerById.mesh = jsxDEV(Mesh, {
      nodes: nodes,
      width: innerWidth,
      height: innerHeight,
      margin: margin,
      detectionThreshold: meshDetectionThreshold,
      debug: debugMesh,
      onMouseEnter: onNodeMouseEnter,
      onMouseMove: onNodeMouseMove,
      onMouseLeave: onNodeMouseLeave,
      onClick: onNodeClick,
      setCurrentNode: setCurrentNode
    }, "mesh", false, {
      fileName: _jsxFileName$1,
      lineNumber: 127,
      columnNumber: 13
    }, _this$1);
  }
  var customLayerProps = useMemo(function () {
    return {
      nodes: nodes,
      links: links,
      innerWidth: innerWidth,
      innerHeight: innerHeight
    };
  }, [nodes, links, innerWidth, innerHeight]);
  return jsxDEV(SvgWrapper, {
    width: outerWidth,
    height: outerHeight,
    margin: margin,
    role: role,
    ariaLabel: ariaLabel,
    ariaLabelledBy: ariaLabelledBy,
    ariaDescribedBy: ariaDescribedBy,
    children: layers.map(function (layer, i) {
      var _layerById$layer;
      if (typeof layer === 'function') {
        return jsxDEV(Fragment$1, {
          children: createElement(layer, customLayerProps)
        }, i, false, {
          fileName: _jsxFileName$1,
          lineNumber: 166,
          columnNumber: 28
        }, _this$1);
      }
      return (_layerById$layer = layerById == null ? void 0 : layerById[layer]) != null ? _layerById$layer : null;
    })
  }, void 0, false, {
    fileName: _jsxFileName$1,
    lineNumber: 155,
    columnNumber: 9
  }, _this$1);
};
var Tree = function Tree(_ref2) {
  var _ref2$isInteractive = _ref2.isInteractive,
    isInteractive = _ref2$isInteractive === void 0 ? svgDefaultProps.isInteractive : _ref2$isInteractive,
    _ref2$animate = _ref2.animate,
    animate = _ref2$animate === void 0 ? svgDefaultProps.animate : _ref2$animate,
    _ref2$motionConfig = _ref2.motionConfig,
    motionConfig = _ref2$motionConfig === void 0 ? svgDefaultProps.motionConfig : _ref2$motionConfig,
    theme = _ref2.theme,
    renderWrapper = _ref2.renderWrapper,
    otherProps = _objectWithoutPropertiesLoose(_ref2, _excluded);
  return jsxDEV(Container, {
    animate: animate,
    isInteractive: isInteractive,
    motionConfig: motionConfig,
    renderWrapper: renderWrapper,
    theme: theme,
    children: jsxDEV(InnerTree, _extends({
      isInteractive: isInteractive
    }, otherProps), void 0, false, {
      fileName: _jsxFileName$1,
      lineNumber: 192,
      columnNumber: 9
    }, _this$1)
  }, void 0, false, {
    fileName: _jsxFileName$1,
    lineNumber: 183,
    columnNumber: 5
  }, _this$1);
};

var _jsxFileName = "/Users/raphaelbenitte/projects/plouc/nivo/packages/dendogram/src/ResponsiveTree.tsx",
  _this = undefined;
var ResponsiveTree = function ResponsiveTree(props) {
  return jsxDEV(ResponsiveWrapper, {
    children: function children(_ref) {
      var width = _ref.width,
        height = _ref.height;
      return jsxDEV(Tree, _extends({
        width: width,
        height: height
      }, props), void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 7,
        columnNumber: 33
      }, _this);
    }
  }, void 0, false, {
    fileName: _jsxFileName,
    lineNumber: 6,
    columnNumber: 5
  }, _this);
};

export { ResponsiveTree, Tree, commonDefaultProps, svgDefaultProps, useLinkMouseEventHandlers, useNodeMouseEventHandlers, useRoot, useTree };
//# sourceMappingURL=nivo-dendogram.es.js.map
