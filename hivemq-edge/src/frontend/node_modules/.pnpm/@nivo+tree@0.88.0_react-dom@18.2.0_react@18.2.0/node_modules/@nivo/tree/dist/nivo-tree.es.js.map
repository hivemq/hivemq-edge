{"version":3,"file":"nivo-tree.es.js","sources":["../src/hooks.ts","../src/defaults.ts","../src/Node.tsx","../src/Link.tsx","../src/Label.tsx","../src/canvas.ts","../src/Links.tsx","../src/Nodes.tsx","../src/labelsHooks.ts","../src/Labels.tsx","../src/Mesh.tsx","../src/Tree.tsx","../src/ResponsiveTree.tsx","../src/TreeCanvas.tsx","../src/ResponsiveTreeCanvas.tsx"],"sourcesContent":["import { createElement, MouseEvent, useCallback, useMemo, useState } from 'react'\nimport { hierarchy as d3Hierarchy, cluster as d3Cluster, tree as d3Tree } from 'd3-hierarchy'\nimport { scaleLinear, ScaleLinear } from 'd3-scale'\nimport {\n    link as d3Link,\n    CurveFactory,\n    curveLinear,\n    curveBumpX,\n    curveBumpY,\n    curveStep,\n    curveStepBefore,\n    curveStepAfter,\n} from 'd3-shape'\nimport { Margin, usePropertyAccessor, useTheme } from '@nivo/core'\nimport { TooltipAnchor, TooltipPosition, useTooltip } from '@nivo/tooltip'\nimport { useOrdinalColorScale, useInheritedColor } from '@nivo/colors'\nimport {\n    DefaultDatum,\n    HierarchyTreeNode,\n    HierarchyTreeLink,\n    TreeDataProps,\n    CommonProps,\n    Layout,\n    ComputedNode,\n    ComputedLink,\n    NodeMouseEventHandler,\n    NodeTooltip,\n    IntermediateComputedLink,\n    LinkThicknessFunction,\n    LinkMouseEventHandler,\n    LinkTooltip,\n    IntermediateComputedNode,\n    CurrentNodeSetter,\n    NodeSizeModifierFunction,\n    LinkThicknessModifierFunction,\n    TreeMode,\n    LinkCurve,\n} from './types'\nimport { commonDefaultProps } from './defaults'\n\nexport const useRoot = <Datum>({\n    data,\n    mode,\n    getIdentity,\n}: {\n    data: TreeDataProps<Datum>['data']\n    mode: TreeMode\n    getIdentity: (node: Datum) => string\n}) =>\n    useMemo(() => {\n        const root = d3Hierarchy<Datum>(data) as HierarchyTreeNode<Datum>\n        const cluster = mode === 'tree' ? d3Tree<Datum>() : d3Cluster<Datum>()\n\n        root.eachBefore(node => {\n            const ancestors = node\n                .ancestors()\n                .filter(ancestor => ancestor !== node)\n                .reverse()\n            const ancestorIds = ancestors.map(ancestor => getIdentity(ancestor.data))\n\n            node.ancestorIds = ancestorIds\n            node.uid = [...ancestorIds, getIdentity(node.data)].join('.')\n            node.ancestorUids = ancestors.map(ancestor => ancestor.uid!)\n        })\n\n        root.each(node => {\n            node.descendantUids = node\n                .descendants()\n                .filter(descendant => descendant !== node)\n                .map(descendant => descendant.uid!)\n        })\n\n        cluster(root)\n\n        return root\n    }, [data, mode, getIdentity])\n\n/**\n * By default, the x/y positions are computed for a 0~1 range,\n * so that we can easily change the layout without having to\n * recompute the nodes.\n */\nconst useCartesianScales = ({\n    width,\n    height,\n    layout,\n}: {\n    width: number\n    height: number\n    layout: Layout\n}) =>\n    useMemo(() => {\n        const xScale = scaleLinear().domain([0, 1])\n        const yScale = scaleLinear().domain([0, 1])\n\n        if (layout === 'top-to-bottom') {\n            xScale.range([0, width])\n            yScale.range([0, height])\n        } else if (layout === 'right-to-left') {\n            xScale.range([width, 0])\n            yScale.range([0, height])\n        } else if (layout === 'bottom-to-top') {\n            xScale.range([width, 0])\n            yScale.range([height, 0])\n        } else if (layout === 'left-to-right') {\n            xScale.range([0, width])\n            yScale.range([height, 0])\n        }\n\n        return {\n            xScale,\n            yScale,\n        }\n    }, [width, height, layout])\n\nconst useNodeSize = <Datum>(size: Exclude<CommonProps<Datum>['nodeSize'], undefined>) =>\n    useMemo(() => {\n        if (typeof size === 'function') return size\n        return () => size\n    }, [size])\n\nconst useNodeSizeModifier = <Datum>(size?: NodeSizeModifierFunction<Datum> | number) =>\n    useMemo(() => {\n        if (size === undefined) return (node: ComputedNode<Datum>) => node.size\n        if (typeof size === 'function') return size\n        return () => size\n    }, [size])\n\nconst useNodes = <Datum>({\n    root,\n    xScale,\n    yScale,\n    layout,\n    getIdentity,\n    nodeSize,\n    activeNodeSize,\n    inactiveNodeSize,\n    nodeColor,\n    fixNodeColorAtDepth,\n}: {\n    root: HierarchyTreeNode<Datum>\n    xScale: ScaleLinear<number, number>\n    yScale: ScaleLinear<number, number>\n    layout: Layout\n    getIdentity: (node: Datum) => string\n    nodeSize: Exclude<CommonProps<Datum>['nodeSize'], undefined>\n    activeNodeSize?: CommonProps<Datum>['activeNodeSize']\n    inactiveNodeSize?: CommonProps<Datum>['inactiveNodeSize']\n    nodeColor: Exclude<CommonProps<Datum>['nodeColor'], undefined>\n    fixNodeColorAtDepth: number\n}) => {\n    const intermediateNodes = useMemo<IntermediateComputedNode<Datum>[]>(() => {\n        return root.descendants().map(node => {\n            let x: number\n            let y: number\n            if (layout === 'top-to-bottom' || layout === 'bottom-to-top') {\n                x = xScale(node.x!)\n                y = yScale(node.y!)\n            } else {\n                x = xScale(node.y!)\n                y = yScale(node.x!)\n            }\n\n            const id = getIdentity(node.data)\n\n            return {\n                path: [...node.ancestorIds!, id],\n                uid: node.uid!,\n                isRoot: node.depth === 0,\n                isLeaf: node.height === 0,\n                ancestorIds: node.ancestorIds!,\n                ancestorUids: node.ancestorUids!,\n                descendantUids: node.descendantUids!,\n                id,\n                data: node.data,\n                depth: node.depth,\n                height: node.height,\n                x,\n                y,\n            }\n        })\n    }, [root, getIdentity, layout, xScale, yScale])\n\n    const getNodeSize = useNodeSize<Datum>(nodeSize)\n    const getActiveNodeSize = useNodeSizeModifier<Datum>(activeNodeSize)\n    const getInactiveNodeSize = useNodeSizeModifier<Datum>(inactiveNodeSize)\n\n    const getNodeColorBase = useOrdinalColorScale(nodeColor, 'uid')\n    // Wrap the default color function to support `getNodeColorAtDepth`.\n    const getNodeColor = useMemo(() => {\n        if (fixNodeColorAtDepth === Infinity) return getNodeColorBase\n\n        return (\n            node: IntermediateComputedNode<Datum>,\n            nodeByUid: Record<string, ComputedNode<Datum>>\n        ) => {\n            if (\n                node.depth <= 0 ||\n                node.depth <= fixNodeColorAtDepth ||\n                node.ancestorUids.length === 0\n            )\n                return getNodeColorBase(node)\n\n            const parentUid = node.ancestorUids[node.ancestorUids.length - 1]\n            const parent = nodeByUid[parentUid]\n            if (parent === undefined) return getNodeColorBase(node)\n\n            return parent.color\n        }\n    }, [getNodeColorBase, fixNodeColorAtDepth])\n\n    const [activeNodeUids, setActiveNodeUids] = useState<string[]>([])\n\n    const computed = useMemo(() => {\n        const nodeByUid: Record<string, ComputedNode<Datum>> = {}\n\n        const nodes: ComputedNode<Datum>[] = intermediateNodes.map(intermediateNode => {\n            const computedNode: ComputedNode<Datum> = {\n                ...intermediateNode,\n                size: getNodeSize(intermediateNode),\n                color: getNodeColor(intermediateNode, nodeByUid),\n                isActive: null,\n            }\n\n            if (activeNodeUids.length > 0) {\n                computedNode.isActive = activeNodeUids.includes(computedNode.uid)\n                if (computedNode.isActive) {\n                    computedNode.size = getActiveNodeSize(computedNode)\n                } else {\n                    computedNode.size = getInactiveNodeSize(computedNode)\n                }\n            }\n\n            nodeByUid[computedNode.uid] = computedNode\n\n            return computedNode\n        })\n\n        return { nodes, nodeByUid }\n    }, [\n        intermediateNodes,\n        getNodeSize,\n        getActiveNodeSize,\n        getInactiveNodeSize,\n        getNodeColor,\n        activeNodeUids,\n    ])\n\n    return { ...computed, activeNodeUids, setActiveNodeUids }\n}\n\nconst useLinkThicknessModifier = <Datum>(\n    thickness?: LinkThicknessModifierFunction<Datum> | number\n) =>\n    useMemo(() => {\n        if (thickness === undefined) return (link: ComputedLink<Datum>) => link.thickness\n        if (typeof thickness === 'function') return thickness\n        return () => thickness\n    }, [thickness])\n\nconst useLinks = <Datum>({\n    root,\n    nodeByUid,\n    activeNodeUids,\n    linkThickness,\n    activeLinkThickness,\n    inactiveLinkThickness,\n    linkColor,\n}: {\n    root: HierarchyTreeNode<Datum>\n    nodeByUid: Record<string, ComputedNode<Datum>>\n    activeNodeUids: readonly string[]\n    linkThickness: Exclude<CommonProps<Datum>['linkThickness'], undefined>\n    activeLinkThickness?: CommonProps<Datum>['activeLinkThickness']\n    inactiveLinkThickness?: CommonProps<Datum>['inactiveLinkThickness']\n    linkColor: Exclude<CommonProps<Datum>['linkColor'], undefined>\n}) => {\n    const intermediateLinks = useMemo<IntermediateComputedLink<Datum>[]>(() => {\n        return (root.links() as HierarchyTreeLink<Datum>[]).map(link => {\n            return {\n                id: `${link.source.uid}:${link.target.uid}`,\n                // Replace with computed nodes.\n                source: nodeByUid[link.source.uid!],\n                target: nodeByUid[link.target.uid!],\n            }\n        })\n    }, [root, nodeByUid])\n\n    const getLinkThickness: LinkThicknessFunction<Datum> = useMemo(() => {\n        if (typeof linkThickness === 'function') return linkThickness\n        return () => linkThickness\n    }, [linkThickness])\n    const getActiveLinkThickness = useLinkThicknessModifier(activeLinkThickness)\n    const getInactiveLinkThickness = useLinkThicknessModifier(inactiveLinkThickness)\n\n    const theme = useTheme()\n    const getLinkColor = useInheritedColor(linkColor, theme)\n\n    const [activeLinkIds, setActiveLinkIds] = useState<string[]>([])\n\n    const links = useMemo(() => {\n        return intermediateLinks.map(intermediateLink => {\n            const computedLink: ComputedLink<Datum> = {\n                ...intermediateLink,\n                thickness: getLinkThickness(intermediateLink),\n                color: getLinkColor(intermediateLink),\n                isActive: null,\n            }\n\n            if (activeNodeUids.length > 0) {\n                computedLink.isActive = activeLinkIds.includes(computedLink.id)\n                if (computedLink.isActive) {\n                    computedLink.thickness = getActiveLinkThickness(computedLink)\n                } else {\n                    computedLink.thickness = getInactiveLinkThickness(computedLink)\n                }\n            }\n\n            return computedLink\n        })\n    }, [\n        intermediateLinks,\n        getLinkThickness,\n        getActiveLinkThickness,\n        getInactiveLinkThickness,\n        getLinkColor,\n        activeNodeUids.length,\n        activeLinkIds,\n    ])\n\n    return {\n        links,\n        setActiveLinkIds,\n    }\n}\n\nconst useLinkGenerator = ({ layout, curve }: { layout: Layout; curve: LinkCurve }) =>\n    useMemo(() => {\n        let curveFactory: CurveFactory = curveLinear\n\n        if (curve === 'bump') {\n            if (layout === 'top-to-bottom' || layout === 'bottom-to-top') {\n                curveFactory = curveBumpY\n            } else {\n                curveFactory = curveBumpX\n            }\n        } else if (curve === 'step') {\n            curveFactory = curveStep\n        } else if (curve === 'step-before') {\n            curveFactory = curveStepBefore\n        } else if (curve === 'step-after') {\n            curveFactory = curveStepAfter\n        }\n\n        return d3Link(curveFactory)\n    }, [layout, curve])\n\nconst useSetCurrentNode = <Datum>({\n    setActiveNodeUids,\n    highlightAncestorNodes,\n    highlightDescendantNodes,\n    links,\n    setActiveLinkIds,\n    highlightAncestorLinks,\n    highlightDescendantLinks,\n}: {\n    setActiveNodeUids: (uids: string[]) => void\n    highlightAncestorNodes: boolean\n    highlightDescendantNodes: boolean\n    links: readonly ComputedLink<Datum>[]\n    setActiveLinkIds: (ids: string[]) => void\n    highlightAncestorLinks: boolean\n    highlightDescendantLinks: boolean\n}) =>\n    useCallback(\n        (node: ComputedNode<Datum> | null) => {\n            if (node === null) {\n                setActiveNodeUids([])\n                setActiveLinkIds([])\n            } else {\n                let nodeUids: string[] = [node.uid]\n                if (highlightAncestorNodes) {\n                    nodeUids = [...nodeUids, ...node.ancestorUids]\n                }\n                if (highlightDescendantNodes) {\n                    nodeUids = [...nodeUids, ...node.descendantUids]\n                }\n                setActiveNodeUids(nodeUids)\n\n                const linkIds: string[] = []\n                if (highlightAncestorLinks) {\n                    links\n                        .filter(link => {\n                            return (\n                                link.target.uid === node.uid ||\n                                node.ancestorUids.includes(link.target.uid)\n                            )\n                        })\n                        .forEach(link => {\n                            linkIds.push(link.id)\n                        })\n                }\n                if (highlightDescendantLinks) {\n                    links\n                        .filter(link => {\n                            return (\n                                link.source.uid === node.uid ||\n                                node.descendantUids.includes(link.source.uid)\n                            )\n                        })\n                        .forEach(link => {\n                            linkIds.push(link.id)\n                        })\n                }\n                setActiveLinkIds(linkIds)\n            }\n        },\n        [\n            setActiveNodeUids,\n            highlightAncestorNodes,\n            highlightDescendantNodes,\n            links,\n            setActiveLinkIds,\n            highlightAncestorLinks,\n            highlightDescendantLinks,\n        ]\n    )\n\nexport const useTree = <Datum = DefaultDatum>({\n    data,\n    width,\n    height,\n    identity = commonDefaultProps.identity,\n    mode = commonDefaultProps.mode,\n    layout = commonDefaultProps.layout,\n    nodeSize = commonDefaultProps.nodeSize,\n    activeNodeSize,\n    inactiveNodeSize,\n    nodeColor = commonDefaultProps.nodeColor,\n    fixNodeColorAtDepth = commonDefaultProps.fixNodeColorAtDepth,\n    highlightAncestorNodes = commonDefaultProps.highlightAncestorNodes,\n    highlightDescendantNodes = commonDefaultProps.highlightDescendantNodes,\n    linkCurve = commonDefaultProps.linkCurve,\n    linkThickness = commonDefaultProps.linkThickness,\n    linkColor = commonDefaultProps.linkColor,\n    activeLinkThickness,\n    inactiveLinkThickness,\n    highlightAncestorLinks = commonDefaultProps.highlightAncestorLinks,\n    highlightDescendantLinks = commonDefaultProps.highlightDescendantLinks,\n}: {\n    data: TreeDataProps<Datum>['data']\n    width: number\n    height: number\n    identity?: CommonProps<Datum>['identity']\n    mode?: TreeMode\n    layout?: Layout\n    nodeSize?: CommonProps<Datum>['nodeSize']\n    activeNodeSize?: CommonProps<Datum>['activeNodeSize']\n    inactiveNodeSize?: CommonProps<Datum>['inactiveNodeSize']\n    nodeColor?: CommonProps<Datum>['nodeColor']\n    fixNodeColorAtDepth?: number\n    highlightAncestorNodes?: boolean\n    highlightDescendantNodes?: boolean\n    linkCurve?: LinkCurve\n    linkThickness?: CommonProps<Datum>['linkThickness']\n    activeLinkThickness?: CommonProps<Datum>['activeLinkThickness']\n    inactiveLinkThickness?: CommonProps<Datum>['inactiveLinkThickness']\n    linkColor?: CommonProps<Datum>['linkColor']\n    highlightAncestorLinks?: boolean\n    highlightDescendantLinks?: boolean\n}) => {\n    const getIdentity = usePropertyAccessor(identity)\n    const root = useRoot<Datum>({ data, mode, getIdentity })\n\n    const { xScale, yScale } = useCartesianScales({ width, height, layout })\n    const { nodes, nodeByUid, activeNodeUids, setActiveNodeUids } = useNodes<Datum>({\n        root,\n        xScale,\n        yScale,\n        layout,\n        getIdentity,\n        nodeSize,\n        activeNodeSize,\n        inactiveNodeSize,\n        nodeColor,\n        fixNodeColorAtDepth,\n    })\n\n    const linkGenerator = useLinkGenerator({ layout, curve: linkCurve })\n    const { links, setActiveLinkIds } = useLinks<Datum>({\n        root,\n        nodeByUid,\n        activeNodeUids,\n        linkThickness,\n        activeLinkThickness,\n        inactiveLinkThickness,\n        linkColor,\n    })\n\n    const setCurrentNode = useSetCurrentNode<Datum>({\n        setActiveNodeUids,\n        highlightAncestorNodes,\n        highlightDescendantNodes,\n        links,\n        setActiveLinkIds,\n        highlightAncestorLinks,\n        highlightDescendantLinks,\n    })\n\n    return {\n        nodes,\n        nodeByUid,\n        links,\n        linkGenerator,\n        setCurrentNode,\n    }\n}\n\n/**\n * This hook may generates mouse event handlers for a node according to the main chart props.\n * It's used for the default `Node` component and may be used for custom nodes\n * to simplify their implementation.\n */\nexport const useNodeMouseEventHandlers = <Datum>(\n    node: ComputedNode<Datum>,\n    {\n        isInteractive,\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n        onClick,\n        setCurrentNode,\n        tooltip,\n        tooltipPosition,\n        tooltipAnchor,\n        margin,\n    }: {\n        isInteractive: boolean\n        onMouseEnter?: NodeMouseEventHandler<Datum>\n        onMouseMove?: NodeMouseEventHandler<Datum>\n        onMouseLeave?: NodeMouseEventHandler<Datum>\n        onClick?: NodeMouseEventHandler<Datum>\n        setCurrentNode: CurrentNodeSetter<Datum>\n        tooltip?: NodeTooltip<Datum>\n        tooltipPosition: TooltipPosition\n        tooltipAnchor: TooltipAnchor\n        margin: Margin\n    }\n) => {\n    const { showTooltipFromEvent, showTooltipAt, hideTooltip } = useTooltip()\n\n    const showTooltip = useMemo(() => {\n        if (!tooltip) return undefined\n\n        if (tooltipPosition === 'fixed') {\n            return () => {\n                const { x, y } = node\n                showTooltipAt(\n                    createElement(tooltip, {\n                        node,\n                    }),\n                    [x + margin.left, y + margin.top],\n                    tooltipAnchor\n                )\n            }\n        }\n\n        return (event: MouseEvent) => {\n            showTooltipFromEvent(\n                createElement(tooltip, {\n                    node,\n                }),\n                event,\n                tooltipAnchor\n            )\n        }\n    }, [node, tooltip, showTooltipFromEvent, showTooltipAt, tooltipPosition, tooltipAnchor, margin])\n\n    const handleMouseEnter = useCallback(\n        (event: MouseEvent) => {\n            setCurrentNode(node)\n            showTooltip?.(event)\n            onMouseEnter?.(node, event)\n        },\n        [node, showTooltip, setCurrentNode, onMouseEnter]\n    )\n\n    const handleMouseMove = useCallback(\n        (event: MouseEvent) => {\n            showTooltip?.(event)\n            onMouseMove?.(node, event)\n        },\n        [node, showTooltip, onMouseMove]\n    )\n\n    const handleMouseLeave = useCallback(\n        (event: MouseEvent) => {\n            setCurrentNode(null)\n            hideTooltip()\n            onMouseLeave?.(node, event)\n        },\n        [node, hideTooltip, setCurrentNode, onMouseLeave]\n    )\n\n    const handleClick = useCallback(\n        (event: MouseEvent) => {\n            onClick?.(node, event)\n        },\n        [node, onClick]\n    )\n\n    return {\n        onMouseEnter: isInteractive ? handleMouseEnter : undefined,\n        onMouseMove: isInteractive ? handleMouseMove : undefined,\n        onMouseLeave: isInteractive ? handleMouseLeave : undefined,\n        onClick: isInteractive ? handleClick : undefined,\n    }\n}\n\n/**\n * This hook may generates mouse event handlers for a node according to the main chart props.\n * It's used for the default `Node` component and may be used for custom nodes\n * to simplify their implementation.\n */\nexport const useLinkMouseEventHandlers = <Datum>(\n    link: ComputedLink<Datum>,\n    {\n        isInteractive,\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n        onClick,\n        tooltip,\n        tooltipAnchor,\n    }: {\n        isInteractive: boolean\n        onMouseEnter?: LinkMouseEventHandler<Datum>\n        onMouseMove?: LinkMouseEventHandler<Datum>\n        onMouseLeave?: LinkMouseEventHandler<Datum>\n        onClick?: LinkMouseEventHandler<Datum>\n        tooltip?: LinkTooltip<Datum>\n        tooltipAnchor: TooltipAnchor\n    }\n) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const showTooltip = useMemo(() => {\n        if (!tooltip) return undefined\n\n        return (event: MouseEvent) => {\n            showTooltipFromEvent(\n                createElement(tooltip, {\n                    link,\n                }),\n                event,\n                tooltipAnchor\n            )\n        }\n    }, [link, tooltip, showTooltipFromEvent, tooltipAnchor])\n\n    const handleMouseEnter = useCallback(\n        (event: MouseEvent) => {\n            showTooltip?.(event)\n            onMouseEnter?.(link, event)\n        },\n        [link, showTooltip, onMouseEnter]\n    )\n\n    const handleMouseMove = useCallback(\n        (event: MouseEvent) => {\n            showTooltip?.(event)\n            onMouseMove?.(link, event)\n        },\n        [link, showTooltip, onMouseMove]\n    )\n\n    const handleMouseLeave = useCallback(\n        (event: MouseEvent) => {\n            hideTooltip()\n            onMouseLeave?.(link, event)\n        },\n        [link, hideTooltip, onMouseLeave]\n    )\n\n    const handleClick = useCallback(\n        (event: MouseEvent) => {\n            onClick?.(link, event)\n        },\n        [link, onClick]\n    )\n\n    return {\n        onMouseEnter: isInteractive ? handleMouseEnter : undefined,\n        onMouseMove: isInteractive ? handleMouseMove : undefined,\n        onMouseLeave: isInteractive ? handleMouseLeave : undefined,\n        onClick: isInteractive ? handleClick : undefined,\n    }\n}\n","import { CommonProps, TreeCanvasProps, TreeSvgProps } from './types'\nimport { Node } from './Node'\nimport { Link } from './Link'\nimport { Label } from './Label'\nimport { renderNode, renderLink, renderLabel } from './canvas'\n\nexport const commonDefaultProps: Pick<\n    CommonProps<any>,\n    | 'identity'\n    | 'mode'\n    | 'layout'\n    | 'nodeSize'\n    | 'nodeColor'\n    | 'fixNodeColorAtDepth'\n    | 'linkCurve'\n    | 'linkThickness'\n    | 'linkColor'\n    | 'enableLabel'\n    | 'label'\n    | 'labelsPosition'\n    | 'orientLabel'\n    | 'labelOffset'\n    | 'isInteractive'\n    | 'useMesh'\n    | 'meshDetectionRadius'\n    | 'debugMesh'\n    | 'highlightAncestorNodes'\n    | 'highlightDescendantNodes'\n    | 'highlightAncestorLinks'\n    | 'highlightDescendantLinks'\n    | 'nodeTooltipPosition'\n    | 'nodeTooltipAnchor'\n    | 'role'\n    | 'animate'\n    | 'motionConfig'\n> = {\n    identity: 'id',\n    mode: 'dendogram',\n    layout: 'top-to-bottom',\n    nodeSize: 12,\n    nodeColor: { scheme: 'nivo' },\n    fixNodeColorAtDepth: Infinity,\n    linkCurve: 'bump',\n    linkThickness: 1,\n    linkColor: { from: 'source.color', modifiers: [['opacity', 0.4]] },\n    enableLabel: true,\n    label: 'id',\n    labelsPosition: 'outward',\n    orientLabel: true,\n    labelOffset: 6,\n    isInteractive: true,\n    useMesh: true,\n    meshDetectionRadius: Infinity,\n    debugMesh: false,\n    highlightAncestorNodes: true,\n    highlightDescendantNodes: false,\n    highlightAncestorLinks: true,\n    highlightDescendantLinks: false,\n    nodeTooltipPosition: 'fixed',\n    nodeTooltipAnchor: 'top',\n    role: 'img',\n    animate: true,\n    motionConfig: 'gentle',\n}\n\nexport const svgDefaultProps: typeof commonDefaultProps &\n    Required<\n        Pick<\n            TreeSvgProps<any>,\n            'layers' | 'nodeComponent' | 'linkComponent' | 'labelComponent' | 'linkTooltipAnchor'\n        >\n    > = {\n    ...commonDefaultProps,\n    layers: ['links', 'nodes', 'labels', 'mesh'],\n    nodeComponent: Node,\n    linkComponent: Link,\n    labelComponent: Label,\n    linkTooltipAnchor: 'top',\n}\n\nexport const canvasDefaultProps: typeof commonDefaultProps &\n    Required<\n        Pick<\n            TreeCanvasProps<any>,\n            'layers' | 'renderNode' | 'renderLink' | 'renderLabel' | 'pixelRatio'\n        >\n    > = {\n    ...commonDefaultProps,\n    layers: ['links', 'nodes', 'labels', 'mesh'],\n    renderNode,\n    renderLink,\n    renderLabel,\n    pixelRatio: typeof window !== 'undefined' ? window.devicePixelRatio || 1 : 1,\n}\n","import { animated } from '@react-spring/web'\nimport { NodeComponentProps } from './types'\nimport { useNodeMouseEventHandlers } from './hooks'\n\nexport const Node = <Datum,>({\n    node,\n    isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    setCurrentNode,\n    tooltip,\n    tooltipPosition,\n    tooltipAnchor,\n    margin,\n    animatedProps,\n}: NodeComponentProps<Datum>) => {\n    const eventHandlers = useNodeMouseEventHandlers<Datum>(node, {\n        isInteractive,\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n        onClick,\n        setCurrentNode,\n        tooltip,\n        tooltipPosition,\n        tooltipAnchor,\n        margin,\n    })\n\n    return (\n        <animated.circle\n            data-testid={`node.${node.uid}`}\n            r={animatedProps.size.to(size => size / 2)}\n            fill={animatedProps.color}\n            cx={animatedProps.x}\n            cy={animatedProps.y}\n            {...eventHandlers}\n        />\n    )\n}\n","import { animated, to } from '@react-spring/web'\nimport { LinkComponentProps } from './types'\nimport { useLinkMouseEventHandlers } from './hooks'\n\nexport const Link = <Datum,>({\n    link,\n    linkGenerator,\n    isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip,\n    tooltipAnchor,\n    animatedProps,\n}: LinkComponentProps<Datum>) => {\n    const eventHandlers = useLinkMouseEventHandlers<Datum>(link, {\n        isInteractive,\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n        onClick,\n        tooltip,\n        tooltipAnchor,\n    })\n\n    return (\n        <animated.path\n            data-testid={`link.${link.id}`}\n            d={to(\n                [\n                    animatedProps.sourceX,\n                    animatedProps.sourceY,\n                    animatedProps.targetX,\n                    animatedProps.targetY,\n                ],\n                (sourceX, sourceY, targetX, targetY) => {\n                    return linkGenerator({\n                        source: [sourceX, sourceY],\n                        target: [targetX, targetY],\n                    })\n                }\n            )}\n            fill=\"none\"\n            strokeWidth={animatedProps.thickness}\n            stroke={animatedProps.color}\n            {...eventHandlers}\n        />\n    )\n}\n","import { animated, to } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\nimport { LabelComponentProps } from './types'\n\nexport const Label = <Datum,>({ label, animatedProps }: LabelComponentProps<Datum>) => {\n    const theme = useTheme()\n\n    return (\n        <animated.g\n            data-testid={`label.${label.id}`}\n            transform={to([animatedProps.x, animatedProps.y], (x, y) => `translate(${x},${y})`)}\n        >\n            <animated.g transform={animatedProps.rotation.to(rotation => `rotate(${rotation})`)}>\n                {theme.labels.text.outlineWidth > 0 && (\n                    <text\n                        style={{\n                            ...theme.labels.text,\n                            fill: theme.labels.text.outlineColor,\n                        }}\n                        stroke={theme.labels.text.outlineColor}\n                        strokeWidth={theme.labels.text.outlineWidth * 2}\n                        strokeLinejoin=\"round\"\n                        textAnchor={label.textAnchor}\n                        dominantBaseline={label.baseline}\n                    >\n                        {label.label}\n                    </text>\n                )}\n                <text\n                    data-testid={`label.${label.id}.label`}\n                    style={theme.labels.text}\n                    textAnchor={label.textAnchor}\n                    dominantBaseline={label.baseline}\n                >\n                    {label.label}\n                </text>\n            </animated.g>\n        </animated.g>\n    )\n}\n","import { degreesToRadians } from '@nivo/core'\nimport { drawCanvasText } from '@nivo/text'\nimport { LinkCanvasRendererProps, NodeCanvasRendererProps, LabelCanvasRendererProps } from './types'\n\nexport const renderNode = <Datum>(\n    ctx: CanvasRenderingContext2D,\n    { node }: NodeCanvasRendererProps<Datum>\n) => {\n    ctx.beginPath()\n    ctx.arc(node.x, node.y, node.size / 2, 0, 2 * Math.PI)\n    ctx.fillStyle = node.color\n    ctx.fill()\n}\n\nexport const renderLink = <Datum>(\n    ctx: CanvasRenderingContext2D,\n    { link, linkGenerator }: LinkCanvasRendererProps<Datum>\n) => {\n    ctx.strokeStyle = link.color\n    ctx.lineWidth = link.thickness\n    ctx.beginPath()\n    linkGenerator({\n        source: [link.source.x, link.source.y],\n        target: [link.target.x, link.target.y],\n    })\n    ctx.stroke()\n}\n\nexport const renderLabel = <Datum>(\n    ctx: CanvasRenderingContext2D,\n    { label, theme }: LabelCanvasRendererProps<Datum>\n) => {\n    ctx.save()\n\n    ctx.translate(label.x, label.y)\n    ctx.rotate(degreesToRadians(label.rotation))\n\n    ctx.textBaseline = 'middle'\n    ctx.textAlign = label.textAnchor === 'middle' ? 'center' : label.textAnchor\n    ctx.fillStyle = '#000'\n\n    drawCanvasText(ctx, theme.labels.text, label.label)\n\n    ctx.restore()\n}\n","import { createElement } from 'react'\nimport { useTransition } from '@react-spring/web'\nimport { useMotionConfig } from '@nivo/core'\nimport { TooltipAnchor } from '@nivo/tooltip'\nimport {\n    ComputedLink,\n    LinkComponent,\n    LinkMouseEventHandler,\n    LinkTooltip,\n    LinkAnimatedProps,\n    LinkGenerator,\n} from './types'\n\ninterface LinksProps<Datum> {\n    links: ComputedLink<Datum>[]\n    linkComponent: LinkComponent<Datum>\n    linkGenerator: LinkGenerator\n    isInteractive: boolean\n    onMouseEnter?: LinkMouseEventHandler<Datum>\n    onMouseMove?: LinkMouseEventHandler<Datum>\n    onMouseLeave?: LinkMouseEventHandler<Datum>\n    onClick?: LinkMouseEventHandler<Datum>\n    tooltip?: LinkTooltip<Datum>\n    tooltipAnchor: TooltipAnchor\n}\n\nconst regularTransition = <Datum,>(link: ComputedLink<Datum>): LinkAnimatedProps => ({\n    sourceX: link.source.x,\n    sourceY: link.source.y,\n    targetX: link.target.x,\n    targetY: link.target.y,\n    thickness: link.thickness,\n    color: link.color,\n})\nconst leaveTransition = <Datum,>(link: ComputedLink<Datum>): LinkAnimatedProps => ({\n    sourceX: link.source.x,\n    sourceY: link.source.y,\n    targetX: link.target.x,\n    targetY: link.target.y,\n    thickness: link.thickness,\n    color: link.color,\n})\n\nexport const Links = <Datum,>({\n    links,\n    linkComponent,\n    linkGenerator,\n    isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip,\n    tooltipAnchor,\n}: LinksProps<Datum>) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const transition = useTransition<ComputedLink<Datum>, LinkAnimatedProps>(links, {\n        keys: link => link.id,\n        from: regularTransition,\n        enter: regularTransition,\n        update: regularTransition,\n        leave: leaveTransition,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <>\n            {transition((animatedProps, link) =>\n                createElement(linkComponent, {\n                    link,\n                    linkGenerator,\n                    animatedProps,\n                    isInteractive,\n                    onMouseEnter,\n                    onMouseMove,\n                    onMouseLeave,\n                    onClick,\n                    tooltip,\n                    tooltipAnchor,\n                })\n            )}\n        </>\n    )\n}\n","import { createElement } from 'react'\nimport { useTransition } from '@react-spring/web'\nimport { Margin, useMotionConfig } from '@nivo/core'\nimport { TooltipAnchor, TooltipPosition } from '@nivo/tooltip'\nimport {\n    ComputedNode,\n    CurrentNodeSetter,\n    NodeComponent,\n    NodeMouseEventHandler,\n    NodeTooltip,\n    NodeAnimatedProps,\n} from './types'\n\ninterface NodesProps<Datum> {\n    nodes: ComputedNode<Datum>[]\n    nodeComponent: NodeComponent<Datum>\n    isInteractive: boolean\n    onMouseEnter?: NodeMouseEventHandler<Datum>\n    onMouseMove?: NodeMouseEventHandler<Datum>\n    onMouseLeave?: NodeMouseEventHandler<Datum>\n    onClick?: NodeMouseEventHandler<Datum>\n    setCurrentNode: CurrentNodeSetter<Datum>\n    tooltip?: NodeTooltip<Datum>\n    tooltipPosition: TooltipPosition\n    tooltipAnchor: TooltipAnchor\n    margin: Margin\n}\n\nconst regularTransition = <Datum,>(node: ComputedNode<Datum>): NodeAnimatedProps => ({\n    x: node.x,\n    y: node.y,\n    size: node.size,\n    color: node.color,\n})\nconst leaveTransition = <Datum,>(node: ComputedNode<Datum>): NodeAnimatedProps => ({\n    x: node.x,\n    y: node.y,\n    size: 0,\n    color: node.color,\n})\n\nexport const Nodes = <Datum,>({\n    nodes,\n    nodeComponent,\n    isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    setCurrentNode,\n    tooltip,\n    tooltipPosition,\n    tooltipAnchor,\n    margin,\n}: NodesProps<Datum>) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const transition = useTransition<ComputedNode<Datum>, NodeAnimatedProps>(nodes, {\n        keys: node => node.uid,\n        from: regularTransition,\n        enter: regularTransition,\n        update: regularTransition,\n        leave: leaveTransition,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <>\n            {transition((animatedProps, node) =>\n                createElement(nodeComponent, {\n                    node,\n                    isInteractive,\n                    onMouseEnter,\n                    onMouseMove,\n                    onMouseLeave,\n                    onClick,\n                    setCurrentNode,\n                    tooltip,\n                    tooltipPosition,\n                    tooltipAnchor,\n                    margin,\n                    animatedProps,\n                })\n            )}\n        </>\n    )\n}\n","import { useMemo } from 'react'\nimport { usePropertyAccessor } from '@nivo/core'\nimport {\n    CommonProps,\n    Layout,\n    ComputedNode,\n    ComputedLabel,\n    LabelsPosition,\n    LabelTextAnchor,\n    LabelBaseline,\n} from './types'\n\ninterface LabelPositionResult {\n    x: number\n    y: number\n    rotation: number\n    textAnchor: LabelTextAnchor\n    baseline: LabelBaseline\n}\n\ntype GetLabelPosition<Datum> = (node: ComputedNode<Datum>) => LabelPositionResult\n\ninterface LabelPositionFactoryProps {\n    orient: boolean\n    offset: number\n}\n\nconst horizontalLabelBefore = (x: number, y: number, offset: number): LabelPositionResult => ({\n    x: x - offset,\n    y: y,\n    rotation: 0,\n    textAnchor: 'end',\n    baseline: 'middle',\n})\n\nconst horizontalLabelAfter = (x: number, y: number, offset: number): LabelPositionResult => ({\n    x: x + offset,\n    y: y,\n    rotation: 0,\n    textAnchor: 'start',\n    baseline: 'middle',\n})\n\nconst verticalLabelBefore = (x: number, y: number, offset: number): LabelPositionResult => ({\n    x: x,\n    y: y - offset,\n    rotation: 0,\n    textAnchor: 'middle',\n    baseline: 'auto',\n})\n\nconst verticalLabelBeforeOriented = (\n    x: number,\n    y: number,\n    offset: number\n): LabelPositionResult => ({\n    x: x,\n    y: y - offset,\n    rotation: -90,\n    textAnchor: 'start',\n    baseline: 'middle',\n})\n\nconst verticalLabelAfter = (x: number, y: number, offset: number): LabelPositionResult => ({\n    x: x,\n    y: y + offset,\n    rotation: 0,\n    textAnchor: 'middle',\n    baseline: 'hanging',\n})\n\nconst verticalLabelAfterOriented = (x: number, y: number, offset: number): LabelPositionResult => ({\n    x: x,\n    y: y + offset,\n    rotation: -90,\n    textAnchor: 'end',\n    baseline: 'middle',\n})\n\nconst verticalLeavesBeforeOthersAfter =\n    <Datum>({ orient, offset }: LabelPositionFactoryProps): GetLabelPosition<Datum> =>\n    (node: ComputedNode<Datum>) => {\n        const spacing = node.size / 2 + offset\n        if (node.isLeaf) {\n            if (orient) return verticalLabelBeforeOriented(node.x, node.y, spacing)\n            else return verticalLabelBefore(node.x, node.y, spacing)\n        } else {\n            if (orient) return verticalLabelAfterOriented(node.x, node.y, spacing)\n            else return verticalLabelAfter(node.x, node.y, spacing)\n        }\n    }\n\nconst verticalLeavesAfterOthersBefore =\n    <Datum>({ orient, offset }: LabelPositionFactoryProps): GetLabelPosition<Datum> =>\n    (node: ComputedNode<Datum>) => {\n        const spacing = node.size / 2 + offset\n        if (node.isLeaf) {\n            if (orient) return verticalLabelAfterOriented(node.x, node.y, spacing)\n            else return verticalLabelAfter(node.x, node.y, spacing)\n        } else {\n            if (orient) return verticalLabelBeforeOriented(node.x, node.y, spacing)\n            else return verticalLabelBefore(node.x, node.y, spacing)\n        }\n    }\n\nconst verticalAllBefore =\n    <Datum>({ orient, offset }: LabelPositionFactoryProps): GetLabelPosition<Datum> =>\n    (node: ComputedNode<Datum>) => {\n        const spacing = node.size / 2 + offset\n        if (orient) return verticalLabelBeforeOriented(node.x, node.y, spacing)\n        else return verticalLabelBefore(node.x, node.y, spacing)\n    }\n\nconst verticalAllAfter =\n    <Datum>({ orient, offset }: LabelPositionFactoryProps): GetLabelPosition<Datum> =>\n    (node: ComputedNode<Datum>) => {\n        const spacing = node.size / 2 + offset\n        if (orient) return verticalLabelAfterOriented(node.x, node.y, spacing)\n        else return verticalLabelAfter(node.x, node.y, spacing)\n    }\n\nconst horizontalLeavesBeforeOthersAfter =\n    <Datum>({ offset }: LabelPositionFactoryProps): GetLabelPosition<Datum> =>\n    (node: ComputedNode<Datum>) => {\n        const spacing = node.size / 2 + offset\n        if (node.isLeaf) return horizontalLabelBefore(node.x, node.y, spacing)\n        else return horizontalLabelAfter(node.x, node.y, spacing)\n    }\n\nconst horizontalLeavesAfterOthersBefore =\n    <Datum>({ offset }: LabelPositionFactoryProps): GetLabelPosition<Datum> =>\n    (node: ComputedNode<Datum>) => {\n        const spacing = node.size / 2 + offset\n        if (node.isLeaf) return horizontalLabelAfter(node.x, node.y, spacing)\n        return horizontalLabelBefore(node.x, node.y, spacing)\n    }\n\nconst horizontalAllBefore =\n    <Datum>({ offset }: LabelPositionFactoryProps): GetLabelPosition<Datum> =>\n    (node: ComputedNode<Datum>) => {\n        return horizontalLabelBefore(node.x, node.y, node.size / 2 + offset)\n    }\n\nconst horizontalAllAfter =\n    <Datum>({ offset }: LabelPositionFactoryProps): GetLabelPosition<Datum> =>\n    (node: ComputedNode<Datum>) => {\n        return horizontalLabelAfter(node.x, node.y, node.size / 2 + offset)\n    }\n\nconst useGetLabelPosition = <Datum>({\n    layout,\n    labelsPosition,\n    orientLabel,\n    labelOffset,\n}: {\n    layout: Layout\n    labelsPosition: LabelsPosition\n    orientLabel: boolean\n    labelOffset: number\n}) =>\n    useMemo(() => {\n        const options: LabelPositionFactoryProps = {\n            orient: orientLabel,\n            offset: labelOffset,\n        }\n\n        if (layout === 'top-to-bottom') {\n            if (labelsPosition === 'outward') {\n                return verticalLeavesAfterOthersBefore<Datum>(options)\n            } else if (labelsPosition === 'inward') {\n                return verticalLeavesBeforeOthersAfter<Datum>(options)\n            } else if (labelsPosition === 'layout') {\n                return verticalAllAfter<Datum>(options)\n            } else if (labelsPosition === 'layout-opposite') {\n                return verticalAllBefore<Datum>(options)\n            }\n        }\n\n        if (layout === 'bottom-to-top') {\n            if (labelsPosition === 'outward') {\n                return verticalLeavesBeforeOthersAfter<Datum>(options)\n            } else if (labelsPosition === 'inward') {\n                return verticalLeavesAfterOthersBefore<Datum>(options)\n            } else if (labelsPosition === 'layout') {\n                return verticalAllBefore<Datum>(options)\n            } else if (labelsPosition === 'layout-opposite') {\n                return verticalAllAfter<Datum>(options)\n            }\n        }\n\n        if (layout === 'right-to-left') {\n            if (labelsPosition === 'outward') {\n                return horizontalLeavesBeforeOthersAfter<Datum>(options)\n            } else if (labelsPosition === 'inward') {\n                return horizontalLeavesAfterOthersBefore<Datum>(options)\n            } else if (labelsPosition === 'layout') {\n                return horizontalAllBefore<Datum>(options)\n            } else if (labelsPosition === 'layout-opposite') {\n                return horizontalAllAfter<Datum>(options)\n            }\n        }\n\n        if (layout === 'left-to-right') {\n            if (labelsPosition === 'outward') {\n                return horizontalLeavesAfterOthersBefore<Datum>(options)\n            } else if (labelsPosition === 'inward') {\n                return horizontalLeavesBeforeOthersAfter<Datum>(options)\n            } else if (labelsPosition === 'layout') {\n                return horizontalAllAfter<Datum>(options)\n            } else if (labelsPosition === 'layout-opposite') {\n                return horizontalAllBefore<Datum>(options)\n            }\n        }\n    }, [layout, labelsPosition, orientLabel, labelOffset])\n\nexport const useLabels = <Datum>({\n    nodes,\n    label,\n    layout,\n    labelsPosition,\n    orientLabel,\n    labelOffset,\n}: {\n    nodes: readonly ComputedNode<Datum>[]\n    label: Exclude<CommonProps<Datum>['label'], undefined>\n    layout: Layout\n    labelsPosition: LabelsPosition\n    orientLabel: boolean\n    labelOffset: number\n}) => {\n    const getLabel = usePropertyAccessor(label)\n    const getPosition = useGetLabelPosition<Datum>({\n        layout,\n        labelsPosition,\n        orientLabel,\n        labelOffset,\n    })\n\n    if (getPosition === undefined) {\n        throw new Error('Unable to determine the logic to compute labels position')\n    }\n\n    return useMemo(\n        () =>\n            nodes.map(\n                node =>\n                    ({\n                        id: node.uid,\n                        node: node,\n                        label: getLabel(node),\n                        ...getPosition(node),\n                    } as ComputedLabel<Datum>)\n            ),\n        [nodes, getLabel, getPosition]\n    )\n}\n","import { createElement } from 'react'\nimport { useTransition } from '@react-spring/web'\nimport { useMotionConfig } from '@nivo/core'\nimport {\n    CommonProps,\n    ComputedLabel,\n    ComputedNode,\n    LabelAnimatedProps,\n    LabelComponent,\n    LabelsPosition,\n    Layout,\n} from './types'\nimport { useLabels } from './labelsHooks'\n\ninterface LabelsProps<Datum> {\n    nodes: readonly ComputedNode<Datum>[]\n    label: Exclude<CommonProps<Datum>['label'], undefined>\n    layout: Layout\n    labelsPosition: LabelsPosition\n    orientLabel: boolean\n    labelOffset: number\n    labelComponent: LabelComponent<Datum>\n}\n\nconst regularTransition = <Datum,>(label: ComputedLabel<Datum>): LabelAnimatedProps => ({\n    x: label.x,\n    y: label.y,\n    rotation: label.rotation,\n})\nconst leaveTransition = <Datum,>(label: ComputedLabel<Datum>): LabelAnimatedProps => ({\n    x: label.x,\n    y: label.y,\n    rotation: label.rotation,\n})\n\nexport const Labels = <Datum,>({\n    nodes,\n    label,\n    layout,\n    labelsPosition,\n    orientLabel,\n    labelOffset,\n    labelComponent,\n}: LabelsProps<Datum>) => {\n    const labels = useLabels({ nodes, label, layout, labelsPosition, orientLabel, labelOffset })\n\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const transition = useTransition<ComputedLabel<Datum>, LabelAnimatedProps>(labels, {\n        keys: label => label.id,\n        from: regularTransition,\n        enter: regularTransition,\n        update: regularTransition,\n        leave: leaveTransition,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <g\n            style={{\n                pointerEvents: 'none',\n            }}\n        >\n            {transition((animatedProps, label) =>\n                createElement(labelComponent, {\n                    label,\n                    animatedProps,\n                })\n            )}\n        </g>\n    )\n}\n","import { useMemo } from 'react'\nimport { createElement, memo } from 'react'\nimport { Margin } from '@nivo/core'\nimport { TooltipAnchor, TooltipPosition } from '@nivo/tooltip'\nimport { Mesh as BaseMesh } from '@nivo/voronoi'\nimport { ComputedNode, CurrentNodeSetter, NodeMouseEventHandler, NodeTooltip } from './types'\n\ninterface MeshProps<Datum> {\n    nodes: ComputedNode<Datum>[]\n    width: number\n    height: number\n    margin: Margin\n    onMouseEnter?: NodeMouseEventHandler<Datum>\n    onMouseMove?: NodeMouseEventHandler<Datum>\n    onMouseLeave?: NodeMouseEventHandler<Datum>\n    onClick?: NodeMouseEventHandler<Datum>\n    setCurrentNode: CurrentNodeSetter<Datum>\n    tooltip?: NodeTooltip<Datum>\n    tooltipPosition?: TooltipPosition\n    tooltipAnchor?: TooltipAnchor\n    detectionRadius: number\n    debug: boolean\n}\n\nconst NonMemoizedMesh = <Datum,>({\n    nodes,\n    width,\n    height,\n    margin,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    setCurrentNode,\n    tooltip,\n    tooltipPosition,\n    tooltipAnchor,\n    detectionRadius,\n    debug,\n}: MeshProps<Datum>) => {\n    const renderTooltip = useMemo(() => {\n        if (!tooltip) return undefined\n        return (node: ComputedNode<Datum>) => createElement(tooltip, { node })\n    }, [tooltip])\n\n    /*\n    const handleMouseEnter = useCallback(\n        (node: ComputedNode<Datum>, event: MouseEvent) => {\n            setCurrentNode(node)\n            if (tooltip !== undefined) {\n                showTooltipAt(\n                    createElement(tooltip, { node }),\n                    [node.x + margin.left, node.y ?? 0 + margin.top],\n                    'top'\n                )\n            }\n            onMouseEnter && onMouseEnter(node, event)\n        },\n        [showTooltipAt, tooltip, margin.left, margin.top, setCurrentNode, onMouseEnter]\n    )\n\n    const handleMouseMove = useCallback(\n        (node: ComputedNode<Datum>, event: MouseEvent) => {\n            setCurrentNode(node)\n            if (tooltip !== undefined) {\n                showTooltipAt(\n                    createElement(tooltip, { node }),\n                    [node.x + margin.left, node.y ?? 0 + margin.top],\n                    'top'\n                )\n            }\n            onMouseMove && onMouseMove(node, event)\n        },\n        [showTooltipAt, tooltip, margin.left, margin.top, setCurrentNode, onMouseMove]\n    )\n\n    const handleMouseLeave = useCallback(\n        (node: ComputedNode<Datum>, event: MouseEvent) => {\n            setCurrentNode(null)\n            hideTooltip()\n            onMouseLeave && onMouseLeave(node, event)\n        },\n        [hideTooltip, setCurrentNode, onMouseLeave]\n    )\n\n    const handleClick = useCallback(\n        (node: ComputedNode<Datum>, event: MouseEvent) => {\n            onClick && onClick(node, event)\n        },\n        [onClick]\n    )\n    */\n\n    return (\n        <BaseMesh<ComputedNode<Datum>>\n            nodes={nodes}\n            width={width}\n            height={height}\n            margin={margin}\n            detectionRadius={detectionRadius}\n            setCurrent={setCurrentNode}\n            onMouseEnter={onMouseEnter}\n            onMouseMove={onMouseMove}\n            onMouseLeave={onMouseLeave}\n            onClick={onClick}\n            tooltip={renderTooltip}\n            tooltipPosition={tooltipPosition}\n            tooltipAnchor={tooltipAnchor}\n            debug={debug}\n        />\n    )\n}\n\nexport const Mesh = memo(NonMemoizedMesh) as typeof NonMemoizedMesh\n","import { createElement, Fragment, ReactNode, useMemo } from 'react'\nimport { Container, useDimensions, SvgWrapper } from '@nivo/core'\nimport { DefaultDatum, LayerId, TreeSvgProps, CustomSvgLayerProps } from './types'\nimport { svgDefaultProps } from './defaults'\nimport { useTree } from './hooks'\nimport { Links } from './Links'\nimport { Nodes } from './Nodes'\nimport { Labels } from './Labels'\nimport { Mesh } from './Mesh'\n\ntype InnerTreeProps<Datum> = Omit<\n    TreeSvgProps<Datum>,\n    'animate' | 'motionConfig' | 'renderWrapper' | 'theme'\n>\n\nconst InnerTree = <Datum,>({\n    width,\n    height,\n    margin: partialMargin,\n    data,\n    identity,\n    mode = svgDefaultProps.mode,\n    layout = svgDefaultProps.layout,\n    nodeSize = svgDefaultProps.nodeSize,\n    activeNodeSize,\n    inactiveNodeSize,\n    nodeColor = svgDefaultProps.nodeColor,\n    fixNodeColorAtDepth = svgDefaultProps.fixNodeColorAtDepth,\n    nodeComponent = svgDefaultProps.nodeComponent,\n    linkCurve = svgDefaultProps.linkCurve,\n    linkThickness = svgDefaultProps.linkThickness,\n    activeLinkThickness,\n    inactiveLinkThickness,\n    linkColor = svgDefaultProps.linkColor,\n    linkComponent = svgDefaultProps.linkComponent,\n    enableLabel = svgDefaultProps.enableLabel,\n    label = svgDefaultProps.label,\n    labelsPosition = svgDefaultProps.labelsPosition,\n    orientLabel = svgDefaultProps.orientLabel,\n    labelOffset = svgDefaultProps.labelOffset,\n    labelComponent = svgDefaultProps.labelComponent,\n    layers = svgDefaultProps.layers,\n    isInteractive = svgDefaultProps.isInteractive,\n    useMesh = svgDefaultProps.useMesh,\n    meshDetectionRadius = svgDefaultProps.meshDetectionRadius,\n    debugMesh = svgDefaultProps.debugMesh,\n    highlightAncestorNodes = svgDefaultProps.highlightAncestorNodes,\n    highlightDescendantNodes = svgDefaultProps.highlightDescendantNodes,\n    highlightAncestorLinks = svgDefaultProps.highlightAncestorLinks,\n    highlightDescendantLinks = svgDefaultProps.highlightDescendantLinks,\n    onNodeMouseEnter,\n    onNodeMouseMove,\n    onNodeMouseLeave,\n    onNodeClick,\n    nodeTooltip,\n    nodeTooltipPosition = svgDefaultProps.nodeTooltipPosition,\n    nodeTooltipAnchor = svgDefaultProps.nodeTooltipAnchor,\n    onLinkMouseEnter,\n    onLinkMouseMove,\n    onLinkMouseLeave,\n    onLinkClick,\n    linkTooltip,\n    linkTooltipAnchor = svgDefaultProps.linkTooltipAnchor,\n    role = svgDefaultProps.role,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n}: InnerTreeProps<Datum>) => {\n    const { outerWidth, outerHeight, margin, innerWidth, innerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { nodes, nodeByUid, links, linkGenerator, setCurrentNode } = useTree<Datum>({\n        data,\n        identity,\n        layout,\n        mode,\n        width: innerWidth,\n        height: innerHeight,\n        nodeSize,\n        activeNodeSize,\n        inactiveNodeSize,\n        nodeColor,\n        fixNodeColorAtDepth,\n        highlightAncestorNodes,\n        highlightDescendantNodes,\n        linkCurve,\n        linkThickness,\n        activeLinkThickness,\n        inactiveLinkThickness,\n        linkColor,\n        highlightAncestorLinks,\n        highlightDescendantLinks,\n    })\n\n    const layerById: Record<LayerId, ReactNode> = {\n        links: null,\n        nodes: null,\n        labels: null,\n        mesh: null,\n    }\n\n    if (layers.includes('links')) {\n        layerById.links = (\n            <Links<Datum>\n                key=\"links\"\n                links={links}\n                linkComponent={linkComponent}\n                linkGenerator={linkGenerator}\n                isInteractive={isInteractive}\n                onMouseEnter={onLinkMouseEnter}\n                onMouseMove={onLinkMouseMove}\n                onMouseLeave={onLinkMouseLeave}\n                onClick={onLinkClick}\n                tooltip={linkTooltip}\n                tooltipAnchor={linkTooltipAnchor}\n            />\n        )\n    }\n\n    if (layers.includes('nodes')) {\n        layerById.nodes = (\n            <Nodes<Datum>\n                key=\"nodes\"\n                nodes={nodes}\n                nodeComponent={nodeComponent}\n                isInteractive={isInteractive}\n                onMouseEnter={onNodeMouseEnter}\n                onMouseMove={onNodeMouseMove}\n                onMouseLeave={onNodeMouseLeave}\n                onClick={onNodeClick}\n                setCurrentNode={setCurrentNode}\n                tooltip={nodeTooltip}\n                tooltipPosition={nodeTooltipPosition}\n                tooltipAnchor={nodeTooltipAnchor}\n                margin={margin}\n            />\n        )\n    }\n\n    if (layers.includes('labels') && enableLabel) {\n        layerById.labels = (\n            <Labels<Datum>\n                key=\"labels\"\n                label={label}\n                nodes={nodes}\n                layout={layout}\n                labelsPosition={labelsPosition}\n                orientLabel={orientLabel}\n                labelOffset={labelOffset}\n                labelComponent={labelComponent}\n            />\n        )\n    }\n\n    if (layers.includes('mesh') && isInteractive && useMesh) {\n        layerById.mesh = (\n            <Mesh<Datum>\n                key=\"mesh\"\n                nodes={nodes}\n                width={innerWidth}\n                height={innerHeight}\n                margin={margin}\n                detectionRadius={meshDetectionRadius}\n                debug={debugMesh}\n                onMouseEnter={onNodeMouseEnter}\n                onMouseMove={onNodeMouseMove}\n                onMouseLeave={onNodeMouseLeave}\n                onClick={onNodeClick}\n                tooltip={nodeTooltip}\n                tooltipPosition={nodeTooltipPosition}\n                tooltipAnchor={nodeTooltipAnchor}\n                setCurrentNode={setCurrentNode}\n            />\n        )\n    }\n\n    const customLayerProps: CustomSvgLayerProps<Datum> = useMemo(\n        () => ({\n            nodes,\n            nodeByUid,\n            links,\n            innerWidth,\n            innerHeight,\n            linkGenerator,\n            setCurrentNode,\n        }),\n        [nodes, nodeByUid, links, innerWidth, innerHeight, linkGenerator, setCurrentNode]\n    )\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            role={role}\n            ariaLabel={ariaLabel}\n            ariaLabelledBy={ariaLabelledBy}\n            ariaDescribedBy={ariaDescribedBy}\n        >\n            {layers.map((layer, i) => {\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, customLayerProps)}</Fragment>\n                }\n\n                return layerById?.[layer] ?? null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const Tree = <Datum = DefaultDatum,>({\n    isInteractive = svgDefaultProps.isInteractive,\n    animate = svgDefaultProps.animate,\n    motionConfig = svgDefaultProps.motionConfig,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: TreeSvgProps<Datum>) => (\n    <Container\n        {...{\n            animate,\n            isInteractive,\n            motionConfig,\n            renderWrapper,\n            theme,\n        }}\n    >\n        <InnerTree<Datum> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { ResponsiveTreeSvgProps, DefaultDatum } from './types'\nimport { Tree } from './Tree'\n\nexport const ResponsiveTree = <Datum = DefaultDatum,>(props: ResponsiveTreeSvgProps<Datum>) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <Tree<Datum> width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n","import { useEffect, useMemo, useRef, createElement } from 'react'\nimport { Container, useDimensions, useTheme } from '@nivo/core'\nimport { setCanvasFont } from '@nivo/text'\nimport { useMesh, renderDebugToCanvas } from '@nivo/voronoi'\nimport { DefaultDatum, TreeCanvasProps, CustomCanvasLayerProps, ComputedNode } from './types'\nimport { canvasDefaultProps } from './defaults'\nimport { useTree } from './hooks'\nimport { useLabels } from './labelsHooks'\n\ntype InnerTreeCanvasProps<Datum> = Omit<\n    TreeCanvasProps<Datum>,\n    'animate' | 'motionConfig' | 'renderWrapper' | 'theme'\n>\n\nconst InnerTreeCanvas = <Datum,>({\n    width,\n    height,\n    pixelRatio = canvasDefaultProps.pixelRatio,\n    margin: partialMargin,\n    data,\n    identity,\n    mode = canvasDefaultProps.mode,\n    layout = canvasDefaultProps.layout,\n    nodeSize = canvasDefaultProps.nodeSize,\n    activeNodeSize,\n    inactiveNodeSize,\n    nodeColor = canvasDefaultProps.nodeColor,\n    fixNodeColorAtDepth = canvasDefaultProps.fixNodeColorAtDepth,\n    renderNode = canvasDefaultProps.renderNode,\n    linkCurve = canvasDefaultProps.linkCurve,\n    linkThickness = canvasDefaultProps.linkThickness,\n    activeLinkThickness,\n    inactiveLinkThickness,\n    linkColor = canvasDefaultProps.linkColor,\n    renderLink = canvasDefaultProps.renderLink,\n    enableLabel = canvasDefaultProps.enableLabel,\n    label = canvasDefaultProps.label,\n    labelsPosition = canvasDefaultProps.labelsPosition,\n    orientLabel = canvasDefaultProps.orientLabel,\n    labelOffset = canvasDefaultProps.labelOffset,\n    renderLabel = canvasDefaultProps.renderLabel,\n    layers = canvasDefaultProps.layers,\n    isInteractive = canvasDefaultProps.isInteractive,\n    meshDetectionRadius = canvasDefaultProps.meshDetectionRadius,\n    debugMesh = canvasDefaultProps.debugMesh,\n    highlightAncestorNodes = canvasDefaultProps.highlightAncestorNodes,\n    highlightDescendantNodes = canvasDefaultProps.highlightDescendantNodes,\n    highlightAncestorLinks = canvasDefaultProps.highlightAncestorLinks,\n    highlightDescendantLinks = canvasDefaultProps.highlightDescendantLinks,\n    onNodeMouseEnter,\n    onNodeMouseMove,\n    onNodeMouseLeave,\n    onNodeClick,\n    nodeTooltip,\n    nodeTooltipPosition = canvasDefaultProps.nodeTooltipPosition,\n    nodeTooltipAnchor = canvasDefaultProps.nodeTooltipAnchor,\n    role = canvasDefaultProps.role,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n}: InnerTreeCanvasProps<Datum>) => {\n    const canvasEl = useRef<HTMLCanvasElement | null>(null)\n\n    const { outerWidth, outerHeight, margin, innerWidth, innerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const theme = useTheme()\n\n    const { nodes, nodeByUid, links, linkGenerator, setCurrentNode } = useTree<Datum>({\n        data,\n        identity,\n        layout,\n        mode,\n        width: innerWidth,\n        height: innerHeight,\n        nodeSize,\n        activeNodeSize,\n        inactiveNodeSize,\n        nodeColor,\n        fixNodeColorAtDepth,\n        highlightAncestorNodes,\n        highlightDescendantNodes,\n        linkCurve,\n        linkThickness,\n        activeLinkThickness,\n        inactiveLinkThickness,\n        linkColor,\n        highlightAncestorLinks,\n        highlightDescendantLinks,\n    })\n\n    const labels = useLabels<Datum>({\n        nodes,\n        label,\n        layout,\n        labelsPosition,\n        orientLabel,\n        labelOffset,\n    })\n\n    const renderTooltip = useMemo(() => {\n        if (!nodeTooltip) return undefined\n        return (node: ComputedNode<Datum>) => createElement(nodeTooltip, { node })\n    }, [nodeTooltip])\n\n    const {\n        delaunay,\n        voronoi,\n        handleMouseEnter,\n        handleMouseMove,\n        handleMouseLeave,\n        handleClick,\n        current,\n    } = useMesh<ComputedNode<Datum>, HTMLCanvasElement>({\n        elementRef: canvasEl,\n        nodes,\n        width: innerWidth,\n        height: innerHeight,\n        margin,\n        detectionRadius: meshDetectionRadius,\n        isInteractive,\n        setCurrent: setCurrentNode,\n        onMouseEnter: onNodeMouseEnter,\n        onMouseMove: onNodeMouseMove,\n        onMouseLeave: onNodeMouseLeave,\n        onClick: onNodeClick,\n        tooltip: renderTooltip,\n        tooltipPosition: nodeTooltipPosition,\n        tooltipAnchor: nodeTooltipAnchor,\n        debug: debugMesh,\n    })\n\n    const customLayerProps: CustomCanvasLayerProps<Datum> = useMemo(\n        () => ({\n            nodes,\n            nodeByUid,\n            links,\n            innerWidth,\n            innerHeight,\n            linkGenerator,\n        }),\n        [nodes, nodeByUid, links, innerWidth, innerHeight, linkGenerator]\n    )\n\n    useEffect(() => {\n        if (canvasEl.current === null) return\n\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        const ctx = canvasEl.current.getContext('2d')!\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n\n        ctx.translate(margin.left, margin.top)\n\n        layers.forEach(layer => {\n            if (layer === 'links') {\n                linkGenerator.context(ctx)\n\n                links.forEach(link => {\n                    renderLink(ctx, { link, linkGenerator })\n                })\n            } else if (layer === 'nodes') {\n                nodes.forEach(node => {\n                    renderNode(ctx, { node })\n                })\n            } else if (layer === 'labels' && enableLabel) {\n                setCanvasFont(ctx, theme.labels.text)\n\n                labels.forEach(label => {\n                    renderLabel(ctx, { label, theme })\n                })\n            } else if (layer === 'mesh' && debugMesh && voronoi) {\n                ctx.save()\n                // The mesh should cover the whole chart, including margins.\n                ctx.translate(-margin.left, -margin.top)\n\n                renderDebugToCanvas(ctx, {\n                    delaunay,\n                    voronoi,\n                    detectionRadius: meshDetectionRadius,\n                    index: current !== null ? current[0] : null,\n                })\n\n                ctx.restore()\n            } else if (typeof layer === 'function') {\n                layer(ctx, customLayerProps)\n            }\n        })\n    }, [\n        canvasEl,\n        outerWidth,\n        outerHeight,\n        pixelRatio,\n        margin.left,\n        margin.top,\n        theme,\n        layers,\n        nodes,\n        nodeByUid,\n        renderNode,\n        links,\n        renderLink,\n        linkGenerator,\n        labels,\n        enableLabel,\n        renderLabel,\n        delaunay,\n        voronoi,\n        meshDetectionRadius,\n        debugMesh,\n        current,\n        customLayerProps,\n    ])\n\n    return (\n        <canvas\n            ref={canvasEl}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n                cursor: isInteractive ? 'auto' : 'normal',\n            }}\n            onMouseEnter={handleMouseEnter}\n            onMouseMove={handleMouseMove}\n            onMouseLeave={handleMouseLeave}\n            onClick={handleClick}\n            role={role}\n            aria-label={ariaLabel}\n            aria-labelledby={ariaLabelledBy}\n            aria-describedby={ariaDescribedBy}\n        />\n    )\n}\n\nexport const TreeCanvas = <Datum = DefaultDatum,>({\n    isInteractive = canvasDefaultProps.isInteractive,\n    animate = canvasDefaultProps.animate,\n    motionConfig = canvasDefaultProps.motionConfig,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: TreeCanvasProps<Datum>) => (\n    <Container\n        {...{\n            animate,\n            isInteractive,\n            motionConfig,\n            renderWrapper,\n            theme,\n        }}\n    >\n        <InnerTreeCanvas<Datum> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { ResponsiveTreeCanvasProps, DefaultDatum } from './types'\nimport { TreeCanvas } from './TreeCanvas'\n\nexport const ResponsiveTreeCanvas = <Datum = DefaultDatum,>(\n    props: ResponsiveTreeCanvasProps<Datum>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <TreeCanvas<Datum> width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n"],"names":["useRoot","_ref","data","mode","getIdentity","useMemo","root","d3Hierarchy","cluster","d3Tree","d3Cluster","eachBefore","node","ancestors","filter","ancestor","reverse","ancestorIds","map","uid","concat","join","ancestorUids","each","descendantUids","descendants","descendant","useNodeSizeModifier","size","undefined","useNodes","_ref3","xScale","yScale","layout","nodeSize","activeNodeSize","inactiveNodeSize","nodeColor","fixNodeColorAtDepth","intermediateNodes","x","y","id","path","isRoot","depth","isLeaf","height","getNodeSize","getActiveNodeSize","getInactiveNodeSize","getNodeColorBase","useOrdinalColorScale","getNodeColor","Infinity","nodeByUid","length","parent","color","_useState","useState","activeNodeUids","setActiveNodeUids","computed","nodes","intermediateNode","computedNode","_extends","isActive","includes","useLinkThicknessModifier","thickness","link","useTree","_ref7","width","_ref7$identity","identity","commonDefaultProps","_ref7$mode","_ref7$layout","_ref7$nodeSize","_ref7$nodeColor","_ref7$fixNodeColorAtD","_ref7$highlightAncest","highlightAncestorNodes","_ref7$highlightDescen","highlightDescendantNodes","_ref7$linkCurve","linkCurve","_ref7$linkThickness","linkThickness","_ref7$linkColor","linkColor","activeLinkThickness","inactiveLinkThickness","_ref7$highlightAncest2","highlightAncestorLinks","_ref7$highlightDescen2","highlightDescendantLinks","usePropertyAccessor","_useCartesianScales","_ref2","scaleLinear","domain","range","useCartesianScales","_useNodes","linkGenerator","_ref5","curve","curveFactory","curveLinear","curveBumpY","curveBumpX","curveStep","curveStepBefore","curveStepAfter","d3Link","useLinkGenerator","_useLinks","_ref4","intermediateLinks","links","source","target","getLinkThickness","getActiveLinkThickness","getInactiveLinkThickness","theme","useTheme","getLinkColor","useInheritedColor","_useState2","activeLinkIds","setActiveLinkIds","intermediateLink","computedLink","useLinks","setCurrentNode","_ref6","useCallback","nodeUids","linkIds","forEach","push","useSetCurrentNode","useNodeMouseEventHandlers","_ref8","isInteractive","onMouseEnter","onMouseMove","onMouseLeave","onClick","tooltip","tooltipPosition","tooltipAnchor","margin","_useTooltip","useTooltip","showTooltipFromEvent","showTooltipAt","hideTooltip","showTooltip","createElement","left","top","event","handleMouseEnter","handleMouseMove","handleMouseLeave","handleClick","useLinkMouseEventHandlers","_ref9","_useTooltip2","scheme","from","modifiers","enableLabel","label","labelsPosition","orientLabel","labelOffset","useMesh","meshDetectionRadius","debugMesh","nodeTooltipPosition","nodeTooltipAnchor","role","animate","motionConfig","svgDefaultProps","layers","nodeComponent","animatedProps","eventHandlers","_jsx","animated","circle","r","to","fill","cx","cy","linkComponent","d","sourceX","sourceY","targetX","targetY","strokeWidth","stroke","labelComponent","g","transform","children","_jsxs","rotation","labels","text","outlineWidth","style","outlineColor","strokeLinejoin","textAnchor","dominantBaseline","baseline","linkTooltipAnchor","canvasDefaultProps","renderNode","ctx","beginPath","arc","Math","PI","fillStyle","renderLink","strokeStyle","lineWidth","renderLabel","save","translate","rotate","degreesToRadians","textBaseline","textAlign","drawCanvasText","restore","pixelRatio","window","devicePixelRatio","regularTransition","leaveTransition","Links","_useMotionConfig","useMotionConfig","springConfig","config","transition","useTransition","keys","enter","update","leave","immediate","_Fragment","Nodes","horizontalLabelBefore","offset","horizontalLabelAfter","verticalLabelBefore","verticalLabelBeforeOriented","verticalLabelAfter","verticalLabelAfterOriented","verticalLeavesBeforeOthersAfter","orient","spacing","verticalLeavesAfterOthersBefore","verticalAllBefore","verticalAllAfter","horizontalLeavesBeforeOthersAfter","horizontalLeavesAfterOthersBefore","horizontalAllBefore","horizontalAllAfter","useLabels","_ref10","getLabel","getPosition","options","useGetLabelPosition","Error","Labels","pointerEvents","Mesh","memo","detectionRadius","debug","renderTooltip","BaseMesh","setCurrent","InnerTree","partialMargin","_ref$mode","_ref$layout","_ref$nodeSize","_ref$nodeColor","_ref$fixNodeColorAtDe","_ref$nodeComponent","_ref$linkCurve","_ref$linkThickness","_ref$linkColor","_ref$linkComponent","_ref$enableLabel","_ref$label","_ref$labelsPosition","_ref$orientLabel","_ref$labelOffset","_ref$labelComponent","_ref$layers","_ref$isInteractive","_ref$useMesh","_ref$meshDetectionRad","_ref$debugMesh","_ref$highlightAncesto","_ref$highlightDescend","_ref$highlightAncesto2","_ref$highlightDescend2","onNodeMouseEnter","onNodeMouseMove","onNodeMouseLeave","onNodeClick","nodeTooltip","_ref$nodeTooltipPosit","_ref$nodeTooltipAncho","onLinkMouseEnter","onLinkMouseMove","onLinkMouseLeave","onLinkClick","linkTooltip","_ref$linkTooltipAncho","_ref$role","ariaLabel","ariaLabelledBy","ariaDescribedBy","_useDimensions","useDimensions","outerWidth","outerHeight","innerWidth","innerHeight","_useTree","layerById","mesh","customLayerProps","SvgWrapper","layer","i","_layerById$layer","Fragment","Tree","_ref2$isInteractive","_ref2$animate","_ref2$motionConfig","renderWrapper","otherProps","_objectWithoutPropertiesLoose","_excluded","Container","ResponsiveTree","props","ResponsiveWrapper","InnerTreeCanvas","_ref$pixelRatio","_ref$renderNode","_ref$renderLink","_ref$renderLabel","canvasEl","useRef","_useMesh","elementRef","delaunay","voronoi","current","useEffect","getContext","scale","background","fillRect","context","setCanvasFont","renderDebugToCanvas","index","ref","cursor","TreeCanvas","ResponsiveTreeCanvas"],"mappings":"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"}