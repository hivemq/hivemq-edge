{"version":3,"sources":["../src/index.ts","../src/input.tsx","../src/input-addon.tsx","../src/input-group.tsx","../src/input-element.tsx"],"sourcesContent":["export { Input } from \"./input\"\nexport type { InputProps } from \"./input\"\nexport { InputAddon, InputLeftAddon, InputRightAddon } from \"./input-addon\"\nexport type {\n  InputAddonProps,\n  InputLeftAddonProps,\n  InputRightAddonProps,\n} from \"./input-addon\"\nexport { InputGroup, useInputGroupStyles } from \"./input-group\"\nexport type { InputGroupProps } from \"./input-group\"\nexport { InputLeftElement, InputRightElement } from \"./input-element\"\nexport type {\n  InputElementProps,\n  InputLeftElementProps,\n  InputRightElementProps,\n} from \"./input-element\"\n","import { FormControlOptions, useFormControl } from \"@chakra-ui/form-control\"\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  ThemingProps,\n  useMultiStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\n\ninterface InputOptions {\n  /**\n   * The border color when the input is focused. Use color keys in `theme.colors`\n   * @example\n   * focusBorderColor = \"blue.500\"\n   */\n  focusBorderColor?: string\n  /**\n   * The border color when the input is invalid. Use color keys in `theme.colors`\n   * @example\n   * errorBorderColor = \"red.500\"\n   */\n  errorBorderColor?: string\n  /**\n   * The native HTML `size` attribute to be passed to the `input`\n   */\n  htmlSize?: number\n}\n\ntype Omitted = \"disabled\" | \"required\" | \"readOnly\" | \"size\"\n\nexport interface InputProps\n  extends Omit<HTMLChakraProps<\"input\">, Omitted>,\n    InputOptions,\n    ThemingProps<\"Input\">,\n    FormControlOptions {}\n\n/**\n * Input\n *\n * Element that allows users enter single valued data.\n *\n * @see Docs https://chakra-ui.com/docs/components/input\n */\nexport const Input = forwardRef<InputProps, \"input\">(function Input(\n  props,\n  ref,\n) {\n  const { htmlSize, ...rest } = props\n\n  const styles = useMultiStyleConfig(\"Input\", rest)\n  const ownProps = omitThemingProps(rest)\n  const input = useFormControl<HTMLInputElement>(ownProps)\n  const _className = cx(\"chakra-input\", props.className)\n\n  return (\n    <chakra.input\n      size={htmlSize}\n      {...input}\n      __css={styles.field}\n      ref={ref}\n      className={_className}\n    />\n  )\n})\n\nInput.displayName = \"Input\"\n\n// This is used in `input-group.tsx`\nInput.id = \"Input\"\n","import { chakra, forwardRef, HTMLChakraProps } from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { useInputGroupStyles } from \"./input-group\"\n\ntype Placement = \"left\" | \"right\"\n\nconst placements = {\n  left: {\n    marginEnd: \"-1px\",\n    borderEndRadius: 0,\n    borderEndColor: \"transparent\",\n  },\n  right: {\n    marginStart: \"-1px\",\n    borderStartRadius: 0,\n    borderStartColor: \"transparent\",\n  },\n}\n\nconst StyledAddon = chakra(\"div\", {\n  baseStyle: {\n    flex: \"0 0 auto\",\n    width: \"auto\",\n    display: \"flex\",\n    alignItems: \"center\",\n    whiteSpace: \"nowrap\",\n  },\n})\n\nexport interface InputAddonProps extends HTMLChakraProps<\"div\"> {\n  placement?: Placement\n}\n\n/**\n * InputAddon\n *\n * Element to append or prepend to an input\n */\nexport const InputAddon = forwardRef<InputAddonProps, \"div\">(\n  function InputAddon(props, ref) {\n    const { placement = \"left\", ...rest } = props\n    const placementStyles = placements[placement] ?? {}\n    const styles = useInputGroupStyles()\n\n    return (\n      <StyledAddon\n        ref={ref}\n        {...rest}\n        __css={{\n          ...styles.addon,\n          ...placementStyles,\n        }}\n      />\n    )\n  },\n)\n\nInputAddon.displayName = \"InputAddon\"\n\nexport type InputLeftAddonProps = InputAddonProps\n\n/**\n * InputLeftAddon\n *\n * Element to append to the left of an input\n */\nexport const InputLeftAddon = forwardRef<InputLeftAddonProps, \"div\">(\n  function InputLeftAddon(props, ref) {\n    return (\n      <InputAddon\n        ref={ref}\n        placement=\"left\"\n        {...props}\n        className={cx(\"chakra-input__left-addon\", props.className)}\n      />\n    )\n  },\n)\n\nInputLeftAddon.displayName = \"InputLeftAddon\"\n\n// This is used in `input-group.tsx`\nInputLeftAddon.id = \"InputLeftAddon\"\n\nexport type InputRightAddonProps = InputAddonProps\n\n/**\n * InputRightAddon\n *\n * Element to append to the right of an input\n */\nexport const InputRightAddon = forwardRef<InputRightAddonProps, \"div\">(\n  function InputRightAddon(props, ref) {\n    return (\n      <InputAddon\n        ref={ref}\n        placement=\"right\"\n        {...props}\n        className={cx(\"chakra-input__right-addon\", props.className)}\n      />\n    )\n  },\n)\n\nInputRightAddon.displayName = \"InputRightAddon\"\n\n// This is used in `input-group.tsx`\nInputRightAddon.id = \"InputRightAddon\"\n","import { createContext } from \"@chakra-ui/react-context\"\nimport { getValidChildren } from \"@chakra-ui/react-children-utils\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { compact } from \"@chakra-ui/object-utils\"\nimport { cloneElement } from \"react\"\n\nconst [InputGroupStylesProvider, useInputGroupStyles] = createContext<\n  Record<string, SystemStyleObject>\n>({\n  name: `InputGroupStylesContext`,\n  errorMessage: `useInputGroupStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<InputGroup />\" `,\n})\n\nexport { useInputGroupStyles }\n\nexport interface InputGroupProps\n  extends HTMLChakraProps<\"div\">,\n    ThemingProps<\"Input\"> {}\n\nexport const InputGroup = forwardRef<InputGroupProps, \"div\">(\n  function InputGroup(props, ref) {\n    const styles = useMultiStyleConfig(\"Input\", props)\n    const { children, className, ...rest } = omitThemingProps(props)\n\n    const _className = cx(\"chakra-input__group\", className)\n    const groupStyles: InputGroupProps = {}\n\n    const validChildren = getValidChildren(children)\n\n    const input: any = styles.field\n\n    validChildren.forEach((child: any) => {\n      if (!styles) return\n\n      if (input && child.type.id === \"InputLeftElement\") {\n        groupStyles.paddingStart = input.height ?? input.h\n      }\n\n      if (input && child.type.id === \"InputRightElement\") {\n        groupStyles.paddingEnd = input.height ?? input.h\n      }\n\n      if (child.type.id === \"InputRightAddon\") {\n        groupStyles.borderEndRadius = 0\n      }\n\n      if (child.type.id === \"InputLeftAddon\") {\n        groupStyles.borderStartRadius = 0\n      }\n    })\n\n    const clones = validChildren.map((child: any) => {\n      /**\n       * Make it possible to override the size and variant from `Input`\n       */\n\n      const theming = compact({\n        size: child.props?.size || props.size,\n        variant: child.props?.variant || props.variant,\n      })\n\n      return child.type.id !== \"Input\"\n        ? cloneElement(child, theming)\n        : cloneElement(child, Object.assign(theming, groupStyles, child.props))\n    })\n\n    return (\n      <chakra.div\n        className={_className}\n        ref={ref}\n        __css={{\n          width: \"100%\",\n          display: \"flex\",\n          position: \"relative\",\n          // Parts of inputs override z-index to ensure that they stack correctly on each other\n          // Create a new stacking context so that these overrides don't leak out and conflict with other z-indexes\n          isolation: \"isolate\",\n          ...styles.group,\n        }}\n        data-group\n        {...rest}\n      >\n        <InputGroupStylesProvider value={styles}>\n          {clones}\n        </InputGroupStylesProvider>\n      </chakra.div>\n    )\n  },\n)\n\nInputGroup.displayName = \"InputGroup\"\n","import {\n  chakra,\n  forwardRef,\n  SystemStyleObject,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { useInputGroupStyles } from \"./input-group\"\n\nexport interface InputElementProps extends HTMLChakraProps<\"div\"> {\n  placement?: \"left\" | \"right\"\n}\n\nconst StyledInputElement = chakra(\"div\", {\n  baseStyle: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    position: \"absolute\",\n    top: \"0\",\n    zIndex: 2,\n  },\n})\n\nconst InputElement = forwardRef<InputElementProps, \"div\">(function InputElement(\n  props,\n  ref,\n) {\n  const { placement = \"left\", ...rest } = props\n\n  const styles = useInputGroupStyles()\n  const input: any = styles.field\n\n  const attr = placement === \"left\" ? \"insetStart\" : \"insetEnd\"\n\n  const elementStyles: SystemStyleObject = {\n    [attr]: \"0\",\n    width: input?.height ?? input?.h,\n    height: input?.height ?? input?.h,\n    fontSize: input?.fontSize,\n    ...styles.element,\n  }\n\n  return <StyledInputElement ref={ref} __css={elementStyles} {...rest} />\n})\n\n// This is used in `input-group.tsx`\nInputElement.id = \"InputElement\"\n\nInputElement.displayName = \"InputElement\"\n\nexport type InputLeftElementProps = Omit<InputElementProps, \"placement\">\n\nexport const InputLeftElement = forwardRef<InputLeftElementProps, \"div\">(\n  function InputLeftElement(props, ref) {\n    const { className, ...rest } = props\n    const _className = cx(\"chakra-input__left-element\", className)\n\n    return (\n      <InputElement\n        ref={ref}\n        placement=\"left\"\n        className={_className}\n        {...rest}\n      />\n    )\n  },\n)\n\n// This is used in `input-group.tsx`\nInputLeftElement.id = \"InputLeftElement\"\n\nInputLeftElement.displayName = \"InputLeftElement\"\n\nexport type InputRightElementProps = Omit<InputElementProps, \"placement\">\n\nexport const InputRightElement = forwardRef<InputRightElementProps, \"div\">(\n  function InputRightElement(props, ref) {\n    const { className, ...rest } = props\n    const _className = cx(\"chakra-input__right-element\", className)\n\n    return (\n      <InputElement\n        ref={ref}\n        placement=\"right\"\n        className={_className}\n        {...rest}\n      />\n    )\n  },\n)\n\n// This is used in `input-group.tsx`\nInputRightElement.id = \"InputRightElement\"\n\nInputRightElement.displayName = \"InputRightElement\"\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,0BAAmD;AACnD,oBAOO;AACP,0BAAmB;AAgDf;AAZG,IAAM,YAAQ,0BAAgC,SAASA,OAC5D,OACA,KACA;AACA,QAAM,EAAE,UAAU,GAAG,KAAK,IAAI;AAE9B,QAAM,aAAS,mCAAoB,SAAS,IAAI;AAChD,QAAM,eAAW,gCAAiB,IAAI;AACtC,QAAM,YAAQ,oCAAiC,QAAQ;AACvD,QAAM,iBAAa,wBAAG,gBAAgB,MAAM,SAAS;AAErD,SACE;AAAA,IAAC,qBAAO;AAAA,IAAP;AAAA,MACC,MAAM;AAAA,MACL,GAAG;AAAA,MACJ,OAAO,OAAO;AAAA,MACd;AAAA,MACA,WAAW;AAAA;AAAA,EACb;AAEJ,CAAC;AAED,MAAM,cAAc;AAGpB,MAAM,KAAK;;;ACtEX,IAAAC,iBAAoD;AACpD,IAAAC,uBAAmB;;;ACDnB,2BAA8B;AAC9B,kCAAiC;AACjC,IAAAC,iBAQO;AACP,IAAAC,uBAAmB;AACnB,0BAAwB;AACxB,mBAA6B;AA8ErB,IAAAC,sBAAA;AA5ER,IAAM,CAAC,0BAA0B,mBAAmB,QAAI,oCAEtD;AAAA,EACA,MAAM;AAAA,EACN,cAAc;AAChB,CAAC;AAQM,IAAM,iBAAa;AAAA,EACxB,SAASC,YAAW,OAAO,KAAK;AAC9B,UAAM,aAAS,oCAAoB,SAAS,KAAK;AACjD,UAAM,EAAE,UAAU,WAAW,GAAG,KAAK,QAAI,iCAAiB,KAAK;AAE/D,UAAM,iBAAa,yBAAG,uBAAuB,SAAS;AACtD,UAAM,cAA+B,CAAC;AAEtC,UAAM,oBAAgB,8CAAiB,QAAQ;AAE/C,UAAM,QAAa,OAAO;AAE1B,kBAAc,QAAQ,CAAC,UAAe;AAxC1C;AAyCM,UAAI,CAAC;AAAQ;AAEb,UAAI,SAAS,MAAM,KAAK,OAAO,oBAAoB;AACjD,oBAAY,gBAAe,WAAM,WAAN,YAAgB,MAAM;AAAA,MACnD;AAEA,UAAI,SAAS,MAAM,KAAK,OAAO,qBAAqB;AAClD,oBAAY,cAAa,WAAM,WAAN,YAAgB,MAAM;AAAA,MACjD;AAEA,UAAI,MAAM,KAAK,OAAO,mBAAmB;AACvC,oBAAY,kBAAkB;AAAA,MAChC;AAEA,UAAI,MAAM,KAAK,OAAO,kBAAkB;AACtC,oBAAY,oBAAoB;AAAA,MAClC;AAAA,IACF,CAAC;AAED,UAAM,SAAS,cAAc,IAAI,CAAC,UAAe;AA5DrD;AAiEM,YAAM,cAAU,6BAAQ;AAAA,QACtB,QAAM,WAAM,UAAN,mBAAa,SAAQ,MAAM;AAAA,QACjC,WAAS,WAAM,UAAN,mBAAa,YAAW,MAAM;AAAA,MACzC,CAAC;AAED,aAAO,MAAM,KAAK,OAAO,cACrB,2BAAa,OAAO,OAAO,QAC3B,2BAAa,OAAO,OAAO,OAAO,SAAS,aAAa,MAAM,KAAK,CAAC;AAAA,IAC1E,CAAC;AAED,WACE;AAAA,MAAC,sBAAO;AAAA,MAAP;AAAA,QACC,WAAW;AAAA,QACX;AAAA,QACA,OAAO;AAAA,UACL,OAAO;AAAA,UACP,SAAS;AAAA,UACT,UAAU;AAAA;AAAA;AAAA,UAGV,WAAW;AAAA,UACX,GAAG,OAAO;AAAA,QACZ;AAAA,QACA,cAAU;AAAA,QACT,GAAG;AAAA,QAEJ,uDAAC,4BAAyB,OAAO,QAC9B,kBACH;AAAA;AAAA,IACF;AAAA,EAEJ;AACF;AAEA,WAAW,cAAc;;;ADtDnB,IAAAC,sBAAA;AAvCN,IAAM,aAAa;AAAA,EACjB,MAAM;AAAA,IACJ,WAAW;AAAA,IACX,iBAAiB;AAAA,IACjB,gBAAgB;AAAA,EAClB;AAAA,EACA,OAAO;AAAA,IACL,aAAa;AAAA,IACb,mBAAmB;AAAA,IACnB,kBAAkB;AAAA,EACpB;AACF;AAEA,IAAM,kBAAc,uBAAO,OAAO;AAAA,EAChC,WAAW;AAAA,IACT,MAAM;AAAA,IACN,OAAO;AAAA,IACP,SAAS;AAAA,IACT,YAAY;AAAA,IACZ,YAAY;AAAA,EACd;AACF,CAAC;AAWM,IAAM,iBAAa;AAAA,EACxB,SAASC,YAAW,OAAO,KAAK;AAvClC;AAwCI,UAAM,EAAE,YAAY,QAAQ,GAAG,KAAK,IAAI;AACxC,UAAM,mBAAkB,gBAAW,SAAS,MAApB,YAAyB,CAAC;AAClD,UAAM,SAAS,oBAAoB;AAEnC,WACE;AAAA,MAAC;AAAA;AAAA,QACC;AAAA,QACC,GAAG;AAAA,QACJ,OAAO;AAAA,UACL,GAAG,OAAO;AAAA,UACV,GAAG;AAAA,QACL;AAAA;AAAA,IACF;AAAA,EAEJ;AACF;AAEA,WAAW,cAAc;AASlB,IAAM,qBAAiB;AAAA,EAC5B,SAASC,gBAAe,OAAO,KAAK;AAClC,WACE;AAAA,MAAC;AAAA;AAAA,QACC;AAAA,QACA,WAAU;AAAA,QACT,GAAG;AAAA,QACJ,eAAW,yBAAG,4BAA4B,MAAM,SAAS;AAAA;AAAA,IAC3D;AAAA,EAEJ;AACF;AAEA,eAAe,cAAc;AAG7B,eAAe,KAAK;AASb,IAAM,sBAAkB;AAAA,EAC7B,SAASC,iBAAgB,OAAO,KAAK;AACnC,WACE;AAAA,MAAC;AAAA;AAAA,QACC;AAAA,QACA,WAAU;AAAA,QACT,GAAG;AAAA,QACJ,eAAW,yBAAG,6BAA6B,MAAM,SAAS;AAAA;AAAA,IAC5D;AAAA,EAEJ;AACF;AAEA,gBAAgB,cAAc;AAG9B,gBAAgB,KAAK;;;AE3GrB,IAAAC,iBAKO;AACP,IAAAC,uBAAmB;AAqCV,IAAAC,sBAAA;AA9BT,IAAM,yBAAqB,uBAAO,OAAO;AAAA,EACvC,WAAW;AAAA,IACT,SAAS;AAAA,IACT,YAAY;AAAA,IACZ,gBAAgB;AAAA,IAChB,UAAU;AAAA,IACV,KAAK;AAAA,IACL,QAAQ;AAAA,EACV;AACF,CAAC;AAED,IAAM,mBAAe,2BAAqC,SAASC,cACjE,OACA,KACA;AA3BF;AA4BE,QAAM,EAAE,YAAY,QAAQ,GAAG,KAAK,IAAI;AAExC,QAAM,SAAS,oBAAoB;AACnC,QAAM,QAAa,OAAO;AAE1B,QAAM,OAAO,cAAc,SAAS,eAAe;AAEnD,QAAM,gBAAmC;AAAA,IACvC,CAAC,IAAI,GAAG;AAAA,IACR,QAAO,oCAAO,WAAP,YAAiB,+BAAO;AAAA,IAC/B,SAAQ,oCAAO,WAAP,YAAiB,+BAAO;AAAA,IAChC,UAAU,+BAAO;AAAA,IACjB,GAAG,OAAO;AAAA,EACZ;AAEA,SAAO,6CAAC,sBAAmB,KAAU,OAAO,eAAgB,GAAG,MAAM;AACvE,CAAC;AAGD,aAAa,KAAK;AAElB,aAAa,cAAc;AAIpB,IAAM,uBAAmB;AAAA,EAC9B,SAASC,kBAAiB,OAAO,KAAK;AACpC,UAAM,EAAE,WAAW,GAAG,KAAK,IAAI;AAC/B,UAAM,iBAAa,yBAAG,8BAA8B,SAAS;AAE7D,WACE;AAAA,MAAC;AAAA;AAAA,QACC;AAAA,QACA,WAAU;AAAA,QACV,WAAW;AAAA,QACV,GAAG;AAAA;AAAA,IACN;AAAA,EAEJ;AACF;AAGA,iBAAiB,KAAK;AAEtB,iBAAiB,cAAc;AAIxB,IAAM,wBAAoB;AAAA,EAC/B,SAASC,mBAAkB,OAAO,KAAK;AACrC,UAAM,EAAE,WAAW,GAAG,KAAK,IAAI;AAC/B,UAAM,iBAAa,yBAAG,+BAA+B,SAAS;AAE9D,WACE;AAAA,MAAC;AAAA;AAAA,QACC;AAAA,QACA,WAAU;AAAA,QACV,WAAW;AAAA,QACV,GAAG;AAAA;AAAA,IACN;AAAA,EAEJ;AACF;AAGA,kBAAkB,KAAK;AAEvB,kBAAkB,cAAc;","names":["Input","import_system","import_shared_utils","import_system","import_shared_utils","import_jsx_runtime","InputGroup","import_jsx_runtime","InputAddon","InputLeftAddon","InputRightAddon","import_system","import_shared_utils","import_jsx_runtime","InputElement","InputLeftElement","InputRightElement"]}