{"version":3,"sources":["../src/theme.types.ts"],"sourcesContent":["import type {\n  PartsStyleInterpolation,\n  Pseudos,\n  SemanticValue,\n  StyleObjectOrFn,\n  SystemStyleInterpolation,\n  ThemingProps,\n} from \"@chakra-ui/styled-system\"\nimport { Styles } from \"@chakra-ui/theme-tools\"\n\ntype ColorMode = \"light\" | \"dark\"\ntype Dict = Record<string, any>\n\ntype ColorModeOptions = {\n  initialColorMode?: \"light\" | \"dark\" | \"system\"\n  useSystemColorMode?: boolean\n  disableTransitionOnChange?: boolean\n}\n\nexport type RecursiveProperty<T = string | number> = RecursiveObject<T> | T\n\nexport interface RecursiveObject<T = string | number> {\n  [property: string]: RecursiveProperty<T>\n}\n\nexport interface ThemeConfig extends ColorModeOptions {\n  cssVarPrefix?: string\n}\n\nexport type ThemeTransitions = RecursiveObject & {\n  property: RecursiveObject\n  easing: RecursiveObject\n  duration: RecursiveObject\n}\n\nexport interface ColorHues {\n  50: string\n  100: string\n  200: string\n  300: string\n  400: string\n  500: string\n  600: string\n  700: string\n  800: string\n  900: string\n}\n\nexport type Colors = RecursiveObject<\n  Record<string, Partial<ColorHues>> | string\n>\n\nexport type ThemeDirection = \"ltr\" | \"rtl\"\n\nexport interface ComponentDefaultProps\n  extends Omit<ThemingProps, \"styleConfig\">,\n    Dict {}\n\nexport interface ThemeComponentProps<T extends ChakraTheme = ChakraTheme>\n  extends Omit<ThemingProps, \"styleConfig\"> {\n  colorMode: ColorMode\n  theme: T\n  [x: string]: any\n}\n\nexport type ThemeComponentFunction<S, T extends ChakraTheme = ChakraTheme> = (\n  props: ThemeComponentProps<T>,\n) => S\n\nexport type ThemingPropsThunk<S, T extends ChakraTheme = ChakraTheme> =\n  | S\n  | ThemeComponentFunction<S, T>\n\nexport interface SystemStyleObjectRecord {\n  [key: string]: StyleObjectOrFn\n}\n\nexport interface ComponentSingleStyleConfig {\n  parts?: never\n  baseStyle?: SystemStyleInterpolation\n  sizes?: Record<string, SystemStyleInterpolation>\n  variants?: Record<string, SystemStyleInterpolation>\n  defaultProps?: any\n}\n\nexport interface ComponentMultiStyleConfig {\n  parts: string[]\n  baseStyle?: PartsStyleInterpolation\n  sizes?: Record<string, PartsStyleInterpolation>\n  variants?: Record<string, PartsStyleInterpolation>\n  defaultProps?: any\n}\n\nexport type ComponentStyleConfig =\n  | ComponentSingleStyleConfig\n  | ComponentMultiStyleConfig\n\nexport interface ThemeComponents {\n  [componentName: string]: ComponentStyleConfig\n}\n\ninterface Typography {\n  fonts: RecursiveObject<string>\n  fontSizes: RecursiveObject\n  fontWeights: RecursiveObject\n  letterSpacings: RecursiveObject\n  lineHeights: RecursiveObject\n}\n\ninterface Foundations extends Typography {\n  borders: RecursiveObject\n  breakpoints: Dict\n  colors: Colors\n  radii: RecursiveObject\n  shadows: RecursiveObject<string>\n  sizes: RecursiveObject\n  space: RecursiveObject\n  transition: ThemeTransitions\n  zIndices: RecursiveObject\n}\n\nexport interface ChakraTheme extends Foundations {\n  semanticTokens?: Partial<\n    Record<keyof Foundations, Record<string, SemanticValue<keyof Pseudos>>>\n  >\n  components: ThemeComponents\n  config: ThemeConfig\n  direction: ThemeDirection\n  styles: Styles\n  layerStyles?: SystemStyleObjectRecord\n  textStyles?: SystemStyleObjectRecord\n}\n"],"mappings":";;;;;;;;;;;;;;;;AAAA;AAAA;","names":[]}