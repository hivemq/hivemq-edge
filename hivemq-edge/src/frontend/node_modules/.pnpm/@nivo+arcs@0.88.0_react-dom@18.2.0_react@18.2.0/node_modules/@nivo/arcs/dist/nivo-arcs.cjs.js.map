{"version":3,"file":"nivo-arcs.cjs.js","sources":["../src/arc_labels/ArcLabel.tsx","../src/utils.ts","../src/arcTransitionMode.ts","../src/centers.ts","../src/arc_labels/index.ts","../src/arc_link_labels/ArcLinkLabel.tsx","../src/arc_link_labels/compute.ts","../src/arc_link_labels/useArcLinkLabelsTransition.ts","../src/arc_link_labels/useArcLinks.ts","../src/arc_link_labels/index.ts","../src/ArcShape.tsx","../src/interpolateArc.ts","../src/useArcsTransition.ts","../src/interactivity.ts","../src/arc_labels/ArcLabelsLayer.tsx","../src/ArcLine.tsx","../src/arc_link_labels/ArcLinkLabelsLayer.tsx","../src/ArcsLayer.tsx","../src/boundingBox.ts","../src/arc_labels/canvas.ts","../src/arc_link_labels/canvas.ts","../src/useAnimatedArc.ts","../src/useArcGenerator.ts","../src/arc_labels/useArcLabels.ts","../src/arc_link_labels/useArcLinkLabels.ts"],"sourcesContent":["import { CSSProperties } from 'react'\nimport { SpringValue, Interpolation, animated } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\nimport { DatumWithArcAndColor } from '../types'\n\nconst staticStyle: CSSProperties = {\n    pointerEvents: 'none',\n}\n\nexport interface ArcLabelProps<Datum extends DatumWithArcAndColor> {\n    datum: Datum\n    label: string\n    style: {\n        progress: SpringValue<number>\n        transform: Interpolation<string>\n        textColor: string\n    }\n}\n\nexport const ArcLabel = <Datum extends DatumWithArcAndColor>({\n    label,\n    style,\n}: ArcLabelProps<Datum>) => {\n    const theme = useTheme()\n\n    return (\n        <animated.g transform={style.transform} opacity={style.progress} style={staticStyle}>\n            <animated.text\n                textAnchor=\"middle\"\n                dominantBaseline=\"central\"\n                style={{\n                    ...theme.labels.text,\n                    fill: style.textColor,\n                }}\n            >\n                {label}\n            </animated.text>\n        </animated.g>\n    )\n}\n","import { useMemo } from 'react'\nimport { radiansToDegrees, positionFromAngle, degreesToRadians } from '@nivo/core'\nimport { DatumWithArc } from './types'\n\n/**\n * Make sure an angle (expressed in radians)\n * always falls in the range 0~2*PI.\n */\nexport const getNormalizedAngle = (angle: number) => {\n    let normalizedAngle = angle % (Math.PI * 2)\n    if (normalizedAngle < 0) {\n        normalizedAngle += Math.PI * 2\n    }\n\n    return normalizedAngle\n}\n\n/**\n * Filter out arcs with a length below `skipAngle`.\n */\nexport const filterDataBySkipAngle = <Datum extends DatumWithArc>(\n    data: Datum[],\n    skipAngle: number\n) =>\n    data.filter(\n        datum => Math.abs(radiansToDegrees(datum.arc.endAngle - datum.arc.startAngle)) >= skipAngle\n    )\n\n/**\n * Memoized version of `filterDataBySkipAngle`.\n */\nexport const useFilteredDataBySkipAngle = <Datum extends DatumWithArc>(\n    data: Datum[],\n    skipAngle: number\n) => useMemo(() => filterDataBySkipAngle(data, skipAngle), [data, skipAngle])\n\nexport const svgEllipticalArcCommand = (\n    radius: number,\n    largeArcFlag: 0 | 1,\n    sweepFlag: 0 | 1,\n    x: number,\n    y: number\n) =>\n    [\n        'A',\n        radius,\n        radius,\n        0, // x-axis-rotation\n        largeArcFlag,\n        sweepFlag,\n        x,\n        y,\n    ].join(' ')\n\nexport const generateSvgArc = (\n    radius: number,\n    originalStartAngle: number,\n    originalEndAngle: number\n): string => {\n    const startAngle = Math.min(originalStartAngle, originalEndAngle)\n    const endAngle = Math.max(originalStartAngle, originalEndAngle)\n\n    const start = positionFromAngle(degreesToRadians(endAngle), radius)\n    const end = positionFromAngle(degreesToRadians(startAngle), radius)\n\n    // we have a full circle, we cannot use a single elliptical arc\n    // to draw it, so we use 2 in that case.\n    if (endAngle - startAngle >= 360) {\n        const mid = positionFromAngle(degreesToRadians(startAngle + 180), radius)\n\n        return [\n            `M ${start.x} ${start.y}`,\n            svgEllipticalArcCommand(radius, 1, 1, mid.x, mid.y),\n            `M ${start.x} ${start.y}`,\n            svgEllipticalArcCommand(radius, 1, 0, mid.x, mid.y),\n        ].join(' ')\n    }\n\n    const largeArcFlag = endAngle - startAngle <= 180 ? 0 : 1\n\n    return [\n        `M ${start.x} ${start.y}`,\n        svgEllipticalArcCommand(radius, largeArcFlag, 0, end.x, end.y),\n    ].join(' ')\n}\n","import { Arc, DatumWithArc } from './types'\nimport { useMemo } from 'react'\n\nexport interface ArcTransitionModeConfig {\n    enter: (arc: Arc) => Arc\n    update: (arc: Arc) => Arc\n    leave: (arc: Arc) => Arc\n}\n\nexport const arcTransitionModes = [\n    'startAngle',\n    'middleAngle',\n    'endAngle',\n    'innerRadius',\n    'centerRadius',\n    'outerRadius',\n    'pushIn',\n    'pushOut',\n] as const\nexport type ArcTransitionMode = (typeof arcTransitionModes)[number]\n\nexport const arcTransitionModeById: Record<ArcTransitionMode, ArcTransitionModeConfig> = {\n    startAngle: {\n        enter: (arc: Arc) => ({\n            ...arc,\n            endAngle: arc.startAngle,\n        }),\n        update: (arc: Arc) => arc,\n        leave: (arc: Arc) => ({\n            ...arc,\n            startAngle: arc.endAngle,\n        }),\n    },\n    middleAngle: {\n        enter: (arc: Arc) => {\n            const middleAngle = arc.startAngle + (arc.endAngle - arc.startAngle) / 2\n\n            return {\n                ...arc,\n                startAngle: middleAngle,\n                endAngle: middleAngle,\n            }\n        },\n        update: (arc: Arc) => arc,\n        leave: (arc: Arc) => {\n            const middleAngle = arc.startAngle + (arc.endAngle - arc.startAngle) / 2\n\n            return {\n                ...arc,\n                startAngle: middleAngle,\n                endAngle: middleAngle,\n            }\n        },\n    },\n    endAngle: {\n        enter: (arc: Arc) => ({\n            ...arc,\n            startAngle: arc.endAngle,\n        }),\n        update: (arc: Arc) => arc,\n        leave: (arc: Arc) => ({\n            ...arc,\n            endAngle: arc.startAngle,\n        }),\n    },\n    innerRadius: {\n        enter: (arc: Arc) => ({\n            ...arc,\n            outerRadius: arc.innerRadius,\n        }),\n        update: (arc: Arc) => arc,\n        leave: (arc: Arc) => ({\n            ...arc,\n            innerRadius: arc.outerRadius,\n        }),\n    },\n    centerRadius: {\n        enter: (arc: Arc) => {\n            const centerRadius = arc.innerRadius + (arc.outerRadius - arc.innerRadius) / 2\n\n            return {\n                ...arc,\n                innerRadius: centerRadius,\n                outerRadius: centerRadius,\n            }\n        },\n        update: (arc: Arc) => arc,\n        leave: (arc: Arc) => {\n            const centerRadius = arc.innerRadius + (arc.outerRadius - arc.innerRadius) / 2\n\n            return {\n                ...arc,\n                innerRadius: centerRadius,\n                outerRadius: centerRadius,\n            }\n        },\n    },\n    outerRadius: {\n        enter: (arc: Arc) => ({\n            ...arc,\n            innerRadius: arc.outerRadius,\n        }),\n        update: (arc: Arc) => arc,\n        leave: (arc: Arc) => ({\n            ...arc,\n            outerRadius: arc.innerRadius,\n        }),\n    },\n    pushIn: {\n        enter: (arc: Arc) => ({\n            ...arc,\n            innerRadius: arc.innerRadius - arc.outerRadius + arc.innerRadius,\n            outerRadius: arc.innerRadius,\n        }),\n        update: (arc: Arc) => arc,\n        leave: (arc: Arc) => ({\n            ...arc,\n            innerRadius: arc.outerRadius,\n            outerRadius: arc.outerRadius + arc.outerRadius - arc.innerRadius,\n        }),\n    },\n    pushOut: {\n        enter: (arc: Arc) => ({\n            ...arc,\n            innerRadius: arc.outerRadius,\n            outerRadius: arc.outerRadius + arc.outerRadius - arc.innerRadius,\n        }),\n        update: (arc: Arc) => arc,\n        leave: (arc: Arc) => ({\n            ...arc,\n            innerRadius: arc.innerRadius - arc.outerRadius + arc.innerRadius,\n            outerRadius: arc.innerRadius,\n        }),\n    },\n}\n\nexport interface TransitionExtra<Datum extends DatumWithArc, ExtraProps> {\n    enter: (datum: Datum) => ExtraProps\n    update: (datum: Datum) => ExtraProps\n    leave: (datum: Datum) => ExtraProps\n}\n\nexport const useArcTransitionMode = <Datum extends DatumWithArc, ExtraProps>(\n    mode: ArcTransitionMode,\n    extraTransition?: TransitionExtra<Datum, ExtraProps>\n) =>\n    useMemo(() => {\n        const transitionMode = arcTransitionModeById[mode]\n\n        return {\n            enter: (datum: Datum) => ({\n                progress: 0,\n                ...transitionMode.enter(datum.arc),\n                ...(extraTransition ? extraTransition.enter(datum) : {}),\n            }),\n            update: (datum: Datum) => ({\n                progress: 1,\n                ...transitionMode.update(datum.arc),\n                ...(extraTransition ? extraTransition.update(datum) : {}),\n            }),\n            leave: (datum: Datum) => ({\n                progress: 0,\n                ...transitionMode.leave(datum.arc),\n                ...(extraTransition ? extraTransition.leave(datum) : {}),\n            }),\n        }\n    }, [mode, extraTransition])\n","import { useMemo } from 'react'\nimport { useTransition, to, SpringValue } from '@react-spring/web'\nimport {\n    // @ts-ignore\n    midAngle,\n    positionFromAngle,\n    useMotionConfig,\n} from '@nivo/core'\nimport { Arc, DatumWithArc, Point } from './types'\nimport { filterDataBySkipAngle } from './utils'\nimport { ArcTransitionMode, TransitionExtra, useArcTransitionMode } from './arcTransitionMode'\n\nexport const computeArcCenter = (arc: Arc, offset: number): Point => {\n    const angle = midAngle(arc) - Math.PI / 2\n    const radius = arc.innerRadius + (arc.outerRadius - arc.innerRadius) * offset\n\n    return positionFromAngle(angle, radius)\n}\n\nexport const interpolateArcCenter =\n    (offset: number) =>\n    (\n        startAngleValue: SpringValue<number>,\n        endAngleValue: SpringValue<number>,\n        innerRadiusValue: SpringValue<number>,\n        outerRadiusValue: SpringValue<number>\n    ) =>\n        to(\n            [startAngleValue, endAngleValue, innerRadiusValue, outerRadiusValue],\n            (startAngle, endAngle, innerRadius, outerRadius) => {\n                const centroid = computeArcCenter(\n                    { startAngle, endAngle, innerRadius, outerRadius },\n                    offset\n                )\n\n                return `translate(${centroid.x},${centroid.y})`\n            }\n        )\n\nexport const useArcCentersTransition = <Datum extends DatumWithArc, ExtraProps = unknown>(\n    data: Datum[],\n    // define where the centers should be placed,\n    // 0.0: inner radius\n    // 0.5: center\n    // 1.0: outer radius\n    offset = 0.5,\n    mode: ArcTransitionMode = 'innerRadius',\n    extra?: TransitionExtra<Datum, ExtraProps>\n) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const phases = useArcTransitionMode<Datum, ExtraProps>(mode, extra)\n\n    const transition = useTransition<\n        Datum,\n        {\n            progress: number\n            startAngle: number\n            endAngle: number\n            innerRadius: number\n            outerRadius: number\n        } & ExtraProps\n    >(data, {\n        keys: datum => datum.id,\n        initial: phases.update,\n        from: phases.enter,\n        enter: phases.update,\n        update: phases.update,\n        leave: phases.leave,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return {\n        transition,\n        interpolate: interpolateArcCenter(offset),\n    }\n}\n\nexport interface ArcCenter<Datum extends DatumWithArc> extends Point {\n    data: Datum\n}\n\n/**\n * Compute an array of arc centers from an array of data containing arcs.\n *\n * If you plan to animate those, you could use `useArcCentersTransition`\n * instead, you could use the returned array with react-spring `useTransition`,\n * but this would lead to cartesian transitions (x/y), while `useArcCentersTransition`\n * will generate proper transitions using radius/angle.\n */\nexport const useArcCenters = <\n    Datum extends DatumWithArc,\n    ExtraProps extends Record<string, any> = Record<string, any>\n>({\n    data,\n    offset = 0.5,\n    skipAngle = 0,\n    computeExtraProps = () => ({} as ExtraProps),\n}: {\n    data: Datum[]\n    // define where the centers should be placed,\n    // 0.0: inner radius\n    // 0.5: center\n    // 1.0: outer radius\n    offset?: number\n    // arcs with a length below this (end angle - start angle in degrees)\n    // are going to be excluded, this can typically be used to avoid having\n    // overlapping labels.\n    skipAngle?: number\n    // this can be used to append extra properties to the centers,\n    // can be used to compute a color/label for example.\n    computeExtraProps?: (datum: Datum) => ExtraProps\n}): (ArcCenter<Datum> & ExtraProps)[] =>\n    useMemo(\n        () =>\n            filterDataBySkipAngle<Datum>(data, skipAngle)\n                // compute position and extra props for each eligible datum\n                .map(datum => {\n                    const position = computeArcCenter(datum.arc, offset)\n\n                    return {\n                        ...computeExtraProps(datum),\n                        x: position.x,\n                        y: position.y,\n                        data: datum,\n                    }\n                }),\n        [data, offset, skipAngle, computeExtraProps]\n    )\n","import { ArcLabel } from './ArcLabel'\n\nexport const ArcLabelComponent = ArcLabel\nexport * from './ArcLabelsLayer'\nexport * from './canvas'\nexport * from './props'\nexport * from './useArcLabels'\n","import { useTheme } from '@nivo/core'\nimport { SpringValue, Interpolation, animated } from '@react-spring/web'\nimport { DatumWithArcAndColor } from '../types'\n\nexport interface ArcLinkLabelProps<Datum extends DatumWithArcAndColor> {\n    datum: Datum\n    label: string\n    style: {\n        path: Interpolation<string>\n        thickness: number\n        textPosition: Interpolation<string>\n        textAnchor: Interpolation<'start' | 'end'>\n        linkColor: SpringValue<string>\n        opacity: SpringValue<number>\n        textColor: SpringValue<string>\n    }\n}\n\nexport const ArcLinkLabel = <Datum extends DatumWithArcAndColor>({\n    label,\n    style,\n}: ArcLinkLabelProps<Datum>) => {\n    const theme = useTheme()\n\n    return (\n        <animated.g opacity={style.opacity}>\n            <animated.path\n                fill=\"none\"\n                stroke={style.linkColor}\n                strokeWidth={style.thickness}\n                d={style.path}\n            />\n            <animated.text\n                transform={style.textPosition}\n                textAnchor={style.textAnchor}\n                dominantBaseline=\"central\"\n                style={{\n                    ...theme.labels.text,\n                    fill: style.textColor,\n                }}\n            >\n                {label}\n            </animated.text>\n        </animated.g>\n    )\n}\n","import { positionFromAngle } from '@nivo/core'\nimport { Arc, Point } from '../types'\nimport { getNormalizedAngle } from '../utils'\nimport { ArcLink } from './types'\n\n/**\n * Compute text anchor for a given arc.\n *\n * `computeArcLink` already computes a `side`, but when using\n * `react-spring`, you cannot have a single interpolation\n * returning several output values, so we need to compute\n * them in separate interpolations.\n */\nexport const computeArcLinkTextAnchor = (arc: Arc): 'start' | 'end' => {\n    const centerAngle = getNormalizedAngle(\n        arc.startAngle + (arc.endAngle - arc.startAngle) / 2 - Math.PI / 2\n    )\n\n    if (centerAngle < Math.PI / 2 || centerAngle > Math.PI * 1.5) {\n        return 'start'\n    }\n\n    return 'end'\n}\n\n/**\n * Compute the link of a single arc, returning its points,\n * please note that points coordinates are relative to\n * the center of the arc.\n */\nexport const computeArcLink = (\n    arc: Arc,\n    offset: number,\n    diagonalLength: number,\n    straightLength: number\n): ArcLink => {\n    const centerAngle = getNormalizedAngle(\n        arc.startAngle + (arc.endAngle - arc.startAngle) / 2 - Math.PI / 2\n    )\n    const point0: Point = positionFromAngle(centerAngle, arc.outerRadius + offset)\n    const point1: Point = positionFromAngle(centerAngle, arc.outerRadius + offset + diagonalLength)\n\n    let side: ArcLink['side']\n    let point2: Point\n    if (centerAngle < Math.PI / 2 || centerAngle > Math.PI * 1.5) {\n        side = 'after'\n        point2 = {\n            x: point1.x + straightLength,\n            y: point1.y,\n        }\n    } else {\n        side = 'before'\n        point2 = {\n            x: point1.x - straightLength,\n            y: point1.y,\n        }\n    }\n\n    return {\n        side,\n        points: [point0, point1, point2],\n    }\n}\n","import { useMemo } from 'react'\nimport { SpringValue, useTransition, to } from '@react-spring/web'\nimport { line } from 'd3-shape'\nimport { useMotionConfig, useTheme } from '@nivo/core'\nimport { InheritedColorConfig, useInheritedColor } from '@nivo/colors'\nimport { DatumWithArcAndColor, Point } from '../types'\nimport { useFilteredDataBySkipAngle } from '../utils'\nimport { computeArcLink, computeArcLinkTextAnchor } from './compute'\n\nconst lineGenerator = line<Point>()\n    .x(d => d.x)\n    .y(d => d.y)\n\ntype AnimatedProps = {\n    startAngle: number\n    endAngle: number\n    innerRadius: number\n    outerRadius: number\n    offset: number\n    diagonalLength: number\n    straightLength: number\n    textOffset: number\n    linkColor: string\n    textColor: string\n    opacity: number\n}\n\nconst useTransitionPhases = <Datum extends DatumWithArcAndColor>({\n    offset,\n    diagonalLength,\n    straightLength,\n    textOffset,\n    getLinkColor,\n    getTextColor,\n}: Pick<AnimatedProps, 'offset' | 'diagonalLength' | 'straightLength' | 'textOffset'> & {\n    getLinkColor: (datum: Datum) => string\n    getTextColor: (datum: Datum) => string\n}): Record<'enter' | 'update' | 'leave', (datum: Datum) => AnimatedProps> =>\n    useMemo(\n        () => ({\n            enter: (datum: Datum) => ({\n                startAngle: datum.arc.startAngle,\n                endAngle: datum.arc.endAngle,\n                innerRadius: datum.arc.innerRadius,\n                outerRadius: datum.arc.outerRadius,\n                offset,\n                diagonalLength: 0,\n                straightLength: 0,\n                textOffset,\n                linkColor: getLinkColor(datum),\n                textColor: getTextColor(datum),\n                opacity: 0,\n            }),\n            update: (d: Datum) => ({\n                startAngle: d.arc.startAngle,\n                endAngle: d.arc.endAngle,\n                innerRadius: d.arc.innerRadius,\n                outerRadius: d.arc.outerRadius,\n                offset,\n                diagonalLength,\n                straightLength,\n                textOffset,\n                linkColor: getLinkColor(d),\n                textColor: getTextColor(d),\n                opacity: 1,\n            }),\n            leave: (d: Datum) => ({\n                startAngle: d.arc.startAngle,\n                endAngle: d.arc.endAngle,\n                innerRadius: d.arc.innerRadius,\n                outerRadius: d.arc.outerRadius,\n                offset,\n                diagonalLength: 0,\n                straightLength: 0,\n                textOffset,\n                linkColor: getLinkColor(d),\n                textColor: getTextColor(d),\n                opacity: 0,\n            }),\n        }),\n        [diagonalLength, straightLength, textOffset, getLinkColor, getTextColor, offset]\n    )\n\nconst interpolateLink = (\n    startAngleValue: SpringValue<AnimatedProps['startAngle']>,\n    endAngleValue: SpringValue<AnimatedProps['endAngle']>,\n    innerRadiusValue: SpringValue<AnimatedProps['innerRadius']>,\n    outerRadiusValue: SpringValue<AnimatedProps['outerRadius']>,\n    offsetValue: SpringValue<AnimatedProps['offset']>,\n    diagonalLengthValue: SpringValue<AnimatedProps['diagonalLength']>,\n    straightLengthValue: SpringValue<AnimatedProps['straightLength']>\n) =>\n    to(\n        [\n            startAngleValue,\n            endAngleValue,\n            innerRadiusValue,\n            outerRadiusValue,\n            offsetValue,\n            diagonalLengthValue,\n            straightLengthValue,\n        ],\n        (\n            startAngle,\n            endAngle,\n            innerRadius,\n            outerRadius,\n            offset,\n            diagonalLengthAnimated,\n            straightLengthAnimated\n        ) => {\n            const { points } = computeArcLink(\n                {\n                    startAngle,\n                    endAngle,\n                    innerRadius,\n                    outerRadius,\n                },\n                offset,\n                diagonalLengthAnimated,\n                straightLengthAnimated\n            )\n\n            return lineGenerator(points)\n        }\n    )\n\nconst interpolateTextAnchor = (\n    startAngleValue: SpringValue<AnimatedProps['startAngle']>,\n    endAngleValue: SpringValue<AnimatedProps['endAngle']>,\n    innerRadiusValue: SpringValue<AnimatedProps['innerRadius']>,\n    outerRadiusValue: SpringValue<AnimatedProps['outerRadius']>\n) =>\n    to(\n        [startAngleValue, endAngleValue, innerRadiusValue, outerRadiusValue],\n        (startAngle, endAngle, innerRadius, outerRadius) => {\n            return computeArcLinkTextAnchor({\n                startAngle,\n                endAngle,\n                innerRadius,\n                outerRadius,\n            })\n        }\n    )\n\n/**\n * Interpolating the text position involves almost the same computation\n * as `interpolateLink`, unfortunately `react-spring` does not support\n * multiple output values from a single interpolation.\n *\n * We should revise this if `react-spring` adds this feature at some point.\n */\nconst interpolateTextPosition = (\n    startAngleValue: SpringValue<AnimatedProps['startAngle']>,\n    endAngleValue: SpringValue<AnimatedProps['endAngle']>,\n    innerRadiusValue: SpringValue<AnimatedProps['innerRadius']>,\n    outerRadiusValue: SpringValue<AnimatedProps['outerRadius']>,\n    offsetValue: SpringValue<AnimatedProps['offset']>,\n    diagonalLengthValue: SpringValue<AnimatedProps['diagonalLength']>,\n    straightLengthValue: SpringValue<AnimatedProps['straightLength']>,\n    textOffsetValue: SpringValue<AnimatedProps['textOffset']>\n) =>\n    to(\n        [\n            startAngleValue,\n            endAngleValue,\n            innerRadiusValue,\n            outerRadiusValue,\n            offsetValue,\n            diagonalLengthValue,\n            straightLengthValue,\n            textOffsetValue,\n        ],\n        (\n            startAngle,\n            endAngle,\n            innerRadius,\n            outerRadius,\n            offset,\n            diagonalLengthAnimated,\n            straightLengthAnimated,\n            textOffset\n        ) => {\n            const { points, side } = computeArcLink(\n                {\n                    startAngle,\n                    endAngle,\n                    innerRadius,\n                    outerRadius,\n                },\n                offset,\n                diagonalLengthAnimated,\n                straightLengthAnimated\n            )\n\n            const position = points[2]\n            if (side === 'before') {\n                position.x -= textOffset\n            } else {\n                position.x += textOffset\n            }\n\n            return `translate(${position.x},${position.y})`\n        }\n    )\n\n/**\n * This hook can be used to animate a group of arc link labels,\n * if you just want to compute the labels, please use `useArcLinkLabels`.\n */\nexport const useArcLinkLabelsTransition = <Datum extends DatumWithArcAndColor>({\n    data,\n    offset = 0,\n    diagonalLength,\n    straightLength,\n    skipAngle = 0,\n    textOffset,\n    linkColor,\n    textColor,\n}: {\n    data: Datum[]\n    offset?: number\n    diagonalLength: number\n    straightLength: number\n    skipAngle?: number\n    textOffset: number\n    linkColor: InheritedColorConfig<Datum>\n    textColor: InheritedColorConfig<Datum>\n}) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const theme = useTheme()\n    const getLinkColor = useInheritedColor<Datum>(linkColor, theme)\n    const getTextColor = useInheritedColor<Datum>(textColor, theme)\n\n    const filteredData = useFilteredDataBySkipAngle<Datum>(data, skipAngle)\n    const transitionPhases = useTransitionPhases<Datum>({\n        offset,\n        diagonalLength,\n        straightLength,\n        textOffset,\n        getLinkColor,\n        getTextColor,\n    })\n\n    const transition = useTransition<Datum, AnimatedProps>(filteredData, {\n        keys: datum => datum.id,\n        initial: transitionPhases.update,\n        from: transitionPhases.enter,\n        enter: transitionPhases.update,\n        update: transitionPhases.update,\n        leave: transitionPhases.leave,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return {\n        transition,\n        interpolateLink,\n        interpolateTextAnchor,\n        interpolateTextPosition,\n    }\n}\n","import { useMemo } from 'react'\nimport { radiansToDegrees } from '@nivo/core'\nimport { DatumWithArc } from '../types'\nimport { ArcLinkWithDatum } from './types'\nimport { computeArcLink } from './compute'\n\n/**\n * Compute links for an array of data containing arcs.\n *\n * This is typically used to create labels for arcs,\n * and it's used for the `useArcLinkLabels` hook.\n */\nexport const useArcLinks = <\n    Datum extends DatumWithArc,\n    ExtraProps extends Record<string, any> = Record<string, any>\n>({\n    data,\n    skipAngle = 0,\n    offset = 0.5,\n    diagonalLength,\n    straightLength,\n    computeExtraProps = () => ({} as ExtraProps),\n}: {\n    data: Datum[]\n    // arcs with a length below this (end angle - start angle in degrees)\n    // are going to be excluded, this can typically be used to avoid having\n    // overlapping labels.\n    skipAngle?: number\n    // offset from arc outer radius in pixels\n    offset?: number\n    // length of the diagonal segment of the link\n    diagonalLength: number\n    // length of the straight segment of the link\n    straightLength: number\n    // this can be used to append extra properties to the links,\n    // can be used to compute a color/label for example.\n    computeExtraProps?: (datum: ArcLinkWithDatum<Datum>) => ExtraProps\n}): (ArcLinkWithDatum<Datum> & ExtraProps)[] => {\n    const links = useMemo(\n        () =>\n            data\n                // filter out arcs with a length below `skipAngle`\n                .filter(\n                    datum =>\n                        Math.abs(radiansToDegrees(datum.arc.endAngle - datum.arc.startAngle)) >=\n                        skipAngle\n                )\n                // compute the link for each eligible arc\n                .map(datum => ({\n                    ...computeArcLink(datum.arc, offset, diagonalLength, straightLength),\n                    data: datum,\n                })),\n        [data, skipAngle, offset, diagonalLength, straightLength]\n    )\n\n    // splitting memoization of links and extra props can be more efficient,\n    // this way if only `computeExtraProps` changes, we skip links computation.\n    return useMemo(\n        () =>\n            links.map(link => ({\n                ...computeExtraProps(link),\n                ...link,\n            })),\n        [links, computeExtraProps]\n    )\n}\n","import { ArcLinkLabel } from './ArcLinkLabel'\n\nexport const ArcLinkLabelComponent = ArcLinkLabel\nexport * from './ArcLinkLabelsLayer'\nexport * from './canvas'\nexport * from './compute'\nexport * from './props'\nexport * from './types'\nexport * from './useArcLinkLabels'\nexport * from './useArcLinkLabelsTransition'\nexport * from './useArcLinks'\n","import { useCallback, MouseEvent } from 'react'\nimport { SpringValue, Interpolation, animated } from '@react-spring/web'\nimport { DatumWithArcAndColor } from './types'\n\nexport type ArcMouseHandler<Datum extends DatumWithArcAndColor> = (\n    datum: Datum,\n    event: MouseEvent<SVGPathElement>\n) => void\n\nexport interface ArcShapeProps<Datum extends DatumWithArcAndColor> {\n    datum: Datum\n    style: {\n        opacity: SpringValue<number>\n        color: SpringValue<string>\n        borderWidth: number\n        borderColor: SpringValue<string>\n        path: Interpolation<string>\n    }\n    onClick?: ArcMouseHandler<Datum>\n    onMouseEnter?: ArcMouseHandler<Datum>\n    onMouseMove?: ArcMouseHandler<Datum>\n    onMouseLeave?: ArcMouseHandler<Datum>\n}\n\n/**\n * A simple arc component to be used typically with an `ArcsLayer`.\n *\n * Please note that the component accepts `SpringValue`s instead of\n * regular values to support animations.\n */\nexport const ArcShape = <Datum extends DatumWithArcAndColor>({\n    datum,\n    style,\n    onClick,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n}: ArcShapeProps<Datum>) => {\n    const handleClick = useCallback(\n        (event: MouseEvent<SVGPathElement>) => onClick?.(datum, event),\n        [onClick, datum]\n    )\n\n    const handleMouseEnter = useCallback(\n        (event: MouseEvent<SVGPathElement>) => onMouseEnter?.(datum, event),\n        [onMouseEnter, datum]\n    )\n\n    const handleMouseMove = useCallback(\n        (event: MouseEvent<SVGPathElement>) => onMouseMove?.(datum, event),\n        [onMouseMove, datum]\n    )\n\n    const handleMouseLeave = useCallback(\n        (event: MouseEvent<SVGPathElement>) => onMouseLeave?.(datum, event),\n        [onMouseLeave, datum]\n    )\n\n    return (\n        <animated.path\n            d={style.path}\n            opacity={style.opacity}\n            fill={datum.fill || style.color}\n            stroke={style.borderColor}\n            strokeWidth={style.borderWidth}\n            onClick={onClick ? handleClick : undefined}\n            onMouseEnter={onMouseEnter ? handleMouseEnter : undefined}\n            onMouseMove={onMouseMove ? handleMouseMove : undefined}\n            onMouseLeave={onMouseLeave ? handleMouseLeave : undefined}\n        />\n    )\n}\n","import { to, SpringValue } from '@react-spring/web'\nimport { ArcGenerator } from './types'\n\n/**\n * Directly animating paths for arcs leads to sub-optimal results\n * as the interpolation is going to be linear while we deal with polar coordinates,\n * this interpolator is going to generate proper arc transitions.\n * It should be used with the `useAnimatedArc` or `useArcsTransition` hooks.\n */\nexport const interpolateArc = (\n    startAngleValue: SpringValue<number>,\n    endAngleValue: SpringValue<number>,\n    innerRadiusValue: SpringValue<number>,\n    outerRadiusValue: SpringValue<number>,\n    arcGenerator: ArcGenerator\n) =>\n    to(\n        [startAngleValue, endAngleValue, innerRadiusValue, outerRadiusValue],\n        (startAngle, endAngle, innerRadius, outerRadius) => {\n            return arcGenerator({\n                startAngle,\n                endAngle,\n                innerRadius: Math.max(0, innerRadius),\n                outerRadius: Math.max(0, outerRadius),\n            })\n        }\n    )\n","import { useTransition } from '@react-spring/web'\nimport { useMotionConfig } from '@nivo/core'\nimport { DatumWithArc } from './types'\nimport { ArcTransitionMode, useArcTransitionMode, TransitionExtra } from './arcTransitionMode'\nimport { interpolateArc } from './interpolateArc'\n\n/**\n * This hook can be used to animate a group of arcs,\n * if you want to animate a single arc,\n * please have a look at the `useAnimatedArc` hook.\n */\nexport const useArcsTransition = <Datum extends DatumWithArc, ExtraProps = unknown>(\n    data: Datum[],\n    mode: ArcTransitionMode = 'innerRadius',\n    extra?: TransitionExtra<Datum, ExtraProps>\n) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const phases = useArcTransitionMode<Datum, ExtraProps>(mode, extra)\n\n    const transition = useTransition<\n        Datum,\n        {\n            progress: number\n            startAngle: number\n            endAngle: number\n            innerRadius: number\n            outerRadius: number\n        } & ExtraProps\n    >(data, {\n        keys: datum => datum.id,\n        initial: phases.update,\n        from: phases.enter,\n        enter: phases.update,\n        update: phases.update,\n        leave: phases.leave,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return {\n        transition,\n        interpolate: interpolateArc,\n    }\n}\n","import { getDistance, getAngle } from '@nivo/core'\nimport { Arc } from './types'\n\n/**\n * Check if cursor is in given ring.\n */\nexport const isCursorInRing = (\n    centerX: number,\n    centerY: number,\n    radius: number,\n    innerRadius: number,\n    cursorX: number,\n    cursorY: number\n) => {\n    const distance = getDistance(cursorX, cursorY, centerX, centerY)\n\n    return distance < radius && distance > innerRadius\n}\n\n/**\n * Search for an arc being under cursor.\n */\nexport const findArcUnderCursor = <A extends Arc = Arc>(\n    centerX: number,\n    centerY: number,\n    radius: number,\n    innerRadius: number,\n    arcs: A[],\n    cursorX: number,\n    cursorY: number\n): A | undefined => {\n    if (!isCursorInRing(centerX, centerY, radius, innerRadius, cursorX, cursorY)) {\n        return undefined\n    }\n\n    const cursorAngle = getAngle(cursorX, cursorY, centerX, centerY)\n\n    return arcs.find(\n        ({ startAngle, endAngle }) => cursorAngle >= startAngle && cursorAngle < endAngle\n    )\n}\n","import { createElement, useMemo } from 'react'\nimport { PropertyAccessor, usePropertyAccessor, radiansToDegrees, useTheme } from '@nivo/core'\nimport { useInheritedColor } from '@nivo/colors'\nimport { useArcCentersTransition } from '../centers'\nimport { ArcTransitionMode } from '../arcTransitionMode'\nimport { DatumWithArcAndColor } from '../types'\nimport { ArcLabelsProps } from './props'\nimport { ArcLabel, ArcLabelProps } from './ArcLabel'\n\nexport type ArcLabelComponent<Datum extends DatumWithArcAndColor> = (\n    props: ArcLabelProps<Datum>\n) => JSX.Element\n\ninterface ArcLabelsLayerProps<Datum extends DatumWithArcAndColor> {\n    center: [number, number]\n    data: Datum[]\n    label: PropertyAccessor<Datum, string>\n    radiusOffset: ArcLabelsProps<Datum>['arcLabelsRadiusOffset']\n    skipAngle: ArcLabelsProps<Datum>['arcLabelsSkipAngle']\n    textColor: ArcLabelsProps<Datum>['arcLabelsTextColor']\n    transitionMode: ArcTransitionMode\n    component?: ArcLabelsProps<Datum>['arcLabelsComponent']\n}\n\nexport const ArcLabelsLayer = <Datum extends DatumWithArcAndColor>({\n    center,\n    data,\n    transitionMode,\n    label: labelAccessor,\n    radiusOffset,\n    skipAngle,\n    textColor,\n    component = ArcLabel,\n}: ArcLabelsLayerProps<Datum>) => {\n    const getLabel = usePropertyAccessor<Datum, string>(labelAccessor)\n    const theme = useTheme()\n    const getTextColor = useInheritedColor<Datum>(textColor, theme)\n\n    const filteredData = useMemo(\n        () =>\n            data.filter(datum => {\n                return (\n                    Math.abs(radiansToDegrees(datum.arc.endAngle - datum.arc.startAngle)) >=\n                    skipAngle\n                )\n            }),\n        [data, skipAngle]\n    )\n\n    const { transition, interpolate } = useArcCentersTransition<Datum>(\n        filteredData,\n        radiusOffset,\n        transitionMode\n    )\n\n    const Label: ArcLabelComponent<Datum> = component\n\n    return (\n        <g transform={`translate(${center[0]},${center[1]})`}>\n            {transition((transitionProps, datum) => {\n                return createElement(Label, {\n                    key: datum.id,\n                    datum,\n                    label: getLabel(datum),\n                    style: {\n                        ...transitionProps,\n                        transform: interpolate(\n                            transitionProps.startAngle,\n                            transitionProps.endAngle,\n                            transitionProps.innerRadius,\n                            transitionProps.outerRadius\n                        ),\n                        textColor: getTextColor(datum),\n                    },\n                })\n            })}\n        </g>\n    )\n}\n","import { animated, to, AnimatedProps } from '@react-spring/web'\nimport { ExtractProps } from '@nivo/core'\nimport { generateSvgArc } from './utils'\n\ntype ArcLineProps = {\n    animated: AnimatedProps<{\n        radius: number\n        startAngle: number\n        endAngle: number\n        opacity: number\n    }>\n} & ExtractProps<typeof animated.path>\n\nexport const ArcLine = ({ animated: animatedProps, ...rest }: ArcLineProps) => (\n    <animated.path\n        d={to(\n            [animatedProps.radius, animatedProps.startAngle, animatedProps.endAngle],\n            (radius, start, end) => generateSvgArc(radius, start, end)\n        )}\n        {...rest}\n    />\n)\n","import { createElement } from 'react'\nimport { usePropertyAccessor } from '@nivo/core'\nimport { DatumWithArcAndColor } from '../types'\nimport { useArcLinkLabelsTransition } from './useArcLinkLabelsTransition'\nimport { ArcLinkLabelsProps } from './props'\nimport { ArcLinkLabel, ArcLinkLabelProps } from './ArcLinkLabel'\n\nexport type ArcLinkLabelComponent<Datum extends DatumWithArcAndColor> = (\n    props: ArcLinkLabelProps<Datum>\n) => JSX.Element\n\ninterface ArcLinkLabelsLayerProps<Datum extends DatumWithArcAndColor> {\n    center: [number, number]\n    data: Datum[]\n    label: ArcLinkLabelsProps<Datum>['arcLinkLabel']\n    skipAngle: ArcLinkLabelsProps<Datum>['arcLinkLabelsSkipAngle']\n    offset: ArcLinkLabelsProps<Datum>['arcLinkLabelsOffset']\n    diagonalLength: ArcLinkLabelsProps<Datum>['arcLinkLabelsDiagonalLength']\n    straightLength: ArcLinkLabelsProps<Datum>['arcLinkLabelsStraightLength']\n    strokeWidth: ArcLinkLabelsProps<Datum>['arcLinkLabelsThickness']\n    textOffset: ArcLinkLabelsProps<Datum>['arcLinkLabelsTextOffset']\n    textColor: ArcLinkLabelsProps<Datum>['arcLinkLabelsTextColor']\n    linkColor: ArcLinkLabelsProps<Datum>['arcLinkLabelsColor']\n    component?: ArcLinkLabelComponent<Datum>\n}\n\nexport const ArcLinkLabelsLayer = <Datum extends DatumWithArcAndColor>({\n    center,\n    data,\n    label: labelAccessor,\n    skipAngle,\n    offset,\n    diagonalLength,\n    straightLength,\n    strokeWidth,\n    textOffset,\n    textColor,\n    linkColor,\n    component = ArcLinkLabel,\n}: ArcLinkLabelsLayerProps<Datum>) => {\n    const getLabel = usePropertyAccessor<Datum, string>(labelAccessor)\n\n    const { transition, interpolateLink, interpolateTextAnchor, interpolateTextPosition } =\n        useArcLinkLabelsTransition<Datum>({\n            data,\n            skipAngle,\n            offset,\n            diagonalLength,\n            straightLength,\n            textOffset,\n            linkColor,\n            textColor,\n        })\n\n    const Label: ArcLinkLabelComponent<Datum> = component\n\n    return (\n        <g transform={`translate(${center[0]},${center[1]})`}>\n            {transition((transitionProps, datum) => {\n                return createElement(Label, {\n                    key: datum.id,\n                    datum,\n                    label: getLabel(datum),\n                    style: {\n                        ...transitionProps,\n                        thickness: strokeWidth,\n                        path: interpolateLink(\n                            transitionProps.startAngle,\n                            transitionProps.endAngle,\n                            transitionProps.innerRadius,\n                            transitionProps.outerRadius,\n                            transitionProps.offset,\n                            transitionProps.diagonalLength,\n                            transitionProps.straightLength\n                        ),\n                        textAnchor: interpolateTextAnchor(\n                            transitionProps.startAngle,\n                            transitionProps.endAngle,\n                            transitionProps.innerRadius,\n                            transitionProps.outerRadius\n                        ),\n                        textPosition: interpolateTextPosition(\n                            transitionProps.startAngle,\n                            transitionProps.endAngle,\n                            transitionProps.innerRadius,\n                            transitionProps.outerRadius,\n                            transitionProps.offset,\n                            transitionProps.diagonalLength,\n                            transitionProps.straightLength,\n                            transitionProps.textOffset\n                        ),\n                    },\n                })\n            })}\n        </g>\n    )\n}\n","import { createElement } from 'react'\nimport { useTheme } from '@nivo/core'\nimport { InheritedColorConfig, useInheritedColor } from '@nivo/colors'\nimport { DatumWithArcAndColor, ArcGenerator } from './types'\nimport { useArcsTransition } from './useArcsTransition'\nimport { ArcTransitionMode } from './arcTransitionMode'\nimport { ArcMouseHandler, ArcShape, ArcShapeProps } from './ArcShape'\n\nexport type ArcComponent<Datum extends DatumWithArcAndColor> = (\n    props: ArcShapeProps<Datum>\n) => JSX.Element\n\ninterface ArcsLayerProps<Datum extends DatumWithArcAndColor> {\n    center: [number, number]\n    data: Datum[]\n    arcGenerator: ArcGenerator\n    borderWidth: number\n    borderColor: InheritedColorConfig<Datum>\n    onClick?: ArcMouseHandler<Datum>\n    onMouseEnter?: ArcMouseHandler<Datum>\n    onMouseMove?: ArcMouseHandler<Datum>\n    onMouseLeave?: ArcMouseHandler<Datum>\n    transitionMode: ArcTransitionMode\n    component?: ArcComponent<Datum>\n}\n\nexport const ArcsLayer = <Datum extends DatumWithArcAndColor>({\n    center,\n    data,\n    arcGenerator,\n    borderWidth,\n    borderColor,\n    onClick,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    transitionMode,\n    component = ArcShape,\n}: ArcsLayerProps<Datum>) => {\n    const theme = useTheme()\n    const getBorderColor = useInheritedColor<Datum>(borderColor, theme)\n\n    const { transition, interpolate } = useArcsTransition<\n        Datum,\n        {\n            opacity: number\n            color: string\n            borderColor: string\n        }\n    >(data, transitionMode, {\n        enter: datum => ({\n            opacity: 0,\n            color: datum.color,\n            borderColor: getBorderColor(datum),\n        }),\n        update: datum => ({\n            opacity: 1,\n            color: datum.color,\n            borderColor: getBorderColor(datum),\n        }),\n        leave: datum => ({\n            opacity: 0,\n            color: datum.color,\n            borderColor: getBorderColor(datum),\n        }),\n    })\n\n    const Arc: ArcComponent<Datum> = component\n\n    return (\n        <g transform={`translate(${center[0]},${center[1]})`}>\n            {transition((transitionProps, datum) => {\n                return createElement(Arc, {\n                    key: datum.id,\n                    datum,\n                    style: {\n                        ...transitionProps,\n                        borderWidth,\n                        path: interpolate(\n                            transitionProps.startAngle,\n                            transitionProps.endAngle,\n                            transitionProps.innerRadius,\n                            transitionProps.outerRadius,\n                            arcGenerator\n                        ),\n                    },\n                    onClick,\n                    onMouseEnter,\n                    onMouseMove,\n                    onMouseLeave,\n                })\n            })}\n        </g>\n    )\n}\n","import { positionFromAngle, degreesToRadians } from '@nivo/core'\n\n/**\n * Computes the bounding box for a circle arc.\n *\n * Assumptions:\n *   - Anywhere the arc intersects an axis will be a max or a min.\n *   - If the arc doesn't intersect an axis, then the center\n *     will be one corner of the bounding rectangle,\n *     and this is the only case when it will be.\n *   - The only other possible extreme points of the sector to consider\n *     are the endpoints of the radii.\n *\n * This script was built within the help of this answer on stackoverflow:\n *   https://stackoverflow.com/questions/1336663/2d-bounding-box-of-a-sector\n */\nexport const computeArcBoundingBox = (\n    centerX: number,\n    centerY: number,\n    radius: number,\n    // in degrees\n    startAngle: number,\n    // in degrees\n    endAngle: number,\n    includeCenter = true\n) => {\n    let points: [number, number][] = []\n\n    const p0 = positionFromAngle(degreesToRadians(startAngle), radius)\n    points.push([p0.x, p0.y])\n\n    const p1 = positionFromAngle(degreesToRadians(endAngle), radius)\n    points.push([p1.x, p1.y])\n\n    for (\n        let angle = Math.round(Math.min(startAngle, endAngle));\n        angle <= Math.round(Math.max(startAngle, endAngle));\n        angle++\n    ) {\n        if (angle % 90 === 0) {\n            const p = positionFromAngle(degreesToRadians(angle), radius)\n            points.push([p.x, p.y])\n        }\n    }\n\n    points = points.map(([x, y]) => [centerX + x, centerY + y])\n    if (includeCenter) {\n        points.push([centerX, centerY])\n    }\n\n    const xs = points.map(([x]) => x)\n    const ys = points.map(([, y]) => y)\n\n    const x0 = Math.min(...xs)\n    const x1 = Math.max(...xs)\n\n    const y0 = Math.min(...ys)\n    const y1 = Math.max(...ys)\n\n    return {\n        points,\n        x: x0,\n        y: y0,\n        width: x1 - x0,\n        height: y1 - y0,\n    }\n}\n","import { CompleteTheme } from '@nivo/core'\nimport { DatumWithArcAndColor } from '../types'\nimport { ArcLabel } from './useArcLabels'\n\nexport const drawCanvasArcLabels = <Datum extends DatumWithArcAndColor>(\n    ctx: CanvasRenderingContext2D,\n    labels: ArcLabel<Datum>[],\n    theme: CompleteTheme\n) => {\n    ctx.textAlign = 'center'\n    ctx.textBaseline = 'middle'\n    ctx.font = `${theme.labels.text.fontSize}px ${theme.labels.text.fontFamily}`\n\n    labels.forEach(label => {\n        ctx.fillStyle = label.textColor\n        ctx.fillText(`${label.label}`, label.x, label.y)\n    })\n}\n","import {\n    // @ts-ignore\n    textPropsByEngine,\n    CompleteTheme,\n} from '@nivo/core'\nimport { DatumWithArcAndColor } from '../types'\nimport { ArcLinkLabel } from './types'\n\nexport const drawCanvasArcLinkLabels = <Datum extends DatumWithArcAndColor>(\n    ctx: CanvasRenderingContext2D,\n    labels: ArcLinkLabel<Datum>[],\n    theme: CompleteTheme,\n    strokeWidth: number\n) => {\n    ctx.textBaseline = 'middle'\n    ctx.font = `${theme.labels.text.fontSize}px ${theme.labels.text.fontFamily}`\n\n    labels.forEach(label => {\n        ctx.fillStyle = label.textColor\n        ctx.textAlign = textPropsByEngine.canvas.align[label.textAnchor]\n        ctx.fillText(`${label.label}`, label.x, label.y)\n\n        ctx.beginPath()\n        ctx.strokeStyle = label.linkColor\n        ctx.lineWidth = strokeWidth\n        label.points.forEach((point, index) => {\n            if (index === 0) ctx.moveTo(point.x, point.y)\n            else ctx.lineTo(point.x, point.y)\n        })\n        ctx.stroke()\n    })\n}\n","import { useSpring } from '@react-spring/web'\nimport { useMotionConfig } from '@nivo/core'\nimport { Arc, ArcGenerator } from './types'\nimport { interpolateArc } from './interpolateArc'\n\n/**\n * This hook can be used to animate a single arc,\n * if you want to animate a group of arcs,\n * please have a look at the `useArcsTransition` hook.\n */\nexport const useAnimatedArc = (datumWithArc: { arc: Arc }, arcGenerator: ArcGenerator) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedValues = useSpring({\n        startAngle: datumWithArc.arc.startAngle,\n        endAngle: datumWithArc.arc.endAngle,\n        innerRadius: datumWithArc.arc.innerRadius,\n        outerRadius: datumWithArc.arc.outerRadius,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return {\n        ...animatedValues,\n        path: interpolateArc(\n            animatedValues.startAngle,\n            animatedValues.endAngle,\n            animatedValues.innerRadius,\n            animatedValues.outerRadius,\n            arcGenerator\n        ),\n    }\n}\n","import { useMemo } from 'react'\nimport { arc as d3Arc } from 'd3-shape'\nimport { ArcGenerator, Arc } from './types'\n\n/**\n * Memoize a d3 arc generator.\n *\n * Please note that both inner/outer radius aren't static\n * and should come from the arc itself, while it requires\n * more props on the arcs, it provides more flexibility\n * because it's not limited to pie then but can also work\n * with charts such as sunbursts.\n */\nexport const useArcGenerator = ({\n    cornerRadius = 0,\n    padAngle = 0,\n}: {\n    cornerRadius?: number\n    padAngle?: number\n} = {}): ArcGenerator =>\n    useMemo(\n        () =>\n            d3Arc<Arc>()\n                .innerRadius(arc => arc.innerRadius)\n                .outerRadius(arc => arc.outerRadius)\n                .cornerRadius(cornerRadius)\n                .padAngle(padAngle),\n        [cornerRadius, padAngle]\n    )\n","import { useCallback } from 'react'\nimport { PropertyAccessor, usePropertyAccessor, useTheme } from '@nivo/core'\nimport { InheritedColorConfig, useInheritedColor } from '@nivo/colors'\nimport { DatumWithArcAndColor } from '../types'\nimport { useArcCenters, ArcCenter } from '../centers'\n\nexport interface ArcLabel<Datum extends DatumWithArcAndColor> extends ArcCenter<Datum> {\n    label: string\n    textColor: string\n}\n\n/**\n * Compute arc labels, please note that the datum should\n * contain a color in order to be able to compute the label text color.\n *\n * Please see `useArcCenters` for a more detailed explanation\n * about the parameters.\n */\nexport const useArcLabels = <Datum extends DatumWithArcAndColor>({\n    data,\n    offset,\n    skipAngle,\n    label,\n    textColor,\n}: {\n    data: Datum[]\n    offset?: number\n    skipAngle?: number\n    label: PropertyAccessor<Datum, string>\n    textColor: InheritedColorConfig<Datum>\n}) => {\n    const getLabel = usePropertyAccessor<Datum, string>(label)\n\n    const theme = useTheme()\n    const getTextColor = useInheritedColor<Datum>(textColor, theme)\n\n    const computeExtraProps = useCallback(\n        (datum: Datum) => {\n            return {\n                label: getLabel(datum),\n                textColor: getTextColor(datum),\n            }\n        },\n        [getLabel, getTextColor]\n    )\n\n    return useArcCenters<Datum, Omit<ArcLabel<Datum>, keyof ArcCenter<Datum>>>({\n        data,\n        offset,\n        skipAngle,\n        computeExtraProps,\n    })\n}\n","import { useCallback } from 'react'\nimport { PropertyAccessor, usePropertyAccessor, useTheme } from '@nivo/core'\nimport { InheritedColorConfig, useInheritedColor } from '@nivo/colors'\nimport { DatumWithArcAndColor } from '../types'\nimport { ArcLinkWithDatum, ArcLinkLabel } from './types'\nimport { useArcLinks } from './useArcLinks'\n\n/**\n * Compute arc link labels, please note that the datum should\n * contain a color in order to be able to compute the link/label text color.\n *\n * Please see `useArcLinks` for a more detailed explanation\n * about the parameters.\n */\nexport const useArcLinkLabels = <Datum extends DatumWithArcAndColor>({\n    data,\n    skipAngle,\n    offset,\n    diagonalLength,\n    straightLength,\n    textOffset = 0,\n    label,\n    linkColor,\n    textColor,\n}: {\n    data: Datum[]\n    skipAngle?: number\n    offset?: number\n    diagonalLength: number\n    straightLength: number\n    textOffset: number\n    label: PropertyAccessor<Datum, string>\n    linkColor: InheritedColorConfig<Datum>\n    textColor: InheritedColorConfig<Datum>\n}) => {\n    const getLabel = usePropertyAccessor<Datum, string>(label)\n\n    const theme = useTheme()\n    const getLinkColor = useInheritedColor<Datum>(linkColor, theme)\n    const getTextColor = useInheritedColor<Datum>(textColor, theme)\n\n    const computeExtraProps = useCallback(\n        (link: ArcLinkWithDatum<Datum>) => {\n            const position = {\n                x: link.points[2].x,\n                y: link.points[2].y,\n            }\n            let textAnchor: ArcLinkLabel<Datum>['textAnchor']\n            if (link.side === 'before') {\n                position.x -= textOffset\n                textAnchor = 'end'\n            } else {\n                position.x += textOffset\n                textAnchor = 'start'\n            }\n\n            return {\n                ...position,\n                label: getLabel(link.data),\n                linkColor: getLinkColor(link.data),\n                textAnchor,\n                textColor: getTextColor(link.data),\n            }\n        },\n        [getLabel, getLinkColor, getTextColor, textOffset]\n    )\n\n    return useArcLinks<Datum, Omit<ArcLinkLabel<Datum>, keyof ArcLinkWithDatum<Datum>>>({\n        data,\n        skipAngle,\n        offset,\n        diagonalLength,\n        straightLength,\n        computeExtraProps,\n    })\n}\n"],"names":["staticStyle","pointerEvents","ArcLabel","_ref","label","style","theme","useTheme","_jsx","jsx","animated","g","transform","opacity","progress","children","text","textAnchor","dominantBaseline","_extends","labels","fill","textColor","getNormalizedAngle","angle","normalizedAngle","Math","PI","filterDataBySkipAngle","data","skipAngle","filter","datum","abs","radiansToDegrees","arc","endAngle","startAngle","svgEllipticalArcCommand","radius","largeArcFlag","sweepFlag","x","y","join","arcTransitionModeById","enter","update","leave","middleAngle","innerRadius","outerRadius","centerRadius","pushIn","pushOut","useArcTransitionMode","mode","extraTransition","useMemo","transitionMode","computeArcCenter","offset","midAngle","positionFromAngle","interpolateArcCenter","startAngleValue","endAngleValue","innerRadiusValue","outerRadiusValue","to","centroid","useArcCentersTransition","extra","_useMotionConfig","useMotionConfig","animate","springConfig","config","phases","transition","useTransition","keys","id","initial","from","immediate","interpolate","useArcCenters","_ref$offset","_ref$skipAngle","_ref$computeExtraProp","computeExtraProps","map","position","ArcLabelComponent","ArcLinkLabel","_jsxs","jsxs","path","stroke","linkColor","strokeWidth","thickness","d","textPosition","computeArcLinkTextAnchor","centerAngle","computeArcLink","diagonalLength","straightLength","side","point2","point0","point1","points","lineGenerator","line","interpolateLink","offsetValue","diagonalLengthValue","straightLengthValue","diagonalLengthAnimated","straightLengthAnimated","interpolateTextAnchor","interpolateTextPosition","textOffsetValue","textOffset","_computeArcLink2","useArcLinkLabelsTransition","_ref2","_ref2$offset","_ref2$skipAngle","getLinkColor","useInheritedColor","getTextColor","filteredData","useFilteredDataBySkipAngle","transitionPhases","useTransitionPhases","useArcLinks","links","link","ArcLinkLabelComponent","ArcShape","onClick","onMouseEnter","onMouseMove","onMouseLeave","handleClick","useCallback","event","handleMouseEnter","handleMouseMove","handleMouseLeave","color","borderColor","borderWidth","undefined","interpolateArc","arcGenerator","max","useArcsTransition","isCursorInRing","centerX","centerY","cursorX","cursorY","distance","getDistance","center","labelAccessor","radiusOffset","_ref$component","component","getLabel","usePropertyAccessor","_useArcCentersTransit","Label","transitionProps","createElement","key","animatedProps","rest","_objectWithoutPropertiesLoose","_excluded","start","end","originalStartAngle","originalEndAngle","min","degreesToRadians","mid","generateSvgArc","_useArcLinkLabelsTran","getBorderColor","_useArcsTransition","Arc","includeCenter","p0","push","p1","round","p","xs","ys","_ref3","x0","apply","x1","y0","width","height","ctx","textAlign","textBaseline","font","fontSize","fontFamily","forEach","fillStyle","fillText","textPropsByEngine","canvas","align","beginPath","strokeStyle","lineWidth","point","index","moveTo","lineTo","arcs","cursorAngle","getAngle","find","datumWithArc","animatedValues","useSpring","_temp","_ref$cornerRadius","cornerRadius","_ref$padAngle","padAngle","d3Arc","_ref$textOffset"],"mappings":"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"}