{"version":3,"sources":["../src/components.ts","../src/anatomy.ts"],"sourcesContent":["import { anatomy } from \"./anatomy\"\n\n/**\n * **Accordion anatomy**\n * - Root: the root container of the accordion\n * - Container: the accordion item contains the button and panel\n * - Button: the button is the trigger for the panel\n * - Panel: the panel is the content of the accordion item\n * - Icon: the expanded/collapsed icon\n */\nexport const accordionAnatomy = anatomy(\"accordion\")\n  .parts(\"root\", \"container\", \"button\", \"panel\")\n  .extend(\"icon\")\n\n/**\n * **Alert anatomy**\n * - Title: the alert's title\n * - Description: the alert's description\n * - Icon: the alert's icon\n */\nexport const alertAnatomy = anatomy(\"alert\")\n  .parts(\"title\", \"description\", \"container\")\n  .extend(\"icon\", \"spinner\")\n\n/**\n * **Avatar anatomy**\n * - Container: the container for the avatar\n * - Label: the avatar initials text\n * - Excess Label: the label or text that represents excess avatar count.\n * Typically used in avatar groups.\n * - Group: the container for the avatar group\n */\nexport const avatarAnatomy = anatomy(\"avatar\")\n  .parts(\"label\", \"badge\", \"container\")\n  .extend(\"excessLabel\", \"group\")\n\n/**\n * **Breadcrumb anatomy**\n * - Item: the container for a breadcrumb item\n * - Link: the element that represents the breadcrumb link\n * - Container: the container for the breadcrumb items\n * - Separator: the separator between breadcrumb items\n */\nexport const breadcrumbAnatomy = anatomy(\"breadcrumb\")\n  .parts(\"link\", \"item\", \"container\")\n  .extend(\"separator\")\n\nexport const buttonAnatomy = anatomy(\"button\").parts()\n\nexport const checkboxAnatomy = anatomy(\"checkbox\")\n  .parts(\"control\", \"icon\", \"container\")\n  .extend(\"label\")\n\nexport const circularProgressAnatomy = anatomy(\"progress\")\n  .parts(\"track\", \"filledTrack\")\n  .extend(\"label\")\n\nexport const drawerAnatomy = anatomy(\"drawer\")\n  .parts(\"overlay\", \"dialogContainer\", \"dialog\")\n  .extend(\"header\", \"closeButton\", \"body\", \"footer\")\n\nexport const editableAnatomy = anatomy(\"editable\").parts(\n  \"preview\",\n  \"input\",\n  \"textarea\",\n)\n\nexport const formAnatomy = anatomy(\"form\").parts(\n  \"container\",\n  \"requiredIndicator\",\n  \"helperText\",\n)\n\nexport const formErrorAnatomy = anatomy(\"formError\").parts(\"text\", \"icon\")\n\nexport const inputAnatomy = anatomy(\"input\").parts(\n  \"addon\",\n  \"field\",\n  \"element\",\n  \"group\",\n)\n\nexport const listAnatomy = anatomy(\"list\").parts(\"container\", \"item\", \"icon\")\n\nexport const menuAnatomy = anatomy(\"menu\")\n  .parts(\"button\", \"list\", \"item\")\n  .extend(\"groupTitle\", \"icon\", \"command\", \"divider\")\n\nexport const modalAnatomy = anatomy(\"modal\")\n  .parts(\"overlay\", \"dialogContainer\", \"dialog\")\n  .extend(\"header\", \"closeButton\", \"body\", \"footer\")\n\nexport const numberInputAnatomy = anatomy(\"numberinput\").parts(\n  \"root\",\n  \"field\",\n  \"stepperGroup\",\n  \"stepper\",\n)\n\nexport const pinInputAnatomy = anatomy(\"pininput\").parts(\"field\")\n\nexport const popoverAnatomy = anatomy(\"popover\")\n  .parts(\"content\", \"header\", \"body\", \"footer\")\n  .extend(\"popper\", \"arrow\", \"closeButton\")\n\nexport const progressAnatomy = anatomy(\"progress\").parts(\n  \"label\",\n  \"filledTrack\",\n  \"track\",\n)\n\nexport const radioAnatomy = anatomy(\"radio\").parts(\n  \"container\",\n  \"control\",\n  \"label\",\n)\n\nexport const selectAnatomy = anatomy(\"select\").parts(\"field\", \"icon\")\n\nexport const sliderAnatomy = anatomy(\"slider\").parts(\n  \"container\",\n  \"track\",\n  \"thumb\",\n  \"filledTrack\",\n  \"mark\",\n)\n\nexport const statAnatomy = anatomy(\"stat\").parts(\n  \"container\",\n  \"label\",\n  \"helpText\",\n  \"number\",\n  \"icon\",\n)\n\nexport const switchAnatomy = anatomy(\"switch\").parts(\n  \"container\",\n  \"track\",\n  \"thumb\",\n  \"label\",\n)\n\nexport const tableAnatomy = anatomy(\"table\").parts(\n  \"table\",\n  \"thead\",\n  \"tbody\",\n  \"tr\",\n  \"th\",\n  \"td\",\n  \"tfoot\",\n  \"caption\",\n)\n\nexport const tabsAnatomy = anatomy(\"tabs\").parts(\n  \"root\",\n  \"tab\",\n  \"tablist\",\n  \"tabpanel\",\n  \"tabpanels\",\n  \"indicator\",\n)\n\n/**\n * **Tag anatomy**\n * - Container: the container for the tag\n * - Label: the text content of the tag\n * - closeButton: the close button for the tag\n */\nexport const tagAnatomy = anatomy(\"tag\").parts(\n  \"container\",\n  \"label\",\n  \"closeButton\",\n)\n\nexport const cardAnatomy = anatomy(\"card\").parts(\n  \"container\",\n  \"header\",\n  \"body\",\n  \"footer\",\n)\n\nexport const stepperAnatomy = anatomy(\"stepper\").parts(\n  \"stepper\",\n  \"step\",\n  \"title\",\n  \"description\",\n  \"indicator\",\n  \"separator\",\n  \"icon\",\n  \"number\",\n)\n","/**\n * Used to define the anatomy/parts of a component in a way that provides\n * a consistent API for `className`, css selector and `theming`.\n */\nexport function anatomy<T extends string = string>(\n  name: string,\n  map = {} as Record<T, Part>,\n): Anatomy<T> {\n  let called = false\n\n  /**\n   * Prevents user from calling `.parts` multiple times.\n   * It should only be called once.\n   */\n  function assert() {\n    if (!called) {\n      called = true\n      return\n    }\n\n    throw new Error(\n      \"[anatomy] .part(...) should only be called once. Did you mean to use .extend(...) ?\",\n    )\n  }\n\n  /**\n   * Add the core parts of the components\n   */\n  function parts<V extends string>(...values: V[]) {\n    assert()\n    for (const part of values) {\n      ;(map as any)[part] = toPart(part)\n    }\n    return anatomy(name, map) as unknown as Omit<Anatomy<V>, \"parts\">\n  }\n\n  /**\n   * Extend the component anatomy to includes new parts\n   */\n  function extend<U extends string>(...parts: U[]) {\n    for (const part of parts) {\n      if (part in map) continue\n      ;(map as any)[part] = toPart(part)\n    }\n    return anatomy(name, map) as unknown as Omit<Anatomy<T | U>, \"parts\">\n  }\n\n  /**\n   * Get all selectors for the component anatomy\n   */\n  function selectors() {\n    const value = Object.fromEntries(\n      Object.entries(map).map(([key, part]) => [key, (part as any).selector]),\n    )\n    return value as Record<T, string>\n  }\n\n  /**\n   * Get all classNames for the component anatomy\n   */\n  function classnames() {\n    const value = Object.fromEntries(\n      Object.entries(map).map(([key, part]) => [key, (part as any).className]),\n    )\n    return value as Record<T, string>\n  }\n\n  /**\n   * Creates the part object for the given part\n   */\n  function toPart(part: string) {\n    const el = [\"container\", \"root\"].includes(part ?? \"\")\n      ? [name]\n      : [name, part]\n    const attr = el.filter(Boolean).join(\"__\")\n    const className = `chakra-${attr}`\n\n    const partObj = {\n      className,\n      selector: `.${className}`,\n      toString: () => part,\n    }\n\n    return partObj as typeof partObj & string\n  }\n\n  /**\n   * Used to get the derived type of the anatomy\n   */\n  const __type = {} as T\n\n  return {\n    parts,\n    toPart,\n    extend,\n    selectors,\n    classnames,\n    get keys(): T[] {\n      return Object.keys(map) as T[]\n    },\n    __type,\n  }\n}\n\ntype Part = {\n  className: string\n  selector: string\n  toString: () => string\n}\n\ntype Anatomy<T extends string> = {\n  parts: <V extends string>(...values: V[]) => Omit<Anatomy<V>, \"parts\">\n  toPart: (part: string) => Part\n  extend: <U extends string>(...parts: U[]) => Omit<Anatomy<T | U>, \"parts\">\n  selectors: () => Record<T, string>\n  classnames: () => Record<T, string>\n  keys: T[]\n  __type: T\n}\n"],"mappings":"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","names":["parts"]}