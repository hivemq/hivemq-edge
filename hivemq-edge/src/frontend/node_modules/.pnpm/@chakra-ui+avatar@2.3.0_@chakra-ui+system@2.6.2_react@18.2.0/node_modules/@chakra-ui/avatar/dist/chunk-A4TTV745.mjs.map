{"version":3,"sources":["../src/avatar-group.tsx","../../../utilities/object-utils/src/compact.ts"],"sourcesContent":["import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  SystemProps,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { getValidChildren } from \"@chakra-ui/react-children-utils\"\nimport { compact } from \"@chakra-ui/object-utils\"\nimport { baseStyle } from \"./avatar\"\nimport { cloneElement } from \"react\"\n\ninterface AvatarGroupOptions {\n  /**\n   * The children of the avatar group.\n   *\n   * Ideally should be `Avatar` and `MoreIndicator` components\n   */\n  children: React.ReactNode\n  /**\n   * The space between the avatars in the group.\n   * @default \"-0.75rem\"\n   * @type SystemProps[\"margin\"]\n   */\n  spacing?: SystemProps[\"margin\"]\n  /**\n   * The maximum number of visible avatars\n   */\n  max?: number\n}\n\nexport interface AvatarGroupProps\n  extends AvatarGroupOptions,\n    Omit<HTMLChakraProps<\"div\">, \"children\">,\n    ThemingProps<\"Avatar\"> {}\n\n/**\n * AvatarGroup displays a number of avatars grouped together in a stack.\n */\nexport const AvatarGroup = forwardRef<AvatarGroupProps, \"div\">(\n  function AvatarGroup(props, ref) {\n    const styles = useMultiStyleConfig(\"Avatar\", props)\n\n    const {\n      children,\n      borderColor,\n      max,\n      spacing = \"-0.75rem\",\n      borderRadius = \"full\",\n      ...rest\n    } = omitThemingProps(props)\n\n    const validChildren = getValidChildren(children)\n\n    /**\n     * get the avatars within the max\n     */\n    const childrenWithinMax =\n      max != null ? validChildren.slice(0, max) : validChildren\n\n    /**\n     * get the remaining avatar count\n     */\n    const excess = max != null ? validChildren.length - max : 0\n\n    /**\n     * Reversing the children is a great way to avoid using zIndex\n     * to overlap the avatars\n     */\n    const reversedChildren = childrenWithinMax.reverse()\n\n    const clones = reversedChildren.map((child, index) => {\n      const isFirstAvatar = index === 0\n\n      const childProps = {\n        marginEnd: isFirstAvatar ? 0 : spacing,\n        size: props.size,\n        borderColor: child.props.borderColor ?? borderColor,\n        showBorder: true,\n      }\n\n      return cloneElement(child, compact(childProps))\n    })\n\n    const groupStyles: SystemStyleObject = {\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"flex-end\",\n      flexDirection: \"row-reverse\",\n      ...styles.group,\n    }\n\n    const excessStyles: SystemStyleObject = {\n      borderRadius,\n      marginStart: spacing,\n      ...baseStyle,\n      ...styles.excessLabel,\n    }\n\n    return (\n      <chakra.div\n        ref={ref}\n        role=\"group\"\n        __css={groupStyles}\n        {...rest}\n        className={cx(\"chakra-avatar__group\", props.className)}\n      >\n        {excess > 0 && (\n          <chakra.span className=\"chakra-avatar__excess\" __css={excessStyles}>\n            {`+${excess}`}\n          </chakra.span>\n        )}\n        {clones}\n      </chakra.div>\n    )\n  },\n)\n\nAvatarGroup.displayName = \"AvatarGroup\"\n","export function compact<T extends Record<any, any>>(object: T) {\n  const clone = Object.assign({}, object)\n  for (let key in clone) {\n    if (clone[key] === undefined) delete clone[key]\n  }\n  return clone\n}\n"],"mappings":";;;;;;AAAA;AAAA,EACE;AAAA,EACA;AAAA,EACA;AAAA,EAIA;AAAA,OAEK;AACP,SAAS,UAAU;AACnB,SAAS,wBAAwB;;;ACX1B,SAAS,QAAoC,QAAW;AAC7D,QAAM,QAAQ,OAAO,OAAO,CAAC,GAAG,MAAM;AACtC,WAAS,OAAO,OAAO;AACrB,QAAI,MAAM,GAAG,MAAM;AAAW,aAAO,MAAM,GAAG;AAAA,EAChD;AACA,SAAO;AACT;;;ADQA,SAAS,oBAAoB;AA0FvB,SAQI,KARJ;AA7DC,IAAM,cAAc;AAAA,EACzB,SAASA,aAAY,OAAO,KAAK;AAC/B,UAAM,SAAS,oBAAoB,UAAU,KAAK;AAElD,UAAM;AAAA,MACJ;AAAA,MACA;AAAA,MACA;AAAA,MACA,UAAU;AAAA,MACV,eAAe;AAAA,MACf,GAAG;AAAA,IACL,IAAI,iBAAiB,KAAK;AAE1B,UAAM,gBAAgB,iBAAiB,QAAQ;AAK/C,UAAM,oBACJ,OAAO,OAAO,cAAc,MAAM,GAAG,GAAG,IAAI;AAK9C,UAAM,SAAS,OAAO,OAAO,cAAc,SAAS,MAAM;AAM1D,UAAM,mBAAmB,kBAAkB,QAAQ;AAEnD,UAAM,SAAS,iBAAiB,IAAI,CAAC,OAAO,UAAU;AA3E1D;AA4EM,YAAM,gBAAgB,UAAU;AAEhC,YAAM,aAAa;AAAA,QACjB,WAAW,gBAAgB,IAAI;AAAA,QAC/B,MAAM,MAAM;AAAA,QACZ,cAAa,WAAM,MAAM,gBAAZ,YAA2B;AAAA,QACxC,YAAY;AAAA,MACd;AAEA,aAAO,aAAa,OAAO,QAAQ,UAAU,CAAC;AAAA,IAChD,CAAC;AAED,UAAM,cAAiC;AAAA,MACrC,SAAS;AAAA,MACT,YAAY;AAAA,MACZ,gBAAgB;AAAA,MAChB,eAAe;AAAA,MACf,GAAG,OAAO;AAAA,IACZ;AAEA,UAAM,eAAkC;AAAA,MACtC;AAAA,MACA,aAAa;AAAA,MACb,GAAG;AAAA,MACH,GAAG,OAAO;AAAA,IACZ;AAEA,WACE;AAAA,MAAC,OAAO;AAAA,MAAP;AAAA,QACC;AAAA,QACA,MAAK;AAAA,QACL,OAAO;AAAA,QACN,GAAG;AAAA,QACJ,WAAW,GAAG,wBAAwB,MAAM,SAAS;AAAA,QAEpD;AAAA,mBAAS,KACR,oBAAC,OAAO,MAAP,EAAY,WAAU,yBAAwB,OAAO,cACnD,cAAI,UACP;AAAA,UAED;AAAA;AAAA;AAAA,IACH;AAAA,EAEJ;AACF;AAEA,YAAY,cAAc;","names":["AvatarGroup"]}