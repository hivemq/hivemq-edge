{"version":3,"sources":["../src/live-region.ts"],"sourcesContent":["function isDom() {\n  return Boolean(globalThis?.document)\n}\nconst isBrowser = isDom()\nexport interface LiveRegionOptions {\n  /**\n   * A unique id for the created live region element\n   */\n  id?: string\n  /**\n   * Used to mark a part of the page as \"live\" so that updates will\n   * be communicated to users by screen readers.\n   *\n   * - If set to `polite`: tells assistive technology to alert the user\n   * to this change when it has finished whatever it is currently doing\n   *\n   * - If set to `assertive`: tells assistive technology to interrupt whatever\n   * it is doing and alert the user to this change immediately\n   *\n   * @default \"polite\".\n   */\n  \"aria-live\"?: \"polite\" | \"assertive\"\n  /**\n   * The desired value of the role attribute\n   * @default \"status\"\n   */\n  role?: \"status\" | \"alert\" | \"log\"\n  /**\n   * Indicates what types of changes should be presented to the user.\n   * @default \"all\"\n   */\n  \"aria-relevant\"?: React.AriaAttributes[\"aria-relevant\"]\n  /**\n   * Indicates whether the entire region should be\n   * considered as a whole when communicating updates\n   *\n   * @default true\n   */\n  \"aria-atomic\"?: React.AriaAttributes[\"aria-atomic\"]\n  /**\n   * The node to append the live region node to\n   */\n  parentNode?: HTMLElement\n}\n\nexport class LiveRegion {\n  region: HTMLElement | null\n  options: Required<LiveRegionOptions>\n  parentNode: HTMLElement\n\n  constructor(options?: LiveRegionOptions) {\n    this.options = getOptions(options) as any\n    this.region = getRegion(this.options)\n    this.parentNode = this.options.parentNode\n    if (this.region) {\n      this.parentNode.appendChild(this.region)\n    }\n  }\n\n  public speak(message: string) {\n    this.clear()\n    if (this.region) {\n      this.region.innerText = message\n    }\n  }\n\n  public destroy() {\n    if (this.region) {\n      this.region.parentNode?.removeChild(this.region)\n    }\n  }\n\n  public clear() {\n    if (this.region) {\n      this.region.innerText = \"\"\n    }\n  }\n}\n\nfunction getOptions(options?: LiveRegionOptions) {\n  const defaultOptions: LiveRegionOptions = {\n    \"aria-live\": \"polite\",\n    \"aria-atomic\": \"true\",\n    \"aria-relevant\": \"all\",\n    role: \"status\",\n    id: \"chakra-a11y-live-region\",\n    parentNode: isBrowser ? document.body : undefined,\n  }\n  if (options) {\n    return Object.assign(defaultOptions, options)\n  }\n  return defaultOptions\n}\n\nfunction getRegion(options: Required<LiveRegionOptions>) {\n  let region = isBrowser ? document.getElementById(options.id) : null\n\n  if (region) return region\n\n  if (isBrowser) {\n    region = document.createElement(\"div\")\n    setup(region, options)\n  }\n\n  return region\n}\n\nfunction setup(region: HTMLElement, options: Required<LiveRegionOptions>) {\n  region.id = options.id || \"chakra-live-region\"\n  region.className = \"__chakra-live-region\"\n  region.setAttribute(\"aria-live\", options[\"aria-live\"])\n  region.setAttribute(\"role\", options.role)\n  region.setAttribute(\"aria-relevant\", options[\"aria-relevant\"])\n  region.setAttribute(\"aria-atomic\", String(options[\"aria-atomic\"]))\n  Object.assign(region.style, {\n    border: \"0px\",\n    clip: \"rect(0px, 0px, 0px, 0px)\",\n    height: \"1px\",\n    width: \"1px\",\n    margin: \"-1px\",\n    padding: \"0px\",\n    overflow: \"hidden\",\n    whiteSpace: \"nowrap\",\n    position: \"absolute\",\n  })\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAS,QAAQ;AACf,SAAO,QAAQ,yCAAY,QAAQ;AACrC;AACA,IAAM,YAAY,MAAM;AA0CjB,IAAM,aAAN,MAAiB;AAAA,EAKtB,YAAY,SAA6B;AAJzC;AACA;AACA;AAGE,SAAK,UAAU,WAAW,OAAO;AACjC,SAAK,SAAS,UAAU,KAAK,OAAO;AACpC,SAAK,aAAa,KAAK,QAAQ;AAC/B,QAAI,KAAK,QAAQ;AACf,WAAK,WAAW,YAAY,KAAK,MAAM;AAAA,IACzC;AAAA,EACF;AAAA,EAEO,MAAM,SAAiB;AAC5B,SAAK,MAAM;AACX,QAAI,KAAK,QAAQ;AACf,WAAK,OAAO,YAAY;AAAA,IAC1B;AAAA,EACF;AAAA,EAEO,UAAU;AAlEnB;AAmEI,QAAI,KAAK,QAAQ;AACf,iBAAK,OAAO,eAAZ,mBAAwB,YAAY,KAAK;AAAA,IAC3C;AAAA,EACF;AAAA,EAEO,QAAQ;AACb,QAAI,KAAK,QAAQ;AACf,WAAK,OAAO,YAAY;AAAA,IAC1B;AAAA,EACF;AACF;AAEA,SAAS,WAAW,SAA6B;AAC/C,QAAM,iBAAoC;AAAA,IACxC,aAAa;AAAA,IACb,eAAe;AAAA,IACf,iBAAiB;AAAA,IACjB,MAAM;AAAA,IACN,IAAI;AAAA,IACJ,YAAY,YAAY,SAAS,OAAO;AAAA,EAC1C;AACA,MAAI,SAAS;AACX,WAAO,OAAO,OAAO,gBAAgB,OAAO;AAAA,EAC9C;AACA,SAAO;AACT;AAEA,SAAS,UAAU,SAAsC;AACvD,MAAI,SAAS,YAAY,SAAS,eAAe,QAAQ,EAAE,IAAI;AAE/D,MAAI;AAAQ,WAAO;AAEnB,MAAI,WAAW;AACb,aAAS,SAAS,cAAc,KAAK;AACrC,UAAM,QAAQ,OAAO;AAAA,EACvB;AAEA,SAAO;AACT;AAEA,SAAS,MAAM,QAAqB,SAAsC;AACxE,SAAO,KAAK,QAAQ,MAAM;AAC1B,SAAO,YAAY;AACnB,SAAO,aAAa,aAAa,QAAQ,WAAW,CAAC;AACrD,SAAO,aAAa,QAAQ,QAAQ,IAAI;AACxC,SAAO,aAAa,iBAAiB,QAAQ,eAAe,CAAC;AAC7D,SAAO,aAAa,eAAe,OAAO,QAAQ,aAAa,CAAC,CAAC;AACjE,SAAO,OAAO,OAAO,OAAO;AAAA,IAC1B,QAAQ;AAAA,IACR,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,SAAS;AAAA,IACT,UAAU;AAAA,IACV,YAAY;AAAA,IACZ,UAAU;AAAA,EACZ,CAAC;AACH;","names":[]}