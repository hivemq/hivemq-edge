"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const path = __importStar(require("path"));
class NestedOutputProcessorDecorator {
    constructor(root, specRoot, ext, decoratedFactory) {
        this.root = root;
        this.ext = ext;
        this.specRoot = specRoot;
        this.decoratedFactory = decoratedFactory;
        this.processors = {};
    }
    initialize() {
        /* noop */
    }
    getProcessor(spec) {
        if (this.processors[spec]) {
            return this.processors[spec];
        }
        const relativeSpec = path.relative(this.specRoot, spec);
        const outPath = path.join(this.root, relativeSpec.replace(new RegExp(path.extname(relativeSpec) + '$'), `.${this.ext}`));
        const processor = this.decoratedFactory(outPath);
        processor.initialize();
        this.processors[spec] = processor;
        return processor;
    }
    write(allMessages) {
        Object.entries(allMessages).forEach(([spec, messages]) => {
            this.getProcessor(spec).write({ [spec]: messages });
        });
    }
    getTarget() {
        return this.root;
    }
    getSpentTime() {
        return Object.values(this.processors).reduce((count, processor) => count + processor.getSpentTime(), 0);
    }
}
exports.default = NestedOutputProcessorDecorator;
