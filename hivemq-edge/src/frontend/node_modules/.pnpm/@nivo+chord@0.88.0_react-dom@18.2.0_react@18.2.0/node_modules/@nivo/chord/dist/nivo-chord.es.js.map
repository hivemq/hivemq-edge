{"version":3,"file":"nivo-chord.es.js","sources":["../src/ChordArcTooltip.tsx","../src/ChordRibbonTooltip.tsx","../src/defaults.ts","../src/compute.ts","../src/hooks.ts","../src/ChordRibbon.tsx","../src/ChordRibbons.tsx","../src/ChordArc.tsx","../src/ChordArcs.tsx","../src/ChordLabels.tsx","../src/Chord.tsx","../src/ChordCanvas.tsx","../src/ResponsiveChord.tsx","../src/ResponsiveChordCanvas.tsx"],"sourcesContent":["import { memo } from 'react'\nimport { BasicTooltip } from '@nivo/tooltip'\nimport { ArcTooltipComponentProps } from './types'\n\nexport const ChordArcTooltip = memo(({ arc }: ArcTooltipComponentProps) => (\n    <BasicTooltip id={arc.label} value={arc.formattedValue} color={arc.color} enableChip={true} />\n))\n","import { memo } from 'react'\nimport { TableTooltip, Chip } from '@nivo/tooltip'\nimport { RibbonTooltipComponentProps } from './types'\n\nexport const ChordRibbonTooltip = memo(({ ribbon }: RibbonTooltipComponentProps) => (\n    <TableTooltip\n        rows={[\n            [\n                <Chip key=\"chip\" color={ribbon.source.color} />,\n                <strong key=\"id\">{ribbon.source.label}</strong>,\n                ribbon.source.formattedValue,\n            ],\n            [\n                <Chip key=\"chip\" color={ribbon.target.color} />,\n                <strong key=\"id\">{ribbon.target.label}</strong>,\n                ribbon.target.formattedValue,\n            ],\n        ]}\n    />\n))\n","import { LayerId, ChordSvgProps, ChordCommonProps } from './types'\nimport { ChordArcTooltip } from './ChordArcTooltip'\nimport { ChordRibbonTooltip } from './ChordRibbonTooltip'\n\nexport const commonDefaultProps: Omit<\n    ChordCommonProps,\n    | 'valueFormat'\n    | 'margin'\n    | 'theme'\n    | 'onArcMouseEnter'\n    | 'onArcMouseMove'\n    | 'onArcMouseLeave'\n    | 'onArcClick'\n    | 'onRibbonMouseEnter'\n    | 'onRibbonMouseMove'\n    | 'onRibbonMouseLeave'\n    | 'onRibbonClick'\n    | 'renderWrapper'\n    | 'ariaLabel'\n    | 'ariaLabelledBy'\n    | 'ariaDescribedBy'\n> & {\n    layers: LayerId[]\n} = {\n    layers: ['ribbons', 'arcs', 'labels', 'legends'],\n\n    padAngle: 0,\n    innerRadiusRatio: 0.9,\n    innerRadiusOffset: 0,\n\n    colors: { scheme: 'nivo' },\n\n    arcOpacity: 1,\n    activeArcOpacity: 1,\n    inactiveArcOpacity: 0.15,\n    arcBorderWidth: 1,\n    arcBorderColor: {\n        from: 'color',\n        modifiers: [['darker', 0.4]],\n    },\n    arcTooltip: ChordArcTooltip,\n\n    ribbonOpacity: 0.5,\n    activeRibbonOpacity: 0.85,\n    inactiveRibbonOpacity: 0.15,\n    ribbonBorderWidth: 1,\n    ribbonBorderColor: {\n        from: 'color',\n        modifiers: [['darker', 0.4]],\n    },\n    ribbonBlendMode: 'normal',\n\n    enableLabel: true,\n    label: 'id',\n    labelOffset: 12,\n    labelRotation: 0,\n    labelTextColor: {\n        from: 'color',\n        modifiers: [['darker', 1]],\n    },\n\n    isInteractive: true,\n\n    legends: [],\n\n    animate: true,\n    motionConfig: 'gentle',\n\n    role: 'img',\n}\n\nexport const svgDefaultProps = {\n    ...commonDefaultProps,\n    ribbonBlendMode: 'normal' as NonNullable<ChordSvgProps['ribbonBlendMode']>,\n    ribbonTooltip: ChordRibbonTooltip,\n}\n\nexport const canvasDefaultProps = {\n    ...commonDefaultProps,\n    pixelRatio: typeof window !== 'undefined' ? window.devicePixelRatio || 1 : 1,\n}\n","import { to, SpringValues } from '@react-spring/web'\nimport { arc as d3Arc } from 'd3-shape'\nimport { chord as d3Chord, ChordLayout, ribbon as d3Ribbon } from 'd3-chord'\nimport {\n    ArcDatum,\n    ChordCommonProps,\n    ChordDataProps,\n    RibbonAnimatedProps,\n    RibbonDatum,\n    RibbonGenerator,\n    ArcGenerator,\n    ArcAnimatedProps,\n} from './types'\nimport { OrdinalColorScale } from '@nivo/colors'\n\nexport const computeChordLayout = ({ padAngle }: { padAngle: ChordCommonProps['padAngle'] }) =>\n    d3Chord().padAngle(padAngle)\n\nexport const computeChordGenerators = ({\n    width,\n    height,\n    innerRadiusRatio,\n    innerRadiusOffset,\n}: {\n    width: number\n    height: number\n    innerRadiusRatio: ChordCommonProps['innerRadiusRatio']\n    innerRadiusOffset: ChordCommonProps['innerRadiusOffset']\n}) => {\n    const center: [number, number] = [width / 2, height / 2]\n    const radius = Math.min(width, height) / 2\n    const innerRadius = radius * innerRadiusRatio\n    const ribbonRadius = radius * (innerRadiusRatio - innerRadiusOffset)\n\n    return {\n        center,\n        radius,\n        innerRadius,\n        arcGenerator: d3Arc()\n            .outerRadius(radius)\n            .innerRadius(innerRadius) as unknown as ArcGenerator,\n        ribbonGenerator: d3Ribbon().radius(ribbonRadius) as unknown as RibbonGenerator,\n    }\n}\n\nexport const computeChordArcsAndRibbons = ({\n    chord,\n    data,\n    keys,\n    getLabel,\n    formatValue,\n    getColor,\n}: {\n    chord: ChordLayout\n    data: ChordDataProps['data']\n    keys: ChordDataProps['keys']\n    getLabel: (arc: Omit<ArcDatum, 'label' | 'color'>) => string\n    formatValue: (value: number) => string\n    getColor: OrdinalColorScale<Omit<ArcDatum, 'label' | 'color'>>\n}): {\n    arcs: ArcDatum[]\n    ribbons: RibbonDatum[]\n} => {\n    const _ribbons = chord(data)\n\n    const arcs: ArcDatum[] = _ribbons.groups.map(chordGroup => {\n        const arc: Omit<ArcDatum, 'label' | 'color'> = {\n            ...chordGroup,\n            id: keys[chordGroup.index],\n            formattedValue: formatValue(chordGroup.value),\n        }\n\n        return {\n            ...arc,\n            label: getLabel(arc),\n            color: getColor(arc),\n        }\n    })\n\n    const ribbons: RibbonDatum[] = _ribbons.map(_ribbon => {\n        const source = {\n            ..._ribbon.source,\n            id: keys[_ribbon.source.index],\n            formattedValue: formatValue(_ribbon.source.value),\n        }\n\n        const target = {\n            ..._ribbon.target,\n            id: keys[_ribbon.target.index],\n            formattedValue: formatValue(_ribbon.target.value),\n        }\n\n        return {\n            ..._ribbon,\n            // ensure id remains the same even if source/target are reversed\n            id: [source.id, target.id].sort().join('.'),\n            source: {\n                ...source,\n                label: getLabel(source),\n                color: getColor(source),\n            },\n            target: {\n                ...target,\n                label: getLabel(target),\n                color: getColor(target),\n            },\n        }\n    })\n\n    return { arcs, ribbons }\n}\n\nexport const computeArcPath = ({\n    startAngle,\n    endAngle,\n    arcGenerator,\n}: SpringValues<Pick<ArcAnimatedProps, 'startAngle' | 'endAngle'>> & {\n    arcGenerator: ArcGenerator\n}) => to([startAngle, endAngle], (startAngle, endAngle) => arcGenerator({ startAngle, endAngle }))\n\nexport const computeRibbonPath = ({\n    sourceStartAngle,\n    sourceEndAngle,\n    targetStartAngle,\n    targetEndAngle,\n    ribbonGenerator,\n}: SpringValues<\n    Pick<\n        RibbonAnimatedProps,\n        'sourceStartAngle' | 'sourceEndAngle' | 'targetStartAngle' | 'targetEndAngle'\n    >\n> & {\n    ribbonGenerator: RibbonGenerator\n}) =>\n    to(\n        [sourceStartAngle, sourceEndAngle, targetStartAngle, targetEndAngle],\n        (sourceStartAngle, sourceEndAngle, targetStartAngle, targetEndAngle) =>\n            ribbonGenerator({\n                source: {\n                    startAngle: Math.min(sourceStartAngle, sourceEndAngle),\n                    endAngle: Math.max(sourceEndAngle, sourceStartAngle),\n                },\n                target: {\n                    startAngle: Math.min(targetStartAngle, targetEndAngle),\n                    endAngle: Math.max(targetEndAngle, targetStartAngle),\n                },\n            })\n    )\n","import { useMemo, useState } from 'react'\nimport {\n    useValueFormatter,\n    // @ts-ignore\n    getLabelGenerator,\n} from '@nivo/core'\nimport { OrdinalColorScale, useOrdinalColorScale } from '@nivo/colors'\nimport { computeChordLayout, computeChordGenerators, computeChordArcsAndRibbons } from './compute'\nimport { ArcDatum, ChordCommonProps, ChordDataProps, CustomLayerProps, RibbonDatum } from './types'\nimport { commonDefaultProps } from './defaults'\nimport { ChordLayout } from 'd3-chord'\n\nexport const useChordLayout = ({ padAngle }: { padAngle: ChordCommonProps['padAngle'] }) =>\n    useMemo(() => computeChordLayout({ padAngle }), [padAngle])\n\nexport const useChordGenerators = ({\n    width,\n    height,\n    innerRadiusRatio,\n    innerRadiusOffset,\n}: {\n    width: number\n    height: number\n    innerRadiusRatio: ChordCommonProps['innerRadiusRatio']\n    innerRadiusOffset: ChordCommonProps['innerRadiusOffset']\n}) =>\n    useMemo(\n        () =>\n            computeChordGenerators({\n                width,\n                height,\n                innerRadiusRatio,\n                innerRadiusOffset,\n            }),\n        [width, height, innerRadiusRatio, innerRadiusOffset]\n    )\n\nexport const useChordArcsAndRibbons = ({\n    chord,\n    getColor,\n    keys,\n    data,\n    getLabel,\n    formatValue,\n}: {\n    chord: ChordLayout\n    data: ChordDataProps['data']\n    keys: ChordDataProps['keys']\n    getLabel: (arc: Omit<ArcDatum, 'label' | 'color'>) => string\n    formatValue: (value: number) => string\n    getColor: OrdinalColorScale<Omit<ArcDatum, 'label' | 'color'>>\n}) =>\n    useMemo(\n        () =>\n            computeChordArcsAndRibbons({\n                chord,\n                data,\n                keys,\n                getLabel,\n                formatValue,\n                getColor,\n            }),\n        [chord, getColor, keys, data, getLabel, formatValue]\n    )\n\nexport const useChord = ({\n    data,\n    keys,\n    label = commonDefaultProps.label,\n    valueFormat,\n    width,\n    height,\n    innerRadiusRatio = commonDefaultProps.innerRadiusRatio,\n    innerRadiusOffset = commonDefaultProps.innerRadiusOffset,\n    padAngle = commonDefaultProps.padAngle,\n    colors = commonDefaultProps.colors,\n}: {\n    data: ChordDataProps['data']\n    keys: ChordDataProps['keys']\n    label?: ChordCommonProps['label']\n    valueFormat?: ChordCommonProps['valueFormat']\n    width: number\n    height: number\n    innerRadiusRatio?: ChordCommonProps['innerRadiusRatio']\n    innerRadiusOffset?: ChordCommonProps['innerRadiusOffset']\n    padAngle?: ChordCommonProps['padAngle']\n    colors?: ChordCommonProps['colors']\n}) => {\n    const chord = useChordLayout({ padAngle })\n    const { center, radius, innerRadius, arcGenerator, ribbonGenerator } = useChordGenerators({\n        width,\n        height,\n        innerRadiusRatio,\n        innerRadiusOffset,\n    })\n    const getLabel = useMemo(() => getLabelGenerator(label), [label])\n    const formatValue = useValueFormatter<number>(valueFormat)\n\n    const getColor = useOrdinalColorScale(colors, 'id')\n    const { arcs, ribbons } = useChordArcsAndRibbons({\n        chord,\n        getColor,\n        keys,\n        data,\n        getLabel,\n        formatValue,\n    })\n\n    return {\n        center,\n        chord,\n        radius,\n        innerRadius,\n        arcGenerator,\n        ribbonGenerator,\n        getColor,\n        arcs,\n        ribbons,\n    }\n}\n\nexport const useChordSelection = ({\n    arcOpacity = commonDefaultProps.arcOpacity,\n    activeArcOpacity = commonDefaultProps.activeArcOpacity,\n    inactiveArcOpacity = commonDefaultProps.inactiveArcOpacity,\n    ribbons,\n    ribbonOpacity = commonDefaultProps.ribbonOpacity,\n    activeRibbonOpacity = commonDefaultProps.activeRibbonOpacity,\n    inactiveRibbonOpacity = commonDefaultProps.inactiveRibbonOpacity,\n}: {\n    arcOpacity?: ChordCommonProps['arcOpacity']\n    activeArcOpacity?: ChordCommonProps['activeArcOpacity']\n    inactiveArcOpacity?: ChordCommonProps['inactiveArcOpacity']\n    ribbons: RibbonDatum[]\n    ribbonOpacity?: ChordCommonProps['ribbonOpacity']\n    activeRibbonOpacity?: ChordCommonProps['activeRibbonOpacity']\n    inactiveRibbonOpacity?: ChordCommonProps['inactiveRibbonOpacity']\n}) => {\n    const [currentArc, setCurrentArc] = useState<ArcDatum | null>(null)\n    const [currentRibbon, setCurrentRibbon] = useState<RibbonDatum | null>(null)\n\n    const selection = useMemo(() => {\n        const selectedArcIds = []\n        const selectedRibbonIds = []\n\n        if (currentArc) {\n            selectedArcIds.push(currentArc.id)\n            ribbons\n                .filter(\n                    ribbon =>\n                        ribbon.source.id === currentArc.id || ribbon.target.id === currentArc.id\n                )\n                .forEach(ribbon => {\n                    selectedRibbonIds.push(ribbon.id)\n                })\n        }\n\n        if (currentRibbon) {\n            selectedArcIds.push(currentRibbon.source.id)\n            selectedArcIds.push(currentRibbon.target.id)\n            selectedRibbonIds.push(currentRibbon.id)\n        }\n\n        return { selectedArcIds, selectedRibbonIds }\n    }, [currentArc, currentRibbon, ribbons])\n\n    const hasSelection =\n        selection.selectedArcIds.length > 1 || selection.selectedRibbonIds.length > 0\n\n    const getArcOpacity = useMemo(\n        () => (arc: ArcDatum) => {\n            if (!hasSelection) return arcOpacity\n\n            return selection.selectedArcIds.includes(arc.id) ? activeArcOpacity : inactiveArcOpacity\n        },\n        [hasSelection, selection.selectedArcIds, arcOpacity, activeArcOpacity, inactiveArcOpacity]\n    )\n    const getRibbonOpacity = useMemo(\n        () => (ribbon: RibbonDatum) => {\n            if (!hasSelection) return ribbonOpacity\n\n            return selection.selectedRibbonIds.includes(ribbon.id)\n                ? activeRibbonOpacity\n                : inactiveRibbonOpacity\n        },\n        [\n            hasSelection,\n            selection.selectedRibbonIds,\n            ribbonOpacity,\n            activeRibbonOpacity,\n            inactiveRibbonOpacity,\n        ]\n    )\n\n    return {\n        currentArc,\n        setCurrentArc,\n        currentRibbon,\n        setCurrentRibbon,\n        hasSelection,\n        ...selection,\n        getArcOpacity,\n        getRibbonOpacity,\n    }\n}\n\nexport const useCustomLayerProps = ({\n    center,\n    radius,\n    arcs,\n    arcGenerator,\n    ribbons,\n    ribbonGenerator,\n}: {\n    center: [number, number]\n    radius: number\n    arcs: ArcDatum[]\n    arcGenerator: any\n    ribbons: RibbonDatum[]\n    ribbonGenerator: any\n}): CustomLayerProps =>\n    useMemo(\n        () => ({\n            center,\n            radius,\n            arcs,\n            arcGenerator,\n            ribbons,\n            ribbonGenerator,\n        }),\n        [center, radius, arcs, arcGenerator, ribbons, ribbonGenerator]\n    )\n","import { createElement, memo, useMemo, MouseEvent } from 'react'\nimport { SpringValues, animated } from '@react-spring/web'\nimport { useTooltip } from '@nivo/tooltip'\nimport {\n    ChordCommonProps,\n    ChordSvgProps,\n    RibbonAnimatedProps,\n    RibbonDatum,\n    RibbonGenerator,\n} from './types'\nimport { computeRibbonPath } from './compute'\n\ninterface ChordRibbonProps {\n    ribbon: RibbonDatum\n    ribbonGenerator: RibbonGenerator\n    animatedProps: SpringValues<RibbonAnimatedProps>\n    borderWidth: ChordCommonProps['ribbonBorderWidth']\n    blendMode: NonNullable<ChordSvgProps['ribbonBlendMode']>\n    setCurrent: (ribbon: RibbonDatum | null) => void\n    isInteractive: ChordCommonProps['isInteractive']\n    tooltip: NonNullable<ChordSvgProps['ribbonTooltip']>\n    onMouseEnter: ChordSvgProps['onRibbonMouseEnter']\n    onMouseMove: ChordSvgProps['onRibbonMouseMove']\n    onMouseLeave: ChordSvgProps['onRibbonMouseLeave']\n    onClick: ChordSvgProps['onRibbonClick']\n}\n\nexport const ChordRibbon = memo(\n    ({\n        ribbon,\n        ribbonGenerator,\n        animatedProps,\n        borderWidth,\n        blendMode,\n        isInteractive,\n        setCurrent,\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n        onClick,\n        tooltip,\n    }: ChordRibbonProps) => {\n        const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n        const handleMouseEnter = useMemo(() => {\n            if (!isInteractive) return undefined\n\n            return (event: MouseEvent) => {\n                setCurrent(ribbon)\n                showTooltipFromEvent(createElement(tooltip, { ribbon }), event)\n                onMouseEnter?.(ribbon, event)\n            }\n        }, [isInteractive, showTooltipFromEvent, tooltip, ribbon, onMouseEnter, setCurrent])\n\n        const handleMouseMove = useMemo(() => {\n            if (!isInteractive) return undefined\n\n            return (event: MouseEvent) => {\n                showTooltipFromEvent(createElement(tooltip, { ribbon }), event)\n                onMouseMove?.(ribbon, event)\n            }\n        }, [isInteractive, showTooltipFromEvent, tooltip, ribbon, onMouseMove])\n\n        const handleMouseLeave = useMemo(() => {\n            if (!isInteractive) return undefined\n\n            return (event: MouseEvent) => {\n                setCurrent(null)\n                hideTooltip()\n                onMouseLeave?.(ribbon, event)\n            }\n        }, [isInteractive, hideTooltip, ribbon, onMouseLeave, setCurrent])\n\n        const handleClick = useMemo(() => {\n            if (!isInteractive || !onClick) return undefined\n\n            return (event: MouseEvent) => onClick?.(ribbon, event)\n        }, [isInteractive, ribbon, onClick])\n\n        return (\n            <animated.path\n                data-testid={`ribbon.${ribbon.source.id}.${ribbon.target.id}`}\n                d={computeRibbonPath({\n                    sourceStartAngle: animatedProps.sourceStartAngle,\n                    sourceEndAngle: animatedProps.sourceEndAngle,\n                    targetStartAngle: animatedProps.targetStartAngle,\n                    targetEndAngle: animatedProps.targetEndAngle,\n                    ribbonGenerator,\n                })}\n                fill={animatedProps.color}\n                opacity={animatedProps.opacity}\n                strokeWidth={borderWidth}\n                stroke={animatedProps.borderColor}\n                style={{ mixBlendMode: blendMode }}\n                onMouseEnter={handleMouseEnter}\n                onMouseMove={handleMouseMove}\n                onMouseLeave={handleMouseLeave}\n                onClick={handleClick}\n            />\n        )\n    }\n)\n","import { memo } from 'react'\nimport { useTransition } from '@react-spring/web'\nimport {\n    useTheme,\n    // @ts-ignore\n    midAngle,\n    useMotionConfig,\n} from '@nivo/core'\nimport { useInheritedColor } from '@nivo/colors'\nimport { ChordRibbon } from './ChordRibbon'\nimport {\n    ChordCommonProps,\n    ChordSvgProps,\n    RibbonDatum,\n    RibbonAnimatedProps,\n    RibbonGenerator,\n    ArcDatum,\n} from './types'\n\n/**\n * Used to get ribbon angles, instead of using source and target arcs,\n * we sort arcs by value to have smooth transitions, otherwise,\n * if source|target arc value becomes greater than the other,\n * the ribbon will be reversed.\n */\nconst getRibbonAngles = ({ source, target }: RibbonDatum, useMiddleAngle: boolean) => {\n    let firstArc: ArcDatum\n    let secondArc: ArcDatum\n    if (source.startAngle < target.startAngle) {\n        firstArc = source\n        secondArc = target\n    } else {\n        firstArc = target\n        secondArc = source\n    }\n\n    if (useMiddleAngle) {\n        const firstMiddleAngle = midAngle(firstArc)\n        const secondMiddleAngle = midAngle(secondArc)\n\n        return {\n            sourceStartAngle: firstMiddleAngle,\n            sourceEndAngle: firstMiddleAngle,\n            targetStartAngle: secondMiddleAngle,\n            targetEndAngle: secondMiddleAngle,\n        }\n    }\n\n    return {\n        sourceStartAngle: firstArc.startAngle,\n        sourceEndAngle: firstArc.endAngle,\n        targetStartAngle: secondArc.startAngle,\n        targetEndAngle: secondArc.endAngle,\n    }\n}\n\ninterface ChordRibbonsProps {\n    ribbons: RibbonDatum[]\n    ribbonGenerator: RibbonGenerator\n    borderWidth: ChordCommonProps['ribbonBorderWidth']\n    borderColor: ChordCommonProps['ribbonBorderColor']\n    getOpacity: (ribbon: RibbonDatum) => number\n    blendMode: NonNullable<ChordSvgProps['ribbonBlendMode']>\n    isInteractive: ChordCommonProps['isInteractive']\n    setCurrent: (ribbon: RibbonDatum | null) => void\n    tooltip: NonNullable<ChordSvgProps['ribbonTooltip']>\n    onMouseEnter: ChordSvgProps['onRibbonMouseEnter']\n    onMouseMove: ChordSvgProps['onRibbonMouseMove']\n    onMouseLeave: ChordSvgProps['onRibbonMouseLeave']\n    onClick: ChordSvgProps['onRibbonClick']\n}\n\nexport const ChordRibbons = memo(\n    ({\n        ribbons,\n        ribbonGenerator,\n        borderWidth,\n        borderColor,\n        getOpacity,\n        blendMode,\n        isInteractive,\n        setCurrent,\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n        onClick,\n        tooltip,\n    }: ChordRibbonsProps) => {\n        const { animate, config: springConfig } = useMotionConfig()\n\n        const theme = useTheme()\n        const getBorderColor = useInheritedColor(borderColor, theme)\n\n        const transition = useTransition<RibbonDatum, RibbonAnimatedProps>(ribbons, {\n            keys: ribbon => ribbon.id,\n            initial: ribbon => ({\n                ...getRibbonAngles(ribbon, false),\n                color: ribbon.source.color,\n                opacity: getOpacity(ribbon),\n                borderColor: getBorderColor(ribbon.source),\n            }),\n            from: ribbon => ({\n                ...getRibbonAngles(ribbon, false),\n                color: ribbon.source.color,\n                opacity: 0,\n                borderColor: getBorderColor(ribbon.source),\n            }),\n            update: ribbon => ({\n                ...getRibbonAngles(ribbon, false),\n                color: ribbon.source.color,\n                opacity: getOpacity(ribbon),\n                borderColor: getBorderColor(ribbon.source),\n            }),\n            leave: ribbon => ({\n                ...getRibbonAngles(ribbon, false),\n                color: ribbon.source.color,\n                opacity: 0,\n                borderColor: getBorderColor(ribbon.source),\n            }),\n            expires: true,\n            config: springConfig,\n            immediate: !animate,\n        })\n\n        return (\n            <>\n                {transition((animatedProps, ribbon) => (\n                    <ChordRibbon\n                        key={ribbon.id}\n                        ribbon={ribbon}\n                        ribbonGenerator={ribbonGenerator}\n                        animatedProps={animatedProps}\n                        borderWidth={borderWidth}\n                        blendMode={blendMode}\n                        setCurrent={setCurrent}\n                        isInteractive={isInteractive}\n                        tooltip={tooltip}\n                        onMouseEnter={onMouseEnter}\n                        onMouseMove={onMouseMove}\n                        onMouseLeave={onMouseLeave}\n                        onClick={onClick}\n                    />\n                ))}\n            </>\n        )\n    }\n)\n","import { createElement, memo, useMemo, MouseEvent } from 'react'\nimport { SpringValues, animated } from '@react-spring/web'\nimport { useTooltip } from '@nivo/tooltip'\nimport { ArcAnimatedProps, ArcDatum, ArcGenerator, ChordCommonProps } from './types'\nimport { computeArcPath } from './compute'\n\ninterface ChordArcProps {\n    arc: ArcDatum\n    animatedProps: SpringValues<ArcAnimatedProps>\n    arcGenerator: ArcGenerator\n    borderWidth: number\n    setCurrent: (arc: ArcDatum | null) => void\n    isInteractive: ChordCommonProps['isInteractive']\n    onMouseEnter?: ChordCommonProps['onArcMouseEnter']\n    onMouseMove?: ChordCommonProps['onArcMouseMove']\n    onMouseLeave?: ChordCommonProps['onArcMouseLeave']\n    onClick?: ChordCommonProps['onArcClick']\n    tooltip: ChordCommonProps['arcTooltip']\n}\n\nexport const ChordArc = memo(\n    ({\n        arc,\n        animatedProps,\n        borderWidth,\n        arcGenerator,\n        setCurrent,\n        isInteractive,\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n        onClick,\n        tooltip,\n    }: ChordArcProps) => {\n        const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n        const handleMouseEnter = useMemo(() => {\n            if (!isInteractive) return undefined\n\n            return (event: MouseEvent) => {\n                setCurrent(arc)\n                showTooltipFromEvent(createElement(tooltip, { arc }), event)\n                onMouseEnter?.(arc, event)\n            }\n        }, [isInteractive, showTooltipFromEvent, tooltip, arc, onMouseEnter, setCurrent])\n\n        const handleMouseMove = useMemo(() => {\n            if (!isInteractive) return undefined\n\n            return (event: MouseEvent) => {\n                showTooltipFromEvent(createElement(tooltip, { arc }), event)\n                onMouseMove?.(arc, event)\n            }\n        }, [isInteractive, showTooltipFromEvent, tooltip, arc, onMouseMove])\n\n        const handleMouseLeave = useMemo(() => {\n            if (!isInteractive) return undefined\n\n            return (event: MouseEvent) => {\n                setCurrent(null)\n                hideTooltip()\n                onMouseLeave?.(arc, event)\n            }\n        }, [isInteractive, hideTooltip, arc, onMouseLeave, setCurrent])\n\n        const handleClick = useMemo(() => {\n            if (!isInteractive || !onClick) return undefined\n\n            return (event: MouseEvent) => onClick?.(arc, event)\n        }, [isInteractive, arc, onClick])\n\n        return (\n            <animated.path\n                data-testid={`arc.${arc.id}`}\n                d={computeArcPath({\n                    startAngle: animatedProps.startAngle,\n                    endAngle: animatedProps.endAngle,\n                    arcGenerator,\n                })}\n                fill={animatedProps.color}\n                opacity={animatedProps.opacity}\n                strokeWidth={borderWidth}\n                stroke={animatedProps.borderColor}\n                onMouseEnter={handleMouseEnter}\n                onMouseMove={handleMouseMove}\n                onMouseLeave={handleMouseLeave}\n                onClick={handleClick}\n            />\n        )\n    }\n)\n","import { memo } from 'react'\nimport { useTransition } from '@react-spring/web'\nimport { useMotionConfig, useTheme } from '@nivo/core'\nimport { useInheritedColor } from '@nivo/colors'\nimport { ChordArc } from './ChordArc'\nimport { ArcDatum, ArcGenerator, ChordCommonProps, ArcAnimatedProps } from './types'\n\ninterface ChordArcsProps {\n    arcs: ArcDatum[]\n    arcGenerator: ArcGenerator\n    borderWidth: ChordCommonProps['arcBorderWidth']\n    borderColor: ChordCommonProps['arcBorderColor']\n    getOpacity: (arc: ArcDatum) => number\n    setCurrent: (arc: ArcDatum | null) => void\n    isInteractive: ChordCommonProps['isInteractive']\n    onMouseEnter?: ChordCommonProps['onArcMouseEnter']\n    onMouseMove?: ChordCommonProps['onArcMouseMove']\n    onMouseLeave?: ChordCommonProps['onArcMouseLeave']\n    onClick?: ChordCommonProps['onArcClick']\n    tooltip: ChordCommonProps['arcTooltip']\n}\n\nexport const ChordArcs = memo(\n    ({\n        arcs,\n        borderWidth,\n        borderColor,\n        getOpacity,\n        arcGenerator,\n        setCurrent,\n        isInteractive,\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n        onClick,\n        tooltip,\n    }: ChordArcsProps) => {\n        const { animate, config: springConfig } = useMotionConfig()\n\n        const theme = useTheme()\n        const getBorderColor = useInheritedColor(borderColor, theme)\n\n        const transition = useTransition<ArcDatum, ArcAnimatedProps>(arcs, {\n            keys: arc => arc.id,\n            initial: arc => ({\n                startAngle: arc.startAngle,\n                endAngle: arc.endAngle,\n                color: arc.color,\n                opacity: getOpacity(arc),\n                borderColor: getBorderColor(arc),\n            }),\n            from: arc => ({\n                startAngle: arc.startAngle,\n                endAngle: arc.endAngle,\n                color: arc.color,\n                opacity: 0,\n                borderColor: getBorderColor(arc),\n            }),\n            update: arc => ({\n                startAngle: arc.startAngle,\n                endAngle: arc.endAngle,\n                color: arc.color,\n                opacity: getOpacity(arc),\n                borderColor: getBorderColor(arc),\n            }),\n            leave: arc => ({\n                startAngle: arc.startAngle,\n                endAngle: arc.endAngle,\n                color: arc.color,\n                opacity: 0,\n                borderColor: getBorderColor(arc),\n            }),\n            expires: true,\n            config: springConfig,\n            immediate: !animate,\n        })\n\n        return (\n            <>\n                {transition((animatedProps, arc) => (\n                    <ChordArc\n                        key={arc.id}\n                        arc={arc}\n                        arcGenerator={arcGenerator}\n                        animatedProps={animatedProps}\n                        borderWidth={borderWidth}\n                        setCurrent={setCurrent}\n                        isInteractive={isInteractive}\n                        tooltip={tooltip}\n                        onMouseEnter={onMouseEnter}\n                        onMouseMove={onMouseMove}\n                        onMouseLeave={onMouseLeave}\n                        onClick={onClick}\n                    />\n                ))}\n            </>\n        )\n    }\n)\n","import { memo, useMemo } from 'react'\nimport { useTransition, animated, to } from '@react-spring/web'\nimport {\n    // @ts-ignore\n    midAngle,\n    // @ts-ignore\n    getPolarLabelProps,\n    useTheme,\n} from '@nivo/core'\nimport { useMotionConfig } from '@nivo/core'\nimport { ArcDatum, ChordCommonProps } from './types'\nimport { useInheritedColor } from '@nivo/colors'\n\ninterface ChordLabelsProps {\n    arcs: ArcDatum[]\n    radius: number\n    rotation: number\n    color: ChordCommonProps['labelTextColor']\n}\n\nexport const ChordLabels = memo(({ arcs, radius, rotation, color }: ChordLabelsProps) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const theme = useTheme()\n    const getColor = useInheritedColor(color, theme)\n\n    const labels = useMemo(\n        () =>\n            arcs.map(arc => {\n                const angle = midAngle(arc)\n                const textProps = getPolarLabelProps(radius, angle, rotation)\n\n                return {\n                    id: arc.id,\n                    label: arc.label,\n                    x: textProps.x,\n                    y: textProps.y,\n                    rotation: textProps.rotate,\n                    color: getColor(arc),\n                    textAnchor: textProps.align,\n                    dominantBaseline: textProps.baseline,\n                }\n            }),\n        [arcs, radius, rotation, getColor]\n    )\n\n    const transition = useTransition<\n        (typeof labels)[number],\n        {\n            x: number\n            y: number\n            rotation: number\n            color: string\n        }\n    >(labels, {\n        keys: label => label.id,\n        initial: label => {\n            return {\n                x: label.x,\n                y: label.y,\n                rotation: label.rotation,\n                color: label.color,\n            }\n        },\n        from: label => {\n            return {\n                x: label.x,\n                y: label.y,\n                rotation: label.rotation,\n                color: label.color,\n            }\n        },\n        enter: label => {\n            return {\n                x: label.x,\n                y: label.y,\n                rotation: label.rotation,\n                color: label.color,\n            }\n        },\n        update: label => {\n            return {\n                x: label.x,\n                y: label.y,\n                rotation: label.rotation,\n                color: label.color,\n            }\n        },\n        expires: true,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <>\n            {transition((transitionProps, label) => (\n                <animated.text\n                    key={label.id}\n                    data-testid={`label.${label.id}`}\n                    style={{\n                        ...theme.labels.text,\n                        pointerEvents: 'none',\n                        fill: transitionProps.color,\n                    }}\n                    transform={to(\n                        [transitionProps.x, transitionProps.y, transitionProps.rotation],\n                        (x, y, rotation) => `translate(${x}, ${y}) rotate(${rotation})`\n                    )}\n                    textAnchor={label.textAnchor}\n                    dominantBaseline={label.dominantBaseline}\n                >\n                    {label.label}\n                </animated.text>\n            ))}\n        </>\n    )\n})\n","import { createElement, Fragment, ReactNode } from 'react'\nimport { Container, SvgWrapper, useDimensions } from '@nivo/core'\nimport { BoxLegendSvg } from '@nivo/legends'\nimport { svgDefaultProps } from './defaults'\nimport { useChord, useChordSelection, useCustomLayerProps } from './hooks'\nimport { ChordRibbons } from './ChordRibbons'\nimport { ChordArcs } from './ChordArcs'\nimport { ChordLabels } from './ChordLabels'\nimport { ChordSvgProps, LayerId } from './types'\n\ntype InnerChordProps = Omit<ChordSvgProps, 'animate' | 'motionConfig' | 'renderWrapper' | 'theme'>\n\nconst InnerChord = ({\n    data,\n    keys,\n    label,\n    valueFormat,\n\n    margin: partialMargin,\n    width,\n    height,\n\n    innerRadiusRatio = svgDefaultProps.innerRadiusRatio,\n    innerRadiusOffset = svgDefaultProps.innerRadiusOffset,\n    padAngle = svgDefaultProps.padAngle,\n\n    layers = svgDefaultProps.layers,\n\n    colors = svgDefaultProps.colors,\n\n    arcBorderWidth = svgDefaultProps.arcBorderWidth,\n    arcBorderColor = svgDefaultProps.arcBorderColor,\n    arcOpacity = svgDefaultProps.arcOpacity,\n    activeArcOpacity = svgDefaultProps.activeArcOpacity,\n    inactiveArcOpacity = svgDefaultProps.inactiveArcOpacity,\n    arcTooltip = svgDefaultProps.arcTooltip,\n\n    ribbonBorderWidth = svgDefaultProps.ribbonBorderWidth,\n    ribbonBorderColor = svgDefaultProps.ribbonBorderColor,\n    ribbonBlendMode = svgDefaultProps.ribbonBlendMode,\n    ribbonOpacity = svgDefaultProps.ribbonOpacity,\n    activeRibbonOpacity = svgDefaultProps.activeRibbonOpacity,\n    inactiveRibbonOpacity = svgDefaultProps.inactiveRibbonOpacity,\n    ribbonTooltip = svgDefaultProps.ribbonTooltip,\n\n    enableLabel = svgDefaultProps.enableLabel,\n    labelOffset = svgDefaultProps.labelOffset,\n    labelRotation = svgDefaultProps.labelRotation,\n    labelTextColor = svgDefaultProps.labelTextColor,\n\n    isInteractive = svgDefaultProps.isInteractive,\n    onArcMouseEnter,\n    onArcMouseMove,\n    onArcMouseLeave,\n    onArcClick,\n    onRibbonMouseEnter,\n    onRibbonMouseMove,\n    onRibbonMouseLeave,\n    onRibbonClick,\n\n    legends = svgDefaultProps.legends,\n\n    role = svgDefaultProps.role,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n}: InnerChordProps) => {\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { center, radius, arcGenerator, ribbonGenerator, arcs, ribbons } = useChord({\n        data,\n        keys,\n        label,\n        valueFormat,\n        width: innerWidth,\n        height: innerHeight,\n        innerRadiusRatio,\n        innerRadiusOffset,\n        padAngle,\n        colors,\n    })\n\n    const { setCurrentArc, setCurrentRibbon, getArcOpacity, getRibbonOpacity } = useChordSelection({\n        arcOpacity,\n        activeArcOpacity,\n        inactiveArcOpacity,\n        ribbons,\n        ribbonOpacity,\n        activeRibbonOpacity,\n        inactiveRibbonOpacity,\n    })\n\n    const customLayerProps = useCustomLayerProps({\n        center,\n        radius,\n        arcs,\n        arcGenerator,\n        ribbons,\n        ribbonGenerator,\n    })\n\n    if (radius <= 0) return null\n\n    const legendData = arcs.map(arc => ({\n        id: arc.id,\n        label: arc.label,\n        color: arc.color,\n    }))\n\n    const layerById: Record<LayerId, ReactNode> = {\n        ribbons: null,\n        arcs: null,\n        labels: null,\n        legends: null,\n    }\n\n    if (layers.includes('ribbons')) {\n        layerById.ribbons = (\n            <g key=\"ribbons\" transform={`translate(${center[0]}, ${center[1]})`}>\n                <ChordRibbons\n                    ribbons={ribbons}\n                    ribbonGenerator={ribbonGenerator}\n                    borderWidth={ribbonBorderWidth}\n                    borderColor={ribbonBorderColor}\n                    getOpacity={getRibbonOpacity}\n                    blendMode={ribbonBlendMode}\n                    setCurrent={setCurrentRibbon}\n                    isInteractive={isInteractive}\n                    onMouseEnter={onRibbonMouseEnter}\n                    onMouseMove={onRibbonMouseMove}\n                    onMouseLeave={onRibbonMouseLeave}\n                    onClick={onRibbonClick}\n                    tooltip={ribbonTooltip}\n                />\n            </g>\n        )\n    }\n\n    if (layers.includes('arcs')) {\n        layerById.arcs = (\n            <g key=\"arcs\" transform={`translate(${center[0]}, ${center[1]})`}>\n                <ChordArcs\n                    arcs={arcs}\n                    arcGenerator={arcGenerator}\n                    borderWidth={arcBorderWidth}\n                    borderColor={arcBorderColor}\n                    getOpacity={getArcOpacity}\n                    setCurrent={setCurrentArc}\n                    isInteractive={isInteractive}\n                    onMouseEnter={onArcMouseEnter}\n                    onMouseMove={onArcMouseMove}\n                    onMouseLeave={onArcMouseLeave}\n                    onClick={onArcClick}\n                    tooltip={arcTooltip}\n                />\n            </g>\n        )\n    }\n\n    if (layers.includes('labels') && enableLabel) {\n        layerById.labels = (\n            <g key=\"labels\" transform={`translate(${center[0]}, ${center[1]})`}>\n                <ChordLabels\n                    arcs={arcs}\n                    radius={radius + labelOffset}\n                    rotation={labelRotation}\n                    color={labelTextColor}\n                />\n            </g>\n        )\n    }\n\n    if (layers.includes('legends') && legends.length > 0) {\n        layerById.legends = (\n            <Fragment key=\"legends\">\n                {legends.map((legend, i) => (\n                    <BoxLegendSvg\n                        key={i}\n                        {...legend}\n                        containerWidth={innerWidth}\n                        containerHeight={innerHeight}\n                        data={legendData}\n                    />\n                ))}\n            </Fragment>\n        )\n    }\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            role={role}\n            ariaLabel={ariaLabel}\n            ariaLabelledBy={ariaLabelledBy}\n            ariaDescribedBy={ariaDescribedBy}\n        >\n            {layers.map((layer, i) => {\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, customLayerProps)}</Fragment>\n                }\n\n                return layerById?.[layer] ?? null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const Chord = ({\n    isInteractive = svgDefaultProps.isInteractive,\n    animate = svgDefaultProps.animate,\n    motionConfig = svgDefaultProps.motionConfig,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: ChordSvgProps) => (\n    <Container\n        {...{\n            animate,\n            isInteractive,\n            motionConfig,\n            renderWrapper,\n            theme,\n        }}\n    >\n        <InnerChord isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { createElement, useRef, useEffect, useCallback, MouseEvent } from 'react'\nimport {\n    useDimensions,\n    useTheme,\n    // @ts-ignore\n    midAngle,\n    // @ts-ignore\n    getPolarLabelProps,\n    degreesToRadians,\n    getRelativeCursor,\n    Margin,\n    Container,\n} from '@nivo/core'\nimport { findArcUnderCursor } from '@nivo/arcs'\nimport { useInheritedColor } from '@nivo/colors'\nimport { renderLegendToCanvas } from '@nivo/legends'\nimport { useTooltip } from '@nivo/tooltip'\nimport { useChord, useChordSelection, useCustomLayerProps } from './hooks'\nimport { ArcDatum, ChordCanvasProps } from './types'\nimport { canvasDefaultProps } from './defaults'\n\nconst getArcFromMouseEvent = ({\n    event,\n    canvasEl,\n    center,\n    margin,\n    radius,\n    innerRadius,\n    arcs,\n}: {\n    event: MouseEvent\n    canvasEl: HTMLCanvasElement\n    center: [number, number]\n    margin: Margin\n    radius: number\n    innerRadius: number\n    arcs: ArcDatum[]\n}) => {\n    const [x, y] = getRelativeCursor(canvasEl, event)\n    const centerX = margin.left + center[0]\n    const centerY = margin.top + center[1]\n\n    return findArcUnderCursor(centerX, centerY, radius, innerRadius, arcs as any[], x, y)\n}\n\ntype InnerChordCanvasProps = Omit<ChordCanvasProps, 'renderWrapper' | 'theme'>\n\nconst InnerChordCanvas = ({\n    pixelRatio = canvasDefaultProps.pixelRatio,\n    margin: partialMargin,\n    data,\n    keys,\n    width,\n    height,\n    label = canvasDefaultProps.label,\n    valueFormat,\n    innerRadiusRatio = canvasDefaultProps.innerRadiusRatio,\n    innerRadiusOffset = canvasDefaultProps.innerRadiusOffset,\n    padAngle = canvasDefaultProps.padAngle,\n    layers = canvasDefaultProps.layers,\n    colors = canvasDefaultProps.colors,\n    arcBorderWidth = canvasDefaultProps.arcBorderWidth,\n    arcBorderColor = canvasDefaultProps.arcBorderColor,\n    arcOpacity = canvasDefaultProps.arcOpacity,\n    activeArcOpacity = canvasDefaultProps.activeArcOpacity,\n    inactiveArcOpacity = canvasDefaultProps.inactiveArcOpacity,\n    arcTooltip = canvasDefaultProps.arcTooltip,\n    ribbonBorderWidth = canvasDefaultProps.ribbonBorderWidth,\n    ribbonBorderColor = canvasDefaultProps.ribbonBorderColor,\n    ribbonOpacity = canvasDefaultProps.ribbonOpacity,\n    activeRibbonOpacity = canvasDefaultProps.activeRibbonOpacity,\n    inactiveRibbonOpacity = canvasDefaultProps.inactiveRibbonOpacity,\n    enableLabel = canvasDefaultProps.enableLabel,\n    labelOffset = canvasDefaultProps.labelOffset,\n    labelRotation = canvasDefaultProps.labelRotation,\n    labelTextColor = canvasDefaultProps.labelTextColor,\n    isInteractive = canvasDefaultProps.isInteractive,\n    onArcMouseEnter,\n    onArcMouseMove,\n    onArcMouseLeave,\n    onArcClick,\n    legends = canvasDefaultProps.legends,\n}: InnerChordCanvasProps) => {\n    const canvasEl = useRef<HTMLCanvasElement | null>(null)\n\n    const { innerWidth, innerHeight, outerWidth, outerHeight, margin } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { center, radius, innerRadius, arcGenerator, ribbonGenerator, arcs, ribbons } = useChord({\n        data,\n        keys,\n        label,\n        valueFormat,\n        width: innerWidth,\n        height: innerHeight,\n        innerRadiusRatio,\n        innerRadiusOffset,\n        padAngle,\n        colors,\n    })\n\n    const { currentArc, setCurrentArc, getArcOpacity, getRibbonOpacity } = useChordSelection({\n        arcOpacity,\n        activeArcOpacity,\n        inactiveArcOpacity,\n        ribbons,\n        ribbonOpacity,\n        activeRibbonOpacity,\n        inactiveRibbonOpacity,\n    })\n\n    const theme = useTheme()\n    const getLabelTextColor = useInheritedColor(labelTextColor, theme)\n    const getArcBorderColor = useInheritedColor(arcBorderColor, theme)\n    const getRibbonBorderColor = useInheritedColor(ribbonBorderColor, theme)\n\n    const layerContext = useCustomLayerProps({\n        center,\n        radius,\n        arcs,\n        arcGenerator,\n        ribbons,\n        ribbonGenerator,\n    })\n\n    useEffect(() => {\n        if (canvasEl.current === null) return\n\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        const ctx = canvasEl.current.getContext('2d')!\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n\n        if (radius <= 0) return\n\n        layers.forEach(layer => {\n            if (layer === 'ribbons') {\n                ctx.save()\n                ctx.translate(margin.left + center[0], margin.top + center[1])\n\n                ribbonGenerator.context(ctx)\n                ribbons.forEach(ribbon => {\n                    ctx.save()\n\n                    ctx.globalAlpha = getRibbonOpacity(ribbon)\n                    ctx.fillStyle = ribbon.source.color\n                    ctx.beginPath()\n                    ribbonGenerator(ribbon)\n                    ctx.fill()\n\n                    if (ribbonBorderWidth > 0) {\n                        ctx.strokeStyle = getRibbonBorderColor(ribbon.source)\n                        ctx.lineWidth = ribbonBorderWidth\n                        ctx.stroke()\n                    }\n\n                    ctx.restore()\n                })\n\n                ctx.restore()\n            }\n\n            if (layer === 'arcs') {\n                ctx.save()\n                ctx.translate(margin.left + center[0], margin.top + center[1])\n\n                arcGenerator.context(ctx)\n                arcs.forEach(arc => {\n                    ctx.save()\n\n                    ctx.globalAlpha = getArcOpacity(arc)\n                    ctx.fillStyle = arc.color\n                    ctx.beginPath()\n                    arcGenerator(arc)\n                    ctx.fill()\n\n                    if (arcBorderWidth > 0) {\n                        ctx.strokeStyle = getArcBorderColor(arc)\n                        ctx.lineWidth = arcBorderWidth\n                        ctx.stroke()\n                    }\n\n                    ctx.restore()\n                })\n\n                ctx.restore()\n            }\n\n            if (layer === 'labels' && enableLabel === true) {\n                ctx.save()\n                ctx.translate(margin.left + center[0], margin.top + center[1])\n\n                ctx.font = `${theme.labels.text.fontSize}px ${\n                    theme.labels.text.fontFamily || 'sans-serif'\n                }`\n\n                arcs.forEach(arc => {\n                    const angle = midAngle(arc)\n                    const props = getPolarLabelProps(radius + labelOffset, angle, labelRotation)\n\n                    ctx.save()\n                    ctx.translate(props.x, props.y)\n                    ctx.rotate(degreesToRadians(props.rotate))\n\n                    ctx.textAlign = props.align\n                    ctx.textBaseline = props.baseline\n                    ctx.fillStyle = getLabelTextColor(arc)\n                    ctx.fillText(arc.label, 0, 0)\n\n                    ctx.restore()\n                })\n\n                ctx.restore()\n            }\n\n            if (layer === 'legends') {\n                ctx.save()\n                ctx.translate(margin.left, margin.top)\n\n                const legendData = arcs.map(arc => ({\n                    id: arc.id,\n                    label: arc.label,\n                    color: arc.color,\n                }))\n\n                legends.forEach(legend => {\n                    renderLegendToCanvas(ctx, {\n                        ...legend,\n                        data: legendData,\n                        containerWidth: innerWidth,\n                        containerHeight: innerHeight,\n                        theme,\n                    })\n                })\n\n                ctx.restore()\n            }\n\n            if (typeof layer === 'function') {\n                layer(ctx, layerContext)\n            }\n        })\n    }, [\n        canvasEl,\n        innerWidth,\n        innerHeight,\n        outerWidth,\n        outerHeight,\n        margin,\n        pixelRatio,\n        center,\n        radius,\n        theme,\n        layers,\n        arcs,\n        arcGenerator,\n        getArcOpacity,\n        arcBorderWidth,\n        getArcBorderColor,\n        ribbons,\n        ribbonGenerator,\n        getRibbonOpacity,\n        ribbonBorderWidth,\n        getRibbonBorderColor,\n        enableLabel,\n        labelOffset,\n        labelRotation,\n        getLabelTextColor,\n        legends,\n        layerContext,\n    ])\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseHover = useCallback(\n        (event: MouseEvent<HTMLCanvasElement>) => {\n            if (canvasEl.current === null) return\n\n            const arc = getArcFromMouseEvent({\n                event,\n                canvasEl: canvasEl.current,\n                center,\n                margin,\n                radius,\n                innerRadius,\n                arcs,\n            })\n\n            if (arc) {\n                setCurrentArc(arc)\n                showTooltipFromEvent(createElement(arcTooltip, { arc }), event)\n                !currentArc && onArcMouseEnter && onArcMouseEnter(arc, event)\n                onArcMouseMove && onArcMouseMove(arc, event)\n                currentArc &&\n                    currentArc.id !== arc.id &&\n                    onArcMouseLeave &&\n                    onArcMouseLeave(arc, event)\n            } else {\n                setCurrentArc(null)\n                hideTooltip()\n                currentArc && onArcMouseLeave && onArcMouseLeave(currentArc, event)\n            }\n        },\n        [\n            canvasEl,\n            center,\n            margin,\n            radius,\n            innerRadius,\n            arcs,\n            setCurrentArc,\n            currentArc,\n            showTooltipFromEvent,\n            hideTooltip,\n            arcTooltip,\n            onArcMouseEnter,\n            onArcMouseMove,\n            onArcMouseLeave,\n        ]\n    )\n\n    const handleMouseLeave = useCallback(() => {\n        setCurrentArc(null)\n        hideTooltip()\n    }, [setCurrentArc, hideTooltip])\n\n    const handleClick = useCallback(\n        (event: MouseEvent<HTMLCanvasElement>) => {\n            if (canvasEl.current === null || !onArcClick) return\n\n            const arc = getArcFromMouseEvent({\n                event,\n                canvasEl: canvasEl.current,\n                center,\n                margin,\n                radius,\n                innerRadius,\n                arcs,\n            })\n\n            arc && onArcClick(arc, event)\n        },\n        [canvasEl, center, margin, radius, innerRadius, arcs, onArcClick]\n    )\n\n    return (\n        <canvas\n            ref={canvasEl}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n                cursor: isInteractive ? 'auto' : 'normal',\n            }}\n            onMouseEnter={isInteractive ? handleMouseHover : undefined}\n            onMouseMove={isInteractive ? handleMouseHover : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onClick={isInteractive ? handleClick : undefined}\n        />\n    )\n}\n\nexport const ChordCanvas = ({\n    theme,\n    isInteractive = canvasDefaultProps.isInteractive,\n    animate = canvasDefaultProps.animate,\n    motionConfig = canvasDefaultProps.motionConfig,\n    renderWrapper,\n    ...otherProps\n}: ChordCanvasProps) => (\n    <Container {...{ isInteractive, animate, motionConfig, theme, renderWrapper }}>\n        <InnerChordCanvas isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { Chord } from './Chord'\nimport { ChordSvgProps } from './types'\n\nexport const ResponsiveChord = (props: Omit<ChordSvgProps, 'width' | 'height'>) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <Chord {...props} width={width} height={height} />}\n    </ResponsiveWrapper>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { ChordCanvas } from './ChordCanvas'\nimport { ChordCanvasProps } from './types'\n\nexport const ResponsiveChordCanvas = (props: Omit<ChordCanvasProps, 'width' | 'height'>) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <ChordCanvas {...props} width={width} height={height} />}\n    </ResponsiveWrapper>\n)\n"],"names":["ChordArcTooltip","memo","_ref","arc","_jsx","BasicTooltip","id","label","value","formattedValue","color","enableChip","ChordRibbonTooltip","ribbon","TableTooltip","rows","Chip","source","children","target","commonDefaultProps","layers","padAngle","innerRadiusRatio","innerRadiusOffset","colors","scheme","arcOpacity","activeArcOpacity","inactiveArcOpacity","arcBorderWidth","arcBorderColor","from","modifiers","arcTooltip","ribbonOpacity","activeRibbonOpacity","inactiveRibbonOpacity","ribbonBorderWidth","ribbonBorderColor","ribbonBlendMode","enableLabel","labelOffset","labelRotation","labelTextColor","isInteractive","legends","animate","motionConfig","role","svgDefaultProps","_extends","ribbonTooltip","canvasDefaultProps","pixelRatio","window","devicePixelRatio","computeChordLayout","d3Chord","computeChordGenerators","_ref2","width","height","center","radius","Math","min","innerRadius","ribbonRadius","arcGenerator","d3Arc","outerRadius","ribbonGenerator","d3Ribbon","computeChordArcsAndRibbons","_ref3","chord","data","keys","getLabel","formatValue","getColor","_ribbons","arcs","groups","map","chordGroup","index","ribbons","_ribbon","sort","join","computeArcPath","_ref4","startAngle","endAngle","to","computeRibbonPath","_ref5","sourceStartAngle","sourceEndAngle","targetStartAngle","targetEndAngle","max","useChordLayout","useMemo","useChordGenerators","useChordArcsAndRibbons","useChord","_ref4$label","valueFormat","_ref4$innerRadiusRati","_ref4$innerRadiusOffs","_ref4$padAngle","_ref4$colors","_useChordGenerators","getLabelGenerator","useValueFormatter","useOrdinalColorScale","_useChordArcsAndRibbo","useChordSelection","_ref5$arcOpacity","_ref5$activeArcOpacit","_ref5$inactiveArcOpac","_ref5$ribbonOpacity","_ref5$activeRibbonOpa","_ref5$inactiveRibbonO","_useState","useState","currentArc","setCurrentArc","_useState2","currentRibbon","setCurrentRibbon","selection","selectedArcIds","selectedRibbonIds","push","filter","forEach","hasSelection","length","getArcOpacity","includes","getRibbonOpacity","useCustomLayerProps","_ref6","ChordRibbon","animatedProps","borderWidth","blendMode","setCurrent","onMouseEnter","onMouseMove","onMouseLeave","onClick","tooltip","_useTooltip","useTooltip","showTooltipFromEvent","hideTooltip","handleMouseEnter","event","createElement","handleMouseMove","handleMouseLeave","handleClick","animated","path","d","fill","opacity","strokeWidth","stroke","borderColor","style","mixBlendMode","getRibbonAngles","useMiddleAngle","firstArc","secondArc","firstMiddleAngle","midAngle","secondMiddleAngle","ChordRibbons","getOpacity","_useMotionConfig","useMotionConfig","springConfig","config","theme","useTheme","getBorderColor","useInheritedColor","transition","useTransition","initial","update","leave","expires","immediate","_Fragment","ChordArc","ChordArcs","ChordLabels","rotation","labels","angle","textProps","getPolarLabelProps","x","y","rotate","textAnchor","align","dominantBaseline","baseline","enter","transitionProps","text","pointerEvents","transform","InnerChord","partialMargin","margin","_ref$innerRadiusRatio","_ref$innerRadiusOffse","_ref$padAngle","_ref$layers","_ref$colors","_ref$arcBorderWidth","_ref$arcBorderColor","_ref$arcOpacity","_ref$activeArcOpacity","_ref$inactiveArcOpaci","_ref$arcTooltip","_ref$ribbonBorderWidt","_ref$ribbonBorderColo","_ref$ribbonBlendMode","_ref$ribbonOpacity","_ref$activeRibbonOpac","_ref$inactiveRibbonOp","_ref$ribbonTooltip","_ref$enableLabel","_ref$labelOffset","_ref$labelRotation","_ref$labelTextColor","_ref$isInteractive","onArcMouseEnter","onArcMouseMove","onArcMouseLeave","onArcClick","onRibbonMouseEnter","onRibbonMouseMove","onRibbonMouseLeave","onRibbonClick","_ref$legends","_ref$role","ariaLabel","ariaLabelledBy","ariaDescribedBy","_useDimensions","useDimensions","innerWidth","innerHeight","outerWidth","outerHeight","_useChord","_useChordSelection","customLayerProps","legendData","layerById","Fragment","legend","i","BoxLegendSvg","containerWidth","containerHeight","SvgWrapper","layer","_layerById$layer","Chord","_ref2$isInteractive","_ref2$animate","_ref2$motionConfig","renderWrapper","otherProps","_objectWithoutPropertiesLoose","_excluded","Container","getArcFromMouseEvent","canvasEl","_getRelativeCursor","getRelativeCursor","centerX","left","centerY","top","findArcUnderCursor","InnerChordCanvas","_ref2$pixelRatio","_ref2$label","_ref2$innerRadiusRati","_ref2$innerRadiusOffs","_ref2$padAngle","_ref2$layers","_ref2$colors","_ref2$arcBorderWidth","_ref2$arcBorderColor","_ref2$arcOpacity","_ref2$activeArcOpacit","_ref2$inactiveArcOpac","_ref2$arcTooltip","_ref2$ribbonBorderWid","_ref2$ribbonBorderCol","_ref2$ribbonOpacity","_ref2$activeRibbonOpa","_ref2$inactiveRibbonO","_ref2$enableLabel","_ref2$labelOffset","_ref2$labelRotation","_ref2$labelTextColor","_ref2$legends","useRef","getLabelTextColor","getArcBorderColor","getRibbonBorderColor","layerContext","useEffect","current","ctx","getContext","scale","fillStyle","background","fillRect","save","translate","context","globalAlpha","beginPath","strokeStyle","lineWidth","restore","font","fontSize","fontFamily","props","degreesToRadians","textAlign","textBaseline","fillText","renderLegendToCanvas","handleMouseHover","useCallback","ref","cursor","undefined","ChordCanvas","_ref3$isInteractive","_ref3$animate","_ref3$motionConfig","ResponsiveChord","ResponsiveWrapper","ResponsiveChordCanvas"],"mappings":"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"}