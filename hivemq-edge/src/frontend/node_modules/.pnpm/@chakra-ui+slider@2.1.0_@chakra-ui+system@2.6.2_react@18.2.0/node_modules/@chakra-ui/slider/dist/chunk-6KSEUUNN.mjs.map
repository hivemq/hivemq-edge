{"version":3,"sources":["../src/slider.tsx"],"sourcesContent":["import { createContext } from \"@chakra-ui/react-context\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n  useTheme,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/utils\"\nimport { useSlider, UseSliderProps, UseSliderReturn } from \"./use-slider\"\n\ninterface SliderContext\n  extends Omit<UseSliderReturn, \"getInputProps\" | \"getRootProps\"> {}\n\nconst [SliderProvider, useSliderContext] = createContext<SliderContext>({\n  name: \"SliderContext\",\n  hookName: \"useSliderContext\",\n  providerName: \"<Slider />\",\n})\n\nconst [SliderStylesProvider, useSliderStyles] = createContext<\n  Record<string, SystemStyleObject>\n>({\n  name: `SliderStylesContext`,\n  hookName: `useSliderStyles`,\n  providerName: \"<Slider />\",\n})\n\nexport { useSliderStyles }\nexport { SliderProvider, useSliderContext }\n\nexport interface SliderProps\n  extends UseSliderProps,\n    ThemingProps<\"Slider\">,\n    Omit<HTMLChakraProps<\"div\">, keyof UseSliderProps> {}\n\n/**\n * The Slider is used to allow users to make selections from a range of values.\n * It provides context and functionality for all slider components\n *\n * @see Docs     https://chakra-ui.com/docs/form/slider\n * @see WAI-ARIA https://www.w3.org/WAI/ARIA/apg/patterns/slider/\n */\nexport const Slider = forwardRef<SliderProps, \"div\">((props, ref) => {\n  const sliderProps: SliderProps = {\n    ...props,\n    orientation: props?.orientation ?? \"horizontal\",\n  }\n\n  const styles = useMultiStyleConfig(\"Slider\", sliderProps)\n  const ownProps = omitThemingProps(sliderProps)\n\n  const { direction } = useTheme()\n  ownProps.direction = direction\n\n  const { getInputProps, getRootProps, ...context } = useSlider(ownProps)\n\n  const rootProps = getRootProps()\n  const inputProps = getInputProps({}, ref)\n\n  return (\n    <SliderProvider value={context}>\n      <SliderStylesProvider value={styles}>\n        <chakra.div\n          {...rootProps}\n          className={cx(\"chakra-slider\", sliderProps.className)}\n          __css={styles.container}\n        >\n          {sliderProps.children}\n          <input {...inputProps} />\n        </chakra.div>\n      </SliderStylesProvider>\n    </SliderProvider>\n  )\n})\n\nSlider.displayName = \"Slider\"\n\nexport interface SliderThumbProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * Slider component that acts as the handle used to select predefined\n * values by dragging its handle along the track\n */\nexport const SliderThumb = forwardRef<SliderThumbProps, \"div\">((props, ref) => {\n  const { getThumbProps } = useSliderContext()\n  const styles = useSliderStyles()\n  const thumbProps = getThumbProps(props, ref)\n\n  return (\n    <chakra.div\n      {...thumbProps}\n      className={cx(\"chakra-slider__thumb\", props.className)}\n      __css={styles.thumb}\n    />\n  )\n})\n\nSliderThumb.displayName = \"SliderThumb\"\n\nexport interface SliderTrackProps extends HTMLChakraProps<\"div\"> {}\n\nexport const SliderTrack = forwardRef<SliderTrackProps, \"div\">((props, ref) => {\n  const { getTrackProps } = useSliderContext()\n  const styles = useSliderStyles()\n  const trackProps = getTrackProps(props, ref)\n\n  return (\n    <chakra.div\n      {...trackProps}\n      className={cx(\"chakra-slider__track\", props.className)}\n      __css={styles.track}\n    />\n  )\n})\n\nSliderTrack.displayName = \"SliderTrack\"\n\nexport interface SliderInnerTrackProps extends HTMLChakraProps<\"div\"> {}\n\nexport const SliderFilledTrack = forwardRef<SliderInnerTrackProps, \"div\">(\n  (props, ref) => {\n    const { getInnerTrackProps } = useSliderContext()\n    const styles = useSliderStyles()\n    const trackProps = getInnerTrackProps(props, ref)\n\n    return (\n      <chakra.div\n        {...trackProps}\n        className={cx(\"chakra-slider__filled-track\", props.className)}\n        __css={styles.filledTrack}\n      />\n    )\n  },\n)\n\nSliderFilledTrack.displayName = \"SliderFilledTrack\"\n\nexport interface SliderMarkProps extends HTMLChakraProps<\"div\"> {\n  value: number\n}\n\n/**\n * SliderMark is used to provide names for specific Slider\n * values by defining labels or markers along the track.\n *\n * @see Docs https://chakra-ui.com/slider\n */\nexport const SliderMark = forwardRef<SliderMarkProps, \"div\">((props, ref) => {\n  const { getMarkerProps } = useSliderContext()\n  const styles = useSliderStyles()\n  const markProps = getMarkerProps(props, ref)\n  return (\n    <chakra.div\n      {...markProps}\n      className={cx(\"chakra-slider__marker\", props.className)}\n      __css={styles.mark}\n    />\n  )\n})\n\nSliderMark.displayName = \"SliderMark\"\n"],"mappings":"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","names":[]}