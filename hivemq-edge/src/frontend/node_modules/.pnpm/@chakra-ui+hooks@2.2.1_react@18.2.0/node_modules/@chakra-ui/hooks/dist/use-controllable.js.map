{"version":3,"sources":["../src/use-controllable.ts","../src/use-callback-ref.ts","../src/use-safe-layout-effect.ts"],"sourcesContent":["import { runIfFn } from \"@chakra-ui/utils\"\nimport { useCallback, useState } from \"react\"\nimport { useCallbackRef } from \"./use-callback-ref\"\n\nexport function useControllableProp<T>(prop: T | undefined, state: T) {\n  const isControlled = prop !== undefined\n  const value = isControlled && typeof prop !== \"undefined\" ? prop : state\n  return [isControlled, value] as const\n}\n\nexport interface UseControllableStateProps<T> {\n  /**\n   * The value to used in controlled mode\n   */\n  value?: T\n  /**\n   * The initial value to be used, in uncontrolled mode\n   */\n  defaultValue?: T | (() => T)\n  /**\n   * The callback fired when the value changes\n   */\n  onChange?: (value: T) => void\n  /**\n   * The function that determines if the state should be updated\n   */\n  shouldUpdate?: (prev: T, next: T) => boolean\n}\n\n/**\n * React hook for using controlling component state.\n * @param props\n */\nexport function useControllableState<T>(props: UseControllableStateProps<T>) {\n  const {\n    value: valueProp,\n    defaultValue,\n    onChange,\n    shouldUpdate = (prev, next) => prev !== next,\n  } = props\n  const onChangeProp = useCallbackRef(onChange)\n  const shouldUpdateProp = useCallbackRef(shouldUpdate)\n\n  const [valueState, setValue] = useState(defaultValue as T)\n\n  const isControlled = valueProp !== undefined\n  const value = isControlled ? (valueProp as T) : valueState\n\n  const updateValue = useCallback(\n    (next: React.SetStateAction<T>) => {\n      const nextValue = runIfFn(next, value)\n\n      if (!shouldUpdateProp(value, nextValue)) {\n        return\n      }\n\n      if (!isControlled) {\n        setValue(nextValue)\n      }\n\n      onChangeProp(nextValue)\n    },\n    [isControlled, onChangeProp, value, shouldUpdateProp],\n  )\n\n  return [value, updateValue] as [T, React.Dispatch<React.SetStateAction<T>>]\n}\n","import { useCallback, useRef } from \"react\"\nimport { useSafeLayoutEffect } from \"./use-safe-layout-effect\"\n\n/**\n * React hook to persist any value between renders,\n * but keeps it up-to-date if it changes.\n *\n * @param fn the function to persist\n * @param deps the function dependency list\n */\nexport function useCallbackRef<T extends (...args: any[]) => any>(\n  fn: T | undefined,\n  deps: React.DependencyList = [],\n): T {\n  const ref = useRef(fn)\n\n  useSafeLayoutEffect(() => {\n    ref.current = fn\n  })\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  return useCallback(((...args) => ref.current?.(...args)) as T, deps)\n}\n","import { isBrowser } from \"@chakra-ui/utils\"\nimport { useEffect, useLayoutEffect } from \"react\"\n\nexport const useSafeLayoutEffect = isBrowser ? useLayoutEffect : useEffect\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAAA,gBAAwB;AACxB,IAAAC,gBAAsC;;;ACDtC,IAAAC,gBAAoC;;;ACApC,mBAA0B;AAC1B,mBAA2C;AAEpC,IAAM,sBAAsB,yBAAY,+BAAkB;;;ADO1D,SAAS,eACd,IACA,OAA6B,CAAC,GAC3B;AACH,QAAM,UAAM,sBAAO,EAAE;AAErB,sBAAoB,MAAM;AACxB,QAAI,UAAU;AAAA,EAChB,CAAC;AAGD,aAAO,2BAAa,IAAI,SAAM;AArBhC;AAqBmC,qBAAI,YAAJ,6BAAc,GAAG;AAAA,KAAa,IAAI;AACrE;;;ADlBO,SAAS,oBAAuB,MAAqB,OAAU;AACpE,QAAM,eAAe,SAAS;AAC9B,QAAM,QAAQ,gBAAgB,OAAO,SAAS,cAAc,OAAO;AACnE,SAAO,CAAC,cAAc,KAAK;AAC7B;AAyBO,SAAS,qBAAwB,OAAqC;AAC3E,QAAM;AAAA,IACJ,OAAO;AAAA,IACP;AAAA,IACA;AAAA,IACA,eAAe,CAAC,MAAM,SAAS,SAAS;AAAA,EAC1C,IAAI;AACJ,QAAM,eAAe,eAAe,QAAQ;AAC5C,QAAM,mBAAmB,eAAe,YAAY;AAEpD,QAAM,CAAC,YAAY,QAAQ,QAAI,wBAAS,YAAiB;AAEzD,QAAM,eAAe,cAAc;AACnC,QAAM,QAAQ,eAAgB,YAAkB;AAEhD,QAAM,kBAAc;AAAA,IAClB,CAAC,SAAkC;AACjC,YAAM,gBAAY,uBAAQ,MAAM,KAAK;AAErC,UAAI,CAAC,iBAAiB,OAAO,SAAS,GAAG;AACvC;AAAA,MACF;AAEA,UAAI,CAAC,cAAc;AACjB,iBAAS,SAAS;AAAA,MACpB;AAEA,mBAAa,SAAS;AAAA,IACxB;AAAA,IACA,CAAC,cAAc,cAAc,OAAO,gBAAgB;AAAA,EACtD;AAEA,SAAO,CAAC,OAAO,WAAW;AAC5B;","names":["import_utils","import_react","import_react"]}