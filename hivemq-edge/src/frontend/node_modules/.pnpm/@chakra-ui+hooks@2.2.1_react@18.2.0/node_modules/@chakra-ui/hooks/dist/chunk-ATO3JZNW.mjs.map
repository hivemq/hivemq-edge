{"version":3,"sources":["../src/use-animation-state.ts"],"sourcesContent":["import { getOwnerWindow } from \"@chakra-ui/utils\"\nimport { useEffect, useState } from \"react\"\nimport { useEventListener } from \"./use-event-listener\"\n\nexport type UseAnimationStateProps = {\n  isOpen: boolean\n  ref: React.RefObject<HTMLElement>\n}\n\nexport function useAnimationState(props: UseAnimationStateProps) {\n  const { isOpen, ref } = props\n\n  const [mounted, setMounted] = useState(isOpen)\n  const [once, setOnce] = useState(false)\n\n  useEffect(() => {\n    if (!once) {\n      setMounted(isOpen)\n      setOnce(true)\n    }\n  }, [isOpen, once, mounted])\n\n  useEventListener(\n    \"animationend\",\n    () => {\n      setMounted(isOpen)\n    },\n    () => ref.current,\n  )\n\n  const hidden = isOpen ? false : !mounted\n\n  return {\n    present: !hidden,\n    onComplete() {\n      const win = getOwnerWindow(ref.current)\n      const evt = new win.CustomEvent(\"animationend\", { bubbles: true })\n      ref.current?.dispatchEvent(evt)\n    },\n  }\n}\n"],"mappings":";;;;;;AAAA,SAAS,sBAAsB;AAC/B,SAAS,WAAW,gBAAgB;AAQ7B,SAAS,kBAAkB,OAA+B;AAC/D,QAAM,EAAE,QAAQ,IAAI,IAAI;AAExB,QAAM,CAAC,SAAS,UAAU,IAAI,SAAS,MAAM;AAC7C,QAAM,CAAC,MAAM,OAAO,IAAI,SAAS,KAAK;AAEtC,YAAU,MAAM;AACd,QAAI,CAAC,MAAM;AACT,iBAAW,MAAM;AACjB,cAAQ,IAAI;AAAA,IACd;AAAA,EACF,GAAG,CAAC,QAAQ,MAAM,OAAO,CAAC;AAE1B;AAAA,IACE;AAAA,IACA,MAAM;AACJ,iBAAW,MAAM;AAAA,IACnB;AAAA,IACA,MAAM,IAAI;AAAA,EACZ;AAEA,QAAM,SAAS,SAAS,QAAQ,CAAC;AAEjC,SAAO;AAAA,IACL,SAAS,CAAC;AAAA,IACV,aAAa;AAlCjB;AAmCM,YAAM,MAAM,eAAe,IAAI,OAAO;AACtC,YAAM,MAAM,IAAI,IAAI,YAAY,gBAAgB,EAAE,SAAS,KAAK,CAAC;AACjE,gBAAI,YAAJ,mBAAa,cAAc;AAAA,IAC7B;AAAA,EACF;AACF;","names":[]}