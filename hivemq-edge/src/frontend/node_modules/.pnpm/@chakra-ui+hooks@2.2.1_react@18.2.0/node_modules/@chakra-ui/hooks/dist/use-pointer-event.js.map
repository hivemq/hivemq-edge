{"version":3,"sources":["../src/use-pointer-event.ts","../src/use-event-listener.ts","../src/use-callback-ref.ts","../src/use-safe-layout-effect.ts"],"sourcesContent":["/**\n * Credit goes to `framer-motion` of this useful utilities.\n * License can be found here: https://github.com/framer/motion\n */\n\nimport {\n  EventListenerWithPointInfo,\n  getPointerEventName,\n  wrapPointerEventHandler,\n} from \"@chakra-ui/utils\"\nimport { EventListenerEnv, useEventListener } from \"./use-event-listener\"\n\n/**\n * @internal\n */\nexport function usePointerEvent(\n  env: EventListenerEnv,\n  eventName: string,\n  handler: EventListenerWithPointInfo,\n  options?: AddEventListenerOptions,\n) {\n  return useEventListener(\n    getPointerEventName(eventName),\n    wrapPointerEventHandler(handler, eventName === \"pointerdown\"),\n    env,\n    options,\n  )\n}\n","import { runIfFn } from \"@chakra-ui/utils\"\nimport { useEffect } from \"react\"\nimport { useCallbackRef } from \"./use-callback-ref\"\n\ntype DocumentOrElement = Document | HTMLElement | null\n\nexport type EventListenerEnv = (() => DocumentOrElement) | DocumentOrElement\n\n/**\n * React hook to manage browser event listeners\n *\n * @param event the event name\n * @param handler the event handler function to execute\n * @param env the dom environment to execute against (defaults to `document`)\n * @param options the event listener options\n *\n * @internal\n */\nexport function useEventListener<K extends keyof DocumentEventMap>(\n  event: K | (string & {}),\n  handler?: (event: DocumentEventMap[K]) => void,\n  env?: EventListenerEnv,\n  options?: boolean | AddEventListenerOptions,\n) {\n  const listener = useCallbackRef(handler) as EventListener\n\n  useEffect(() => {\n    const node = runIfFn(env) ?? document\n\n    if (!handler) {\n      return\n    }\n\n    node.addEventListener(event, listener, options)\n    return () => {\n      node.removeEventListener(event, listener, options)\n    }\n  }, [event, env, options, listener, handler])\n\n  return () => {\n    const node = runIfFn(env) ?? document\n    node.removeEventListener(event, listener, options)\n  }\n}\n","import { useCallback, useRef } from \"react\"\nimport { useSafeLayoutEffect } from \"./use-safe-layout-effect\"\n\n/**\n * React hook to persist any value between renders,\n * but keeps it up-to-date if it changes.\n *\n * @param fn the function to persist\n * @param deps the function dependency list\n */\nexport function useCallbackRef<T extends (...args: any[]) => any>(\n  fn: T | undefined,\n  deps: React.DependencyList = [],\n): T {\n  const ref = useRef(fn)\n\n  useSafeLayoutEffect(() => {\n    ref.current = fn\n  })\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  return useCallback(((...args) => ref.current?.(...args)) as T, deps)\n}\n","import { isBrowser } from \"@chakra-ui/utils\"\nimport { useEffect, useLayoutEffect } from \"react\"\n\nexport const useSafeLayoutEffect = isBrowser ? useLayoutEffect : useEffect\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA,IAAAA,gBAIO;;;ACTP,IAAAC,gBAAwB;AACxB,IAAAC,gBAA0B;;;ACD1B,IAAAC,gBAAoC;;;ACApC,mBAA0B;AAC1B,mBAA2C;AAEpC,IAAM,sBAAsB,yBAAY,+BAAkB;;;ADO1D,SAAS,eACd,IACA,OAA6B,CAAC,GAC3B;AACH,QAAM,UAAM,sBAAO,EAAE;AAErB,sBAAoB,MAAM;AACxB,QAAI,UAAU;AAAA,EAChB,CAAC;AAGD,aAAO,2BAAa,IAAI,SAAM;AArBhC;AAqBmC,qBAAI,YAAJ,6BAAc,GAAG;AAAA,KAAa,IAAI;AACrE;;;ADJO,SAAS,iBACd,OACA,SACA,KACA,SACA;AACA,QAAM,WAAW,eAAe,OAAO;AAEvC,+BAAU,MAAM;AA1BlB;AA2BI,UAAM,QAAO,gCAAQ,GAAG,MAAX,YAAgB;AAE7B,QAAI,CAAC,SAAS;AACZ;AAAA,IACF;AAEA,SAAK,iBAAiB,OAAO,UAAU,OAAO;AAC9C,WAAO,MAAM;AACX,WAAK,oBAAoB,OAAO,UAAU,OAAO;AAAA,IACnD;AAAA,EACF,GAAG,CAAC,OAAO,KAAK,SAAS,UAAU,OAAO,CAAC;AAE3C,SAAO,MAAM;AAvCf;AAwCI,UAAM,QAAO,gCAAQ,GAAG,MAAX,YAAgB;AAC7B,SAAK,oBAAoB,OAAO,UAAU,OAAO;AAAA,EACnD;AACF;;;AD5BO,SAAS,gBACd,KACA,WACA,SACA,SACA;AACA,SAAO;AAAA,QACL,mCAAoB,SAAS;AAAA,QAC7B,uCAAwB,SAAS,cAAc,aAAa;AAAA,IAC5D;AAAA,IACA;AAAA,EACF;AACF;","names":["import_utils","import_utils","import_react","import_react"]}