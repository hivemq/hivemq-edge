{"version":3,"sources":["../src/index.ts","../src/tab.tsx","../src/tabs.tsx","../src/use-tabs.ts","../src/tab-indicator.tsx","../src/tab-list.tsx","../src/tab-panel.tsx","../src/tab-panels.tsx"],"sourcesContent":["export { Tab } from \"./tab\"\nexport type { TabProps } from \"./tab\"\nexport { TabIndicator } from \"./tab-indicator\"\nexport type { TabIndicatorProps } from \"./tab-indicator\"\nexport { TabList } from \"./tab-list\"\nexport type { TabListProps } from \"./tab-list\"\nexport { TabPanel } from \"./tab-panel\"\nexport type { TabPanelProps } from \"./tab-panel\"\nexport { TabPanels } from \"./tab-panels\"\nexport type { TabPanelsProps } from \"./tab-panels\"\nexport { Tabs, useTabsStyles } from \"./tabs\"\nexport type { TabsProps } from \"./tabs\"\nexport {\n  TabsDescendantsProvider,\n  TabsProvider,\n  useTab,\n  useTabIndicator,\n  useTabList,\n  useTabPanel,\n  useTabPanels,\n  useTabs,\n  useTabsContext,\n  useTabsDescendant,\n  useTabsDescendants,\n  useTabsDescendantsContext,\n} from \"./use-tabs\"\nexport type {\n  UseTabListProps,\n  UseTabListReturn,\n  UseTabOptions,\n  UseTabPanelsProps,\n  UseTabProps,\n  UseTabsProps,\n  UseTabsReturn,\n} from \"./use-tabs\"\n","import { cx } from \"@chakra-ui/shared-utils\"\nimport {\n  HTMLChakraProps,\n  SystemStyleObject,\n  chakra,\n  forwardRef,\n} from \"@chakra-ui/system\"\n\nimport { useTabsStyles } from \"./tabs\"\nimport { UseTabOptions, useTab } from \"./use-tabs\"\n\nexport interface TabProps extends UseTabOptions, HTMLChakraProps<\"button\"> {}\n\n/**\n * Tab button used to activate a specific tab panel. It renders a `button`,\n * and is responsible for automatic and manual selection modes.\n */\nexport const Tab = forwardRef<TabProps, \"button\">(function Tab(props, ref) {\n  const styles = useTabsStyles()\n  const tabProps = useTab({ ...props, ref })\n\n  const tabStyles: SystemStyleObject = {\n    outline: \"0\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    ...styles.tab,\n  }\n\n  return (\n    <chakra.button\n      {...tabProps}\n      className={cx(\"chakra-tabs__tab\", props.className)}\n      __css={tabStyles}\n    />\n  )\n})\n\nTab.displayName = \"Tab\"\n","import { createContext } from \"@chakra-ui/react-context\"\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { useMemo } from \"react\"\nimport {\n  TabsDescendantsProvider,\n  TabsProvider,\n  useTabs,\n  UseTabsProps,\n} from \"./use-tabs\"\n\nconst [TabsStylesProvider, useTabsStyles] = createContext<\n  Record<string, SystemStyleObject>\n>({\n  name: `TabsStylesContext`,\n  errorMessage: `useTabsStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<Tabs />\" `,\n})\n\nexport { useTabsStyles }\n\ninterface TabsOptions {\n  /**\n   * If `true`, tabs will stretch to width of the tablist.\n   * @default false\n   */\n  isFitted?: boolean\n  /**\n   * The alignment of the tabs\n   */\n  align?: \"start\" | \"end\" | \"center\"\n}\n\nexport interface TabsProps\n  extends UseTabsProps,\n    ThemingProps<\"Tabs\">,\n    Omit<HTMLChakraProps<\"div\">, \"onChange\">,\n    TabsOptions {\n  children: React.ReactNode\n}\n\n/**\n * Tabs\n *\n * Provides context and logic for all tabs components.\n *\n * @see Docs https://chakra-ui.com/docs/components/tabs\n * @see WAI-ARIA https://www.w3.org/WAI/ARIA/apg/patterns/tabpanel/\n */\nexport const Tabs = forwardRef<TabsProps, \"div\">(function Tabs(props, ref) {\n  const styles = useMultiStyleConfig(\"Tabs\", props)\n  const { children, className, ...rest } = omitThemingProps(props)\n\n  const { htmlProps, descendants, ...ctx } = useTabs(rest)\n  const context = useMemo(() => ctx, [ctx])\n\n  const { isFitted: _, ...rootProps } = htmlProps as any\n\n  const tabsStyles: SystemStyleObject = {\n    position: \"relative\",\n    ...styles.root,\n  }\n\n  return (\n    <TabsDescendantsProvider value={descendants}>\n      <TabsProvider value={context}>\n        <TabsStylesProvider value={styles}>\n          <chakra.div\n            className={cx(\"chakra-tabs\", className)}\n            ref={ref}\n            {...rootProps}\n            __css={tabsStyles}\n          >\n            {children}\n          </chakra.div>\n        </TabsStylesProvider>\n      </TabsProvider>\n    </TabsDescendantsProvider>\n  )\n})\n\nTabs.displayName = \"Tabs\"\n","import { useClickable, UseClickableProps } from \"@chakra-ui/clickable\"\nimport { createDescendantContext } from \"@chakra-ui/descendant\"\nimport { createContext } from \"@chakra-ui/react-context\"\nimport { useSafeLayoutEffect } from \"@chakra-ui/react-use-safe-layout-effect\"\nimport { useControllableState } from \"@chakra-ui/react-use-controllable-state\"\nimport { getValidChildren } from \"@chakra-ui/react-children-utils\"\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\"\nimport { lazyDisclosure, LazyMode } from \"@chakra-ui/lazy-utils\"\nimport { callAllHandlers } from \"@chakra-ui/shared-utils\"\nimport {\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n  useId,\n  createElement,\n} from \"react\"\n\n/* -------------------------------------------------------------------------------------------------\n * Create context to track descendants and their indices\n * -----------------------------------------------------------------------------------------------*/\n\nexport const [\n  TabsDescendantsProvider,\n  useTabsDescendantsContext,\n  useTabsDescendants,\n  useTabsDescendant,\n] = createDescendantContext<HTMLButtonElement>()\n\n/* -------------------------------------------------------------------------------------------------\n * useTabs - The root react hook that manages all tab items\n * -----------------------------------------------------------------------------------------------*/\n\nexport interface UseTabsProps {\n  /**\n   * The orientation of the tab list.\n   * @default \"horizontal\"\n   */\n  orientation?: \"vertical\" | \"horizontal\"\n  /**\n   * If `true`, the tabs will be manually activated and\n   * display its panel by pressing Space or Enter.\n   *\n   * If `false`, the tabs will be automatically activated\n   * and their panel is displayed when they receive focus.\n   *\n   * @default false\n   */\n  isManual?: boolean\n  /**\n   * Callback when the index (controlled or un-controlled) changes.\n   */\n  onChange?: (index: number) => void\n  /**\n   * The index of the selected tab (in controlled mode)\n   */\n  index?: number\n  /**\n   * The initial index of the selected tab (in uncontrolled mode)\n   */\n  defaultIndex?: number\n  /**\n   * The id of the tab\n   */\n  id?: string\n  /**\n   * Performance ðŸš€:\n   * If `true`, rendering of the tab panel's will be deferred until it is selected.\n   * @default false\n   */\n  isLazy?: boolean\n  /**\n   * Performance ðŸš€:\n   * The lazy behavior of tab panels' content when not active.\n   * Only works when `isLazy={true}`\n   *\n   * - \"unmount\": The content of inactive tab panels are always unmounted.\n   * - \"keepMounted\": The content of inactive tab panels is initially unmounted,\n   * but stays mounted when selected.\n   *\n   * @default \"unmount\"\n   */\n  lazyBehavior?: LazyMode\n  /**\n   * The writing mode direction.\n   *\n   * - When in RTL, the left and right navigation is flipped\n   * @default \"ltr\"\n   */\n  direction?: \"rtl\" | \"ltr\"\n}\n\n/**\n * Tabs hook that provides all the states, and accessibility\n * helpers to keep all things working properly.\n *\n * Its returned object will be passed unto a Context Provider\n * so all child components can read from it.\n * There is no document link yet\n * @see Docs https://chakra-ui.com/docs/components/useTabs\n * @see WAI-ARIA https://www.w3.org/WAI/ARIA/apg/patterns/tabpanel/\n */\nexport function useTabs(props: UseTabsProps) {\n  const {\n    defaultIndex,\n    onChange,\n    index,\n    isManual,\n    isLazy,\n    lazyBehavior = \"unmount\",\n    orientation = \"horizontal\",\n    direction = \"ltr\",\n    ...htmlProps\n  } = props\n\n  /**\n   * We use this to keep track of the index of the focused tab.\n   *\n   * Tabs can be automatically activated, this means selection follows focus.\n   * When we navigate with the arrow keys, we move focus and selection to next/prev tab\n   *\n   * Tabs can also be manually activated, this means selection does not follow focus.\n   * When we navigate with the arrow keys, we only move focus NOT selection. The user\n   * will need not manually activate the tab using `Enter` or `Space`.\n   *\n   * This is why we need to keep track of the `focusedIndex` and `selectedIndex`\n   */\n  const [focusedIndex, setFocusedIndex] = useState(defaultIndex ?? 0)\n\n  const [selectedIndex, setSelectedIndex] = useControllableState({\n    defaultValue: defaultIndex ?? 0,\n    value: index,\n    onChange,\n  })\n\n  /**\n   * Sync focused `index` with controlled `selectedIndex` (which is the `props.index`)\n   */\n  useEffect(() => {\n    if (index != null) {\n      setFocusedIndex(index)\n    }\n  }, [index])\n\n  /**\n   * Think of `useDescendants` as a register for the tab nodes.\n   */\n  const descendants = useTabsDescendants()\n\n  /**\n   * Generate a unique id or use user-provided id for the tabs widget\n   */\n  const uuid = useId()\n  const uid = props.id ?? uuid\n  const id = `tabs-${uid}`\n\n  return {\n    id,\n    selectedIndex,\n    focusedIndex,\n    setSelectedIndex,\n    setFocusedIndex,\n    isManual,\n    isLazy,\n    lazyBehavior,\n    orientation,\n    descendants,\n    direction,\n    htmlProps,\n  }\n}\n\nexport type UseTabsReturn = Omit<\n  ReturnType<typeof useTabs>,\n  \"htmlProps\" | \"descendants\"\n>\n\nexport const [TabsProvider, useTabsContext] = createContext<UseTabsReturn>({\n  name: \"TabsContext\",\n  errorMessage:\n    \"useTabsContext: `context` is undefined. Seems you forgot to wrap all tabs components within <Tabs />\",\n})\n\nexport interface UseTabListProps {\n  children?: React.ReactNode\n  onKeyDown?: React.KeyboardEventHandler\n  ref?: React.Ref<any>\n}\n\n/**\n * Tabs hook to manage multiple tab buttons,\n * and ensures only one tab is selected per time.\n *\n * @param props props object for the tablist\n */\nexport function useTabList<P extends UseTabListProps>(props: P) {\n  const { focusedIndex, orientation, direction } = useTabsContext()\n\n  const descendants = useTabsDescendantsContext()\n\n  const onKeyDown = useCallback(\n    (event: React.KeyboardEvent) => {\n      const nextTab = () => {\n        const next = descendants.nextEnabled(focusedIndex)\n        if (next) next.node?.focus()\n      }\n      const prevTab = () => {\n        const prev = descendants.prevEnabled(focusedIndex)\n        if (prev) prev.node?.focus()\n      }\n      const firstTab = () => {\n        const first = descendants.firstEnabled()\n        if (first) first.node?.focus()\n      }\n      const lastTab = () => {\n        const last = descendants.lastEnabled()\n        if (last) last.node?.focus()\n      }\n\n      const isHorizontal = orientation === \"horizontal\"\n      const isVertical = orientation === \"vertical\"\n\n      const eventKey = event.key\n\n      const ArrowStart = direction === \"ltr\" ? \"ArrowLeft\" : \"ArrowRight\"\n      const ArrowEnd = direction === \"ltr\" ? \"ArrowRight\" : \"ArrowLeft\"\n\n      const keyMap: Record<string, React.KeyboardEventHandler> = {\n        [ArrowStart]: () => isHorizontal && prevTab(),\n        [ArrowEnd]: () => isHorizontal && nextTab(),\n        ArrowDown: () => isVertical && nextTab(),\n        ArrowUp: () => isVertical && prevTab(),\n        Home: firstTab,\n        End: lastTab,\n      }\n\n      const action = keyMap[eventKey]\n\n      if (action) {\n        event.preventDefault()\n        action(event)\n      }\n    },\n    [descendants, focusedIndex, orientation, direction],\n  )\n\n  return {\n    ...props,\n    role: \"tablist\",\n    \"aria-orientation\": orientation,\n    onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n  }\n}\n\nexport type UseTabListReturn = ReturnType<typeof useTabList>\n\nexport interface UseTabOptions {\n  /**\n   * If `true`, the `Tab` won't be toggleable\n   * @default false\n   */\n  isDisabled?: boolean\n  /**\n   * If `true` and `isDisabled`, the `Tab` will be focusable but not interactive.\n   * @default false\n   */\n  isFocusable?: boolean\n}\n\nexport interface UseTabProps\n  extends Omit<UseClickableProps, \"color\">,\n    UseTabOptions {}\n\n/**\n * Tabs hook to manage each tab button.\n *\n * A tab can be disabled and focusable, or both,\n * hence the use of `useClickable` to handle this scenario\n */\nexport function useTab<P extends UseTabProps>(props: P) {\n  const { isDisabled = false, isFocusable = false, ...htmlProps } = props\n\n  const { setSelectedIndex, isManual, id, setFocusedIndex, selectedIndex } =\n    useTabsContext()\n\n  const { index, register } = useTabsDescendant({\n    disabled: isDisabled && !isFocusable,\n  })\n\n  const isSelected = index === selectedIndex\n\n  const onClick = () => {\n    setSelectedIndex(index)\n  }\n\n  const onFocus = () => {\n    setFocusedIndex(index)\n    const isDisabledButFocusable = isDisabled && isFocusable\n    const shouldSelect = !isManual && !isDisabledButFocusable\n    if (shouldSelect) {\n      setSelectedIndex(index)\n    }\n  }\n\n  const clickableProps = useClickable({\n    ...htmlProps,\n    ref: mergeRefs(register, props.ref),\n    isDisabled,\n    isFocusable,\n    onClick: callAllHandlers(props.onClick, onClick),\n  })\n\n  const type: \"button\" | \"submit\" | \"reset\" = \"button\"\n\n  return {\n    ...clickableProps,\n    id: makeTabId(id, index),\n    role: \"tab\",\n    tabIndex: isSelected ? 0 : -1,\n    type,\n    \"aria-selected\": isSelected,\n    \"aria-controls\": makeTabPanelId(id, index),\n    onFocus: isDisabled ? undefined : callAllHandlers(props.onFocus, onFocus),\n  }\n}\n\nexport interface UseTabPanelsProps {\n  children?: React.ReactNode\n}\n\nconst [TabPanelProvider, useTabPanelContext] = createContext<{\n  isSelected: boolean\n  id: string\n  tabId: string\n  selectedIndex: number\n}>({})\n\n/**\n * Tabs hook for managing the visibility of multiple tab panels.\n *\n * Since only one panel can be show at a time, we use `cloneElement`\n * to inject `selected` panel to each TabPanel.\n *\n * It returns a cloned version of its children with\n * all functionality included.\n */\nexport function useTabPanels<P extends UseTabPanelsProps>(props: P) {\n  const context = useTabsContext()\n\n  const { id, selectedIndex } = context\n\n  const validChildren = getValidChildren(props.children)\n\n  const children = validChildren.map((child, index) =>\n    createElement(\n      TabPanelProvider,\n      {\n        key: index,\n        value: {\n          isSelected: index === selectedIndex,\n          id: makeTabPanelId(id, index),\n          tabId: makeTabId(id, index),\n          selectedIndex,\n        },\n      },\n      child,\n    ),\n  )\n\n  return { ...props, children }\n}\n\n/**\n * Tabs hook for managing the visible/hidden states\n * of the tab panel.\n *\n * @param props props object for the tab panel\n */\nexport function useTabPanel(props: Record<string, any>) {\n  const { children, ...htmlProps } = props\n  const { isLazy, lazyBehavior } = useTabsContext()\n  const { isSelected, id, tabId } = useTabPanelContext()\n\n  const hasBeenSelected = useRef(false)\n  if (isSelected) {\n    hasBeenSelected.current = true\n  }\n\n  const shouldRenderChildren = lazyDisclosure({\n    wasSelected: hasBeenSelected.current,\n    isSelected,\n    enabled: isLazy,\n    mode: lazyBehavior,\n  })\n\n  return {\n    // Puts the tabpanel in the page `Tab` sequence.\n    tabIndex: 0,\n    ...htmlProps,\n    children: shouldRenderChildren ? children : null,\n    role: \"tabpanel\",\n    \"aria-labelledby\": tabId,\n    hidden: !isSelected,\n    id,\n  }\n}\n\n/**\n * Tabs hook to show an animated indicators that\n * follows the active tab.\n *\n * The way we do it is by measuring the DOM Rect (or dimensions)\n * of the active tab, and return that as CSS style for\n * the indicator.\n */\nexport function useTabIndicator(): React.CSSProperties {\n  const context = useTabsContext()\n  const descendants = useTabsDescendantsContext()\n\n  const { selectedIndex, orientation } = context\n\n  const isHorizontal = orientation === \"horizontal\"\n  const isVertical = orientation === \"vertical\"\n\n  // Get the clientRect of the selected tab\n  const [rect, setRect] = useState(() => {\n    if (isHorizontal) return { left: 0, width: 0 }\n    if (isVertical) return { top: 0, height: 0 }\n    return undefined\n  })\n\n  const [hasMeasured, setHasMeasured] = useState(false)\n\n  // Update the selected tab rect when the selectedIndex changes\n  useSafeLayoutEffect(() => {\n    if (selectedIndex == null) return\n\n    const tab = descendants.item(selectedIndex)\n    if (tab == null) return\n\n    // Horizontal Tab: Calculate width and left distance\n    if (isHorizontal) {\n      setRect({ left: tab.node.offsetLeft, width: tab.node.offsetWidth })\n    }\n\n    // Vertical Tab: Calculate height and top distance\n    if (isVertical) {\n      setRect({ top: tab.node.offsetTop, height: tab.node.offsetHeight })\n    }\n\n    // Prevent unwanted transition from 0 to measured rect\n    // by setting the measured state in the next tick\n    const id = requestAnimationFrame(() => {\n      setHasMeasured(true)\n    })\n\n    return () => {\n      if (id) {\n        cancelAnimationFrame(id)\n      }\n    }\n  }, [selectedIndex, isHorizontal, isVertical, descendants])\n\n  return {\n    position: \"absolute\",\n    transitionProperty: \"left, right, top, bottom, height, width\",\n    transitionDuration: hasMeasured ? \"200ms\" : \"0ms\",\n    transitionTimingFunction: \"cubic-bezier(0, 0, 0.2, 1)\",\n    ...rect,\n  }\n}\n\nfunction makeTabId(id: string, index: number) {\n  return `${id}--tab-${index}`\n}\n\nfunction makeTabPanelId(id: string, index: number) {\n  return `${id}--tabpanel-${index}`\n}\n","import { cx } from \"@chakra-ui/shared-utils\"\nimport { HTMLChakraProps, chakra, forwardRef } from \"@chakra-ui/system\"\n\nimport { useTabsStyles } from \"./tabs\"\nimport { useTabIndicator } from \"./use-tabs\"\n\nexport interface TabIndicatorProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * TabIndicator\n *\n * Used to render an active tab indicator that animates between\n * selected tabs.\n */\nexport const TabIndicator = forwardRef<TabIndicatorProps, \"div\">(\n  function TabIndicator(props, ref) {\n    const indicatorStyle = useTabIndicator()\n    const style = {\n      ...props.style,\n      ...indicatorStyle,\n    }\n\n    const styles = useTabsStyles()\n\n    return (\n      <chakra.div\n        ref={ref}\n        {...props}\n        className={cx(\"chakra-tabs__tab-indicator\", props.className)}\n        style={style}\n        __css={styles.indicator}\n      />\n    )\n  },\n)\n\nTabIndicator.displayName = \"TabIndicator\"\n","import { cx } from \"@chakra-ui/shared-utils\"\nimport {\n  HTMLChakraProps,\n  SystemStyleObject,\n  chakra,\n  forwardRef,\n} from \"@chakra-ui/system\"\n\nimport { useTabsStyles } from \"./tabs\"\nimport { UseTabListProps, useTabList } from \"./use-tabs\"\n\nexport interface TabListProps\n  extends UseTabListProps,\n    Omit<HTMLChakraProps<\"div\">, \"onKeyDown\" | \"ref\"> {}\n\n/**\n * TabList is used to manage a list of tab buttons. It renders a `div` by default,\n * and is responsible the keyboard interaction between tabs.\n */\nexport const TabList = forwardRef<TabListProps, \"div\">(function TabList(\n  props,\n  ref,\n) {\n  const tablistProps = useTabList({ ...props, ref })\n\n  const styles = useTabsStyles()\n\n  const tablistStyles: SystemStyleObject = {\n    display: \"flex\",\n    ...styles.tablist,\n  }\n\n  return (\n    <chakra.div\n      {...tablistProps}\n      className={cx(\"chakra-tabs__tablist\", props.className)}\n      __css={tablistStyles}\n    />\n  )\n})\n\nTabList.displayName = \"TabList\"\n","import { cx } from \"@chakra-ui/shared-utils\"\nimport { HTMLChakraProps, chakra, forwardRef } from \"@chakra-ui/system\"\n\nimport { useTabsStyles } from \"./tabs\"\nimport { useTabPanel } from \"./use-tabs\"\n\nexport interface TabPanelProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * TabPanel\n * Used to render the content for a specific tab.\n */\nexport const TabPanel = forwardRef<TabPanelProps, \"div\">(function TabPanel(\n  props,\n  ref,\n) {\n  const panelProps = useTabPanel({ ...props, ref })\n  const styles = useTabsStyles()\n\n  return (\n    <chakra.div\n      outline=\"0\"\n      {...panelProps}\n      className={cx(\"chakra-tabs__tab-panel\", props.className)}\n      __css={styles.tabpanel}\n    />\n  )\n})\n\nTabPanel.displayName = \"TabPanel\"\n","import { cx } from \"@chakra-ui/shared-utils\"\nimport { HTMLChakraProps, chakra, forwardRef } from \"@chakra-ui/system\"\n\nimport { useTabsStyles } from \"./tabs\"\nimport { useTabPanels } from \"./use-tabs\"\n\nexport interface TabPanelsProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * TabPanel\n *\n * Used to manage the rendering of multiple tab panels. It uses\n * `cloneElement` to hide/show tab panels.\n *\n * It renders a `div` by default.\n */\nexport const TabPanels = forwardRef<TabPanelsProps, \"div\">(function TabPanels(\n  props,\n  ref,\n) {\n  const panelsProps = useTabPanels(props)\n  const styles = useTabsStyles()\n\n  return (\n    <chakra.div\n      {...panelsProps}\n      width=\"100%\"\n      ref={ref}\n      className={cx(\"chakra-tabs__tab-panels\", props.className)}\n      __css={styles.tabpanels}\n    />\n  )\n})\n\nTabPanels.displayName = \"TabPanels\"\n"],"mappings":"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","names":["import_shared_utils","import_system","import_react_context","import_shared_utils","import_react","Tabs","import_jsx_runtime","Tab","import_shared_utils","import_system","import_jsx_runtime","TabIndicator","import_shared_utils","import_system","import_jsx_runtime","TabList","import_shared_utils","import_system","import_jsx_runtime","TabPanel","import_shared_utils","import_system","import_jsx_runtime","TabPanels"]}