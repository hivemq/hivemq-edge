{"version":3,"file":"nivo-annotations.cjs.js","sources":["../src/props.ts","../src/utils.ts","../src/compute.ts","../src/hooks.ts","../src/AnnotationNote.tsx","../src/AnnotationLink.tsx","../src/CircleAnnotationOutline.tsx","../src/DotAnnotationOutline.tsx","../src/RectAnnotationOutline.tsx","../src/canvas.ts","../src/Annotation.tsx"],"sourcesContent":["export const defaultProps = {\n    dotSize: 4,\n    noteWidth: 120,\n    noteTextOffset: 8,\n    animate: true,\n}\n","import {\n    AnnotationSpec,\n    CircleAnnotationSpec,\n    DotAnnotationSpec,\n    Note,\n    NoteCanvas,\n    NoteSvg,\n    RectAnnotationSpec,\n} from './types'\nimport { isValidElement } from 'react'\n\nexport const isSvgNote = <Datum>(note: Note<Datum>): note is NoteSvg<Datum> => {\n    const noteType = typeof note\n\n    return (\n        isValidElement(note) ||\n        noteType === 'string' ||\n        noteType === 'function' ||\n        noteType === 'object'\n    )\n}\n\nexport const isCanvasNote = <Datum>(note: Note<Datum>): note is NoteCanvas<Datum> => {\n    const noteType = typeof note\n\n    return noteType === 'string' || noteType === 'function'\n}\n\nexport const isCircleAnnotation = <Datum>(\n    annotationSpec: AnnotationSpec<Datum>\n): annotationSpec is CircleAnnotationSpec<Datum> => annotationSpec.type === 'circle'\n\nexport const isDotAnnotation = <Datum>(\n    annotationSpec: AnnotationSpec<Datum>\n): annotationSpec is DotAnnotationSpec<Datum> => annotationSpec.type === 'dot'\n\nexport const isRectAnnotation = <Datum>(\n    annotationSpec: AnnotationSpec<Datum>\n): annotationSpec is RectAnnotationSpec<Datum> => annotationSpec.type === 'rect'\n","import filter from 'lodash/filter'\nimport isNumber from 'lodash/isNumber'\nimport omit from 'lodash/omit'\nimport {\n    radiansToDegrees,\n    absoluteAngleDegrees,\n    degreesToRadians,\n    positionFromAngle,\n} from '@nivo/core'\nimport { defaultProps } from './props'\nimport {\n    AnnotationPositionGetter,\n    AnnotationDimensionsGetter,\n    BoundAnnotation,\n    AnnotationMatcher,\n    AnnotationInstructions,\n} from './types'\nimport { isCircleAnnotation, isRectAnnotation } from './utils'\n\nexport const bindAnnotations = <\n    Datum = {\n        x: number\n        y: number\n    }\n>({\n    data,\n    annotations,\n    getPosition,\n    getDimensions,\n}: {\n    data: readonly Datum[]\n    annotations: readonly AnnotationMatcher<Datum>[]\n    getPosition: AnnotationPositionGetter<Datum>\n    getDimensions: AnnotationDimensionsGetter<Datum>\n}): BoundAnnotation<Datum>[] =>\n    annotations.reduce((acc: BoundAnnotation<Datum>[], annotation) => {\n        const offset = annotation.offset || 0\n\n        return [\n            ...acc,\n            ...filter<Datum>(data, annotation.match).map(datum => {\n                const position = getPosition(datum)\n                const dimensions = getDimensions(datum)\n\n                if (isCircleAnnotation(annotation) || isRectAnnotation(annotation)) {\n                    dimensions.size = dimensions.size + offset * 2\n                    dimensions.width = dimensions.width + offset * 2\n                    dimensions.height = dimensions.height + offset * 2\n                }\n\n                // acc.push({\n                //     ...omit(annotation, ['match', 'offset']),\n                //     ...position,\n                //     ...dimensions,\n                //     size: annotation.size || dimensions.size,\n                //     datum,\n                // } as any)\n                // return [\n                //     ...acc,\n                //     {\n                //         ...omit(annotation, ['match', 'offset']),\n                //         ...position,\n                //         ...dimensions,\n                //         size: annotation.size || dimensions.size,\n                //         datum,\n                //     },\n                // ]\n                return {\n                    ...omit(annotation, ['match', 'offset']),\n                    ...position,\n                    ...dimensions,\n                    size: annotation.size || dimensions.size,\n                    datum,\n                } as Required<BoundAnnotation<Datum>>\n            }),\n        ]\n\n        // return acc\n    }, [])\n\nexport const getLinkAngle = (\n    sourceX: number,\n    sourceY: number,\n    targetX: number,\n    targetY: number\n) => {\n    const angle = Math.atan2(targetY - sourceY, targetX - sourceX)\n\n    return absoluteAngleDegrees(radiansToDegrees(angle))\n}\n\nexport const computeAnnotation = <Datum>(\n    annotation: BoundAnnotation<Datum>\n): AnnotationInstructions => {\n    const {\n        x,\n        y,\n        noteX,\n        noteY,\n        noteWidth = defaultProps.noteWidth,\n        noteTextOffset = defaultProps.noteTextOffset,\n    } = annotation\n\n    let computedNoteX: number\n    let computedNoteY: number\n\n    if (isNumber(noteX)) {\n        computedNoteX = x + noteX\n    } else if (noteX.abs !== undefined) {\n        computedNoteX = noteX.abs\n    } else {\n        throw new Error(`noteX should be either a number or an object containing an 'abs' property`)\n    }\n\n    if (isNumber(noteY)) {\n        computedNoteY = y + noteY\n    } else if (noteY.abs !== undefined) {\n        computedNoteY = noteY.abs\n    } else {\n        throw new Error(`noteY should be either a number or an object containing an 'abs' property`)\n    }\n\n    let computedX = x\n    let computedY = y\n\n    const angle = getLinkAngle(x, y, computedNoteX, computedNoteY)\n\n    if (isCircleAnnotation<Datum>(annotation)) {\n        const position = positionFromAngle(degreesToRadians(angle), annotation.size / 2)\n        computedX += position.x\n        computedY += position.y\n    }\n\n    if (isRectAnnotation<Datum>(annotation)) {\n        const eighth = Math.round((angle + 90) / 45) % 8\n        if (eighth === 0) {\n            computedY -= annotation.height / 2\n        }\n        if (eighth === 1) {\n            computedX += annotation.width / 2\n            computedY -= annotation.height / 2\n        }\n        if (eighth === 2) {\n            computedX += annotation.width / 2\n        }\n        if (eighth === 3) {\n            computedX += annotation.width / 2\n            computedY += annotation.height / 2\n        }\n        if (eighth === 4) {\n            computedY += annotation.height / 2\n        }\n        if (eighth === 5) {\n            computedX -= annotation.width / 2\n            computedY += annotation.height / 2\n        }\n        if (eighth === 6) {\n            computedX -= annotation.width / 2\n        }\n        if (eighth === 7) {\n            computedX -= annotation.width / 2\n            computedY -= annotation.height / 2\n        }\n    }\n\n    let textX = computedNoteX\n    const textY = computedNoteY - noteTextOffset\n\n    let noteLineX = computedNoteX\n    const noteLineY = computedNoteY\n\n    if ((angle + 90) % 360 > 180) {\n        textX -= noteWidth\n        noteLineX -= noteWidth\n    } else {\n        noteLineX += noteWidth\n    }\n\n    return {\n        points: [\n            [computedX, computedY],\n            [computedNoteX, computedNoteY],\n            [noteLineX, noteLineY],\n        ] as [number, number][],\n        text: [textX, textY],\n        angle: angle + 90,\n    }\n}\n","import { useMemo } from 'react'\nimport { bindAnnotations, computeAnnotation } from './compute'\nimport {\n    AnnotationDimensionsGetter,\n    AnnotationMatcher,\n    AnnotationPositionGetter,\n    BoundAnnotation,\n} from './types'\n\n/**\n * Bind annotations to a dataset.\n */\nexport const useAnnotations = <Datum>({\n    data,\n    annotations,\n    getPosition,\n    getDimensions,\n}: {\n    data: readonly Datum[]\n    annotations: readonly AnnotationMatcher<Datum>[]\n    getPosition: AnnotationPositionGetter<Datum>\n    getDimensions: AnnotationDimensionsGetter<Datum>\n}) =>\n    useMemo(\n        () =>\n            bindAnnotations<Datum>({\n                data,\n                annotations,\n                getPosition,\n                getDimensions,\n            }),\n        [data, annotations, getPosition, getDimensions]\n    )\n\nexport const useComputedAnnotations = <Datum>({\n    annotations,\n}: {\n    annotations: readonly BoundAnnotation<Datum>[]\n}) =>\n    useMemo(\n        () =>\n            annotations.map(annotation => ({\n                ...annotation,\n                computed: computeAnnotation<Datum>({\n                    ...annotation,\n                }),\n            })),\n        [annotations]\n    )\n\nexport const useComputedAnnotation = <Datum>(annotation: BoundAnnotation<Datum>) =>\n    useMemo(() => computeAnnotation<Datum>(annotation), [annotation])\n","import { createElement } from 'react'\nimport omit from 'lodash/omit'\nimport { useSpring, animated } from '@react-spring/web'\nimport { useTheme, useMotionConfig } from '@nivo/core'\nimport { NoteSvg } from './types'\n\nexport const AnnotationNote = <Datum,>({\n    datum,\n    x,\n    y,\n    note,\n}: {\n    datum: Datum\n    x: number\n    y: number\n    note: NoteSvg<Datum>\n}) => {\n    const theme = useTheme()\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        x,\n        y,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    if (typeof note === 'function') {\n        return createElement(note, { x, y, datum })\n    }\n\n    return (\n        <>\n            {theme.annotations.text.outlineWidth > 0 && (\n                <animated.text\n                    x={animatedProps.x}\n                    y={animatedProps.y}\n                    style={{\n                        ...theme.annotations.text,\n                        strokeLinejoin: 'round',\n                        strokeWidth: theme.annotations.text.outlineWidth * 2,\n                        stroke: theme.annotations.text.outlineColor,\n                    }}\n                >\n                    {note}\n                </animated.text>\n            )}\n            <animated.text\n                x={animatedProps.x}\n                y={animatedProps.y}\n                style={omit(theme.annotations.text, ['outlineWidth', 'outlineColor'])}\n            >\n                {note}\n            </animated.text>\n        </>\n    )\n}\n","import { useMemo } from 'react'\nimport { animated } from '@react-spring/web'\nimport { useAnimatedPath, useTheme } from '@nivo/core'\n\nexport const AnnotationLink = ({\n    points,\n    isOutline = false,\n}: {\n    points: [number, number][]\n    isOutline?: boolean\n}) => {\n    const theme = useTheme()\n\n    const path = useMemo(() => {\n        const [firstPoint, ...otherPoints] = points\n\n        return otherPoints.reduce(\n            (acc, [x, y]) => `${acc} L${x},${y}`,\n            `M${firstPoint[0]},${firstPoint[1]}`\n        )\n    }, [points])\n\n    const animatedPath = useAnimatedPath(path)\n\n    if (isOutline && theme.annotations.link.outlineWidth <= 0) {\n        return null\n    }\n\n    const style = { ...theme.annotations.link }\n    if (isOutline) {\n        style.strokeLinecap = 'square'\n        style.strokeWidth =\n            theme.annotations.link.strokeWidth + theme.annotations.link.outlineWidth * 2\n        style.stroke = theme.annotations.link.outlineColor\n        style.opacity = theme.annotations.link.outlineOpacity\n    }\n\n    return <animated.path fill=\"none\" d={animatedPath} style={style} />\n}\n","import { useSpring, animated } from '@react-spring/web'\nimport { useMotionConfig, useTheme } from '@nivo/core'\n\nexport const CircleAnnotationOutline = ({ x, y, size }: { x: number; y: number; size: number }) => {\n    const theme = useTheme()\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        x,\n        y,\n        radius: size / 2,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <>\n            {theme.annotations.outline.outlineWidth > 0 && (\n                <animated.circle\n                    cx={animatedProps.x}\n                    cy={animatedProps.y}\n                    r={animatedProps.radius}\n                    style={{\n                        ...theme.annotations.outline,\n                        fill: 'none',\n                        strokeWidth:\n                            theme.annotations.outline.strokeWidth +\n                            theme.annotations.outline.outlineWidth * 2,\n                        stroke: theme.annotations.outline.outlineColor,\n                        opacity: theme.annotations.outline.outlineOpacity,\n                    }}\n                />\n            )}\n            <animated.circle\n                cx={animatedProps.x}\n                cy={animatedProps.y}\n                r={animatedProps.radius}\n                style={theme.annotations.outline}\n            />\n        </>\n    )\n}\n","import { useSpring, animated } from '@react-spring/web'\nimport { useMotionConfig, useTheme } from '@nivo/core'\nimport { defaultProps } from './props'\n\nexport const DotAnnotationOutline = ({\n    x,\n    y,\n    size = defaultProps.dotSize,\n}: {\n    x: number\n    y: number\n    size?: number\n}) => {\n    const theme = useTheme()\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        x,\n        y,\n        radius: size / 2,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <>\n            {theme.annotations.outline.outlineWidth > 0 && (\n                <animated.circle\n                    cx={animatedProps.x}\n                    cy={animatedProps.y}\n                    r={animatedProps.radius}\n                    style={{\n                        ...theme.annotations.outline,\n                        fill: 'none',\n                        strokeWidth: theme.annotations.outline.outlineWidth * 2,\n                        stroke: theme.annotations.outline.outlineColor,\n                        opacity: theme.annotations.outline.outlineOpacity,\n                    }}\n                />\n            )}\n            <animated.circle\n                cx={animatedProps.x}\n                cy={animatedProps.y}\n                r={animatedProps.radius}\n                style={theme.annotations.symbol}\n            />\n        </>\n    )\n}\n","import { useSpring, animated } from '@react-spring/web'\nimport { useMotionConfig, useTheme } from '@nivo/core'\n\nexport const RectAnnotationOutline = ({\n    x,\n    y,\n    width,\n    height,\n    borderRadius = 6,\n}: {\n    x: number\n    y: number\n    width: number\n    height: number\n    borderRadius?: number\n}) => {\n    const theme = useTheme()\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        x: x - width / 2,\n        y: y - height / 2,\n        width,\n        height,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <>\n            {theme.annotations.outline.outlineWidth > 0 && (\n                <animated.rect\n                    x={animatedProps.x}\n                    y={animatedProps.y}\n                    rx={borderRadius}\n                    ry={borderRadius}\n                    width={animatedProps.width}\n                    height={animatedProps.height}\n                    style={{\n                        ...theme.annotations.outline,\n                        fill: 'none',\n                        strokeWidth:\n                            theme.annotations.outline.strokeWidth +\n                            theme.annotations.outline.outlineWidth * 2,\n                        stroke: theme.annotations.outline.outlineColor,\n                        opacity: theme.annotations.outline.outlineOpacity,\n                    }}\n                />\n            )}\n            <animated.rect\n                x={animatedProps.x}\n                y={animatedProps.y}\n                rx={borderRadius}\n                ry={borderRadius}\n                width={animatedProps.width}\n                height={animatedProps.height}\n                style={theme.annotations.outline}\n            />\n        </>\n    )\n}\n","import { CompleteTheme } from '@nivo/core'\nimport { ComputedAnnotation } from './types'\nimport { isCanvasNote, isCircleAnnotation, isDotAnnotation, isRectAnnotation } from './utils'\n\nconst drawPoints = (ctx: CanvasRenderingContext2D, points: [number, number][]) => {\n    points.forEach(([x, y], index) => {\n        if (index === 0) {\n            ctx.moveTo(x, y)\n        } else {\n            ctx.lineTo(x, y)\n        }\n    })\n}\n\nexport const renderAnnotationsToCanvas = <Datum>(\n    ctx: CanvasRenderingContext2D,\n    {\n        annotations,\n        theme,\n    }: {\n        annotations: ComputedAnnotation<Datum>[]\n        theme: CompleteTheme\n    }\n) => {\n    if (annotations.length === 0) return\n\n    ctx.save()\n    annotations.forEach(annotation => {\n        if (!isCanvasNote(annotation.note)) {\n            throw new Error('note is invalid for canvas implementation')\n        }\n\n        if (theme.annotations.link.outlineWidth > 0) {\n            ctx.lineCap = 'square'\n            ctx.strokeStyle = theme.annotations.link.outlineColor\n            ctx.lineWidth =\n                theme.annotations.link.strokeWidth + theme.annotations.link.outlineWidth * 2\n            ctx.beginPath()\n            drawPoints(ctx, annotation.computed.points)\n            ctx.stroke()\n            ctx.lineCap = 'butt'\n        }\n\n        if (isCircleAnnotation(annotation) && theme.annotations.outline.outlineWidth > 0) {\n            ctx.strokeStyle = theme.annotations.outline.outlineColor\n            ctx.lineWidth =\n                theme.annotations.outline.strokeWidth + theme.annotations.outline.outlineWidth * 2\n            ctx.beginPath()\n            ctx.arc(annotation.x, annotation.y, annotation.size / 2, 0, 2 * Math.PI)\n            ctx.stroke()\n        }\n\n        if (isDotAnnotation(annotation) && theme.annotations.symbol.outlineWidth > 0) {\n            ctx.strokeStyle = theme.annotations.symbol.outlineColor\n            ctx.lineWidth = theme.annotations.symbol.outlineWidth * 2\n            ctx.beginPath()\n            ctx.arc(annotation.x, annotation.y, annotation.size / 2, 0, 2 * Math.PI)\n            ctx.stroke()\n        }\n\n        if (isRectAnnotation(annotation) && theme.annotations.outline.outlineWidth > 0) {\n            ctx.strokeStyle = theme.annotations.outline.outlineColor\n            ctx.lineWidth =\n                theme.annotations.outline.strokeWidth + theme.annotations.outline.outlineWidth * 2\n            ctx.beginPath()\n            ctx.rect(\n                annotation.x - annotation.width / 2,\n                annotation.y - annotation.height / 2,\n                annotation.width,\n                annotation.height\n            )\n            ctx.stroke()\n        }\n\n        ctx.strokeStyle = theme.annotations.link.stroke\n        ctx.lineWidth = theme.annotations.link.strokeWidth\n        ctx.beginPath()\n        drawPoints(ctx, annotation.computed.points)\n        ctx.stroke()\n\n        if (isCircleAnnotation(annotation)) {\n            ctx.strokeStyle = theme.annotations.outline.stroke\n            ctx.lineWidth = theme.annotations.outline.strokeWidth\n            ctx.beginPath()\n            ctx.arc(annotation.x, annotation.y, annotation.size / 2, 0, 2 * Math.PI)\n            ctx.stroke()\n        }\n\n        if (isDotAnnotation(annotation)) {\n            ctx.fillStyle = theme.annotations.symbol.fill\n            ctx.beginPath()\n            ctx.arc(annotation.x, annotation.y, annotation.size / 2, 0, 2 * Math.PI)\n            ctx.fill()\n        }\n\n        if (isRectAnnotation(annotation)) {\n            ctx.strokeStyle = theme.annotations.outline.stroke\n            ctx.lineWidth = theme.annotations.outline.strokeWidth\n            ctx.beginPath()\n            ctx.rect(\n                annotation.x - annotation.width / 2,\n                annotation.y - annotation.height / 2,\n                annotation.width,\n                annotation.height\n            )\n            ctx.stroke()\n        }\n\n        if (typeof annotation.note === 'function') {\n            annotation.note(ctx, {\n                datum: annotation.datum,\n                x: annotation.computed.text[0],\n                y: annotation.computed.text[1],\n                theme,\n            })\n        } else {\n            ctx.font = `${theme.annotations.text.fontSize}px ${theme.annotations.text.fontFamily}`\n            ctx.textAlign = 'left'\n            ctx.textBaseline = 'alphabetic'\n\n            ctx.fillStyle = theme.annotations.text.fill\n            ctx.strokeStyle = theme.annotations.text.outlineColor\n            ctx.lineWidth = theme.annotations.text.outlineWidth * 2\n\n            if (theme.annotations.text.outlineWidth > 0) {\n                ctx.lineJoin = 'round'\n                ctx.strokeText(\n                    annotation.note,\n                    annotation.computed.text[0],\n                    annotation.computed.text[1]\n                )\n                ctx.lineJoin = 'miter'\n            }\n            ctx.fillText(annotation.note, annotation.computed.text[0], annotation.computed.text[1])\n        }\n    })\n    ctx.restore()\n}\n","import { useComputedAnnotation } from './hooks'\nimport { AnnotationNote } from './AnnotationNote'\nimport { AnnotationLink } from './AnnotationLink'\nimport { CircleAnnotationOutline } from './CircleAnnotationOutline'\nimport { DotAnnotationOutline } from './DotAnnotationOutline'\nimport { RectAnnotationOutline } from './RectAnnotationOutline'\nimport { BoundAnnotation } from './types'\nimport { isCircleAnnotation, isDotAnnotation, isRectAnnotation, isSvgNote } from './utils'\n\nexport const Annotation = <Datum,>(annotation: BoundAnnotation<Datum>) => {\n    const { datum, x, y, note } = annotation\n    const computed = useComputedAnnotation(annotation)\n\n    if (!isSvgNote(note)) {\n        throw new Error('note should be a valid react element')\n    }\n\n    return (\n        <>\n            <AnnotationLink points={computed.points} isOutline={true} />\n            {isCircleAnnotation(annotation) && (\n                <CircleAnnotationOutline x={x} y={y} size={annotation.size} />\n            )}\n            {isDotAnnotation(annotation) && (\n                <DotAnnotationOutline x={x} y={y} size={annotation.size} />\n            )}\n            {isRectAnnotation(annotation) && (\n                <RectAnnotationOutline\n                    x={x}\n                    y={y}\n                    width={annotation.width}\n                    height={annotation.height}\n                    borderRadius={annotation.borderRadius}\n                />\n            )}\n            <AnnotationLink points={computed.points} />\n            <AnnotationNote datum={datum} x={computed.text[0]} y={computed.text[1]} note={note} />\n        </>\n    )\n}\n"],"names":["defaultProps","dotSize","noteWidth","noteTextOffset","animate","isSvgNote","note","noteType","isValidElement","isCanvasNote","isCircleAnnotation","annotationSpec","type","isDotAnnotation","isRectAnnotation","bindAnnotations","_ref","data","annotations","getPosition","getDimensions","reduce","acc","annotation","offset","concat","filter","match","map","datum","position","dimensions","size","width","height","_extends","omit","getLinkAngle","sourceX","sourceY","targetX","targetY","angle","Math","atan2","absoluteAngleDegrees","radiansToDegrees","computeAnnotation","computedNoteX","computedNoteY","x","y","noteX","noteY","_annotation$noteWidth","_annotation$noteTextO","isNumber","undefined","abs","Error","computedX","computedY","positionFromAngle","degreesToRadians","eighth","round","textX","noteLineX","points","text","useComputedAnnotation","useMemo","AnnotationNote","theme","useTheme","_useMotionConfig","useMotionConfig","springConfig","config","animatedProps","useSpring","immediate","createElement","_jsxs","_Fragment","children","outlineWidth","_jsx","animated","style","strokeLinejoin","strokeWidth","stroke","outlineColor","AnnotationLink","_ref$isOutline","isOutline","path","firstPoint","slice","_ref2","animatedPath","useAnimatedPath","link","strokeLinecap","opacity","outlineOpacity","jsx","fill","d","CircleAnnotationOutline","radius","outline","circle","cx","cy","r","DotAnnotationOutline","_ref$size","symbol","RectAnnotationOutline","_ref$borderRadius","borderRadius","rect","rx","ry","drawPoints","ctx","forEach","index","moveTo","lineTo","computed","length","save","lineCap","strokeStyle","lineWidth","beginPath","arc","PI","fillStyle","font","fontSize","fontFamily","textAlign","textBaseline","lineJoin","strokeText","fillText","restore"],"mappings":"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"}