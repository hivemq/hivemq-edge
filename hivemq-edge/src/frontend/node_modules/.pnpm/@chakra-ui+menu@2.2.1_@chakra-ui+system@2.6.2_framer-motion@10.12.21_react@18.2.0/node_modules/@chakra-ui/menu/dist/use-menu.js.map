{"version":3,"sources":["../src/use-menu.ts","../src/use-shortcut.ts","../src/get-next-item-from-search.ts"],"sourcesContent":["import { useClickable } from \"@chakra-ui/clickable\"\nimport { createDescendantContext } from \"@chakra-ui/descendant\"\nimport { useFocusOnHide } from \"@chakra-ui/react-use-focus-effect\"\nimport { usePopper, UsePopperProps } from \"@chakra-ui/popper\"\nimport {\n  useDisclosure,\n  UseDisclosureProps,\n} from \"@chakra-ui/react-use-disclosure\"\nimport { useOutsideClick } from \"@chakra-ui/react-use-outside-click\"\nimport { useAnimationState } from \"@chakra-ui/react-use-animation-state\"\nimport { createContext } from \"@chakra-ui/react-context\"\nimport { getValidChildren } from \"@chakra-ui/react-children-utils\"\nimport { useControllableState } from \"@chakra-ui/react-use-controllable-state\"\nimport { useUpdateEffect } from \"@chakra-ui/react-use-update-effect\"\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\"\nimport { dataAttr, callAllHandlers } from \"@chakra-ui/shared-utils\"\nimport { lazyDisclosure, LazyMode } from \"@chakra-ui/lazy-utils\"\n\nimport React, {\n  cloneElement,\n  useCallback,\n  useRef,\n  useState,\n  useId,\n  useMemo,\n  useEffect,\n} from \"react\"\nimport { useShortcut } from \"./use-shortcut\"\nimport { getNextItemFromSearch } from \"./get-next-item-from-search\"\n\n/* -------------------------------------------------------------------------------------------------\n * Create context to track descendants and their indices\n * -----------------------------------------------------------------------------------------------*/\n\nexport const [\n  MenuDescendantsProvider,\n  useMenuDescendantsContext,\n  useMenuDescendants,\n  useMenuDescendant,\n] = createDescendantContext<HTMLElement>()\n\n/* -------------------------------------------------------------------------------------------------\n * Create context to track menu state and logic\n * -----------------------------------------------------------------------------------------------*/\n\nexport const [MenuProvider, useMenuContext] = createContext<\n  Omit<UseMenuReturn, \"descendants\">\n>({\n  strict: false,\n  name: \"MenuContext\",\n})\n\n/* -------------------------------------------------------------------------------------------------\n * useMenu hook\n * -----------------------------------------------------------------------------------------------*/\n\nexport interface UseMenuProps\n  extends Omit<UsePopperProps, \"enabled\">,\n    UseDisclosureProps {\n  /**\n   * The `ref` of the element that should receive focus when the popover opens.\n   */\n  initialFocusRef?: React.RefObject<{ focus(): void }>\n  /**\n   * If `true`, the menu will close when a menu item is\n   * clicked\n   *\n   * @default true\n   */\n  closeOnSelect?: boolean\n  /**\n   * If `true`, the menu will close when you click outside\n   * the menu list\n   *\n   * @default true\n   */\n  closeOnBlur?: boolean\n  /**\n   * If `true`, the first enabled menu item will receive focus and be selected\n   * when the menu opens.\n   *\n   * @default true\n   */\n  autoSelect?: boolean\n  /**\n   * Performance ðŸš€:\n   * If `true`, the MenuItem rendering will be deferred\n   * until the menu is open.\n   *\n   * @default false\n   */\n  isLazy?: boolean\n  /**\n   * Performance ðŸš€:\n   * The lazy behavior of menu's content when not visible.\n   * Only works when `isLazy={true}`\n   *\n   * - \"unmount\": The menu's content is always unmounted when not open.\n   * - \"keepMounted\": The menu's content initially unmounted,\n   * but stays mounted when menu is open.\n   *\n   * @default \"unmount\"\n   */\n  lazyBehavior?: LazyMode\n  /**\n   * If `rtl`, proper placement positions will be flipped i.e. 'top-right' will\n   * become 'top-left' and vice-verse\n   */\n  direction?: \"ltr\" | \"rtl\"\n  /*\n   * If `true`, the menu will be positioned when it mounts\n   * (even if it's not open).\n   *\n   * Note ðŸš¨: We don't recommend using this in a menu/popover intensive UI or page\n   * as it might affect scrolling performance.\n   *\n   * @default false\n   */\n  computePositionOnMount?: boolean\n}\n\nfunction useIds(idProp?: string, ...prefixes: string[]) {\n  const reactId = useId()\n  const id = idProp || reactId\n  return useMemo(() => {\n    return prefixes.map((prefix) => `${prefix}-${id}`)\n  }, [id, prefixes])\n}\n\nfunction getOwnerDocument(node?: Element | null): Document {\n  return node?.ownerDocument ?? document\n}\n\nfunction isActiveElement(element: HTMLElement) {\n  const doc = getOwnerDocument(element)\n  return doc.activeElement === (element as HTMLElement)\n}\n\n/**\n * React Hook to manage a menu\n *\n * It provides the logic and will be used with react context\n * to propagate its return value to all children\n */\nexport function useMenu(props: UseMenuProps = {}) {\n  const {\n    id,\n    closeOnSelect = true,\n    closeOnBlur = true,\n    initialFocusRef,\n    autoSelect = true,\n    isLazy,\n    isOpen: isOpenProp,\n    defaultIsOpen,\n    onClose: onCloseProp,\n    onOpen: onOpenProp,\n    placement = \"bottom-start\",\n    lazyBehavior = \"unmount\",\n    direction,\n    computePositionOnMount = false,\n    ...popperProps\n  } = props\n  /**\n   * Prepare the reference to the menu and disclosure\n   */\n  const menuRef = useRef<HTMLDivElement>(null)\n  const buttonRef = useRef<HTMLButtonElement>(null)\n\n  /**\n   * Context to register all menu item nodes\n   */\n  const descendants = useMenuDescendants()\n\n  const focusMenu = useCallback(() => {\n    requestAnimationFrame(() => {\n      menuRef.current?.focus({ preventScroll: false })\n    })\n  }, [])\n\n  const focusFirstItem = useCallback(() => {\n    const id = setTimeout(() => {\n      if (initialFocusRef) {\n        initialFocusRef.current?.focus()\n      } else {\n        const first = descendants.firstEnabled()\n        if (first) setFocusedIndex(first.index)\n      }\n    })\n    timeoutIds.current.add(id)\n  }, [descendants, initialFocusRef])\n\n  const focusLastItem = useCallback(() => {\n    const id = setTimeout(() => {\n      const last = descendants.lastEnabled()\n      if (last) setFocusedIndex(last.index)\n    })\n    timeoutIds.current.add(id)\n  }, [descendants])\n\n  const onOpenInternal = useCallback(() => {\n    onOpenProp?.()\n    if (autoSelect) {\n      focusFirstItem()\n    } else {\n      focusMenu()\n    }\n  }, [autoSelect, focusFirstItem, focusMenu, onOpenProp])\n\n  const { isOpen, onOpen, onClose, onToggle } = useDisclosure({\n    isOpen: isOpenProp,\n    defaultIsOpen,\n    onClose: onCloseProp,\n    onOpen: onOpenInternal,\n  })\n\n  useOutsideClick({\n    enabled: isOpen && closeOnBlur,\n    ref: menuRef,\n    handler: (event) => {\n      if (!buttonRef.current?.contains(event.target as HTMLElement)) {\n        onClose()\n      }\n    },\n  })\n\n  /**\n   * Add some popper.js for dynamic positioning\n   */\n  const popper: any = usePopper({\n    ...popperProps,\n    enabled: isOpen || computePositionOnMount,\n    placement,\n    direction,\n  })\n\n  const [focusedIndex, setFocusedIndex] = useState(-1)\n\n  /**\n   * Focus the button when we close the menu\n   */\n  useUpdateEffect(() => {\n    if (!isOpen) {\n      setFocusedIndex(-1)\n    }\n  }, [isOpen])\n\n  useFocusOnHide(menuRef, {\n    focusRef: buttonRef,\n    visible: isOpen,\n    shouldFocus: true,\n  })\n\n  const animationState = useAnimationState({ isOpen, ref: menuRef })\n\n  /**\n   * Generate unique ids for menu's list and button\n   */\n  const [buttonId, menuId] = useIds(id, `menu-button`, `menu-list`)\n\n  const openAndFocusMenu = useCallback(() => {\n    onOpen()\n    focusMenu()\n  }, [onOpen, focusMenu])\n\n  const timeoutIds = useRef<Set<any>>(new Set([]))\n\n  // clean up timeouts\n  useEffect(() => {\n    const ids = timeoutIds.current\n    return () => {\n      ids.forEach((id) => clearTimeout(id))\n      ids.clear()\n    }\n  }, [])\n\n  const openAndFocusFirstItem = useCallback(() => {\n    onOpen()\n    focusFirstItem()\n  }, [focusFirstItem, onOpen])\n\n  const openAndFocusLastItem = useCallback(() => {\n    onOpen()\n    focusLastItem()\n  }, [onOpen, focusLastItem])\n\n  const refocus = useCallback(() => {\n    const doc = getOwnerDocument(menuRef.current)\n    const hasFocusWithin = menuRef.current?.contains(doc.activeElement)\n    const shouldRefocus = isOpen && !hasFocusWithin\n\n    if (!shouldRefocus) return\n\n    const node = descendants.item(focusedIndex)?.node\n    node?.focus({ preventScroll: true })\n  }, [isOpen, focusedIndex, descendants])\n\n  /**\n   * Track the animation frame which is scheduled to focus\n   * a menu item, so it can be cancelled if another item\n   * is focused before the animation executes. This prevents\n   * infinite rerenders.\n   */\n  const rafId = useRef<number | null>(null)\n\n  return {\n    openAndFocusMenu,\n    openAndFocusFirstItem,\n    openAndFocusLastItem,\n    onTransitionEnd: refocus,\n    unstable__animationState: animationState,\n    descendants,\n    popper,\n    buttonId,\n    menuId,\n    forceUpdate: popper.forceUpdate,\n    orientation: \"vertical\",\n    isOpen,\n    onToggle,\n    onOpen,\n    onClose,\n    menuRef,\n    buttonRef,\n    focusedIndex,\n    closeOnSelect,\n    closeOnBlur,\n    autoSelect,\n    setFocusedIndex,\n    isLazy,\n    lazyBehavior,\n    initialFocusRef,\n    rafId,\n  }\n}\n\nexport interface UseMenuReturn extends ReturnType<typeof useMenu> {}\n\n/* -------------------------------------------------------------------------------------------------\n * useMenuButton hook\n * -----------------------------------------------------------------------------------------------*/\nexport interface UseMenuButtonProps\n  extends Omit<React.HTMLAttributes<Element>, \"color\"> {}\n\n/**\n * React Hook to manage a menu button.\n *\n * The assumption here is that the `useMenu` hook is used\n * in a component higher up the tree, and its return value\n * is passed as `context` to this hook.\n */\nexport function useMenuButton(\n  props: UseMenuButtonProps = {},\n  externalRef: React.Ref<any> = null,\n) {\n  const menu = useMenuContext()\n\n  const { onToggle, popper, openAndFocusFirstItem, openAndFocusLastItem } = menu\n\n  const onKeyDown = useCallback(\n    (event: React.KeyboardEvent) => {\n      const eventKey = event.key\n      const keyMap: Record<string, React.KeyboardEventHandler> = {\n        Enter: openAndFocusFirstItem,\n        ArrowDown: openAndFocusFirstItem,\n        ArrowUp: openAndFocusLastItem,\n      }\n\n      const action = keyMap[eventKey]\n\n      if (action) {\n        event.preventDefault()\n        event.stopPropagation()\n        action(event)\n      }\n    },\n    [openAndFocusFirstItem, openAndFocusLastItem],\n  )\n\n  return {\n    ...props,\n    ref: mergeRefs(menu.buttonRef, externalRef, popper.referenceRef),\n    id: menu.buttonId,\n    \"data-active\": dataAttr(menu.isOpen),\n    \"aria-expanded\": menu.isOpen,\n    \"aria-haspopup\": \"menu\" as React.AriaAttributes[\"aria-haspopup\"],\n    \"aria-controls\": menu.menuId,\n    onClick: callAllHandlers(props.onClick, onToggle),\n    onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n  }\n}\n\nfunction isTargetMenuItem(target: EventTarget | null) {\n  // this will catch `menuitem`, `menuitemradio`, `menuitemcheckbox`\n  return (\n    isHTMLElement(target) &&\n    !!target?.getAttribute(\"role\")?.startsWith(\"menuitem\")\n  )\n}\n\n/* -------------------------------------------------------------------------------------------------\n * useMenuList\n * -----------------------------------------------------------------------------------------------*/\n\nexport interface UseMenuListProps\n  extends Omit<React.HTMLAttributes<Element>, \"color\"> {}\n\n/**\n * React Hook to manage a menu list.\n *\n * The assumption here is that the `useMenu` hook is used\n * in a component higher up the tree, and its return value\n * is passed as `context` to this hook.\n */\nexport function useMenuList(\n  props: UseMenuListProps = {},\n  ref: React.Ref<any> = null,\n): React.HTMLAttributes<HTMLElement> & React.RefAttributes<HTMLElement> {\n  const menu = useMenuContext()\n\n  if (!menu) {\n    throw new Error(\n      `useMenuContext: context is undefined. Seems you forgot to wrap component within <Menu>`,\n    )\n  }\n\n  const {\n    focusedIndex,\n    setFocusedIndex,\n    menuRef,\n    isOpen,\n    onClose,\n    menuId,\n    isLazy,\n    lazyBehavior,\n    unstable__animationState: animated,\n  } = menu\n\n  const descendants = useMenuDescendantsContext()\n\n  /**\n   * Hook that creates a keydown event handler that listens\n   * to printable keyboard character press\n   */\n  const createTypeaheadHandler = useShortcut({\n    preventDefault: (event) =>\n      event.key !== \" \" && isTargetMenuItem(event.target),\n  })\n\n  const onKeyDown = useCallback(\n    (event: React.KeyboardEvent) => {\n      // ignore events bubbles from portal children\n      if (!event.currentTarget.contains(event.target as Element)) return\n\n      const eventKey = event.key\n\n      const keyMap: Record<string, React.KeyboardEventHandler> = {\n        Tab: (event) => event.preventDefault(),\n        Escape: onClose,\n        ArrowDown: () => {\n          const next = descendants.nextEnabled(focusedIndex)\n          if (next) setFocusedIndex(next.index)\n        },\n        ArrowUp: () => {\n          const prev = descendants.prevEnabled(focusedIndex)\n          if (prev) setFocusedIndex(prev.index)\n        },\n      }\n\n      const fn = keyMap[eventKey]\n\n      if (fn) {\n        event.preventDefault()\n        fn(event)\n        return\n      }\n\n      /**\n       * Typeahead: Based on current character pressed,\n       * find the next item to be selected\n       */\n      const onTypeahead = createTypeaheadHandler((character) => {\n        const nextItem = getNextItemFromSearch(\n          descendants.values(),\n          character,\n          (item) => item?.node?.textContent ?? \"\",\n          descendants.item(focusedIndex),\n        )\n        if (nextItem) {\n          const index = descendants.indexOf(nextItem.node)\n          setFocusedIndex(index)\n        }\n      })\n\n      if (isTargetMenuItem(event.target)) {\n        onTypeahead(event)\n      }\n    },\n    [\n      descendants,\n      focusedIndex,\n      createTypeaheadHandler,\n      onClose,\n      setFocusedIndex,\n    ],\n  )\n\n  const hasBeenOpened = useRef(false)\n  if (isOpen) {\n    hasBeenOpened.current = true\n  }\n\n  const shouldRenderChildren = lazyDisclosure({\n    wasSelected: hasBeenOpened.current,\n    enabled: isLazy,\n    mode: lazyBehavior,\n    isSelected: animated.present,\n  })\n\n  return {\n    ...props,\n    ref: mergeRefs(menuRef, ref),\n    children: shouldRenderChildren ? props.children : null,\n    tabIndex: -1,\n    role: \"menu\",\n    id: menuId,\n    style: {\n      ...props.style,\n      transformOrigin: \"var(--popper-transform-origin)\",\n    },\n    \"aria-orientation\": \"vertical\" as React.AriaAttributes[\"aria-orientation\"],\n    onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n  }\n}\n\n/* -------------------------------------------------------------------------------------------------\n * useMenuPosition: Composes usePopper to position the menu\n * -----------------------------------------------------------------------------------------------*/\n\nexport function useMenuPositioner(props: any = {}) {\n  const { popper, isOpen } = useMenuContext()\n  return popper.getPopperProps({\n    ...props,\n    style: {\n      visibility: isOpen ? \"visible\" : \"hidden\",\n      ...props.style,\n    },\n  })\n}\n\n/* -------------------------------------------------------------------------------------------------\n * useMenuItem: Hook for each menu item within the menu list.\n   We also use it in `useMenuItemOption`\n * -----------------------------------------------------------------------------------------------*/\n\nexport interface UseMenuItemProps\n  extends Omit<React.HTMLAttributes<Element>, \"color\" | \"disabled\"> {\n  /**\n   * If `true`, the menuitem will be disabled\n   */\n  isDisabled?: boolean\n  /**\n   * If `true` and the menuitem is disabled, it'll\n   * remain keyboard-focusable\n   */\n  isFocusable?: boolean\n  /**\n   * Overrides the parent menu's `closeOnSelect` prop.\n   */\n  closeOnSelect?: boolean\n  /**\n   * The type of the menuitem.\n   */\n  type?: React.ButtonHTMLAttributes<HTMLButtonElement>[\"type\"]\n}\n\nexport function useMenuItem(\n  props: UseMenuItemProps = {},\n  externalRef: React.Ref<any> = null,\n) {\n  const {\n    onMouseEnter: onMouseEnterProp,\n    onMouseMove: onMouseMoveProp,\n    onMouseLeave: onMouseLeaveProp,\n    onClick: onClickProp,\n    onFocus: onFocusProp,\n    isDisabled,\n    isFocusable,\n    closeOnSelect,\n    type: typeProp,\n    ...htmlProps\n  } = props\n\n  const menu = useMenuContext()\n\n  const {\n    setFocusedIndex,\n    focusedIndex,\n    closeOnSelect: menuCloseOnSelect,\n    onClose,\n    menuRef,\n    isOpen,\n    menuId,\n    rafId,\n  } = menu\n\n  const ref = useRef<HTMLDivElement>(null)\n  const id = `${menuId}-menuitem-${useId()}`\n\n  /**\n   * Register the menuitem's node into the domContext\n   */\n  const { index, register } = useMenuDescendant({\n    disabled: isDisabled && !isFocusable,\n  })\n\n  const onMouseEnter = useCallback(\n    (event: any) => {\n      onMouseEnterProp?.(event)\n      if (isDisabled) return\n      setFocusedIndex(index)\n    },\n    [setFocusedIndex, index, isDisabled, onMouseEnterProp],\n  )\n\n  const onMouseMove = useCallback(\n    (event: any) => {\n      onMouseMoveProp?.(event)\n      if (ref.current && !isActiveElement(ref.current)) {\n        onMouseEnter(event)\n      }\n    },\n    [onMouseEnter, onMouseMoveProp],\n  )\n\n  const onMouseLeave = useCallback(\n    (event: any) => {\n      onMouseLeaveProp?.(event)\n      if (isDisabled) return\n      setFocusedIndex(-1)\n    },\n    [setFocusedIndex, isDisabled, onMouseLeaveProp],\n  )\n\n  const onClick = useCallback(\n    (event: React.MouseEvent) => {\n      onClickProp?.(event)\n      if (!isTargetMenuItem(event.currentTarget)) return\n      /**\n       * Close menu and parent menus, allowing the MenuItem\n       * to override its parent menu's `closeOnSelect` prop.\n       */\n      if (closeOnSelect ?? menuCloseOnSelect) {\n        onClose()\n      }\n    },\n    [onClose, onClickProp, menuCloseOnSelect, closeOnSelect],\n  )\n\n  const onFocus = useCallback(\n    (event: React.FocusEvent) => {\n      onFocusProp?.(event)\n      setFocusedIndex(index)\n    },\n    [setFocusedIndex, onFocusProp, index],\n  )\n\n  const isFocused = index === focusedIndex\n\n  const trulyDisabled = isDisabled && !isFocusable\n\n  useUpdateEffect(() => {\n    if (!isOpen) return\n    if (isFocused && !trulyDisabled && ref.current) {\n      // Cancel any pending animations\n      if (rafId.current) {\n        cancelAnimationFrame(rafId.current)\n      }\n      rafId.current = requestAnimationFrame(() => {\n        ref.current?.focus({ preventScroll: true })\n        rafId.current = null\n      })\n    } else if (menuRef.current && !isActiveElement(menuRef.current)) {\n      menuRef.current.focus({ preventScroll: true })\n    }\n\n    return () => {\n      if (rafId.current) {\n        cancelAnimationFrame(rafId.current)\n      }\n    }\n  }, [isFocused, trulyDisabled, menuRef, isOpen])\n\n  const clickableProps = useClickable({\n    onClick,\n    onFocus,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    ref: mergeRefs(register, ref, externalRef),\n    isDisabled,\n    isFocusable,\n  })\n\n  return {\n    ...htmlProps,\n    ...clickableProps,\n    type: typeProp ?? (clickableProps as any).type,\n    id,\n    role: \"menuitem\",\n    tabIndex: isFocused ? 0 : -1,\n  }\n}\n\n/* -------------------------------------------------------------------------------------------------\n * useMenuOption: Composes useMenuItem to provide a selectable/checkable menu item\n * -----------------------------------------------------------------------------------------------*/\n\nexport interface UseMenuOptionOptions {\n  value?: string\n  isChecked?: boolean\n  type?: \"radio\" | \"checkbox\"\n  children?: React.ReactNode\n}\n\nexport interface UseMenuOptionProps\n  extends Omit<UseMenuItemProps, \"type\">,\n    UseMenuOptionOptions {}\n\nexport function useMenuOption(\n  props: UseMenuOptionProps = {},\n  ref: React.Ref<any> = null,\n) {\n  const { type = \"radio\", isChecked, ...rest } = props\n  const ownProps = useMenuItem(rest, ref)\n  return {\n    ...ownProps,\n    role: `menuitem${type}`,\n    \"aria-checked\": isChecked as React.AriaAttributes[\"aria-checked\"],\n  }\n}\n\n/* -------------------------------------------------------------------------------------------------\n * useMenuOptionGroup: Manages the state of multiple selectable menuitem or menu option\n * -----------------------------------------------------------------------------------------------*/\n\nexport interface UseMenuOptionGroupProps {\n  value?: string | string[]\n  defaultValue?: string | string[]\n  type?: \"radio\" | \"checkbox\"\n  onChange?: (value: string | string[]) => void\n  children?: React.ReactNode\n}\n\nexport function useMenuOptionGroup(props: UseMenuOptionGroupProps = {}) {\n  const {\n    children,\n    type = \"radio\",\n    value: valueProp,\n    defaultValue,\n    onChange: onChangeProp,\n    ...htmlProps\n  } = props\n\n  const isRadio = type === \"radio\"\n\n  const fallback = isRadio ? \"\" : []\n\n  const [value, setValue] = useControllableState({\n    defaultValue: defaultValue ?? fallback,\n    value: valueProp,\n    onChange: onChangeProp,\n  })\n\n  const onChange = useCallback(\n    (selectedValue: string) => {\n      if (type === \"radio\" && typeof value === \"string\") {\n        setValue(selectedValue)\n      }\n\n      if (type === \"checkbox\" && Array.isArray(value)) {\n        const nextValue = value.includes(selectedValue)\n          ? value.filter((item) => item !== selectedValue)\n          : value.concat(selectedValue)\n\n        setValue(nextValue)\n      }\n    },\n    [value, setValue, type],\n  )\n\n  const validChildren = getValidChildren(children)\n\n  const clones = validChildren.map((child) => {\n    /**\n     * We've added an internal `id` to each `MenuItemOption`,\n     * let's use that for type-checking.\n     *\n     * We can't rely on displayName or the element's type since\n     * they can be changed by the user.\n     */\n    if ((child.type as any).id !== \"MenuItemOption\") return child\n\n    const onClick = (event: MouseEvent) => {\n      onChange(child.props.value)\n      child.props.onClick?.(event)\n    }\n\n    const isChecked =\n      type === \"radio\"\n        ? child.props.value === value\n        : value.includes(child.props.value)\n\n    return cloneElement(child, {\n      type,\n      onClick,\n      isChecked,\n    })\n  })\n\n  return {\n    ...htmlProps,\n    children: clones,\n  }\n}\n\nexport function useMenuState() {\n  const { isOpen, onClose } = useMenuContext()\n  return { isOpen, onClose }\n}\n\nfunction isHTMLElement(el: any): el is HTMLElement {\n  if (!isElement(el)) return false\n  const win = el.ownerDocument.defaultView ?? window\n  return el instanceof win.HTMLElement\n}\n\nfunction isElement(el: any): el is Element {\n  return (\n    el != null &&\n    typeof el == \"object\" &&\n    \"nodeType\" in el &&\n    el.nodeType === Node.ELEMENT_NODE\n  )\n}\n","import { useEffect, useRef, useState } from \"react\"\n\n/**\n * Checks if the key pressed is a printable character\n * and can be used for shortcut navigation\n */\nfunction isPrintableCharacter(event: React.KeyboardEvent) {\n  const { key } = event\n  return key.length === 1 || (key.length > 1 && /[^a-zA-Z0-9]/.test(key))\n}\n\nexport interface UseShortcutProps {\n  timeout?: number\n  preventDefault?: (event: React.KeyboardEvent) => boolean\n}\n\n/**\n * React hook that provides an enhanced keydown handler,\n * that's used for key navigation within menus, select dropdowns.\n */\nexport function useShortcut(props: UseShortcutProps = {}) {\n  const { timeout = 300, preventDefault = () => true } = props\n\n  const [keys, setKeys] = useState<string[]>([])\n  const timeoutRef = useRef<any>()\n\n  const flush = () => {\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current)\n      timeoutRef.current = null\n    }\n  }\n\n  const clearKeysAfterDelay = () => {\n    flush()\n    timeoutRef.current = setTimeout(() => {\n      setKeys([])\n      timeoutRef.current = null\n    }, timeout)\n  }\n\n  useEffect(() => flush, [])\n\n  type Callback = (keysSoFar: string) => void\n\n  function onKeyDown(fn: Callback) {\n    return (event: React.KeyboardEvent) => {\n      if (event.key === \"Backspace\") {\n        const keysCopy = [...keys]\n        keysCopy.pop()\n        setKeys(keysCopy)\n        return\n      }\n\n      if (isPrintableCharacter(event)) {\n        const keysCopy = keys.concat(event.key)\n\n        if (preventDefault(event)) {\n          event.preventDefault()\n          event.stopPropagation()\n        }\n\n        setKeys(keysCopy)\n        fn(keysCopy.join(\"\"))\n\n        clearKeysAfterDelay()\n      }\n    }\n  }\n\n  return onKeyDown\n}\n","/**\n * Gets the next item based on a search string\n *\n * @param items array of items\n * @param searchString the search string\n * @param itemToString resolves an item to string\n * @param currentItem the current selected item\n */\nexport function getNextItemFromSearch<T>(\n  items: T[],\n  searchString: string,\n  itemToString: (item: T) => string,\n  currentItem: T,\n): T | undefined {\n  if (searchString == null) {\n    return currentItem\n  }\n\n  // If current item doesn't exist, find the item that matches the search string\n  if (!currentItem) {\n    const foundItem = items.find((item) =>\n      itemToString(item).toLowerCase().startsWith(searchString.toLowerCase()),\n    )\n    return foundItem\n  }\n\n  // Filter items for ones that match the search string (case insensitive)\n  const matchingItems = items.filter((item) =>\n    itemToString(item).toLowerCase().startsWith(searchString.toLowerCase()),\n  )\n\n  // If there's a match, let's get the next item to select\n  if (matchingItems.length > 0) {\n    let nextIndex: number\n\n    // If the currentItem is in the available items, we move to the next available option\n    if (matchingItems.includes(currentItem)) {\n      const currentIndex = matchingItems.indexOf(currentItem)\n      nextIndex = currentIndex + 1\n      if (nextIndex === matchingItems.length) {\n        nextIndex = 0\n      }\n      return matchingItems[nextIndex]\n    }\n    // Else, we pick the first item in the available items\n    nextIndex = items.indexOf(matchingItems[0])\n    return items[nextIndex]\n  }\n\n  // a decent fallback to the currentItem\n  return currentItem\n}\n"],"mappings":"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","names":["import_react","id","event"]}