{"version":3,"sources":["../src/use-style-config.ts","../src/hooks.ts","../src/use-theme.ts"],"sourcesContent":["import {\n  resolveStyleConfig,\n  SystemStyleObject,\n  ThemingProps,\n} from \"@chakra-ui/styled-system\"\nimport { mergeThemeOverride } from \"@chakra-ui/theme-utils\"\nimport {\n  Dict,\n  filterUndefined,\n  memoizedGet as get,\n  mergeWith,\n  omit,\n} from \"@chakra-ui/utils\"\nimport { useRef } from \"react\"\nimport isEqual from \"react-fast-compare\"\nimport { useChakra } from \"./hooks\"\n\ntype StylesRef = SystemStyleObject | Record<string, SystemStyleObject>\n\nfunction useStyleConfigImpl(\n  themeKey: string | null,\n  props: ThemingProps & Dict = {},\n) {\n  const { styleConfig: styleConfigProp, ...rest } = props\n\n  const { theme, colorMode } = useChakra()\n\n  const themeStyleConfig = themeKey\n    ? get(theme, `components.${themeKey}`)\n    : undefined\n\n  const styleConfig = styleConfigProp || themeStyleConfig\n\n  const mergedProps = mergeWith(\n    { theme, colorMode },\n    styleConfig?.defaultProps ?? {},\n    filterUndefined(omit(rest, [\"children\"])),\n  )\n\n  /**\n   * Store the computed styles in a `ref` to avoid unneeded re-computation\n   */\n  const stylesRef = useRef<StylesRef>({})\n\n  if (styleConfig) {\n    const getStyles = resolveStyleConfig(styleConfig)\n    const styles = getStyles(mergedProps)\n\n    const isStyleEqual = isEqual(stylesRef.current, styles)\n\n    if (!isStyleEqual) {\n      stylesRef.current = styles\n    }\n  }\n\n  return stylesRef.current\n}\n\nexport function useStyleConfig(\n  themeKey: string,\n  props: ThemingProps & Dict = {},\n) {\n  return useStyleConfigImpl(themeKey, props) as SystemStyleObject\n}\n\nexport function useMultiStyleConfig(\n  themeKey: string,\n  props: ThemingProps & Dict = {},\n) {\n  return useStyleConfigImpl(themeKey, props) as Record<\n    string,\n    SystemStyleObject\n  >\n}\n\ntype MultipartStyles = Record<string, SystemStyleObject>\n\nexport function useComponentStyles__unstable(\n  themeKey: string,\n  props: ThemingProps & { baseConfig: any },\n) {\n  const { baseConfig, ...restProps } = props\n  const { theme } = useChakra()\n\n  const overrides = theme.components?.[themeKey]\n\n  const styleConfig = overrides\n    ? mergeThemeOverride(overrides, baseConfig)\n    : baseConfig\n\n  return useStyleConfigImpl(null, {\n    ...restProps,\n    styleConfig,\n  }) as MultipartStyles\n}\n","import { useColorMode } from \"@chakra-ui/color-mode\"\nimport { Dict, StringOrNumber } from \"@chakra-ui/utils\"\nimport { useTheme } from \"./use-theme\"\n\nexport function useChakra<T extends Dict = Dict>() {\n  const colorModeResult = useColorMode()\n  const theme = useTheme() as T\n  return { ...colorModeResult, theme }\n}\n\nfunction getBreakpointValue<T extends StringOrNumber>(\n  theme: Dict,\n  value: T,\n  fallback: any,\n) {\n  if (value == null) return value\n  const getValue = (val: T) => theme.__breakpoints?.asArray?.[val]\n  return getValue(value) ?? getValue(fallback) ?? fallback\n}\n\nfunction getTokenValue<T extends StringOrNumber>(\n  theme: Dict,\n  value: T,\n  fallback: any,\n) {\n  if (value == null) return value\n  const getValue = (val: T) => theme.__cssMap?.[val]?.value\n  return getValue(value) ?? getValue(fallback) ?? fallback\n}\n\n/**\n * `useToken` is a custom hook used to resolve design tokens from the theme.\n *\n * @see Docs https://chakra-ui.com/docs/hooks/use-token\n */\nexport function useToken<T extends StringOrNumber | StringOrNumber[]>(\n  scale: string,\n  token: T,\n  fallback?: T,\n) {\n  const theme = useTheme()\n  return getToken(scale, token, fallback)(theme)\n}\n\nexport function getToken<T extends StringOrNumber | StringOrNumber[]>(\n  scale: string,\n  token: T,\n  fallback?: T,\n): (theme: Dict) => T {\n  const _token = Array.isArray(token) ? token : [token]\n  const _fallback = Array.isArray(fallback) ? fallback : [fallback]\n  return (theme: Dict<any>) => {\n    const fallbackArr = _fallback.filter(Boolean) as T[]\n    const result = _token.map((token, index) => {\n      if (scale === \"breakpoints\") {\n        return getBreakpointValue(theme, token, fallbackArr[index] ?? token)\n      }\n      const path = `${scale}.${token}`\n      return getTokenValue(theme, path, fallbackArr[index] ?? token)\n    })\n    return Array.isArray(token) ? result : result[0]\n  }\n}\n","import { WithCSSVar } from \"@chakra-ui/styled-system\"\nimport { Dict } from \"@chakra-ui/utils\"\nimport { ThemeContext } from \"@emotion/react\"\nimport { useContext } from \"react\"\n\n/**\n * `useTheme` is a custom hook used to get the theme object from context.\n *\n * @see Docs https://chakra-ui.com/docs/hooks/use-theme\n */\nexport function useTheme<T extends object = Dict>() {\n  const theme = useContext(\n    ThemeContext as unknown as React.Context<T | undefined>,\n  )\n  if (!theme) {\n    throw Error(\n      \"useTheme: `theme` is undefined. Seems you forgot to wrap your app in `<ChakraProvider />` or `<ThemeProvider />`\",\n    )\n  }\n\n  return theme as WithCSSVar<T>\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAIO;AACP,yBAAmC;AACnC,mBAMO;AACP,IAAAA,gBAAuB;AACvB,gCAAoB;;;ACdpB,wBAA6B;;;ACE7B,mBAA6B;AAC7B,IAAAC,gBAA2B;AAOpB,SAAS,WAAoC;AAClD,QAAM,YAAQ;AAAA,IACZ;AAAA,EACF;AACA,MAAI,CAAC,OAAO;AACV,UAAM;AAAA,MACJ;AAAA,IACF;AAAA,EACF;AAEA,SAAO;AACT;;;ADjBO,SAAS,YAAmC;AACjD,QAAM,sBAAkB,gCAAa;AACrC,QAAM,QAAQ,SAAS;AACvB,SAAO,EAAE,GAAG,iBAAiB,MAAM;AACrC;;;ADWA,SAAS,mBACP,UACA,QAA6B,CAAC,GAC9B;AAtBF;AAuBE,QAAM,EAAE,aAAa,iBAAiB,GAAG,KAAK,IAAI;AAElD,QAAM,EAAE,OAAO,UAAU,IAAI,UAAU;AAEvC,QAAM,mBAAmB,eACrB,aAAAC,aAAI,OAAO,cAAc,QAAQ,EAAE,IACnC;AAEJ,QAAM,cAAc,mBAAmB;AAEvC,QAAM,kBAAc;AAAA,IAClB,EAAE,OAAO,UAAU;AAAA,KACnB,gDAAa,iBAAb,YAA6B,CAAC;AAAA,QAC9B,kCAAgB,mBAAK,MAAM,CAAC,UAAU,CAAC,CAAC;AAAA,EAC1C;AAKA,QAAM,gBAAY,sBAAkB,CAAC,CAAC;AAEtC,MAAI,aAAa;AACf,UAAM,gBAAY,yCAAmB,WAAW;AAChD,UAAM,SAAS,UAAU,WAAW;AAEpC,UAAM,mBAAe,0BAAAC,SAAQ,UAAU,SAAS,MAAM;AAEtD,QAAI,CAAC,cAAc;AACjB,gBAAU,UAAU;AAAA,IACtB;AAAA,EACF;AAEA,SAAO,UAAU;AACnB;AAEO,SAAS,eACd,UACA,QAA6B,CAAC,GAC9B;AACA,SAAO,mBAAmB,UAAU,KAAK;AAC3C;AAEO,SAAS,oBACd,UACA,QAA6B,CAAC,GAC9B;AACA,SAAO,mBAAmB,UAAU,KAAK;AAI3C;AAIO,SAAS,6BACd,UACA,OACA;AAhFF;AAiFE,QAAM,EAAE,YAAY,GAAG,UAAU,IAAI;AACrC,QAAM,EAAE,MAAM,IAAI,UAAU;AAE5B,QAAM,aAAY,WAAM,eAAN,mBAAmB;AAErC,QAAM,cAAc,gBAChB,uCAAmB,WAAW,UAAU,IACxC;AAEJ,SAAO,mBAAmB,MAAM;AAAA,IAC9B,GAAG;AAAA,IACH;AAAA,EACF,CAAC;AACH;","names":["import_react","import_react","get","isEqual"]}