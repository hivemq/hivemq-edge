{"version":3,"sources":["../src/system.types.tsx"],"sourcesContent":["import type {\n  ResponsiveValue,\n  SystemProps,\n  SystemStyleObject,\n} from \"@chakra-ui/styled-system\"\nimport type { Interpolation } from \"@emotion/react\"\n\nexport interface ChakraProps extends SystemProps {\n  /**\n   * Used to truncate text at a specific number of lines\n   */\n  noOfLines?: ResponsiveValue<number>\n  /**\n   * Used for internal css management\n   * @private\n   */\n  __css?: SystemStyleObject\n  /**\n   * Used to pass theme-aware style props.\n   * NB: This is the public API for user-land\n   */\n  sx?: SystemStyleObject\n  /**\n   * The emotion's css style object\n   */\n  css?: Interpolation<{}>\n}\n\nexport type As = React.ElementType\n\n/**\n * Extract the props of a React element or component\n */\nexport type PropsOf<T extends As> = React.ComponentPropsWithoutRef<T> & {\n  as?: As\n}\n\nexport type OmitCommonProps<\n  Target,\n  OmitAdditionalProps extends keyof any = never,\n> = Omit<\n  Target,\n  \"transition\" | \"as\" | \"color\" | \"translate\" | OmitAdditionalProps\n> & {\n  htmlTranslate?: \"yes\" | \"no\" | undefined\n}\n\nexport type RightJoinProps<\n  SourceProps extends object = {},\n  OverrideProps extends object = {},\n> = OmitCommonProps<SourceProps, keyof OverrideProps> & OverrideProps\n\ntype Assign<T, U> = Omit<T, keyof U> & U\n\nexport type MergeWithAs<\n  ComponentProps extends object,\n  AsProps extends object,\n  AdditionalProps extends object = {},\n  AsComponent extends As = As,\n> = (\n  | RightJoinProps<ComponentProps, AdditionalProps>\n  | RightJoinProps<AsProps, AdditionalProps>\n) & {\n  as?: AsComponent\n}\n\nexport type ComponentWithAs<Component extends As, Props extends object = {}> = {\n  <AsComponent extends As = Component>(\n    props: MergeWithAs<\n      React.ComponentProps<Component>,\n      React.ComponentProps<AsComponent>,\n      Props,\n      AsComponent\n    >,\n  ): JSX.Element\n\n  displayName?: string\n  propTypes?: React.WeakValidationMap<any>\n  contextTypes?: React.ValidationMap<any>\n  defaultProps?: Partial<any>\n  id?: string\n}\n\nexport interface ChakraComponent<T extends As, P extends object = {}>\n  extends ComponentWithAs<T, Assign<ChakraProps, P>> {}\n"],"mappings":";;;;;;;;;;;;;;;;;AAAA;AAAA;","names":[]}