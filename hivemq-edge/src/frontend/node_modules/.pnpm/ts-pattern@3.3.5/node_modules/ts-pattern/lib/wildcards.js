"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.__ = void 0;
const guards_1 = require("./guards");
function isUnknown(x) {
    return true;
}
function isNumber(x) {
    return typeof x === 'number';
}
function numberIsNaN(x) {
    return Number.isNaN(x);
}
function isString(x) {
    return typeof x === 'string';
}
function isBoolean(x) {
    return typeof x === 'boolean';
}
function isNullish(x) {
    return x === null || x === undefined;
}
const unknownGuard = (0, guards_1.when)(isUnknown);
const stringGuard = (0, guards_1.when)(isString);
const numberGuard = (0, guards_1.when)(isNumber);
const NaNGuard = (0, guards_1.when)(numberIsNaN);
const booleanGuard = (0, guards_1.when)(isBoolean);
const nullishGuard = (0, guards_1.when)(isNullish);
/**
 * ### Catch All wildcard
 * `__` is wildcard pattern, matching **any value**.
 *
 * `__.string` is wildcard pattern matching any **string**.
 *
 * `__.number` is wildcard pattern matching any **number**.
 *
 * `__.NaN` is wildcard pattern matching **NaN**
 *
 * `__.boolean` is wildcard pattern matching any **boolean**.
 *
 * `__.nullish` is wildcard pattern matching **null** or **undefined**.
 * @example
 *  match(value)
 *   .with(__, () => 'will always match')
 *   .with(__.string, () => 'will match on strings only')
 *   .with(__.number, () => 'will match on numbers only')
 *   .with(__.NaN, () => 'will match on NaN')
 *   .with(__.boolean, () => 'will match on booleans only')
 *   .with(__.nullish, () => 'will match on null or undefined only')
 */
exports.__ = Object.assign(unknownGuard, {
    string: stringGuard,
    number: numberGuard,
    NaN: NaNGuard,
    boolean: booleanGuard,
    nullish: nullishGuard,
});
