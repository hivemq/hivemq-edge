/**
 * ### Catch All wildcard
 * `__` is wildcard pattern, matching **any value**.
 *
 * `__.string` is wildcard pattern matching any **string**.
 *
 * `__.number` is wildcard pattern matching any **number**.
 *
 * `__.NaN` is wildcard pattern matching **NaN**
 *
 * `__.boolean` is wildcard pattern matching any **boolean**.
 *
 * `__.nullish` is wildcard pattern matching **null** or **undefined**.
 * @example
 *  match(value)
 *   .with(__, () => 'will always match')
 *   .with(__.string, () => 'will match on strings only')
 *   .with(__.number, () => 'will match on numbers only')
 *   .with(__.NaN, () => 'will match on NaN')
 *   .with(__.boolean, () => 'will match on booleans only')
 *   .with(__.nullish, () => 'will match on null or undefined only')
 */
export declare const __: import("./types/Pattern").GuardPattern<unknown, unknown> & {
    string: import("./types/Pattern").GuardPattern<unknown, string>;
    number: import("./types/Pattern").GuardPattern<unknown, number>;
    NaN: import("./types/Pattern").GuardPattern<unknown, never>;
    boolean: import("./types/Pattern").GuardPattern<unknown, boolean>;
    nullish: import("./types/Pattern").GuardPattern<unknown, null | undefined>;
};
