{"version":3,"sources":["../src/drawer.tsx","../src/modal.tsx","../src/use-modal.ts","../src/modal-manager.ts","../src/modal-body.tsx","../src/modal-close-button.tsx","../src/modal-footer.tsx","../src/modal-header.tsx","../src/modal-overlay.tsx"],"sourcesContent":["import { createContext } from \"@chakra-ui/react-context\"\nimport { ThemingProps, useTheme } from \"@chakra-ui/system\"\nimport { SlideOptions } from \"@chakra-ui/transition\"\nimport { Modal, ModalProps } from \"./modal\"\n\nconst [DrawerContextProvider, useDrawerContext] = createContext<DrawerOptions>()\n\ntype LogicalPlacement = \"start\" | \"end\"\ntype LogicalPlacementMap = Record<\n  LogicalPlacement,\n  { ltr: SlideOptions[\"direction\"]; rtl: SlideOptions[\"direction\"] }\n>\ntype DrawerPlacement = SlideOptions[\"direction\"] | LogicalPlacement\n\nconst placementMap: LogicalPlacementMap = {\n  start: { ltr: \"left\", rtl: \"right\" },\n  end: { ltr: \"right\", rtl: \"left\" },\n}\n\nfunction getDrawerPlacement(\n  placement: DrawerPlacement | undefined,\n  dir: \"ltr\" | \"rtl\",\n) {\n  if (!placement) return\n  //@ts-expect-error\n  return placementMap[placement]?.[dir] ?? placement\n}\n\ninterface DrawerOptions {\n  /**\n   * The placement of the drawer\n   * @default \"right\"\n   */\n  placement?: DrawerPlacement\n  /**\n   * If `true` and drawer's placement is `top` or `bottom`,\n   * the drawer will occupy the viewport height (100vh)\n   */\n  isFullHeight?: boolean\n}\n\nexport interface DrawerProps\n  extends DrawerOptions,\n    ThemingProps<\"Drawer\">,\n    Omit<\n      ModalProps,\n      \"scrollBehavior\" | \"motionPreset\" | \"isCentered\" | keyof ThemingProps\n    > {}\n\n/**\n * The Drawer component is a panel that slides out from the edge of the screen.\n * It can be useful when you need users to complete a task or view some details without leaving the current page.\n *\n * @see Docs https://chakra-ui.com/docs/components/drawer\n */\nexport function Drawer(props: DrawerProps) {\n  const {\n    isOpen,\n    onClose,\n    placement: placementProp = \"right\",\n    children,\n    ...rest\n  } = props\n\n  const theme = useTheme()\n  const drawerStyleConfig = theme.components?.Drawer\n  const placement = getDrawerPlacement(placementProp, theme.direction)\n\n  return (\n    <DrawerContextProvider value={{ placement }}>\n      <Modal\n        isOpen={isOpen}\n        onClose={onClose}\n        styleConfig={drawerStyleConfig}\n        {...rest}\n      >\n        {children}\n      </Modal>\n    </DrawerContextProvider>\n  )\n}\n\nexport { ModalBody as DrawerBody } from \"./modal-body\"\nexport { ModalCloseButton as DrawerCloseButton } from \"./modal-close-button\"\nexport { ModalFooter as DrawerFooter } from \"./modal-footer\"\nexport { ModalHeader as DrawerHeader } from \"./modal-header\"\nexport { ModalOverlay as DrawerOverlay } from \"./modal-overlay\"\n\nexport { useDrawerContext }\n","import { FocusLockProps } from \"@chakra-ui/focus-lock\"\nimport { Portal, PortalProps } from \"@chakra-ui/portal\"\nimport { createContext } from \"@chakra-ui/react-context\"\nimport {\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n} from \"@chakra-ui/system\"\nimport { AnimatePresence } from \"framer-motion\"\nimport { useModal, UseModalProps, UseModalReturn } from \"./use-modal\"\n\ninterface FocusableElement {\n  focus(options?: FocusOptions): void\n}\n\nconst [ModalStylesProvider, useModalStyles] = createContext<\n  Record<string, SystemStyleObject>\n>({\n  name: `ModalStylesContext`,\n  errorMessage: `useModalStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<Modal />\" `,\n})\n\nexport { ModalContextProvider, useModalContext, useModalStyles }\n\ninterface ModalOptions extends Pick<FocusLockProps, \"lockFocusAcrossFrames\"> {\n  /**\n   * If `false`, focus lock will be disabled completely.\n   *\n   * This is useful in situations where you still need to interact with\n   * other surrounding elements.\n   *\n   * ðŸš¨Warning: We don't recommend doing this because it hurts the\n   * accessibility of the modal, based on WAI-ARIA specifications.\n   *\n   * @default true\n   */\n  trapFocus?: boolean\n  /**\n   * If `true`, the modal will autofocus the first enabled and interactive\n   * element within the `ModalContent`\n   *\n   * @default true\n   */\n  autoFocus?: boolean\n  /**\n   * The `ref` of element to receive focus when the modal opens.\n   */\n  initialFocusRef?: React.RefObject<FocusableElement>\n  /**\n   * The `ref` of element to receive focus when the modal closes.\n   */\n  finalFocusRef?: React.RefObject<FocusableElement>\n  /**\n   * If `true`, the modal will return focus to the element that triggered it when it closes.\n   * @default true\n   */\n  returnFocusOnClose?: boolean\n  /**\n   * If `true`, scrolling will be disabled on the `body` when the modal opens.\n   * @default true\n   */\n  blockScrollOnMount?: boolean\n  /**\n   * Handle zoom/pinch gestures on iOS devices when scroll locking is enabled.\n   * @default false.\n   */\n  allowPinchZoom?: boolean\n  /**\n   * If `true`, a `padding-right` will be applied to the body element\n   * that's equal to the width of the scrollbar.\n   *\n   * This can help prevent some unpleasant flickering effect\n   * and content adjustment when the modal opens\n   *\n   * @default true\n   */\n  preserveScrollBarGap?: boolean\n}\n\ntype ScrollBehavior = \"inside\" | \"outside\"\n\ntype MotionPreset =\n  | \"slideInBottom\"\n  | \"slideInRight\"\n  | \"slideInTop\"\n  | \"slideInLeft\"\n  | \"scale\"\n  | \"none\"\n\nexport interface ModalProps\n  extends UseModalProps,\n    ModalOptions,\n    ThemingProps<\"Modal\"> {\n  children: React.ReactNode\n  /**\n   *  If `true`, the modal will be centered on screen.\n   * @default false\n   */\n  isCentered?: boolean\n  /**\n   * Where scroll behavior should originate.\n   * - If set to `inside`, scroll only occurs within the `ModalBody`.\n   * - If set to `outside`, the entire `ModalContent` will scroll within the viewport.\n   *\n   * @default \"outside\"\n   */\n  scrollBehavior?: ScrollBehavior\n  /**\n   * Props to be forwarded to the portal component\n   */\n  portalProps?: Pick<PortalProps, \"appendToParentPortal\" | \"containerRef\">\n  /**\n   * The transition that should be used for the modal\n   * @default \"scale\"\n   */\n  motionPreset?: MotionPreset\n  /**\n   * Fires when all exiting nodes have completed animating out\n   */\n  onCloseComplete?: () => void\n}\n\ninterface ModalContext extends ModalOptions, UseModalReturn {\n  /**\n   * The transition that should be used for the modal\n   */\n  motionPreset?: MotionPreset\n}\n\nconst [ModalContextProvider, useModalContext] = createContext<ModalContext>({\n  strict: true,\n  name: \"ModalContext\",\n  errorMessage:\n    \"useModalContext: `context` is undefined. Seems you forgot to wrap modal components in `<Modal />`\",\n})\n\n/**\n * Modal provides context, theming, and accessibility properties\n * to all other modal components.\n *\n * It doesn't render any DOM node.\n *\n * @see Docs https://chakra-ui.com/docs/components/modal\n * @see WAI-ARIA https://www.w3.org/WAI/ARIA/apg/patterns/dialogmodal/\n */\nexport const Modal: React.FC<ModalProps> = (props) => {\n  const modalProps: ModalProps = {\n    scrollBehavior: \"outside\",\n    autoFocus: true,\n    trapFocus: true,\n    returnFocusOnClose: true,\n    blockScrollOnMount: true,\n    allowPinchZoom: false,\n    motionPreset: \"scale\",\n    lockFocusAcrossFrames: true,\n    ...props,\n  }\n\n  const {\n    portalProps,\n    children,\n    autoFocus,\n    trapFocus,\n    initialFocusRef,\n    finalFocusRef,\n    returnFocusOnClose,\n    blockScrollOnMount,\n    allowPinchZoom,\n    preserveScrollBarGap,\n    motionPreset,\n    lockFocusAcrossFrames,\n    onCloseComplete,\n  } = modalProps\n\n  const styles = useMultiStyleConfig(\"Modal\", modalProps)\n  const modal = useModal(modalProps)\n\n  const context = {\n    ...modal,\n    autoFocus,\n    trapFocus,\n    initialFocusRef,\n    finalFocusRef,\n    returnFocusOnClose,\n    blockScrollOnMount,\n    allowPinchZoom,\n    preserveScrollBarGap,\n    motionPreset,\n    lockFocusAcrossFrames,\n  }\n\n  return (\n    <ModalContextProvider value={context}>\n      <ModalStylesProvider value={styles}>\n        <AnimatePresence onExitComplete={onCloseComplete}>\n          {context.isOpen && <Portal {...portalProps}>{children}</Portal>}\n        </AnimatePresence>\n      </ModalStylesProvider>\n    </ModalContextProvider>\n  )\n}\n\nModal.displayName = \"Modal\"\n","import { callAllHandlers } from \"@chakra-ui/shared-utils\"\nimport { PropGetter } from \"@chakra-ui/react-types\"\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\"\nimport { hideOthers } from \"aria-hidden\"\n\nimport { useCallback, useEffect, useId, useMemo, useRef, useState } from \"react\"\nimport { modalManager, useModalManager } from \"./modal-manager\"\n\nexport interface UseModalProps {\n  /**\n   * If `true`, the modal will be open.\n   */\n  isOpen: boolean\n  /**\n   * The `id` of the modal\n   */\n  id?: string\n  /**\n   * Callback invoked to close the modal.\n   */\n  onClose(): void\n  /**\n   * If `true`, the modal will close when the overlay is clicked\n   * @default true\n   */\n  closeOnOverlayClick?: boolean\n  /**\n   * If `true`, the modal will close when the `Esc` key is pressed\n   * @default true\n   */\n  closeOnEsc?: boolean\n  /**\n   * Callback fired when the overlay is clicked.\n   */\n  onOverlayClick?(): void\n  /**\n   * Callback fired when the escape key is pressed and focus is within modal\n   */\n  onEsc?(): void\n  /**\n   * A11y: If `true`, the siblings of the `modal` will have `aria-hidden`\n   * set to `true` so that screen readers can only see the `modal`.\n   *\n   * This is commonly known as making the other elements **inert**\n   *\n   * @default true\n   */\n  useInert?: boolean\n}\n\n/**\n * Modal hook that manages all the logic for the modal dialog widget\n * and returns prop getters, state and actions.\n *\n * @param props\n */\nexport function useModal(props: UseModalProps) {\n  const {\n    isOpen,\n    onClose,\n    id,\n    closeOnOverlayClick = true,\n    closeOnEsc = true,\n    useInert = true,\n    onOverlayClick: onOverlayClickProp,\n    onEsc,\n  } = props\n\n  const dialogRef = useRef<HTMLElement>(null)\n  const overlayRef = useRef<HTMLElement>(null)\n\n  const [dialogId, headerId, bodyId] = useIds(\n    id,\n    `chakra-modal`,\n    `chakra-modal--header`,\n    `chakra-modal--body`,\n  )\n\n  /**\n   * Hook used to polyfill `aria-modal` for older browsers.\n   * It uses `aria-hidden` to all other nodes.\n   *\n   * @see https://developer.paciellogroup.com/blog/2018/06/the-current-state-of-modal-dialog-accessibility/\n   */\n  useAriaHidden(dialogRef, isOpen && useInert)\n  /**\n   * Hook used to manage multiple or nested modals\n   */\n  const index = useModalManager(dialogRef, isOpen)\n\n  const mouseDownTarget = useRef<EventTarget | null>(null)\n\n  const onMouseDown = useCallback((event: React.MouseEvent) => {\n    mouseDownTarget.current = event.target\n  }, [])\n\n  const onKeyDown = useCallback(\n    (event: React.KeyboardEvent) => {\n      if (event.key === \"Escape\") {\n        event.stopPropagation()\n\n        if (closeOnEsc) {\n          onClose?.()\n        }\n\n        onEsc?.()\n      }\n    },\n    [closeOnEsc, onClose, onEsc],\n  )\n\n  const [headerMounted, setHeaderMounted] = useState(false)\n  const [bodyMounted, setBodyMounted] = useState(false)\n\n  const getDialogProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      role: \"dialog\",\n      ...props,\n      ref: mergeRefs(ref, dialogRef),\n      id: dialogId,\n      tabIndex: -1,\n      \"aria-modal\": true,\n      \"aria-labelledby\": headerMounted ? headerId : undefined,\n      \"aria-describedby\": bodyMounted ? bodyId : undefined,\n      onClick: callAllHandlers(props.onClick, (event: React.MouseEvent) =>\n        event.stopPropagation(),\n      ),\n    }),\n    [bodyId, bodyMounted, dialogId, headerId, headerMounted],\n  )\n\n  const onOverlayClick = useCallback(\n    (event: React.MouseEvent) => {\n      event.stopPropagation()\n      /**\n       * Make sure the event starts and ends on the same DOM element.\n       *\n       * This is used to prevent the modal from closing when you\n       * start dragging from the content, and release drag outside the content.\n       *\n       * We prevent this because it is technically not a considered \"click outside\"\n       */\n      if (mouseDownTarget.current !== event.target) return\n\n      /**\n       * When you click on the overlay, we want to remove only the topmost modal\n       */\n      if (!modalManager.isTopModal(dialogRef.current)) return\n\n      if (closeOnOverlayClick) {\n        onClose?.()\n      }\n\n      onOverlayClickProp?.()\n    },\n    [onClose, closeOnOverlayClick, onOverlayClickProp],\n  )\n\n  const getDialogContainerProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ...props,\n      ref: mergeRefs(ref, overlayRef),\n      onClick: callAllHandlers(props.onClick, onOverlayClick),\n      onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n      onMouseDown: callAllHandlers(props.onMouseDown, onMouseDown),\n    }),\n    [onKeyDown, onMouseDown, onOverlayClick],\n  )\n\n  return {\n    isOpen,\n    onClose,\n    headerId,\n    bodyId,\n    setBodyMounted,\n    setHeaderMounted,\n    dialogRef,\n    overlayRef,\n    getDialogProps,\n    getDialogContainerProps,\n    index,\n  }\n}\n\nexport type UseModalReturn = ReturnType<typeof useModal>\n\n/**\n * Modal hook to polyfill `aria-modal`.\n *\n * It applies `aria-hidden` to elements behind the modal\n * to indicate that they're `inert`.\n *\n * @param ref React ref of the node\n * @param shouldHide whether `aria-hidden` should be applied\n */\nexport function useAriaHidden(\n  ref: React.RefObject<HTMLElement>,\n  shouldHide: boolean,\n) {\n  // save current ref in a local var to trigger the effect on identity change\n  const currentElement = ref.current\n\n  useEffect(() => {\n    // keep using `ref.current` inside the effect\n    // it may have changed during render and the execution of the effect\n    if (!ref.current || !shouldHide) return undefined\n\n    return hideOthers(ref.current)\n  }, [shouldHide, ref, currentElement])\n}\n\nfunction useIds(idProp?: string, ...prefixes: string[]) {\n  const reactId = useId()\n  const id = idProp || reactId\n  return useMemo(() => {\n    return prefixes.map((prefix) => `${prefix}-${id}`)\n  }, [id, prefixes])\n}\n","import { RefObject, useEffect, useState } from \"react\"\n\n/**\n * Proper state management for nested modals.\n * Simplified, but inspired by material-ui's ModalManager class.\n */\nclass ModalManager {\n  modals: Map<HTMLElement, number>\n  constructor() {\n    this.modals = new Map()\n  }\n\n  add(modal: HTMLElement) {\n    this.modals.set(modal, this.modals.size + 1)\n    return this.modals.size\n  }\n\n  remove(modal: HTMLElement) {\n    this.modals.delete(modal)\n  }\n\n  isTopModal(modal: HTMLElement | null) {\n    if (!modal) return false\n    return this.modals.get(modal) === this.modals.size\n  }\n}\n\nexport const modalManager = new ModalManager()\n\nexport function useModalManager(ref: RefObject<HTMLElement>, isOpen?: boolean) {\n  const [index, setIndex] = useState(0)\n\n  useEffect(() => {\n    const node = ref.current\n\n    if (!node) return\n\n    if (isOpen) {\n      const index = modalManager.add(node)\n      setIndex(index)\n    }\n\n    return () => {\n      modalManager.remove(node)\n      setIndex(0)\n    }\n  }, [isOpen, ref])\n\n  return index\n}\n","import { cx } from \"@chakra-ui/shared-utils\"\nimport { HTMLChakraProps, chakra, forwardRef } from \"@chakra-ui/system\"\nimport { useEffect } from \"react\"\n\nimport { useModalContext, useModalStyles } from \"./modal\"\n\nexport interface ModalBodyProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * ModalBody\n *\n * React component that houses the main content of the modal.\n *\n * @see Docs https://chakra-ui.com/modal\n */\nexport const ModalBody = forwardRef<ModalBodyProps, \"div\">((props, ref) => {\n  const { className, ...rest } = props\n  const { bodyId, setBodyMounted } = useModalContext()\n\n  /**\n   * Notify us if this component was rendered or used,\n   * so we can append `aria-describedby` automatically\n   */\n  useEffect(() => {\n    setBodyMounted(true)\n    return () => setBodyMounted(false)\n  }, [setBodyMounted])\n\n  const _className = cx(\"chakra-modal__body\", className)\n  const styles = useModalStyles()\n\n  return (\n    <chakra.div\n      ref={ref}\n      className={_className}\n      id={bodyId}\n      {...rest}\n      __css={styles.body}\n    />\n  )\n})\n\nModalBody.displayName = \"ModalBody\"\n","import { CloseButtonProps, CloseButton } from \"@chakra-ui/close-button\"\nimport { cx, callAllHandlers } from \"@chakra-ui/shared-utils\"\nimport { forwardRef } from \"@chakra-ui/system\"\n\nimport { useModalContext, useModalStyles } from \"./modal\"\n\nexport type ModalCloseButtonProps = CloseButtonProps\n\n/**\n * ModalCloseButton is used closes the modal.\n *\n * You don't need to pass the `onClick` to it, it reads the\n * `onClose` action from the modal context.\n */\nexport const ModalCloseButton = forwardRef<CloseButtonProps, \"button\">(\n  (props, ref) => {\n    const { onClick, className, ...rest } = props\n    const { onClose } = useModalContext()\n\n    const _className = cx(\"chakra-modal__close-btn\", className)\n\n    const styles = useModalStyles()\n\n    return (\n      <CloseButton\n        ref={ref}\n        __css={styles.closeButton}\n        className={_className}\n        onClick={callAllHandlers(onClick, (event: React.MouseEvent) => {\n          event.stopPropagation()\n          onClose()\n        })}\n        {...rest}\n      />\n    )\n  },\n)\n\nModalCloseButton.displayName = \"ModalCloseButton\"\n","import { cx } from \"@chakra-ui/shared-utils\"\nimport {\n  HTMLChakraProps,\n  SystemStyleObject,\n  chakra,\n  forwardRef,\n} from \"@chakra-ui/system\"\n\nimport { useModalStyles } from \"./modal\"\n\nexport interface ModalFooterProps extends HTMLChakraProps<\"footer\"> {}\n\n/**\n * ModalFooter houses the action buttons of the modal.\n * @see Docs https://chakra-ui.com/modal\n */\nexport const ModalFooter = forwardRef<ModalFooterProps, \"footer\">(\n  (props, ref) => {\n    const { className, ...rest } = props\n    const _className = cx(\"chakra-modal__footer\", className)\n\n    const styles = useModalStyles()\n    const footerStyles: SystemStyleObject = {\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"flex-end\",\n      ...styles.footer,\n    }\n\n    return (\n      <chakra.footer\n        ref={ref}\n        {...rest}\n        __css={footerStyles}\n        className={_className}\n      />\n    )\n  },\n)\n\nModalFooter.displayName = \"ModalFooter\"\n","import { cx } from \"@chakra-ui/shared-utils\"\nimport {\n  HTMLChakraProps,\n  SystemStyleObject,\n  chakra,\n  forwardRef,\n} from \"@chakra-ui/system\"\nimport { useEffect } from \"react\"\n\nimport { useModalContext, useModalStyles } from \"./modal\"\n\nexport interface ModalHeaderProps extends HTMLChakraProps<\"header\"> {}\n\n/**\n * ModalHeader\n *\n * React component that houses the title of the modal.\n *\n * @see Docs https://chakra-ui.com/modal\n */\nexport const ModalHeader = forwardRef<ModalHeaderProps, \"header\">(\n  (props, ref) => {\n    const { className, ...rest } = props\n\n    const { headerId, setHeaderMounted } = useModalContext()\n\n    /**\n     * Notify us if this component was rendered or used,\n     * so we can append `aria-labelledby` automatically\n     */\n    useEffect(() => {\n      setHeaderMounted(true)\n      return () => setHeaderMounted(false)\n    }, [setHeaderMounted])\n\n    const _className = cx(\"chakra-modal__header\", className)\n\n    const styles = useModalStyles()\n    const headerStyles: SystemStyleObject = {\n      flex: 0,\n      ...styles.header,\n    }\n\n    return (\n      <chakra.header\n        ref={ref}\n        className={_className}\n        id={headerId}\n        {...rest}\n        __css={headerStyles}\n      />\n    )\n  },\n)\n\nModalHeader.displayName = \"ModalHeader\"\n","import { cx } from \"@chakra-ui/shared-utils\"\nimport {\n  chakra,\n  ChakraProps,\n  SystemStyleObject,\n  forwardRef,\n} from \"@chakra-ui/system\"\nimport { fadeConfig } from \"@chakra-ui/transition\"\nimport { motion, HTMLMotionProps } from \"framer-motion\"\n\nimport { useModalStyles, useModalContext } from \"./modal\"\n\nconst MotionDiv = chakra(motion.div)\n\nexport interface ModalOverlayProps\n  extends Omit<HTMLMotionProps<\"div\">, \"color\" | \"transition\">,\n    ChakraProps {\n  children?: React.ReactNode\n  motionProps?: HTMLMotionProps<\"div\">\n}\n\n/**\n * ModalOverlay renders a backdrop behind the modal. It is\n * also used as a wrapper for the modal content for better positioning.\n *\n * @see Docs https://chakra-ui.com/modal\n */\nexport const ModalOverlay = forwardRef<ModalOverlayProps, \"div\">(\n  (props, ref) => {\n    const { className, transition, motionProps: _motionProps, ...rest } = props\n    const _className = cx(\"chakra-modal__overlay\", className)\n\n    const styles = useModalStyles()\n    const overlayStyle: SystemStyleObject = {\n      pos: \"fixed\",\n      left: \"0\",\n      top: \"0\",\n      w: \"100vw\",\n      h: \"100vh\",\n      ...styles.overlay,\n    }\n\n    const { motionPreset } = useModalContext()\n    const defaultMotionProps: HTMLMotionProps<\"div\"> =\n      motionPreset === \"none\" ? {} : fadeConfig\n\n    const motionProps: any = _motionProps || defaultMotionProps\n\n    return (\n      <MotionDiv\n        {...motionProps}\n        __css={overlayStyle}\n        ref={ref}\n        className={_className}\n        {...rest}\n      />\n    )\n  },\n)\n\nModalOverlay.displayName = \"ModalOverlay\"\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAAA,wBAA8B;AAC9B,IAAAC,iBAAuC;;;ACAvC,oBAAoC;AACpC,2BAA8B;AAC9B,oBAIO;AACP,2BAAgC;;;ACRhC,0BAAgC;AAEhC,kCAA0B;AAC1B,yBAA2B;AAE3B,IAAAC,gBAAyE;;;ACLzE,mBAA+C;AAM/C,IAAM,eAAN,MAAmB;AAAA,EAEjB,cAAc;AADd;AAEE,SAAK,SAAS,oBAAI,IAAI;AAAA,EACxB;AAAA,EAEA,IAAI,OAAoB;AACtB,SAAK,OAAO,IAAI,OAAO,KAAK,OAAO,OAAO,CAAC;AAC3C,WAAO,KAAK,OAAO;AAAA,EACrB;AAAA,EAEA,OAAO,OAAoB;AACzB,SAAK,OAAO,OAAO,KAAK;AAAA,EAC1B;AAAA,EAEA,WAAW,OAA2B;AACpC,QAAI,CAAC;AAAO,aAAO;AACnB,WAAO,KAAK,OAAO,IAAI,KAAK,MAAM,KAAK,OAAO;AAAA,EAChD;AACF;AAEO,IAAM,eAAe,IAAI,aAAa;AAEtC,SAAS,gBAAgB,KAA6B,QAAkB;AAC7E,QAAM,CAAC,OAAO,QAAQ,QAAI,uBAAS,CAAC;AAEpC,8BAAU,MAAM;AACd,UAAM,OAAO,IAAI;AAEjB,QAAI,CAAC;AAAM;AAEX,QAAI,QAAQ;AACV,YAAMC,SAAQ,aAAa,IAAI,IAAI;AACnC,eAASA,MAAK;AAAA,IAChB;AAEA,WAAO,MAAM;AACX,mBAAa,OAAO,IAAI;AACxB,eAAS,CAAC;AAAA,IACZ;AAAA,EACF,GAAG,CAAC,QAAQ,GAAG,CAAC;AAEhB,SAAO;AACT;;;ADOO,SAAS,SAAS,OAAsB;AAC7C,QAAM;AAAA,IACJ;AAAA,IACA;AAAA,IACA;AAAA,IACA,sBAAsB;AAAA,IACtB,aAAa;AAAA,IACb,WAAW;AAAA,IACX,gBAAgB;AAAA,IAChB;AAAA,EACF,IAAI;AAEJ,QAAM,gBAAY,sBAAoB,IAAI;AAC1C,QAAM,iBAAa,sBAAoB,IAAI;AAE3C,QAAM,CAAC,UAAU,UAAU,MAAM,IAAI;AAAA,IACnC;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AAQA,gBAAc,WAAW,UAAU,QAAQ;AAI3C,QAAM,QAAQ,gBAAgB,WAAW,MAAM;AAE/C,QAAM,sBAAkB,sBAA2B,IAAI;AAEvD,QAAM,kBAAc,2BAAY,CAAC,UAA4B;AAC3D,oBAAgB,UAAU,MAAM;AAAA,EAClC,GAAG,CAAC,CAAC;AAEL,QAAM,gBAAY;AAAA,IAChB,CAAC,UAA+B;AAC9B,UAAI,MAAM,QAAQ,UAAU;AAC1B,cAAM,gBAAgB;AAEtB,YAAI,YAAY;AACd;AAAA,QACF;AAEA;AAAA,MACF;AAAA,IACF;AAAA,IACA,CAAC,YAAY,SAAS,KAAK;AAAA,EAC7B;AAEA,QAAM,CAAC,eAAe,gBAAgB,QAAI,wBAAS,KAAK;AACxD,QAAM,CAAC,aAAa,cAAc,QAAI,wBAAS,KAAK;AAEpD,QAAM,qBAA6B;AAAA,IACjC,CAACC,SAAQ,CAAC,GAAG,MAAM,UAAU;AAAA,MAC3B,MAAM;AAAA,MACN,GAAGA;AAAA,MACH,SAAK,uCAAU,KAAK,SAAS;AAAA,MAC7B,IAAI;AAAA,MACJ,UAAU;AAAA,MACV,cAAc;AAAA,MACd,mBAAmB,gBAAgB,WAAW;AAAA,MAC9C,oBAAoB,cAAc,SAAS;AAAA,MAC3C,aAAS;AAAA,QAAgBA,OAAM;AAAA,QAAS,CAAC,UACvC,MAAM,gBAAgB;AAAA,MACxB;AAAA,IACF;AAAA,IACA,CAAC,QAAQ,aAAa,UAAU,UAAU,aAAa;AAAA,EACzD;AAEA,QAAM,qBAAiB;AAAA,IACrB,CAAC,UAA4B;AAC3B,YAAM,gBAAgB;AAStB,UAAI,gBAAgB,YAAY,MAAM;AAAQ;AAK9C,UAAI,CAAC,aAAa,WAAW,UAAU,OAAO;AAAG;AAEjD,UAAI,qBAAqB;AACvB;AAAA,MACF;AAEA;AAAA,IACF;AAAA,IACA,CAAC,SAAS,qBAAqB,kBAAkB;AAAA,EACnD;AAEA,QAAM,8BAAsC;AAAA,IAC1C,CAACA,SAAQ,CAAC,GAAG,MAAM,UAAU;AAAA,MAC3B,GAAGA;AAAA,MACH,SAAK,uCAAU,KAAK,UAAU;AAAA,MAC9B,aAAS,qCAAgBA,OAAM,SAAS,cAAc;AAAA,MACtD,eAAW,qCAAgBA,OAAM,WAAW,SAAS;AAAA,MACrD,iBAAa,qCAAgBA,OAAM,aAAa,WAAW;AAAA,IAC7D;AAAA,IACA,CAAC,WAAW,aAAa,cAAc;AAAA,EACzC;AAEA,SAAO;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACF;AAaO,SAAS,cACd,KACA,YACA;AAEA,QAAM,iBAAiB,IAAI;AAE3B,+BAAU,MAAM;AAGd,QAAI,CAAC,IAAI,WAAW,CAAC;AAAY,aAAO;AAExC,eAAO,+BAAW,IAAI,OAAO;AAAA,EAC/B,GAAG,CAAC,YAAY,KAAK,cAAc,CAAC;AACtC;AAEA,SAAS,OAAO,WAAoB,UAAoB;AACtD,QAAM,cAAU,qBAAM;AACtB,QAAM,KAAK,UAAU;AACrB,aAAO,uBAAQ,MAAM;AACnB,WAAO,SAAS,IAAI,CAAC,WAAW,GAAG,MAAM,IAAI,EAAE,EAAE;AAAA,EACnD,GAAG,CAAC,IAAI,QAAQ,CAAC;AACnB;;;ADtB6B;AApL7B,IAAM,CAAC,qBAAqB,cAAc,QAAI,oCAE5C;AAAA,EACA,MAAM;AAAA,EACN,cAAc;AAChB,CAAC;AA6GD,IAAM,CAAC,sBAAsB,eAAe,QAAI,oCAA4B;AAAA,EAC1E,QAAQ;AAAA,EACR,MAAM;AAAA,EACN,cACE;AACJ,CAAC;AAWM,IAAM,QAA8B,CAAC,UAAU;AACpD,QAAM,aAAyB;AAAA,IAC7B,gBAAgB;AAAA,IAChB,WAAW;AAAA,IACX,WAAW;AAAA,IACX,oBAAoB;AAAA,IACpB,oBAAoB;AAAA,IACpB,gBAAgB;AAAA,IAChB,cAAc;AAAA,IACd,uBAAuB;AAAA,IACvB,GAAG;AAAA,EACL;AAEA,QAAM;AAAA,IACJ;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF,IAAI;AAEJ,QAAM,aAAS,mCAAoB,SAAS,UAAU;AACtD,QAAM,QAAQ,SAAS,UAAU;AAEjC,QAAM,UAAU;AAAA,IACd,GAAG;AAAA,IACH;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AAEA,SACE,4CAAC,wBAAqB,OAAO,SAC3B,sDAAC,uBAAoB,OAAO,QAC1B,sDAAC,wCAAgB,gBAAgB,iBAC9B,kBAAQ,UAAU,4CAAC,wBAAQ,GAAG,aAAc,UAAS,GACxD,GACF,GACF;AAEJ;AAEA,MAAM,cAAc;;;AG1MpB,IAAAC,uBAAmB;AACnB,IAAAC,iBAAoD;AACpD,IAAAC,gBAA0B;AA8BtB,IAAAC,sBAAA;AAjBG,IAAM,gBAAY,2BAAkC,CAAC,OAAO,QAAQ;AACzE,QAAM,EAAE,WAAW,GAAG,KAAK,IAAI;AAC/B,QAAM,EAAE,QAAQ,eAAe,IAAI,gBAAgB;AAMnD,+BAAU,MAAM;AACd,mBAAe,IAAI;AACnB,WAAO,MAAM,eAAe,KAAK;AAAA,EACnC,GAAG,CAAC,cAAc,CAAC;AAEnB,QAAM,iBAAa,yBAAG,sBAAsB,SAAS;AACrD,QAAM,SAAS,eAAe;AAE9B,SACE;AAAA,IAAC,sBAAO;AAAA,IAAP;AAAA,MACC;AAAA,MACA,WAAW;AAAA,MACX,IAAI;AAAA,MACH,GAAG;AAAA,MACJ,OAAO,OAAO;AAAA;AAAA,EAChB;AAEJ,CAAC;AAED,UAAU,cAAc;;;AC1CxB,0BAA8C;AAC9C,IAAAC,uBAAoC;AACpC,IAAAC,iBAA2B;AAsBrB,IAAAC,sBAAA;AAVC,IAAM,uBAAmB;AAAA,EAC9B,CAAC,OAAO,QAAQ;AACd,UAAM,EAAE,SAAS,WAAW,GAAG,KAAK,IAAI;AACxC,UAAM,EAAE,QAAQ,IAAI,gBAAgB;AAEpC,UAAM,iBAAa,yBAAG,2BAA2B,SAAS;AAE1D,UAAM,SAAS,eAAe;AAE9B,WACE;AAAA,MAAC;AAAA;AAAA,QACC;AAAA,QACA,OAAO,OAAO;AAAA,QACd,WAAW;AAAA,QACX,aAAS,sCAAgB,SAAS,CAAC,UAA4B;AAC7D,gBAAM,gBAAgB;AACtB,kBAAQ;AAAA,QACV,CAAC;AAAA,QACA,GAAG;AAAA;AAAA,IACN;AAAA,EAEJ;AACF;AAEA,iBAAiB,cAAc;;;ACtC/B,IAAAC,uBAAmB;AACnB,IAAAC,iBAKO;AAwBD,IAAAC,sBAAA;AAdC,IAAM,kBAAc;AAAA,EACzB,CAAC,OAAO,QAAQ;AACd,UAAM,EAAE,WAAW,GAAG,KAAK,IAAI;AAC/B,UAAM,iBAAa,yBAAG,wBAAwB,SAAS;AAEvD,UAAM,SAAS,eAAe;AAC9B,UAAM,eAAkC;AAAA,MACtC,SAAS;AAAA,MACT,YAAY;AAAA,MACZ,gBAAgB;AAAA,MAChB,GAAG,OAAO;AAAA,IACZ;AAEA,WACE;AAAA,MAAC,sBAAO;AAAA,MAAP;AAAA,QACC;AAAA,QACC,GAAG;AAAA,QACJ,OAAO;AAAA,QACP,WAAW;AAAA;AAAA,IACb;AAAA,EAEJ;AACF;AAEA,YAAY,cAAc;;;ACxC1B,IAAAC,uBAAmB;AACnB,IAAAC,iBAKO;AACP,IAAAC,gBAA0B;AAqCpB,IAAAC,sBAAA;AAxBC,IAAM,kBAAc;AAAA,EACzB,CAAC,OAAO,QAAQ;AACd,UAAM,EAAE,WAAW,GAAG,KAAK,IAAI;AAE/B,UAAM,EAAE,UAAU,iBAAiB,IAAI,gBAAgB;AAMvD,iCAAU,MAAM;AACd,uBAAiB,IAAI;AACrB,aAAO,MAAM,iBAAiB,KAAK;AAAA,IACrC,GAAG,CAAC,gBAAgB,CAAC;AAErB,UAAM,iBAAa,yBAAG,wBAAwB,SAAS;AAEvD,UAAM,SAAS,eAAe;AAC9B,UAAM,eAAkC;AAAA,MACtC,MAAM;AAAA,MACN,GAAG,OAAO;AAAA,IACZ;AAEA,WACE;AAAA,MAAC,sBAAO;AAAA,MAAP;AAAA,QACC;AAAA,QACA,WAAW;AAAA,QACX,IAAI;AAAA,QACH,GAAG;AAAA,QACJ,OAAO;AAAA;AAAA,IACT;AAAA,EAEJ;AACF;AAEA,YAAY,cAAc;;;ACvD1B,IAAAC,uBAAmB;AACnB,IAAAC,iBAKO;AACP,wBAA2B;AAC3B,IAAAC,wBAAwC;AAyClC,IAAAC,sBAAA;AArCN,IAAM,gBAAY,uBAAO,6BAAO,GAAG;AAe5B,IAAM,mBAAe;AAAA,EAC1B,CAAC,OAAO,QAAQ;AACd,UAAM,EAAE,WAAW,YAAY,aAAa,cAAc,GAAG,KAAK,IAAI;AACtE,UAAM,iBAAa,yBAAG,yBAAyB,SAAS;AAExD,UAAM,SAAS,eAAe;AAC9B,UAAM,eAAkC;AAAA,MACtC,KAAK;AAAA,MACL,MAAM;AAAA,MACN,KAAK;AAAA,MACL,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG,OAAO;AAAA,IACZ;AAEA,UAAM,EAAE,aAAa,IAAI,gBAAgB;AACzC,UAAM,qBACJ,iBAAiB,SAAS,CAAC,IAAI;AAEjC,UAAM,cAAmB,gBAAgB;AAEzC,WACE;AAAA,MAAC;AAAA;AAAA,QACE,GAAG;AAAA,QACJ,OAAO;AAAA,QACP;AAAA,QACA,WAAW;AAAA,QACV,GAAG;AAAA;AAAA,IACN;AAAA,EAEJ;AACF;AAEA,aAAa,cAAc;;;ARUrB,IAAAC,sBAAA;AAjEN,IAAM,CAAC,uBAAuB,gBAAgB,QAAI,qCAA6B;AAS/E,IAAM,eAAoC;AAAA,EACxC,OAAO,EAAE,KAAK,QAAQ,KAAK,QAAQ;AAAA,EACnC,KAAK,EAAE,KAAK,SAAS,KAAK,OAAO;AACnC;AAEA,SAAS,mBACP,WACA,KACA;AAtBF;AAuBE,MAAI,CAAC;AAAW;AAEhB,UAAO,wBAAa,SAAS,MAAtB,mBAA0B,SAA1B,YAAkC;AAC3C;AA6BO,SAAS,OAAO,OAAoB;AAvD3C;AAwDE,QAAM;AAAA,IACJ;AAAA,IACA;AAAA,IACA,WAAW,gBAAgB;AAAA,IAC3B;AAAA,IACA,GAAG;AAAA,EACL,IAAI;AAEJ,QAAM,YAAQ,yBAAS;AACvB,QAAM,qBAAoB,WAAM,eAAN,mBAAkB;AAC5C,QAAM,YAAY,mBAAmB,eAAe,MAAM,SAAS;AAEnE,SACE,6CAAC,yBAAsB,OAAO,EAAE,UAAU,GACxC;AAAA,IAAC;AAAA;AAAA,MACC;AAAA,MACA;AAAA,MACA,aAAa;AAAA,MACZ,GAAG;AAAA,MAEH;AAAA;AAAA,EACH,GACF;AAEJ;","names":["import_react_context","import_system","import_react","index","props","import_shared_utils","import_system","import_react","import_jsx_runtime","import_shared_utils","import_system","import_jsx_runtime","import_shared_utils","import_system","import_jsx_runtime","import_shared_utils","import_system","import_react","import_jsx_runtime","import_shared_utils","import_system","import_framer_motion","import_jsx_runtime","import_jsx_runtime"]}