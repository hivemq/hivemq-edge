{"version":3,"sources":["../src/index.ts","../src/use-descendant.ts","../src/utils.ts","../src/descendant.ts"],"sourcesContent":["export type {\n  DescendantsManager,\n  Descendant,\n  DescendantOptions,\n} from \"./descendant\"\nexport type { UseDescendantsReturn } from \"./use-descendant\"\nexport { createDescendantContext } from \"./use-descendant\"\nexport { createDescendantContext as default } from \"./use-descendant\"\n","import { createContext } from \"@chakra-ui/react-context\"\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\"\nimport { useRef, useState } from \"react\"\nimport { DescendantsManager, DescendantOptions } from \"./descendant\"\nimport { useSafeLayoutEffect, cast } from \"./utils\"\n\n/**\n * @internal\n * React hook that initializes the DescendantsManager\n */\nfunction useDescendants<\n  T extends HTMLElement = HTMLElement,\n  K extends Record<string, any> = {},\n>() {\n  const descendants = useRef(new DescendantsManager<T, K>())\n  useSafeLayoutEffect(() => {\n    return () => descendants.current.destroy()\n  })\n  return descendants.current\n}\n\nexport interface UseDescendantsReturn\n  extends ReturnType<typeof useDescendants> {}\n\n/* -------------------------------------------------------------------------------------------------\n * Descendants context to be used in component-land.\n  - Mount the `DescendantsContextProvider` at the root of the component\n  - Call `useDescendantsContext` anywhere you need access to the descendants information\n\n  NB:  I recommend using `createDescendantContext` below\n * -----------------------------------------------------------------------------------------------*/\n\nconst [DescendantsContextProvider, useDescendantsContext] =\n  createContext<UseDescendantsReturn>({\n    name: \"DescendantsProvider\",\n    errorMessage:\n      \"useDescendantsContext must be used within DescendantsProvider\",\n  })\n\n/**\n * @internal\n * This hook provides information a descendant such as:\n * - Its index compared to other descendants\n * - ref callback to register the descendant\n * - Its enabled index compared to other enabled descendants\n */\nfunction useDescendant<\n  T extends HTMLElement = HTMLElement,\n  K extends Record<string, any> = {},\n>(options?: DescendantOptions<K>) {\n  const descendants = useDescendantsContext()\n  const [index, setIndex] = useState(-1)\n  const ref = useRef<T>(null)\n\n  useSafeLayoutEffect(() => {\n    return () => {\n      if (!ref.current) return\n      descendants.unregister(ref.current)\n    }\n  }, [])\n\n  useSafeLayoutEffect(() => {\n    if (!ref.current) return\n    const dataIndex = Number(ref.current.dataset[\"index\"])\n    if (index != dataIndex && !Number.isNaN(dataIndex)) {\n      setIndex(dataIndex)\n    }\n  })\n\n  const refCallback = options\n    ? cast<React.RefCallback<T>>(descendants.register(options))\n    : cast<React.RefCallback<T>>(descendants.register)\n\n  return {\n    descendants,\n    index,\n    enabledIndex: descendants.enabledIndexOf(ref.current),\n    register: mergeRefs(refCallback, ref),\n  }\n}\n\n/* -------------------------------------------------------------------------------------------------\n * Function that provides strongly typed versions of the context provider and hooks above.\n   To be used in component-land\n * -----------------------------------------------------------------------------------------------*/\n\nexport function createDescendantContext<\n  T extends HTMLElement = HTMLElement,\n  K extends Record<string, any> = {},\n>() {\n  type ContextProviderType = React.Provider<DescendantsManager<T, K>>\n  const ContextProvider = cast<ContextProviderType>(DescendantsContextProvider)\n\n  const _useDescendantsContext = () =>\n    cast<DescendantsManager<T, K>>(useDescendantsContext())\n\n  const _useDescendant = (options?: DescendantOptions<K>) =>\n    useDescendant<T, K>(options)\n\n  const _useDescendants = () => useDescendants<T, K>()\n\n  return [\n    // context provider\n    ContextProvider,\n    // call this when you need to read from context\n    _useDescendantsContext,\n    // descendants state information, to be called and passed to `ContextProvider`\n    _useDescendants,\n    // descendant index information\n    _useDescendant,\n  ] as const\n}\n","import { useEffect, useLayoutEffect } from \"react\"\n\n/**\n * Sort an array of DOM nodes according to the HTML tree order\n * @see http://www.w3.org/TR/html5/infrastructure.html#tree-order\n */\nexport function sortNodes(nodes: Node[]) {\n  return nodes.sort((a, b) => {\n    const compare = a.compareDocumentPosition(b)\n\n    if (\n      compare & Node.DOCUMENT_POSITION_FOLLOWING ||\n      compare & Node.DOCUMENT_POSITION_CONTAINED_BY\n    ) {\n      // a < b\n      return -1\n    }\n\n    if (\n      compare & Node.DOCUMENT_POSITION_PRECEDING ||\n      compare & Node.DOCUMENT_POSITION_CONTAINS\n    ) {\n      // a > b\n      return 1\n    }\n\n    if (\n      compare & Node.DOCUMENT_POSITION_DISCONNECTED ||\n      compare & Node.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC\n    ) {\n      throw Error(\"Cannot sort the given nodes.\")\n    } else {\n      return 0\n    }\n  })\n}\n\nexport const isElement = (el: any): el is HTMLElement =>\n  typeof el == \"object\" && \"nodeType\" in el && el.nodeType === Node.ELEMENT_NODE\n\nexport function getNextIndex(current: number, max: number, loop: boolean) {\n  let next = current + 1\n  if (loop && next >= max) next = 0\n  return next\n}\n\nexport function getPrevIndex(current: number, max: number, loop: boolean) {\n  let next = current - 1\n  if (loop && next < 0) next = max\n  return next\n}\n\nexport const useSafeLayoutEffect =\n  typeof window !== \"undefined\" ? useLayoutEffect : useEffect\n\nexport const cast = <T>(value: any) => value as T\n","import { sortNodes, isElement, getNextIndex, getPrevIndex } from \"./utils\"\n\nexport type DescendantOptions<T = {}> = T & {\n  /**\n   * If `true`, the item will be registered in all nodes map\n   * but omitted from enabled nodes map\n   */\n  disabled?: boolean\n  /**\n   * The id of the item\n   */\n  id?: string\n}\n\nexport type Descendant<T, K> = DescendantOptions<K> & {\n  /**\n   * DOM element of the item\n   */\n  node: T\n  /**\n   * index of item in all nodes map and enabled nodes map\n   */\n  index: number\n}\n\n/**\n * @internal\n *\n * Class to manage descendants and their relative indices in the DOM.\n * It uses `node.compareDocumentPosition(...)` under the hood\n */\nexport class DescendantsManager<\n  T extends HTMLElement,\n  K extends Record<string, any> = {},\n> {\n  private descendants = new Map<T, Descendant<T, K>>()\n\n  register = (nodeOrOptions: T | null | DescendantOptions<K>) => {\n    if (nodeOrOptions == null) return\n\n    if (isElement(nodeOrOptions)) {\n      return this.registerNode(nodeOrOptions)\n    }\n\n    return (node: T | null) => {\n      this.registerNode(node, nodeOrOptions)\n    }\n  }\n\n  unregister = (node: T) => {\n    this.descendants.delete(node)\n    const sorted = sortNodes(Array.from(this.descendants.keys()))\n    this.assignIndex(sorted)\n  }\n\n  destroy = () => {\n    this.descendants.clear()\n  }\n\n  private assignIndex = (descendants: Node[]) => {\n    this.descendants.forEach((descendant) => {\n      const index = descendants.indexOf(descendant.node)\n      descendant.index = index\n      descendant.node.dataset[\"index\"] = descendant.index.toString()\n    })\n  }\n\n  count = () => this.descendants.size\n\n  enabledCount = () => this.enabledValues().length\n\n  values = () => {\n    const values = Array.from(this.descendants.values())\n    return values.sort((a, b) => a.index - b.index)\n  }\n\n  enabledValues = () => {\n    return this.values().filter((descendant) => !descendant.disabled)\n  }\n\n  item = (index: number) => {\n    if (this.count() === 0) return undefined\n    return this.values()[index]\n  }\n\n  enabledItem = (index: number) => {\n    if (this.enabledCount() === 0) return undefined\n    return this.enabledValues()[index]\n  }\n\n  first = () => this.item(0)\n\n  firstEnabled = () => this.enabledItem(0)\n\n  last = () => this.item(this.descendants.size - 1)\n\n  lastEnabled = () => {\n    const lastIndex = this.enabledValues().length - 1\n    return this.enabledItem(lastIndex)\n  }\n\n  indexOf = (node: T | null) => {\n    if (!node) return -1\n    return this.descendants.get(node)?.index ?? -1\n  }\n\n  enabledIndexOf = (node: T | null) => {\n    if (node == null) return -1\n    return this.enabledValues().findIndex((i) => i.node.isSameNode(node))\n  }\n\n  next = (index: number, loop = true) => {\n    const next = getNextIndex(index, this.count(), loop)\n    return this.item(next)\n  }\n\n  nextEnabled = (index: number, loop = true) => {\n    const item = this.item(index)\n    if (!item) return\n    const enabledIndex = this.enabledIndexOf(item.node)\n    const nextEnabledIndex = getNextIndex(\n      enabledIndex,\n      this.enabledCount(),\n      loop,\n    )\n    return this.enabledItem(nextEnabledIndex)\n  }\n\n  prev = (index: number, loop = true) => {\n    const prev = getPrevIndex(index, this.count() - 1, loop)\n    return this.item(prev)\n  }\n\n  prevEnabled = (index: number, loop = true) => {\n    const item = this.item(index)\n    if (!item) return\n    const enabledIndex = this.enabledIndexOf(item.node)\n    const prevEnabledIndex = getPrevIndex(\n      enabledIndex,\n      this.enabledCount() - 1,\n      loop,\n    )\n    return this.enabledItem(prevEnabledIndex)\n  }\n\n  private registerNode = (node: T | null, options?: DescendantOptions<K>) => {\n    if (!node || this.descendants.has(node)) return\n\n    const keys = Array.from(this.descendants.keys()).concat(node)\n    const sorted = sortNodes(keys)\n\n    if (options?.disabled) {\n      options.disabled = !!options.disabled\n    }\n\n    const descendant = { node, index: -1, ...options }\n\n    this.descendants.set(node, descendant as Descendant<T, K>)\n\n    this.assignIndex(sorted)\n  }\n}\n"],"mappings":"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","names":["import_react"]}