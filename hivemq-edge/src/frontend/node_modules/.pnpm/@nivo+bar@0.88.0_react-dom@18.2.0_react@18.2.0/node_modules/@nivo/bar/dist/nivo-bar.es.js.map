{"version":3,"file":"nivo-bar.es.js","sources":["../src/BarAnnotations.tsx","../src/BarLegends.tsx","../src/BarItem.tsx","../src/BarTooltip.tsx","../src/props.ts","../src/compute/common.ts","../src/compute/grouped.ts","../src/compute/stacked.ts","../src/compute/legends.ts","../src/compute/totals.ts","../src/hooks.ts","../src/BarTotals.tsx","../src/Bar.tsx","../src/BarCanvas.tsx","../src/ResponsiveBar.tsx","../src/ResponsiveBarCanvas.tsx"],"sourcesContent":["import { Annotation, useAnnotations } from '@nivo/annotations'\nimport { BarAnnotationsProps } from './types'\n\nexport const BarAnnotations = <RawDatum,>({ bars, annotations }: BarAnnotationsProps<RawDatum>) => {\n    const boundAnnotations = useAnnotations({\n        data: bars,\n        annotations,\n        getPosition: bar => ({\n            x: bar.x + bar.width / 2,\n            y: bar.y + bar.height / 2,\n        }),\n        getDimensions: ({ height, width }) => ({\n            width,\n            height,\n            size: Math.max(width, height),\n        }),\n    })\n\n    return (\n        <>\n            {boundAnnotations.map((annotation, i) => (\n                <Annotation key={i} {...annotation} />\n            ))}\n        </>\n    )\n}\n","import { BoxLegendSvg } from '@nivo/legends'\nimport { BarLegendProps, LegendData } from './types'\n\ninterface BarLegendsProps {\n    width: number\n    height: number\n    legends: [BarLegendProps, LegendData[]][]\n    toggleSerie: (id: string | number) => void\n}\n\nexport const BarLegends = ({ width, height, legends, toggleSerie }: BarLegendsProps) => (\n    <>\n        {legends.map(([legend, data], i) => (\n            <BoxLegendSvg\n                key={i}\n                {...legend}\n                containerWidth={width}\n                containerHeight={height}\n                data={legend.data ?? data}\n                toggleSerie={\n                    legend.toggleSerie && legend.dataFrom === 'keys' ? toggleSerie : undefined\n                }\n            />\n        ))}\n    </>\n)\n","import { createElement, MouseEvent, useCallback, useMemo } from 'react'\nimport { animated, to } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\nimport { useTooltip } from '@nivo/tooltip'\nimport { BarDatum, BarItemProps } from './types'\n\nexport const BarItem = <RawDatum extends BarDatum>({\n    bar: { data, ...bar },\n\n    style: {\n        borderColor,\n        color,\n        height,\n        labelColor,\n        labelOpacity,\n        labelX,\n        labelY,\n        transform,\n        width,\n        textAnchor,\n    },\n\n    borderRadius,\n    borderWidth,\n\n    label,\n    shouldRenderLabel,\n\n    isInteractive,\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n\n    tooltip,\n\n    isFocusable,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n    ariaDisabled,\n    ariaHidden,\n}: BarItemProps<RawDatum>) => {\n    const theme = useTheme()\n    const { showTooltipFromEvent, showTooltipAt, hideTooltip } = useTooltip()\n\n    const renderTooltip = useMemo(\n        () => () => createElement(tooltip, { ...bar, ...data }),\n        [tooltip, bar, data]\n    )\n\n    const handleClick = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onClick?.({ color: bar.color, ...data }, event)\n        },\n        [bar, data, onClick]\n    )\n    const handleTooltip = useCallback(\n        (event: MouseEvent<SVGRectElement>) => showTooltipFromEvent(renderTooltip(), event),\n        [showTooltipFromEvent, renderTooltip]\n    )\n    const handleMouseEnter = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onMouseEnter?.(data, event)\n            showTooltipFromEvent(renderTooltip(), event)\n        },\n        [data, onMouseEnter, showTooltipFromEvent, renderTooltip]\n    )\n    const handleMouseLeave = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onMouseLeave?.(data, event)\n            hideTooltip()\n        },\n        [data, hideTooltip, onMouseLeave]\n    )\n\n    // extra handlers to allow keyboard navigation\n    const handleFocus = useCallback(() => {\n        showTooltipAt(renderTooltip(), [bar.absX + bar.width / 2, bar.absY])\n    }, [showTooltipAt, renderTooltip, bar])\n    const handleBlur = useCallback(() => {\n        hideTooltip()\n    }, [hideTooltip])\n\n    return (\n        <animated.g transform={transform}>\n            <animated.rect\n                width={to(width, value => Math.max(value, 0))}\n                height={to(height, value => Math.max(value, 0))}\n                rx={borderRadius}\n                ry={borderRadius}\n                fill={data.fill ?? color}\n                strokeWidth={borderWidth}\n                stroke={borderColor}\n                focusable={isFocusable}\n                tabIndex={isFocusable ? 0 : undefined}\n                aria-label={ariaLabel ? ariaLabel(data) : undefined}\n                aria-labelledby={ariaLabelledBy ? ariaLabelledBy(data) : undefined}\n                aria-describedby={ariaDescribedBy ? ariaDescribedBy(data) : undefined}\n                aria-disabled={ariaDisabled ? ariaDisabled(data) : undefined}\n                aria-hidden={ariaHidden ? ariaHidden(data) : undefined}\n                onMouseEnter={isInteractive ? handleMouseEnter : undefined}\n                onMouseMove={isInteractive ? handleTooltip : undefined}\n                onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n                onClick={isInteractive ? handleClick : undefined}\n                onFocus={isInteractive && isFocusable ? handleFocus : undefined}\n                onBlur={isInteractive && isFocusable ? handleBlur : undefined}\n            />\n            {shouldRenderLabel && (\n                <animated.text\n                    x={labelX}\n                    y={labelY}\n                    textAnchor={textAnchor}\n                    dominantBaseline=\"central\"\n                    fillOpacity={labelOpacity}\n                    style={{\n                        ...theme.labels.text,\n                        pointerEvents: 'none',\n                        fill: labelColor,\n                    }}\n                >\n                    {label}\n                </animated.text>\n            )}\n        </animated.g>\n    )\n}\n","import { BarTooltipProps } from './types'\nimport { BasicTooltip } from '@nivo/tooltip'\n\nexport const BarTooltip = <RawDatum,>({ color, label, ...data }: BarTooltipProps<RawDatum>) => {\n    return <BasicTooltip id={label} value={data.formattedValue} enableChip={true} color={color} />\n}\n","import { BarItem } from './BarItem'\nimport { BarTooltip } from './BarTooltip'\nimport { BarCanvasLayerId, BarLayerId, ComputedDatum } from './types'\nimport { InheritedColorConfig, OrdinalColorScaleConfig } from '@nivo/colors'\nimport { ScaleBandSpec, ScaleSpec } from '@nivo/scales'\n\nexport const defaultProps = {\n    indexBy: 'id',\n    keys: ['value'],\n\n    groupMode: 'stacked' as const,\n    layout: 'vertical' as const,\n    reverse: false,\n\n    minValue: 'auto' as const,\n    maxValue: 'auto' as const,\n\n    valueScale: { type: 'linear' } as ScaleSpec,\n    indexScale: { type: 'band', round: true } as ScaleBandSpec,\n\n    padding: 0.1,\n    innerPadding: 0,\n\n    axisBottom: {},\n    axisLeft: {},\n    enableGridX: false,\n    enableGridY: true,\n\n    enableLabel: true,\n    label: 'formattedValue',\n    labelPosition: 'middle' as const,\n    labelOffset: 0,\n    labelSkipWidth: 0,\n    labelSkipHeight: 0,\n    labelTextColor: { from: 'theme', theme: 'labels.text.fill' },\n\n    colorBy: 'id' as const,\n    colors: { scheme: 'nivo' } as OrdinalColorScaleConfig,\n\n    borderRadius: 0,\n    borderWidth: 0,\n    borderColor: { from: 'color' } as InheritedColorConfig<any>,\n\n    isInteractive: true,\n    tooltip: BarTooltip,\n    tooltipLabel: <RawDatum>(datum: ComputedDatum<RawDatum>) => `${datum.id} - ${datum.indexValue}`,\n\n    legends: [],\n    initialHiddenIds: [],\n    annotations: [],\n    markers: [],\n\n    enableTotals: false,\n    totalsOffset: 10,\n}\n\nexport const svgDefaultProps = {\n    ...defaultProps,\n    layers: ['grid', 'axes', 'bars', 'totals', 'markers', 'legends', 'annotations'] as BarLayerId[],\n    barComponent: BarItem,\n\n    defs: [],\n    fill: [],\n\n    animate: true,\n    motionConfig: 'default',\n\n    role: 'img',\n    isFocusable: false,\n}\n\nexport const canvasDefaultProps = {\n    ...defaultProps,\n    layers: ['grid', 'axes', 'bars', 'totals', 'legends', 'annotations'] as BarCanvasLayerId[],\n\n    pixelRatio: typeof window !== 'undefined' ? window.devicePixelRatio ?? 1 : 1,\n}\n","import { ScaleBandSpec, ScaleBand, computeScale } from '@nivo/scales'\nimport { defaultProps } from '../props'\nimport { BarCommonProps, BarDatum } from '../types'\n\n/**\n * Generates indexed scale.\n */\nexport const getIndexScale = <RawDatum>(\n    data: readonly RawDatum[],\n    getIndex: (datum: RawDatum) => string,\n    padding: number,\n    indexScale: ScaleBandSpec,\n    size: number,\n    axis: 'x' | 'y'\n) => {\n    return (\n        computeScale(\n            indexScale,\n            { all: data.map(getIndex), min: 0, max: 0 },\n            size,\n            axis\n        ) as ScaleBand<string>\n    ).padding(padding)\n}\n\n/**\n * This method ensures all the provided keys exist in the entire series.\n */\nexport const normalizeData = <RawDatum>(data: readonly RawDatum[], keys: readonly string[]) =>\n    data.map(\n        item =>\n            ({\n                ...keys.reduce<Record<string, unknown>>((acc, key) => {\n                    acc[key] = null\n                    return acc\n                }, {}),\n                ...item,\n            } as RawDatum)\n    )\n\nexport const filterNullValues = <RawDatum extends Record<string, unknown>>(data: RawDatum) =>\n    Object.keys(data).reduce<Record<string, unknown>>((acc, key) => {\n        if (data[key]) {\n            acc[key] = data[key]\n        }\n        return acc\n    }, {}) as Exclude<RawDatum, null | undefined | false | '' | 0>\n\nexport const coerceValue = <T>(value: T) => [value, Number(value)] as const\n\nexport type BarLabelLayout = {\n    labelX: number\n    labelY: number\n    textAnchor: 'start' | 'middle' | 'end'\n}\n\n/**\n * Compute the label position and alignment based on a given position and offset.\n */\nexport function useComputeLabelLayout<RawDatum extends BarDatum>(\n    layout: BarCommonProps<RawDatum>['layout'] = defaultProps.layout,\n    reverse: BarCommonProps<RawDatum>['reverse'] = defaultProps.reverse,\n    labelPosition: BarCommonProps<RawDatum>['labelPosition'] = defaultProps.labelPosition,\n    labelOffset: BarCommonProps<RawDatum>['labelOffset'] = defaultProps.labelOffset\n): (width: number, height: number) => BarLabelLayout {\n    return (width: number, height: number) => {\n        // If the chart is reversed, we want to make sure the offset is also reversed\n        const computedLabelOffset = labelOffset * (reverse ? -1 : 1)\n\n        if (layout === 'horizontal') {\n            let x = width / 2\n            if (labelPosition === 'start') {\n                x = reverse ? width : 0\n            } else if (labelPosition === 'end') {\n                x = reverse ? 0 : width\n            }\n            return {\n                labelX: x + computedLabelOffset,\n                labelY: height / 2,\n                textAnchor: labelPosition === 'middle' ? 'middle' : reverse ? 'end' : 'start',\n            }\n        } else {\n            let y = height / 2\n            if (labelPosition === 'start') {\n                y = reverse ? 0 : height\n            } else if (labelPosition === 'end') {\n                y = reverse ? height : 0\n            }\n            return {\n                labelX: width / 2,\n                labelY: y - computedLabelOffset,\n                textAnchor: 'middle',\n            }\n        }\n    }\n}\n","import { Margin } from '@nivo/core'\nimport { OrdinalColorScale } from '@nivo/colors'\nimport { Scale, ScaleBand, computeScale } from '@nivo/scales'\nimport { BarDatum, BarSvgProps, ComputedBarDatum, ComputedDatum } from '../types'\nimport { coerceValue, filterNullValues, getIndexScale, normalizeData } from './common'\n\ntype Params<RawDatum, XScaleInput, YScaleInput> = {\n    data: readonly RawDatum[]\n    formatValue: (value: number) => string\n    getColor: OrdinalColorScale<ComputedDatum<RawDatum>>\n    getIndex: (datum: RawDatum) => string\n    getTooltipLabel: (datum: ComputedDatum<RawDatum>) => string\n    innerPadding: number\n    keys: string[]\n    xScale: XScaleInput extends string ? ScaleBand<XScaleInput> : Scale<XScaleInput, number>\n    yScale: YScaleInput extends string ? ScaleBand<YScaleInput> : Scale<YScaleInput, number>\n    margin: Margin\n}\n\nconst gt = (value: number, other: number) => value > other\nconst lt = (value: number, other: number) => value < other\n\nconst range = (start: number, end: number) =>\n    Array.from(' '.repeat(end - start), (_, index) => start + index)\n\nconst clampToZero = (value: number) => (gt(value, 0) ? 0 : value)\nconst zeroIfNotFinite = (value: number) => (isFinite(value) ? value : 0)\n\n/**\n * Generates x/y scales & bars for vertical grouped bar chart.\n */\nconst generateVerticalGroupedBars = <RawDatum extends Record<string, unknown>>(\n    {\n        data,\n        formatValue,\n        getColor,\n        getIndex,\n        getTooltipLabel,\n        innerPadding = 0,\n        keys,\n        xScale,\n        yScale,\n        margin,\n    }: Params<RawDatum, string, number>,\n    barWidth: number,\n    reverse: boolean,\n    yRef: number\n): ComputedBarDatum<RawDatum>[] => {\n    const compare = reverse ? lt : gt\n    const getY = (d: number) => (compare(d, 0) ? yScale(d) ?? 0 : yRef)\n    const getHeight = (d: number, y: number) => (compare(d, 0) ? yRef - y : (yScale(d) ?? 0) - yRef)\n    const cleanedData = data.map(filterNullValues)\n\n    const bars: ComputedBarDatum<RawDatum>[] = []\n    keys.forEach((key, i) =>\n        range(0, xScale.domain().length).forEach(index => {\n            const [rawValue, value] = coerceValue(data[index][key])\n            const indexValue = getIndex(data[index])\n            const x = (xScale(indexValue) ?? 0) + barWidth * i + innerPadding * i\n            const y = getY(value)\n            const barHeight = getHeight(value, y)\n            const barData: ComputedDatum<RawDatum> = {\n                id: key,\n                value: rawValue === null ? rawValue : value,\n                formattedValue: formatValue(value),\n                hidden: false,\n                index,\n                indexValue,\n                data: cleanedData[index],\n            }\n\n            bars.push({\n                key: `${key}.${barData.indexValue}`,\n                index: bars.length,\n                data: barData,\n                x,\n                y,\n                absX: margin.left + x,\n                absY: margin.top + y,\n                width: barWidth,\n                height: barHeight,\n                color: getColor(barData),\n                label: getTooltipLabel(barData),\n            })\n        })\n    )\n\n    return bars\n}\n\n/**\n * Generates x/y scales & bars for horizontal grouped bar chart.\n */\nconst generateHorizontalGroupedBars = <RawDatum extends Record<string, unknown>>(\n    {\n        data,\n        formatValue,\n        getIndex,\n        getColor,\n        getTooltipLabel,\n        keys,\n        innerPadding = 0,\n        xScale,\n        yScale,\n        margin,\n    }: Params<RawDatum, number, string>,\n    barHeight: number,\n    reverse: boolean,\n    xRef: number\n): ComputedBarDatum<RawDatum>[] => {\n    const compare = reverse ? lt : gt\n    const getX = (d: number) => (compare(d, 0) ? xRef : xScale(d) ?? 0)\n    const getWidth = (d: number, x: number) => (compare(d, 0) ? (xScale(d) ?? 0) - xRef : xRef - x)\n    const cleanedData = data.map(filterNullValues)\n\n    const bars: ComputedBarDatum<RawDatum>[] = []\n    keys.forEach((key, i) =>\n        range(0, yScale.domain().length).forEach(index => {\n            const [rawValue, value] = coerceValue(data[index][key])\n            const indexValue = getIndex(data[index])\n            const x = getX(value)\n            const y = (yScale(indexValue) ?? 0) + barHeight * i + innerPadding * i\n            const barWidth = getWidth(value, x)\n            const barData: ComputedDatum<RawDatum> = {\n                id: key,\n                value: rawValue === null ? rawValue : value,\n                formattedValue: formatValue(value),\n                hidden: false,\n                index,\n                indexValue,\n                data: cleanedData[index],\n            }\n\n            bars.push({\n                key: `${key}.${barData.indexValue}`,\n                index: bars.length,\n                data: barData,\n                x,\n                y,\n                absX: margin.left + x,\n                absY: margin.top + y,\n                width: barWidth,\n                height: barHeight,\n                color: getColor(barData),\n                label: getTooltipLabel(barData),\n            })\n        })\n    )\n\n    return bars\n}\n\n/**\n * Generates x/y scales & bars for grouped bar chart.\n */\nexport const generateGroupedBars = <RawDatum extends BarDatum>({\n    layout,\n    minValue,\n    maxValue,\n    reverse,\n    width,\n    height,\n    padding = 0,\n    innerPadding = 0,\n    valueScale,\n    indexScale: indexScaleConfig,\n    hiddenIds = [],\n    ...props\n}: Pick<\n    Required<BarSvgProps<RawDatum>>,\n    | 'data'\n    | 'height'\n    | 'indexScale'\n    | 'innerPadding'\n    | 'keys'\n    | 'layout'\n    | 'maxValue'\n    | 'minValue'\n    | 'padding'\n    | 'reverse'\n    | 'valueScale'\n    | 'width'\n> & {\n    formatValue: (value: number) => string\n    getColor: OrdinalColorScale<ComputedDatum<RawDatum>>\n    getIndex: (datum: RawDatum) => string\n    getTooltipLabel: (datum: ComputedDatum<RawDatum>) => string\n    margin: Margin\n    hiddenIds?: readonly (string | number)[]\n}) => {\n    const keys = props.keys.filter(key => !hiddenIds.includes(key))\n    const data = normalizeData(props.data, keys)\n    const [axis, otherAxis, size] =\n        layout === 'vertical' ? (['y', 'x', width] as const) : (['x', 'y', height] as const)\n    const indexScale = getIndexScale(\n        data,\n        props.getIndex,\n        padding,\n        indexScaleConfig,\n        size,\n        otherAxis\n    )\n\n    const scaleSpec = {\n        max: maxValue,\n        min: minValue,\n        reverse,\n        ...valueScale,\n    }\n\n    const clampMin = scaleSpec.min === 'auto' ? clampToZero : (value: number) => value\n\n    const values = data\n        .reduce<number[]>((acc, entry) => [...acc, ...keys.map(k => entry[k] as number)], [])\n        .filter(Boolean)\n    const min = clampMin(Math.min(...values))\n    const max = zeroIfNotFinite(Math.max(...values))\n\n    const scale = computeScale(\n        scaleSpec as any,\n        { all: values, min, max },\n        axis === 'x' ? width : height,\n        axis\n    )\n\n    const [xScale, yScale] = layout === 'vertical' ? [indexScale, scale] : [scale, indexScale]\n\n    const bandwidth = (indexScale.bandwidth() - innerPadding * (keys.length - 1)) / keys.length\n    const params = [\n        { ...props, data, keys, innerPadding, xScale, yScale } as Params<RawDatum, any, any>,\n        bandwidth,\n        scaleSpec.reverse,\n        scale(0) ?? 0,\n    ] as const\n\n    const bars: ComputedBarDatum<RawDatum>[] =\n        bandwidth > 0\n            ? layout === 'vertical'\n                ? generateVerticalGroupedBars(...params)\n                : generateHorizontalGroupedBars(...params)\n            : []\n\n    return { xScale, yScale, bars }\n}\n","import { Margin } from '@nivo/core'\nimport { OrdinalColorScale } from '@nivo/colors'\nimport { Scale, ScaleBand, computeScale } from '@nivo/scales'\nimport { Series, SeriesPoint, stack, stackOffsetDiverging } from 'd3-shape'\nimport { BarDatum, BarSvgProps, ComputedBarDatum, ComputedDatum } from '../types'\nimport { coerceValue, filterNullValues, getIndexScale, normalizeData } from './common'\n\ntype StackDatum<RawDatum> = SeriesPoint<RawDatum>\n\ntype Params<RawDatum, XScaleInput, YScaleInput> = {\n    formatValue: (value: number) => string\n    getColor: OrdinalColorScale<ComputedDatum<RawDatum>>\n    getIndex: (datum: RawDatum) => string\n    getTooltipLabel: (datum: ComputedDatum<RawDatum>) => string\n    innerPadding: number\n    stackedData: Series<RawDatum, string>[]\n    xScale: XScaleInput extends string ? ScaleBand<XScaleInput> : Scale<XScaleInput, number>\n    yScale: YScaleInput extends string ? ScaleBand<YScaleInput> : Scale<YScaleInput, number>\n    margin: Margin\n}\n\nconst flattenDeep = <T>(arr: T[]): T =>\n    arr.some(Array.isArray) ? flattenDeep(([] as T[]).concat(...arr)) : (arr as unknown as T)\n\nconst filterZerosIfLog = (array: number[], type: string) =>\n    type === 'log' ? array.filter(num => num !== 0) : array\n\n/**\n * Generates x/y scales & bars for vertical stacked bar chart.\n */\nconst generateVerticalStackedBars = <RawDatum extends Record<string, unknown>>(\n    {\n        formatValue,\n        getColor,\n        getIndex,\n        getTooltipLabel,\n        innerPadding,\n        stackedData,\n        xScale,\n        yScale,\n        margin,\n    }: Params<RawDatum, string, number>,\n    barWidth: number,\n    reverse: boolean\n): ComputedBarDatum<RawDatum>[] => {\n    const getY = (d: StackDatum<RawDatum>) => yScale(d[reverse ? 0 : 1])\n    const getHeight = (d: StackDatum<RawDatum>, y: number) => (yScale(d[reverse ? 1 : 0]) ?? 0) - y\n\n    const bars: ComputedBarDatum<RawDatum>[] = []\n    stackedData.forEach(stackedDataItem =>\n        xScale.domain().forEach((index, i) => {\n            const d = stackedDataItem[i]\n            const x = xScale(getIndex(d.data)) ?? 0\n            const y = (getY(d) ?? 0) + innerPadding * 0.5\n            const barHeight = getHeight(d, y) - innerPadding\n            const [rawValue, value] = coerceValue(d.data[stackedDataItem.key])\n\n            const barData: ComputedDatum<RawDatum> = {\n                id: stackedDataItem.key,\n                value: rawValue === null ? rawValue : value,\n                formattedValue: formatValue(value),\n                hidden: false,\n                index: i,\n                indexValue: index,\n                data: filterNullValues(d.data),\n            }\n\n            bars.push({\n                key: `${stackedDataItem.key}.${index}`,\n                index: bars.length,\n                data: barData,\n                x,\n                y,\n                absX: margin.left + x,\n                absY: margin.top + y,\n                width: barWidth,\n                height: barHeight,\n                color: getColor(barData),\n                label: getTooltipLabel(barData),\n            })\n        })\n    )\n\n    return bars\n}\n\n/**\n * Generates x/y scales & bars for horizontal stacked bar chart.\n */\nconst generateHorizontalStackedBars = <RawDatum extends Record<string, unknown>>(\n    {\n        formatValue,\n        getColor,\n        getIndex,\n        getTooltipLabel,\n        innerPadding,\n        stackedData,\n        xScale,\n        yScale,\n        margin,\n    }: Params<RawDatum, number, string>,\n    barHeight: number,\n    reverse: boolean\n): ComputedBarDatum<RawDatum>[] => {\n    const getX = (d: StackDatum<RawDatum>) => xScale(d[reverse ? 1 : 0])\n    const getWidth = (d: StackDatum<RawDatum>, x: number) => (xScale(d[reverse ? 0 : 1]) ?? 0) - x\n\n    const bars: ComputedBarDatum<RawDatum>[] = []\n    stackedData.forEach(stackedDataItem =>\n        yScale.domain().forEach((index, i) => {\n            const d = stackedDataItem[i]\n            const y = yScale(getIndex(d.data)) ?? 0\n            const x = (getX(d) ?? 0) + innerPadding * 0.5\n            const barWidth = getWidth(d, x) - innerPadding\n            const [rawValue, value] = coerceValue(d.data[stackedDataItem.key])\n\n            const barData: ComputedDatum<RawDatum> = {\n                id: stackedDataItem.key,\n                value: rawValue === null ? rawValue : value,\n                formattedValue: formatValue(value),\n                hidden: false,\n                index: i,\n                indexValue: index,\n                data: filterNullValues(d.data),\n            }\n\n            bars.push({\n                key: `${stackedDataItem.key}.${index}`,\n                index: bars.length,\n                data: barData,\n                x,\n                y,\n                absX: margin.left + x,\n                absY: margin.top + y,\n                width: barWidth,\n                height: barHeight,\n                color: getColor(barData),\n                label: getTooltipLabel(barData),\n            })\n        })\n    )\n\n    return bars\n}\n\n/**\n * Generates x/y scales & bars for stacked bar chart.\n */\nexport const generateStackedBars = <RawDatum extends BarDatum>({\n    data,\n    layout,\n    minValue,\n    maxValue,\n    reverse,\n    width,\n    height,\n    padding = 0,\n    valueScale,\n    indexScale: indexScaleConfig,\n    hiddenIds = [],\n    ...props\n}: Pick<\n    Required<BarSvgProps<RawDatum>>,\n    | 'data'\n    | 'height'\n    | 'indexScale'\n    | 'innerPadding'\n    | 'keys'\n    | 'layout'\n    | 'maxValue'\n    | 'minValue'\n    | 'padding'\n    | 'reverse'\n    | 'valueScale'\n    | 'width'\n> & {\n    formatValue: (value: number) => string\n    getColor: OrdinalColorScale<ComputedDatum<RawDatum>>\n    getIndex: (datum: RawDatum) => string\n    getTooltipLabel: (datum: ComputedDatum<RawDatum>) => string\n    margin: Margin\n    hiddenIds?: readonly (string | number)[]\n}) => {\n    const keys = props.keys.filter(key => !hiddenIds.includes(key))\n    const stackedData = stack<RawDatum, string>().keys(keys).offset(stackOffsetDiverging)(\n        normalizeData(data, keys)\n    )\n\n    const [axis, otherAxis, size] =\n        layout === 'vertical' ? (['y', 'x', width] as const) : (['x', 'y', height] as const)\n    const indexScale = getIndexScale(\n        data,\n        props.getIndex,\n        padding,\n        indexScaleConfig,\n        size,\n        otherAxis\n    )\n\n    const scaleSpec = {\n        max: maxValue,\n        min: minValue,\n        reverse,\n        ...valueScale,\n    }\n\n    const values = filterZerosIfLog(\n        flattenDeep(stackedData as unknown as number[][]),\n        valueScale.type\n    )\n    const min = Math.min(...values)\n    const max = Math.max(...values)\n\n    const scale = computeScale(\n        scaleSpec as any,\n        { all: values, min, max },\n        axis === 'x' ? width : height,\n        axis\n    )\n\n    const [xScale, yScale] = layout === 'vertical' ? [indexScale, scale] : [scale, indexScale]\n\n    const innerPadding = props.innerPadding > 0 ? props.innerPadding : 0\n    const bandwidth = indexScale.bandwidth()\n    const params = [\n        { ...props, innerPadding, stackedData, xScale, yScale } as Params<RawDatum, any, any>,\n        bandwidth,\n        scaleSpec.reverse,\n    ] as const\n\n    const bars: ComputedBarDatum<RawDatum>[] =\n        bandwidth > 0\n            ? layout === 'vertical'\n                ? generateVerticalStackedBars(...params)\n                : generateHorizontalStackedBars(...params)\n            : []\n\n    return { xScale, yScale, bars }\n}\n","import {\n    BarDatum,\n    BarLegendProps,\n    BarSvgProps,\n    BarsWithHidden,\n    LegendData,\n    LegendLabelDatum,\n} from '../types'\nimport { getPropertyAccessor } from '@nivo/core'\nimport uniqBy from 'lodash/uniqBy'\n\nexport const getLegendDataForKeys = <RawDatum extends BarDatum>(\n    bars: BarsWithHidden<RawDatum>,\n    layout: NonNullable<BarSvgProps<RawDatum>['layout']>,\n    direction: BarLegendProps['direction'],\n    groupMode: NonNullable<BarSvgProps<RawDatum>['groupMode']>,\n    reverse: boolean,\n    getLegendLabel: (datum: LegendLabelDatum<RawDatum>) => string\n): LegendData[] => {\n    const data = uniqBy(\n        bars.map(bar => ({\n            id: bar.data.id,\n            label: getLegendLabel(bar.data),\n            hidden: bar.data.hidden,\n            color: bar.color ?? '#000',\n        })),\n        ({ id }) => id\n    )\n\n    if (\n        (layout === 'vertical' &&\n            groupMode === 'stacked' &&\n            direction === 'column' &&\n            reverse !== true) ||\n        (layout === 'horizontal' && groupMode === 'stacked' && reverse === true)\n    ) {\n        data.reverse()\n    }\n\n    return data\n}\n\nexport const getLegendDataForIndexes = <RawDatum extends BarDatum>(\n    bars: BarsWithHidden<RawDatum>,\n    layout: NonNullable<BarSvgProps<RawDatum>['layout']>,\n    getLegendLabel: (datum: LegendLabelDatum<RawDatum>) => string\n): LegendData[] => {\n    const data = uniqBy(\n        bars.map(bar => ({\n            id: bar.data.indexValue ?? '',\n            label: getLegendLabel(bar.data),\n            hidden: bar.data.hidden,\n            color: bar.color ?? '#000',\n        })),\n        ({ id }) => id\n    )\n\n    if (layout === 'horizontal') {\n        data.reverse()\n    }\n\n    return data\n}\n\nexport const getLegendData = <RawDatum extends BarDatum>({\n    bars,\n    direction,\n    from,\n    groupMode,\n    layout,\n    legendLabel,\n    reverse,\n}: Pick<Required<BarSvgProps<RawDatum>>, 'layout' | 'groupMode' | 'reverse'> & {\n    bars: BarsWithHidden<RawDatum>\n    direction: BarLegendProps['direction']\n    from: BarLegendProps['dataFrom']\n    legendLabel: BarSvgProps<RawDatum>['legendLabel']\n}) => {\n    const getLegendLabel = getPropertyAccessor(\n        legendLabel ?? (from === 'indexes' ? 'indexValue' : 'id')\n    )\n\n    if (from === 'indexes') {\n        return getLegendDataForIndexes(bars, layout, getLegendLabel)\n    }\n\n    return getLegendDataForKeys(bars, layout, direction, groupMode, reverse, getLegendLabel)\n}\n","import { AnyScale, ScaleBand } from '@nivo/scales'\nimport { defaultProps } from '../props'\nimport { BarCommonProps, BarDatum, ComputedBarDatum } from '../types'\n\nexport interface BarTotalsData {\n    key: string\n    x: number\n    y: number\n    value: number\n    formattedValue: string\n    animationOffset: number\n}\n\nexport const computeBarTotals = <RawDatum extends BarDatum>(\n    bars: ComputedBarDatum<RawDatum>[],\n    xScale: ScaleBand<string> | AnyScale,\n    yScale: ScaleBand<string> | AnyScale,\n    layout: BarCommonProps<RawDatum>['layout'] = defaultProps.layout,\n    groupMode: BarCommonProps<RawDatum>['groupMode'] = defaultProps.groupMode,\n    totalsOffset: number,\n    formatValue: (value: number) => string\n) => {\n    const totals = [] as BarTotalsData[]\n\n    if (bars.length === 0) return totals\n\n    const totalsByIndex = new Map<string | number, number>()\n\n    const barWidth = bars[0].width\n    const barHeight = bars[0].height\n\n    if (groupMode === 'stacked') {\n        const totalsPositivesByIndex = new Map<string | number, number>()\n\n        bars.forEach(bar => {\n            const { indexValue, value } = bar.data\n            updateTotalsByIndex(totalsByIndex, indexValue, Number(value))\n            updateTotalsPositivesByIndex(totalsPositivesByIndex, indexValue, Number(value))\n        })\n\n        totalsPositivesByIndex.forEach((totalsPositive, indexValue) => {\n            const indexTotal = totalsByIndex.get(indexValue) || 0\n\n            let xPosition: number\n            let yPosition: number\n            let animationOffset: number\n\n            if (layout === 'vertical') {\n                xPosition = xScale(indexValue)\n                yPosition = yScale(totalsPositive)\n                animationOffset = yScale(totalsPositive / 2)\n            } else {\n                xPosition = xScale(totalsPositive)\n                yPosition = yScale(indexValue)\n                animationOffset = xScale(totalsPositive / 2)\n            }\n\n            xPosition += layout === 'vertical' ? barWidth / 2 : totalsOffset\n            yPosition += layout === 'vertical' ? -totalsOffset : barHeight / 2\n\n            totals.push({\n                key: 'total_' + indexValue,\n                x: xPosition,\n                y: yPosition,\n                value: indexTotal,\n                formattedValue: formatValue(indexTotal),\n                animationOffset,\n            })\n        })\n    } else if (groupMode === 'grouped') {\n        const greatestValueByIndex = new Map<string | number, number>()\n        const numberOfBarsByIndex = new Map()\n\n        bars.forEach(bar => {\n            const { indexValue, value } = bar.data\n            updateTotalsByIndex(totalsByIndex, indexValue, Number(value))\n            updateGreatestValueByIndex(greatestValueByIndex, indexValue, Number(value))\n            updateNumberOfBarsByIndex(numberOfBarsByIndex, indexValue)\n        })\n\n        greatestValueByIndex.forEach((greatestValue, indexValue) => {\n            const indexTotal = totalsByIndex.get(indexValue) || 0\n            const numberOfBars = numberOfBarsByIndex.get(indexValue)\n\n            let xPosition: number\n            let yPosition: number\n            let animationOffset: number\n\n            if (layout === 'vertical') {\n                xPosition = xScale(indexValue)\n                yPosition = yScale(greatestValue)\n                animationOffset = yScale(greatestValue / 2)\n            } else {\n                xPosition = xScale(greatestValue)\n                yPosition = yScale(indexValue)\n                animationOffset = xScale(greatestValue / 2)\n            }\n\n            const indexBarsWidth = numberOfBars * barWidth\n            const indexBarsHeight = numberOfBars * barHeight\n\n            xPosition += layout === 'vertical' ? indexBarsWidth / 2 : totalsOffset\n            yPosition += layout === 'vertical' ? -totalsOffset : indexBarsHeight / 2\n\n            totals.push({\n                key: 'total_' + indexValue,\n                x: xPosition,\n                y: yPosition,\n                value: indexTotal,\n                formattedValue: formatValue(indexTotal),\n                animationOffset,\n            })\n        })\n    }\n    return totals\n}\n\n// this function is used to compute the total value for the indexes. The total value is later rendered on the chart\nexport const updateTotalsByIndex = (\n    totalsByIndex: Map<string | number, number>,\n    indexValue: string | number,\n    value: number\n) => {\n    const currentIndexValue = totalsByIndex.get(indexValue) || 0\n    totalsByIndex.set(indexValue, currentIndexValue + value)\n}\n\n// this function is used to compute only the positive values of the indexes. Useful to position the text right above the last stacked bar. It prevents overlapping in case of negative values\nexport const updateTotalsPositivesByIndex = (\n    totalsPositivesByIndex: Map<string | number, number>,\n    indexValue: string | number,\n    value: number\n) => {\n    const currentIndexValue = totalsPositivesByIndex.get(indexValue) || 0\n    totalsPositivesByIndex.set(indexValue, currentIndexValue + (value > 0 ? value : 0))\n}\n\n// this function is used to keep track of the highest value for the indexes. Useful to position the text above the longest grouped bar\nexport const updateGreatestValueByIndex = (\n    greatestValueByIndex: Map<string | number, number>,\n    indexValue: string | number,\n    value: number\n) => {\n    const currentGreatestValue = greatestValueByIndex.get(indexValue) || 0\n    greatestValueByIndex.set(indexValue, Math.max(currentGreatestValue, Number(value)))\n}\n\n// this function is used to save the number of bars for the indexes. Useful to position the text in the middle of the grouped bars\nexport const updateNumberOfBarsByIndex = (\n    numberOfBarsByIndex: Map<string | number, number>,\n    indexValue: string | number\n) => {\n    const currentNumberOfBars = numberOfBarsByIndex.get(indexValue) || 0\n    numberOfBarsByIndex.set(indexValue, currentNumberOfBars + 1)\n}\n","import { useCallback, useMemo, useState } from 'react'\nimport { useInheritedColor, useOrdinalColorScale } from '@nivo/colors'\nimport { usePropertyAccessor, useTheme, useValueFormatter, Margin } from '@nivo/core'\nimport {\n    DataProps,\n    BarCommonProps,\n    BarDatum,\n    ComputedBarDatumWithValue,\n    LegendData,\n    BarLegendProps,\n} from './types'\nimport { defaultProps } from './props'\nimport { generateGroupedBars, generateStackedBars, getLegendData } from './compute'\nimport { computeBarTotals } from './compute/totals'\n\nexport const useBar = <RawDatum extends BarDatum>({\n    indexBy = defaultProps.indexBy,\n    keys = defaultProps.keys,\n    label = defaultProps.label,\n    tooltipLabel = defaultProps.tooltipLabel,\n    valueFormat,\n    colors = defaultProps.colors,\n    colorBy = defaultProps.colorBy,\n    borderColor = defaultProps.borderColor,\n    labelTextColor = defaultProps.labelTextColor,\n    groupMode = defaultProps.groupMode,\n    layout = defaultProps.layout,\n    reverse = defaultProps.reverse,\n    data,\n    minValue = defaultProps.minValue,\n    maxValue = defaultProps.maxValue,\n    margin,\n    width,\n    height,\n    padding = defaultProps.padding,\n    innerPadding = defaultProps.innerPadding,\n    valueScale = defaultProps.valueScale,\n    indexScale = defaultProps.indexScale,\n    initialHiddenIds = defaultProps.initialHiddenIds,\n    enableLabel = defaultProps.enableLabel,\n    labelSkipWidth = defaultProps.labelSkipWidth,\n    labelSkipHeight = defaultProps.labelSkipHeight,\n    legends = defaultProps.legends,\n    legendLabel,\n    totalsOffset = defaultProps.totalsOffset,\n}: {\n    indexBy?: BarCommonProps<RawDatum>['indexBy']\n    label?: BarCommonProps<RawDatum>['label']\n    tooltipLabel?: BarCommonProps<RawDatum>['tooltipLabel']\n    valueFormat?: BarCommonProps<RawDatum>['valueFormat']\n    colors?: BarCommonProps<RawDatum>['colors']\n    colorBy?: BarCommonProps<RawDatum>['colorBy']\n    borderColor?: BarCommonProps<RawDatum>['borderColor']\n    labelTextColor?: BarCommonProps<RawDatum>['labelTextColor']\n    groupMode?: BarCommonProps<RawDatum>['groupMode']\n    layout?: BarCommonProps<RawDatum>['layout']\n    reverse?: BarCommonProps<RawDatum>['reverse']\n    data: DataProps<RawDatum>['data']\n    keys?: BarCommonProps<RawDatum>['keys']\n    minValue?: BarCommonProps<RawDatum>['minValue']\n    maxValue?: BarCommonProps<RawDatum>['maxValue']\n    margin: Margin\n    width: number\n    height: number\n    padding?: BarCommonProps<RawDatum>['padding']\n    innerPadding?: BarCommonProps<RawDatum>['innerPadding']\n    valueScale?: BarCommonProps<RawDatum>['valueScale']\n    indexScale?: BarCommonProps<RawDatum>['indexScale']\n    initialHiddenIds?: BarCommonProps<RawDatum>['initialHiddenIds']\n    enableLabel?: BarCommonProps<RawDatum>['enableLabel']\n    labelSkipWidth?: BarCommonProps<RawDatum>['labelSkipWidth']\n    labelSkipHeight?: BarCommonProps<RawDatum>['labelSkipHeight']\n    legends?: BarCommonProps<RawDatum>['legends']\n    legendLabel?: BarCommonProps<RawDatum>['legendLabel']\n    totalsOffset?: BarCommonProps<RawDatum>['totalsOffset']\n}) => {\n    const [hiddenIds, setHiddenIds] = useState(initialHiddenIds ?? [])\n    const toggleSerie = useCallback((id: string | number) => {\n        setHiddenIds(state =>\n            state.indexOf(id) > -1 ? state.filter(item => item !== id) : [...state, id]\n        )\n    }, [])\n\n    const getIndex = usePropertyAccessor(indexBy)\n    const getLabel = usePropertyAccessor(label)\n    const getTooltipLabel = usePropertyAccessor(tooltipLabel)\n    const formatValue = useValueFormatter(valueFormat)\n\n    const theme = useTheme()\n    const getColor = useOrdinalColorScale(colors, colorBy)\n    const getBorderColor = useInheritedColor<ComputedBarDatumWithValue<RawDatum>>(\n        borderColor,\n        theme\n    )\n    const getLabelColor = useInheritedColor<ComputedBarDatumWithValue<RawDatum>>(\n        labelTextColor,\n        theme\n    )\n\n    const generateBars = groupMode === 'grouped' ? generateGroupedBars : generateStackedBars\n    const { bars, xScale, yScale } = generateBars({\n        layout,\n        reverse,\n        data,\n        getIndex,\n        keys,\n        minValue,\n        maxValue,\n        width,\n        height,\n        getColor,\n        padding,\n        innerPadding,\n        valueScale,\n        indexScale,\n        hiddenIds,\n        formatValue,\n        getTooltipLabel,\n        margin,\n    })\n\n    const barsWithValue = useMemo(\n        () =>\n            bars\n                .filter(\n                    (bar): bar is ComputedBarDatumWithValue<RawDatum> => bar.data.value !== null\n                )\n                .map((bar, index) => ({\n                    ...bar,\n                    index,\n                })),\n        [bars]\n    )\n\n    const shouldRenderBarLabel = useCallback(\n        ({ width, height }: { height: number; width: number }) => {\n            if (!enableLabel) return false\n            if (labelSkipWidth > 0 && width < labelSkipWidth) return false\n            if (labelSkipHeight > 0 && height < labelSkipHeight) return false\n            return true\n        },\n        [enableLabel, labelSkipWidth, labelSkipHeight]\n    )\n\n    const legendData = useMemo(\n        () =>\n            keys.map(key => {\n                const bar = bars.find(bar => bar.data.id === key)\n\n                return { ...bar, data: { id: key, ...bar?.data, hidden: hiddenIds.includes(key) } }\n            }),\n        [hiddenIds, keys, bars]\n    )\n\n    const legendsWithData: [BarLegendProps, LegendData[]][] = useMemo(\n        () =>\n            legends.map(legend => {\n                const data = getLegendData({\n                    bars: legend.dataFrom === 'keys' ? legendData : bars,\n                    direction: legend.direction,\n                    from: legend.dataFrom,\n                    groupMode,\n                    layout,\n                    legendLabel,\n                    reverse,\n                })\n\n                return [legend, data]\n            }),\n        [legends, legendData, bars, groupMode, layout, legendLabel, reverse]\n    )\n\n    const barTotals = useMemo(\n        () => computeBarTotals(bars, xScale, yScale, layout, groupMode, totalsOffset, formatValue),\n        [bars, xScale, yScale, layout, groupMode, totalsOffset, formatValue]\n    )\n\n    return {\n        bars,\n        barsWithValue,\n        xScale,\n        yScale,\n        getIndex,\n        getLabel,\n        getTooltipLabel,\n        formatValue,\n        getColor,\n        getBorderColor,\n        getLabelColor,\n        shouldRenderBarLabel,\n        hiddenIds,\n        toggleSerie,\n        legendsWithData,\n        barTotals,\n    }\n}\n","import { useTheme } from '@nivo/core'\nimport { AnimationConfig, animated, useTransition } from '@react-spring/web'\nimport { BarCommonProps, BarDatum } from './types'\nimport { svgDefaultProps } from './props'\nimport { BarTotalsData } from './compute/totals'\n\ninterface Props<RawDatum extends BarDatum> {\n    data: BarTotalsData[]\n    springConfig: Partial<AnimationConfig>\n    animate: boolean\n    layout?: BarCommonProps<RawDatum>['layout']\n}\n\nexport const BarTotals = <RawDatum extends BarDatum>({\n    data,\n    springConfig,\n    animate,\n    layout = svgDefaultProps.layout,\n}: Props<RawDatum>) => {\n    const theme = useTheme()\n    const totalsTransition = useTransition<\n        BarTotalsData,\n        {\n            x: number\n            y: number\n            labelOpacity: number\n        }\n    >(data, {\n        keys: barTotal => barTotal.key,\n        from: barTotal => ({\n            x: layout === 'vertical' ? barTotal.x : barTotal.animationOffset,\n            y: layout === 'vertical' ? barTotal.animationOffset : barTotal.y,\n            labelOpacity: 0,\n        }),\n        enter: barTotal => ({\n            x: barTotal.x,\n            y: barTotal.y,\n            labelOpacity: 1,\n        }),\n        update: barTotal => ({\n            x: barTotal.x,\n            y: barTotal.y,\n            labelOpacity: 1,\n        }),\n        leave: barTotal => ({\n            x: layout === 'vertical' ? barTotal.x : barTotal.animationOffset,\n            y: layout === 'vertical' ? barTotal.animationOffset : barTotal.y,\n            labelOpacity: 0,\n        }),\n        config: springConfig,\n        immediate: !animate,\n        initial: animate ? undefined : null,\n    })\n\n    return totalsTransition((style, barTotal) => (\n        <animated.text\n            key={barTotal.key}\n            x={style.x}\n            y={style.y}\n            fillOpacity={style.labelOpacity}\n            style={{\n                ...theme.labels.text,\n                pointerEvents: 'none',\n                fill: theme.text.fill,\n            }}\n            fontWeight=\"bold\"\n            fontSize={theme.labels.text.fontSize}\n            fontFamily={theme.labels.text.fontFamily}\n            textAnchor={layout === 'vertical' ? 'middle' : 'start'}\n            alignmentBaseline={layout === 'vertical' ? 'alphabetic' : 'middle'}\n        >\n            {barTotal.formattedValue}\n        </animated.text>\n    ))\n}\n","import { Axes, Grid } from '@nivo/axes'\nimport {\n    CartesianMarkers,\n    Container,\n    SvgWrapper,\n    // @ts-ignore\n    bindDefs,\n    useDimensions,\n    useMotionConfig,\n} from '@nivo/core'\nimport { useTransition } from '@react-spring/web'\nimport { Fragment, ReactNode, createElement, useMemo } from 'react'\nimport { BarAnnotations } from './BarAnnotations'\nimport { BarLegends } from './BarLegends'\nimport { useBar } from './hooks'\nimport { svgDefaultProps } from './props'\nimport {\n    BarCustomLayerProps,\n    BarDatum,\n    BarItemProps,\n    BarLayer,\n    BarLayerId,\n    BarSvgProps,\n    ComputedBarDatumWithValue,\n} from './types'\nimport { BarTotals } from './BarTotals'\nimport { useComputeLabelLayout } from './compute/common'\n\ntype InnerBarProps<RawDatum extends BarDatum> = Omit<\n    BarSvgProps<RawDatum>,\n    'animate' | 'motionConfig' | 'renderWrapper' | 'theme'\n>\n\nconst InnerBar = <RawDatum extends BarDatum>({\n    data,\n    indexBy,\n    keys,\n\n    margin: partialMargin,\n    width,\n    height,\n\n    groupMode,\n    layout,\n    reverse,\n    minValue,\n    maxValue,\n\n    valueScale,\n    indexScale,\n\n    padding,\n    innerPadding,\n\n    axisTop,\n    axisRight,\n    axisBottom = svgDefaultProps.axisBottom,\n    axisLeft = svgDefaultProps.axisLeft,\n    enableGridX = svgDefaultProps.enableGridX,\n    enableGridY = svgDefaultProps.enableGridY,\n    gridXValues,\n    gridYValues,\n\n    layers = svgDefaultProps.layers as readonly BarLayer<RawDatum>[],\n    barComponent = svgDefaultProps.barComponent,\n\n    enableLabel = svgDefaultProps.enableLabel,\n    label,\n    labelSkipWidth = svgDefaultProps.labelSkipWidth,\n    labelSkipHeight = svgDefaultProps.labelSkipHeight,\n    labelTextColor,\n    labelPosition = svgDefaultProps.labelPosition,\n    labelOffset = svgDefaultProps.labelOffset,\n\n    markers = svgDefaultProps.markers,\n\n    colorBy,\n    colors,\n    defs = svgDefaultProps.defs,\n    fill = svgDefaultProps.fill,\n    borderRadius = svgDefaultProps.borderRadius,\n    borderWidth = svgDefaultProps.borderWidth,\n    borderColor,\n\n    annotations = svgDefaultProps.annotations,\n\n    legendLabel,\n    tooltipLabel,\n\n    valueFormat,\n\n    isInteractive = svgDefaultProps.isInteractive,\n    tooltip = svgDefaultProps.tooltip,\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n\n    legends,\n\n    role = svgDefaultProps.role,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n    isFocusable = svgDefaultProps.isFocusable,\n    barAriaLabel,\n    barAriaLabelledBy,\n    barAriaDescribedBy,\n    barAriaHidden,\n    barAriaDisabled,\n\n    initialHiddenIds,\n\n    enableTotals = svgDefaultProps.enableTotals,\n    totalsOffset = svgDefaultProps.totalsOffset,\n}: InnerBarProps<RawDatum>) => {\n    const { animate, config: springConfig } = useMotionConfig()\n    const { outerWidth, outerHeight, margin, innerWidth, innerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const {\n        bars,\n        barsWithValue,\n        xScale,\n        yScale,\n        getLabel,\n        getTooltipLabel,\n        getBorderColor,\n        getLabelColor,\n        shouldRenderBarLabel,\n        toggleSerie,\n        legendsWithData,\n        barTotals,\n        getColor,\n    } = useBar<RawDatum>({\n        indexBy,\n        label,\n        tooltipLabel,\n        valueFormat,\n        colors,\n        colorBy,\n        borderColor,\n        labelTextColor,\n        groupMode,\n        layout,\n        reverse,\n        data,\n        keys,\n        minValue,\n        maxValue,\n        margin,\n        width: innerWidth,\n        height: innerHeight,\n        padding,\n        innerPadding,\n        valueScale,\n        indexScale,\n        enableLabel,\n        labelSkipWidth,\n        labelSkipHeight,\n        legends,\n        legendLabel,\n        initialHiddenIds,\n        totalsOffset,\n    })\n\n    const computeLabelLayout = useComputeLabelLayout(layout, reverse, labelPosition, labelOffset)\n\n    const transition = useTransition<\n        ComputedBarDatumWithValue<RawDatum>,\n        {\n            borderColor: string\n            color: string\n            height: number\n            labelColor: string\n            labelOpacity: number\n            labelX: number\n            labelY: number\n            opacity: number\n            transform: string\n            width: number\n            textAnchor: BarItemProps<RawDatum>['style']['textAnchor']\n        }\n    >(barsWithValue, {\n        keys: bar => bar.key,\n        from: bar => ({\n            borderColor: getBorderColor(bar) as string,\n            color: bar.color,\n            height: 0,\n            labelColor: getLabelColor(bar) as string,\n            labelOpacity: 0,\n            ...computeLabelLayout(bar.width, bar.height),\n            transform: `translate(${bar.x}, ${bar.y + bar.height})`,\n            width: bar.width,\n            ...(layout === 'vertical'\n                ? {}\n                : {\n                      height: bar.height,\n                      transform: `translate(${bar.x}, ${bar.y})`,\n                      width: 0,\n                  }),\n        }),\n        enter: bar => ({\n            borderColor: getBorderColor(bar) as string,\n            color: bar.color,\n            height: bar.height,\n            labelColor: getLabelColor(bar) as string,\n            labelOpacity: 1,\n            ...computeLabelLayout(bar.width, bar.height),\n            transform: `translate(${bar.x}, ${bar.y})`,\n            width: bar.width,\n        }),\n        update: bar => ({\n            borderColor: getBorderColor(bar) as string,\n            color: bar.color,\n            height: bar.height,\n            labelColor: getLabelColor(bar) as string,\n            labelOpacity: 1,\n            ...computeLabelLayout(bar.width, bar.height),\n            transform: `translate(${bar.x}, ${bar.y})`,\n            width: bar.width,\n        }),\n        leave: bar => ({\n            borderColor: getBorderColor(bar) as string,\n            color: bar.color,\n            height: 0,\n            labelColor: getLabelColor(bar) as string,\n            labelOpacity: 0,\n            ...computeLabelLayout(bar.width, bar.height),\n            labelY: 0,\n            transform: `translate(${bar.x}, ${bar.y + bar.height})`,\n            width: bar.width,\n            ...(layout === 'vertical'\n                ? {}\n                : {\n                      ...computeLabelLayout(bar.width, bar.height),\n                      labelX: 0,\n                      height: bar.height,\n                      transform: `translate(${bar.x}, ${bar.y})`,\n                      width: 0,\n                  }),\n        }),\n        config: springConfig,\n        immediate: !animate,\n        initial: animate ? undefined : null,\n    })\n\n    const commonProps = useMemo(\n        () => ({\n            borderRadius,\n            borderWidth,\n            enableLabel,\n            isInteractive,\n            labelSkipWidth,\n            labelSkipHeight,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n            getTooltipLabel,\n            tooltip,\n            isFocusable,\n            ariaLabel: barAriaLabel,\n            ariaLabelledBy: barAriaLabelledBy,\n            ariaDescribedBy: barAriaDescribedBy,\n            ariaHidden: barAriaHidden,\n            ariaDisabled: barAriaDisabled,\n        }),\n        [\n            borderRadius,\n            borderWidth,\n            enableLabel,\n            getTooltipLabel,\n            isInteractive,\n            labelSkipHeight,\n            labelSkipWidth,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n            tooltip,\n            isFocusable,\n            barAriaLabel,\n            barAriaLabelledBy,\n            barAriaDescribedBy,\n            barAriaHidden,\n            barAriaDisabled,\n        ]\n    )\n\n    const boundDefs = bindDefs(defs, bars, fill, {\n        dataKey: 'data',\n        targetKey: 'data.fill',\n    })\n\n    const layerById: Record<BarLayerId, ReactNode> = {\n        annotations: null,\n        axes: null,\n        bars: null,\n        grid: null,\n        legends: null,\n        markers: null,\n        totals: null,\n    }\n\n    if (layers.includes('annotations')) {\n        layerById.annotations = (\n            <BarAnnotations key=\"annotations\" bars={bars} annotations={annotations} />\n        )\n    }\n\n    if (layers.includes('axes')) {\n        layerById.axes = (\n            <Axes\n                key=\"axes\"\n                xScale={xScale}\n                yScale={yScale}\n                width={innerWidth}\n                height={innerHeight}\n                top={axisTop}\n                right={axisRight}\n                bottom={axisBottom}\n                left={axisLeft}\n            />\n        )\n    }\n\n    if (layers.includes('bars')) {\n        layerById.bars = (\n            <Fragment key=\"bars\">\n                {transition((style, bar) =>\n                    createElement(barComponent, {\n                        ...commonProps,\n                        bar,\n                        style,\n                        shouldRenderLabel: shouldRenderBarLabel(bar),\n                        label: getLabel(bar.data),\n                    })\n                )}\n            </Fragment>\n        )\n    }\n\n    if (layers.includes('grid')) {\n        layerById.grid = (\n            <Grid\n                key=\"grid\"\n                width={innerWidth}\n                height={innerHeight}\n                xScale={enableGridX ? xScale : null}\n                yScale={enableGridY ? yScale : null}\n                xValues={gridXValues}\n                yValues={gridYValues}\n            />\n        )\n    }\n\n    if (layers.includes('legends')) {\n        layerById.legends = (\n            <BarLegends\n                key=\"legends\"\n                width={innerWidth}\n                height={innerHeight}\n                legends={legendsWithData}\n                toggleSerie={toggleSerie}\n            />\n        )\n    }\n\n    if (layers.includes('markers')) {\n        layerById.markers = (\n            <CartesianMarkers<number | string, number>\n                key=\"markers\"\n                markers={markers as any[]}\n                width={innerWidth}\n                height={innerHeight}\n                xScale={xScale as (v: number | string) => number}\n                yScale={yScale as (v: number) => number}\n            />\n        )\n    }\n\n    if (layers.includes('totals') && enableTotals) {\n        layerById.totals = (\n            <BarTotals\n                key=\"totals\"\n                data={barTotals}\n                springConfig={springConfig}\n                animate={animate}\n                layout={layout}\n            />\n        )\n    }\n\n    const layerContext: BarCustomLayerProps<RawDatum> = useMemo(\n        () => ({\n            ...commonProps,\n            margin,\n            width,\n            height,\n            innerWidth,\n            innerHeight,\n            bars,\n            legendData: legendsWithData,\n            enableLabel,\n            xScale,\n            yScale,\n            tooltip,\n            getTooltipLabel,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n            getColor,\n        }),\n        [\n            commonProps,\n            margin,\n            width,\n            height,\n            innerWidth,\n            innerHeight,\n            bars,\n            legendsWithData,\n            enableLabel,\n            xScale,\n            yScale,\n            tooltip,\n            getTooltipLabel,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n            getColor,\n        ]\n    )\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            defs={boundDefs}\n            role={role}\n            ariaLabel={ariaLabel}\n            ariaLabelledBy={ariaLabelledBy}\n            ariaDescribedBy={ariaDescribedBy}\n            isFocusable={isFocusable}\n        >\n            {layers.map((layer, i) => {\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, layerContext)}</Fragment>\n                }\n\n                return layerById?.[layer] ?? null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const Bar = <RawDatum extends BarDatum>({\n    isInteractive = svgDefaultProps.isInteractive,\n    animate = svgDefaultProps.animate,\n    motionConfig = svgDefaultProps.motionConfig,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: BarSvgProps<RawDatum>) => (\n    <Container\n        {...{\n            animate,\n            isInteractive,\n            motionConfig,\n            renderWrapper,\n            theme,\n        }}\n    >\n        <InnerBar<RawDatum> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import {\n    BarCanvasCustomLayerProps,\n    BarCanvasLayer,\n    BarCanvasProps,\n    BarCommonProps,\n    BarDatum,\n    ComputedBarDatum,\n} from './types'\nimport {\n    CompleteTheme,\n    Container,\n    Margin,\n    getRelativeCursor,\n    isCursorInRect,\n    useDimensions,\n    useTheme,\n    useValueFormatter,\n} from '@nivo/core'\nimport {\n    ForwardedRef,\n    createElement,\n    forwardRef,\n    useCallback,\n    useEffect,\n    useMemo,\n    useRef,\n} from 'react'\nimport { canvasDefaultProps } from './props'\nimport {\n    renderAnnotationsToCanvas,\n    useAnnotations,\n    useComputedAnnotations,\n} from '@nivo/annotations'\nimport { renderAxesToCanvas, renderGridLinesToCanvas } from '@nivo/axes'\nimport { renderLegendToCanvas } from '@nivo/legends'\nimport { useTooltip } from '@nivo/tooltip'\nimport { useBar } from './hooks'\nimport { BarTotalsData } from './compute/totals'\nimport { useComputeLabelLayout } from './compute/common'\n\ntype InnerBarCanvasProps<RawDatum extends BarDatum> = Omit<\n    BarCanvasProps<RawDatum>,\n    'renderWrapper' | 'theme'\n> & {\n    canvasRef: ForwardedRef<HTMLCanvasElement>\n}\n\nconst findBarUnderCursor = <RawDatum,>(\n    nodes: ComputedBarDatum<RawDatum>[],\n    margin: Margin,\n    x: number,\n    y: number\n) =>\n    nodes.find(node =>\n        isCursorInRect(node.x + margin.left, node.y + margin.top, node.width, node.height, x, y)\n    )\n\nconst isNumber = (value: unknown): value is number => typeof value === 'number'\n\nfunction renderTotalsToCanvas<RawDatum extends BarDatum>(\n    ctx: CanvasRenderingContext2D,\n    barTotals: BarTotalsData[],\n    theme: CompleteTheme,\n    layout: BarCommonProps<RawDatum>['layout'] = canvasDefaultProps.layout\n) {\n    ctx.fillStyle = theme.text.fill\n    ctx.font = `bold ${theme.labels.text.fontSize}px ${theme.labels.text.fontFamily}`\n    ctx.textBaseline = layout === 'vertical' ? 'alphabetic' : 'middle'\n    ctx.textAlign = layout === 'vertical' ? 'center' : 'start'\n\n    barTotals.forEach(barTotal => {\n        ctx.fillText(barTotal.formattedValue, barTotal.x, barTotal.y)\n    })\n}\n\nconst InnerBarCanvas = <RawDatum extends BarDatum>({\n    data,\n    indexBy,\n    keys,\n\n    margin: partialMargin,\n    width,\n    height,\n\n    groupMode,\n    layout,\n    reverse,\n    minValue,\n    maxValue,\n\n    valueScale,\n    indexScale,\n\n    padding,\n    innerPadding,\n\n    axisTop,\n    axisRight,\n    axisBottom = canvasDefaultProps.axisBottom,\n    axisLeft = canvasDefaultProps.axisLeft,\n    enableGridX = canvasDefaultProps.enableGridX,\n    enableGridY = canvasDefaultProps.enableGridY,\n    gridXValues,\n    gridYValues,\n\n    labelPosition = canvasDefaultProps.labelPosition,\n    labelOffset = canvasDefaultProps.labelOffset,\n\n    layers = canvasDefaultProps.layers as BarCanvasLayer<RawDatum>[],\n    renderBar = (\n        ctx,\n        {\n            bar: { color, height, width, x, y },\n\n            borderColor,\n            borderRadius,\n            borderWidth,\n            label,\n            labelColor,\n            shouldRenderLabel,\n            labelX,\n            labelY,\n            textAnchor,\n        }\n    ) => {\n        ctx.fillStyle = color\n\n        if (borderWidth > 0) {\n            ctx.strokeStyle = borderColor\n            ctx.lineWidth = borderWidth\n        }\n\n        ctx.beginPath()\n\n        if (borderRadius > 0) {\n            const radius = Math.min(borderRadius, height)\n\n            ctx.moveTo(x + radius, y)\n            ctx.lineTo(x + width - radius, y)\n            ctx.quadraticCurveTo(x + width, y, x + width, y + radius)\n            ctx.lineTo(x + width, y + height - radius)\n            ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height)\n            ctx.lineTo(x + radius, y + height)\n            ctx.quadraticCurveTo(x, y + height, x, y + height - radius)\n            ctx.lineTo(x, y + radius)\n            ctx.quadraticCurveTo(x, y, x + radius, y)\n            ctx.closePath()\n        } else {\n            ctx.rect(x, y, width, height)\n        }\n\n        ctx.fill()\n\n        if (borderWidth > 0) {\n            ctx.stroke()\n        }\n\n        if (shouldRenderLabel) {\n            ctx.textBaseline = 'middle'\n            ctx.textAlign = textAnchor === 'middle' ? 'center' : textAnchor\n            ctx.fillStyle = labelColor\n            ctx.fillText(label, x + labelX, y + labelY)\n        }\n    },\n\n    enableLabel = canvasDefaultProps.enableLabel,\n    label,\n    labelSkipWidth = canvasDefaultProps.labelSkipWidth,\n    labelSkipHeight = canvasDefaultProps.labelSkipHeight,\n    labelTextColor,\n\n    colorBy,\n    colors,\n    borderRadius = canvasDefaultProps.borderRadius,\n    borderWidth = canvasDefaultProps.borderWidth,\n    borderColor,\n\n    annotations = canvasDefaultProps.annotations,\n\n    legendLabel,\n    tooltipLabel,\n\n    valueFormat,\n\n    isInteractive = canvasDefaultProps.isInteractive,\n    tooltip = canvasDefaultProps.tooltip,\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n\n    legends,\n\n    pixelRatio = canvasDefaultProps.pixelRatio,\n\n    canvasRef,\n\n    enableTotals = canvasDefaultProps.enableTotals,\n    totalsOffset = canvasDefaultProps.totalsOffset,\n}: InnerBarCanvasProps<RawDatum>) => {\n    const canvasEl = useRef<HTMLCanvasElement | null>(null)\n\n    const theme = useTheme()\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const {\n        bars,\n        barsWithValue,\n        xScale,\n        yScale,\n        getLabel,\n        getTooltipLabel,\n        getBorderColor,\n        getLabelColor,\n        shouldRenderBarLabel,\n        legendsWithData,\n        barTotals,\n        getColor,\n    } = useBar<RawDatum>({\n        indexBy,\n        label,\n        tooltipLabel,\n        valueFormat,\n        colors,\n        colorBy,\n        borderColor,\n        labelTextColor,\n        groupMode,\n        layout,\n        reverse,\n        data,\n        keys,\n        minValue,\n        maxValue,\n        margin,\n        width: innerWidth,\n        height: innerHeight,\n        padding,\n        innerPadding,\n        valueScale,\n        indexScale,\n        enableLabel,\n        labelSkipWidth,\n        labelSkipHeight,\n        legends,\n        legendLabel,\n        totalsOffset,\n    })\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    // Using any because return type isn't correct\n    const boundAnnotations: any = useComputedAnnotations({\n        annotations: useAnnotations({\n            data: bars,\n            annotations,\n            getPosition: node => ({\n                x: node.x,\n                y: node.y,\n            }),\n            getDimensions: ({ width, height }) => ({\n                width,\n                height,\n                size: Math.max(width, height),\n            }),\n        }),\n    })\n\n    // We use `any` here until we can figure out the best way to type xScale/yScale\n    const layerContext: BarCanvasCustomLayerProps<RawDatum> = useMemo(\n        () => ({\n            borderRadius,\n            borderWidth,\n            isInteractive,\n            isFocusable: false,\n            labelSkipWidth,\n            labelSkipHeight,\n            margin,\n            width,\n            height,\n            innerWidth,\n            innerHeight,\n            bars,\n            legendData: legendsWithData,\n            enableLabel,\n            xScale,\n            yScale,\n            tooltip,\n            getTooltipLabel,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n            getColor,\n        }),\n        [\n            borderRadius,\n            borderWidth,\n            isInteractive,\n            labelSkipWidth,\n            labelSkipHeight,\n            margin,\n            width,\n            height,\n            innerWidth,\n            innerHeight,\n            bars,\n            legendsWithData,\n            enableLabel,\n            xScale,\n            yScale,\n            tooltip,\n            getTooltipLabel,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n            getColor,\n        ]\n    )\n\n    const formatValue = useValueFormatter(valueFormat)\n    const computeLabelLayout = useComputeLabelLayout(layout, reverse, labelPosition, labelOffset)\n\n    useEffect(() => {\n        const ctx = canvasEl.current?.getContext('2d')\n\n        if (!canvasEl.current) return\n        if (!ctx) return\n\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n        ctx.translate(margin.left, margin.top)\n\n        layers.forEach(layer => {\n            if (layer === 'grid') {\n                if (isNumber(theme.grid.line.strokeWidth) && theme.grid.line.strokeWidth > 0) {\n                    ctx.lineWidth = theme.grid.line.strokeWidth\n                    ctx.strokeStyle = theme.grid.line.stroke as string\n\n                    if (enableGridX) {\n                        renderGridLinesToCanvas<string | number>(ctx, {\n                            width: innerWidth,\n                            height: innerHeight,\n                            scale: xScale,\n                            axis: 'x',\n                            values: gridXValues,\n                        })\n                    }\n\n                    if (enableGridY) {\n                        renderGridLinesToCanvas<string | number>(ctx, {\n                            width: innerWidth,\n                            height: innerHeight,\n                            scale: yScale,\n                            axis: 'y',\n                            values: gridYValues,\n                        })\n                    }\n                }\n            } else if (layer === 'axes') {\n                renderAxesToCanvas(ctx, {\n                    xScale: xScale,\n                    yScale: yScale,\n                    width: innerWidth,\n                    height: innerHeight,\n                    top: axisTop,\n                    right: axisRight,\n                    bottom: axisBottom,\n                    left: axisLeft,\n                    theme,\n                })\n            } else if (layer === 'bars') {\n                barsWithValue.forEach(bar => {\n                    renderBar(ctx, {\n                        bar,\n                        borderColor: getBorderColor(bar) as string,\n                        borderRadius,\n                        borderWidth,\n                        label: getLabel(bar.data),\n                        labelColor: getLabelColor(bar) as string,\n                        shouldRenderLabel: shouldRenderBarLabel(bar),\n                        ...computeLabelLayout(bar.width, bar.height),\n                    })\n                })\n            } else if (layer === 'legends') {\n                legendsWithData.forEach(([legend, data]) => {\n                    renderLegendToCanvas(ctx, {\n                        ...legend,\n                        data,\n                        containerWidth: innerWidth,\n                        containerHeight: innerHeight,\n                        theme,\n                    })\n                })\n            } else if (layer === 'annotations') {\n                renderAnnotationsToCanvas(ctx, { annotations: boundAnnotations, theme })\n            } else if (layer === 'totals' && enableTotals) {\n                renderTotalsToCanvas(ctx, barTotals, theme, layout)\n            } else if (typeof layer === 'function') {\n                layer(ctx, layerContext)\n            }\n        })\n\n        ctx.save()\n    }, [\n        axisBottom,\n        axisLeft,\n        axisRight,\n        axisTop,\n        barsWithValue,\n        borderRadius,\n        borderWidth,\n        boundAnnotations,\n        enableGridX,\n        enableGridY,\n        getBorderColor,\n        getLabel,\n        getLabelColor,\n        gridXValues,\n        gridYValues,\n        groupMode,\n        height,\n        innerHeight,\n        innerWidth,\n        layerContext,\n        layers,\n        layout,\n        legendsWithData,\n        margin.left,\n        margin.top,\n        outerHeight,\n        outerWidth,\n        pixelRatio,\n        renderBar,\n        xScale,\n        yScale,\n        reverse,\n        shouldRenderBarLabel,\n        theme,\n        width,\n        barTotals,\n        enableTotals,\n        formatValue,\n        computeLabelLayout,\n    ])\n\n    const handleMouseHover = useCallback(\n        (event: React.MouseEvent<HTMLCanvasElement>) => {\n            if (!bars) return\n            if (!canvasEl.current) return\n\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            const bar = findBarUnderCursor(bars, margin, x, y)\n\n            if (bar !== undefined) {\n                showTooltipFromEvent(\n                    createElement(tooltip, {\n                        ...bar.data,\n                        color: bar.color,\n                        label: bar.label,\n                        value: Number(bar.data.value),\n                    }),\n                    event\n                )\n\n                if (event.type === 'mouseenter') {\n                    onMouseEnter?.(bar.data, event)\n                }\n            } else {\n                hideTooltip()\n            }\n        },\n        [hideTooltip, margin, onMouseEnter, bars, showTooltipFromEvent, tooltip]\n    )\n\n    const handleMouseLeave = useCallback(\n        (event: React.MouseEvent<HTMLCanvasElement>) => {\n            if (!bars) return\n            if (!canvasEl.current) return\n\n            hideTooltip()\n\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            const bar = findBarUnderCursor(bars, margin, x, y)\n\n            if (bar) {\n                onMouseLeave?.(bar.data, event)\n            }\n        },\n        [hideTooltip, margin, onMouseLeave, bars]\n    )\n\n    const handleClick = useCallback(\n        (event: React.MouseEvent<HTMLCanvasElement>) => {\n            if (!bars) return\n            if (!canvasEl.current) return\n\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            const bar = findBarUnderCursor(bars, margin, x, y)\n\n            if (bar !== undefined) {\n                onClick?.({ ...bar.data, color: bar.color }, event)\n            }\n        },\n        [margin, onClick, bars]\n    )\n\n    return (\n        <canvas\n            ref={canvas => {\n                canvasEl.current = canvas\n                if (canvasRef && 'current' in canvasRef) canvasRef.current = canvas\n            }}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n                cursor: isInteractive ? 'auto' : 'normal',\n            }}\n            onMouseEnter={isInteractive ? handleMouseHover : undefined}\n            onMouseMove={isInteractive ? handleMouseHover : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onClick={isInteractive ? handleClick : undefined}\n        />\n    )\n}\n\nexport const BarCanvas = forwardRef(\n    <RawDatum extends BarDatum>(\n        { isInteractive, renderWrapper, theme, ...props }: BarCanvasProps<RawDatum>,\n        ref: ForwardedRef<HTMLCanvasElement>\n    ) => (\n        <Container {...{ isInteractive, renderWrapper, theme }} animate={false}>\n            <InnerBarCanvas<RawDatum> {...props} canvasRef={ref} />\n        </Container>\n    )\n)\n","import { Bar } from './Bar'\nimport { BarDatum, BarSvgProps } from './types'\nimport { ResponsiveWrapper } from '@nivo/core'\n\nexport type ResponsiveBarSvgProps<RawDatum extends BarDatum> = Omit<\n    BarSvgProps<RawDatum>,\n    'height' | 'width'\n>\n\nexport const ResponsiveBar = <RawDatum extends BarDatum>(\n    props: ResponsiveBarSvgProps<RawDatum>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <Bar<RawDatum> width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n","import { BarDatum, BarCanvasProps } from './types'\nimport { BarCanvas } from './BarCanvas'\nimport { ForwardedRef, forwardRef } from 'react'\nimport { ResponsiveWrapper } from '@nivo/core'\n\nexport type ResponsiveBarCanvasProps<RawDatum extends BarDatum> = Omit<\n    BarCanvasProps<RawDatum>,\n    'height' | 'width'\n>\n\nexport const ResponsiveBarCanvas = forwardRef(function ResponsiveBarCanvas<\n    RawDatum extends BarDatum\n>(props: ResponsiveBarCanvasProps<RawDatum>, ref: ForwardedRef<HTMLCanvasElement>) {\n    return (\n        <ResponsiveWrapper>\n            {({ width, height }) => (\n                <BarCanvas\n                    width={width}\n                    height={height}\n                    {...(props as Omit<BarCanvasProps<BarDatum>, 'height' | 'width'>)}\n                    ref={ref}\n                />\n            )}\n        </ResponsiveWrapper>\n    )\n})\n"],"names":["BarAnnotations","_ref","bars","annotations","boundAnnotations","useAnnotations","data","getPosition","bar","x","width","y","height","getDimensions","_ref2","size","Math","max","_jsx","_Fragment","children","map","annotation","i","Annotation","_extends","BarLegends","legends","toggleSerie","_legend$data","legend","BoxLegendSvg","containerWidth","containerHeight","dataFrom","undefined","BarItem","_data$fill","_ref$bar","_objectWithoutPropertiesLoose","_excluded","_ref$style","style","borderColor","color","labelColor","labelOpacity","labelX","labelY","transform","textAnchor","borderRadius","borderWidth","label","shouldRenderLabel","isInteractive","onClick","onMouseEnter","onMouseLeave","tooltip","isFocusable","ariaLabel","ariaLabelledBy","ariaDescribedBy","ariaDisabled","ariaHidden","theme","useTheme","_useTooltip","useTooltip","showTooltipFromEvent","showTooltipAt","hideTooltip","renderTooltip","useMemo","createElement","handleClick","useCallback","event","handleTooltip","handleMouseEnter","handleMouseLeave","handleFocus","absX","absY","handleBlur","_jsxs","animated","g","rect","to","value","rx","ry","fill","strokeWidth","stroke","focusable","tabIndex","onMouseMove","onFocus","onBlur","text","dominantBaseline","fillOpacity","labels","pointerEvents","BarTooltip","BasicTooltip","id","formattedValue","enableChip","defaultProps","indexBy","keys","groupMode","layout","reverse","minValue","maxValue","valueScale","type","indexScale","round","padding","innerPadding","axisBottom","axisLeft","enableGridX","enableGridY","enableLabel","labelPosition","labelOffset","labelSkipWidth","labelSkipHeight","labelTextColor","from","colorBy","colors","scheme","tooltipLabel","datum","indexValue","initialHiddenIds","markers","enableTotals","totalsOffset","svgDefaultProps","layers","barComponent","defs","animate","motionConfig","role","canvasDefaultProps","pixelRatio","window","_window$devicePixelRa","devicePixelRatio","getIndexScale","getIndex","axis","computeScale","all","min","normalizeData","item","reduce","acc","key","filterNullValues","Object","coerceValue","Number","useComputeLabelLayout","computedLabelOffset","gt","other","lt","range","start","end","Array","repeat","_","index","clampToZero","generateVerticalGroupedBars","barWidth","yRef","formatValue","getColor","getTooltipLabel","_ref$innerPadding","xScale","yScale","margin","compare","cleanedData","forEach","domain","length","_xScale","d","_yScale","_coerceValue","rawValue","barHeight","_yScale2","getHeight","barData","hidden","push","left","top","generateHorizontalGroupedBars","xRef","_ref2$innerPadding","_yScale3","_xScale2","_coerceValue2","_xScale3","getWidth","generateGroupedBars","_ref3","_scale","_ref3$padding","_ref3$innerPadding","indexScaleConfig","_ref3$hiddenIds","hiddenIds","props","filter","includes","_ref4","otherAxis","scaleSpec","clampMin","values","entry","concat","k","Boolean","apply","isFinite","scale","_ref5","bandwidth","params","flattenDeep","arr","some","isArray","generateVerticalStackedBars","stackedData","stackedDataItem","_getY","getY","generateHorizontalStackedBars","_getX","getX","generateStackedBars","array","_ref4$padding","_ref4$hiddenIds","stack","offset","stackOffsetDiverging","num","_ref6","getLegendData","direction","legendLabel","getLegendLabel","getPropertyAccessor","uniqBy","_bar$data$indexValue","_bar$color2","getLegendDataForIndexes","_bar$color","getLegendDataForKeys","updateTotalsByIndex","totalsByIndex","currentIndexValue","get","set","updateTotalsPositivesByIndex","totalsPositivesByIndex","updateGreatestValueByIndex","greatestValueByIndex","currentGreatestValue","updateNumberOfBarsByIndex","numberOfBarsByIndex","currentNumberOfBars","useBar","_ref$indexBy","_ref$keys","_ref$label","_ref$tooltipLabel","valueFormat","_ref$colors","_ref$colorBy","_ref$borderColor","_ref$labelTextColor","_ref$groupMode","_ref$layout","_ref$reverse","_ref$minValue","_ref$maxValue","_ref$padding","_ref$valueScale","_ref$indexScale","_ref$initialHiddenIds","_ref$enableLabel","_ref$labelSkipWidth","_ref$labelSkipHeight","_ref$legends","_ref$totalsOffset","_useState","useState","setHiddenIds","state","indexOf","usePropertyAccessor","getLabel","useValueFormatter","useOrdinalColorScale","getBorderColor","useInheritedColor","getLabelColor","_generateBars","barsWithValue","shouldRenderBarLabel","legendData","find","legendsWithData","barTotals","totals","Map","_bar$data","totalsPositive","xPosition","yPosition","animationOffset","indexTotal","_bar$data2","greatestValue","numberOfBars","computeBarTotals","BarTotals","springConfig","useTransition","barTotal","enter","update","leave","config","immediate","initial","totalsTransition","fontWeight","fontSize","fontFamily","alignmentBaseline","InnerBar","partialMargin","axisTop","axisRight","_ref$axisBottom","_ref$axisLeft","_ref$enableGridX","_ref$enableGridY","gridXValues","gridYValues","_ref$layers","_ref$barComponent","_ref$labelPosition","_ref$labelOffset","_ref$markers","_ref$defs","_ref$fill","_ref$borderRadius","_ref$borderWidth","_ref$annotations","_ref$isInteractive","_ref$tooltip","_ref$role","_ref$isFocusable","barAriaLabel","barAriaLabelledBy","barAriaDescribedBy","barAriaHidden","barAriaDisabled","_ref$enableTotals","_useMotionConfig","useMotionConfig","_useDimensions","useDimensions","outerWidth","outerHeight","innerWidth","innerHeight","_useBar","computeLabelLayout","transition","commonProps","boundDefs","bindDefs","dataKey","targetKey","layerById","axes","grid","Axes","right","bottom","Fragment","Grid","xValues","yValues","CartesianMarkers","layerContext","SvgWrapper","layer","_layerById$layer","Bar","_ref2$isInteractive","_ref2$animate","_ref2$motionConfig","renderWrapper","otherProps","Container","findBarUnderCursor","nodes","node","isCursorInRect","InnerBarCanvas","_ref$renderBar","renderBar","ctx","_ref2$bar","fillStyle","strokeStyle","lineWidth","beginPath","radius","moveTo","lineTo","quadraticCurveTo","closePath","textBaseline","textAlign","fillText","_ref$pixelRatio","canvasRef","canvasEl","useRef","useComputedAnnotations","useEffect","_canvasEl$current","current","getContext","background","fillRect","translate","line","renderGridLinesToCanvas","renderAxesToCanvas","renderLegendToCanvas","renderAnnotationsToCanvas","font","renderTotalsToCanvas","save","handleMouseHover","_getRelativeCursor","getRelativeCursor","_getRelativeCursor2","_getRelativeCursor3","ref","canvas","cursor","BarCanvas","forwardRef","ResponsiveBar","ResponsiveWrapper","ResponsiveBarCanvas"],"mappings":"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"}