{"version":3,"file":"nivo-bar.cjs.js","sources":["../src/BarAnnotations.tsx","../src/BarLegends.tsx","../src/BarItem.tsx","../src/BarTooltip.tsx","../src/props.ts","../src/compute/common.ts","../src/compute/grouped.ts","../src/compute/stacked.ts","../src/compute/legends.ts","../src/compute/totals.ts","../src/hooks.ts","../src/BarTotals.tsx","../src/Bar.tsx","../src/BarCanvas.tsx","../src/ResponsiveBarCanvas.tsx","../src/ResponsiveBar.tsx"],"sourcesContent":["import { Annotation, useAnnotations } from '@nivo/annotations'\nimport { BarAnnotationsProps } from './types'\n\nexport const BarAnnotations = <RawDatum,>({ bars, annotations }: BarAnnotationsProps<RawDatum>) => {\n    const boundAnnotations = useAnnotations({\n        data: bars,\n        annotations,\n        getPosition: bar => ({\n            x: bar.x + bar.width / 2,\n            y: bar.y + bar.height / 2,\n        }),\n        getDimensions: ({ height, width }) => ({\n            width,\n            height,\n            size: Math.max(width, height),\n        }),\n    })\n\n    return (\n        <>\n            {boundAnnotations.map((annotation, i) => (\n                <Annotation key={i} {...annotation} />\n            ))}\n        </>\n    )\n}\n","import { BoxLegendSvg } from '@nivo/legends'\nimport { BarLegendProps, LegendData } from './types'\n\ninterface BarLegendsProps {\n    width: number\n    height: number\n    legends: [BarLegendProps, LegendData[]][]\n    toggleSerie: (id: string | number) => void\n}\n\nexport const BarLegends = ({ width, height, legends, toggleSerie }: BarLegendsProps) => (\n    <>\n        {legends.map(([legend, data], i) => (\n            <BoxLegendSvg\n                key={i}\n                {...legend}\n                containerWidth={width}\n                containerHeight={height}\n                data={legend.data ?? data}\n                toggleSerie={\n                    legend.toggleSerie && legend.dataFrom === 'keys' ? toggleSerie : undefined\n                }\n            />\n        ))}\n    </>\n)\n","import { createElement, MouseEvent, useCallback, useMemo } from 'react'\nimport { animated, to } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\nimport { useTooltip } from '@nivo/tooltip'\nimport { BarDatum, BarItemProps } from './types'\n\nexport const BarItem = <RawDatum extends BarDatum>({\n    bar: { data, ...bar },\n\n    style: {\n        borderColor,\n        color,\n        height,\n        labelColor,\n        labelOpacity,\n        labelX,\n        labelY,\n        transform,\n        width,\n        textAnchor,\n    },\n\n    borderRadius,\n    borderWidth,\n\n    label,\n    shouldRenderLabel,\n\n    isInteractive,\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n\n    tooltip,\n\n    isFocusable,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n    ariaDisabled,\n    ariaHidden,\n}: BarItemProps<RawDatum>) => {\n    const theme = useTheme()\n    const { showTooltipFromEvent, showTooltipAt, hideTooltip } = useTooltip()\n\n    const renderTooltip = useMemo(\n        () => () => createElement(tooltip, { ...bar, ...data }),\n        [tooltip, bar, data]\n    )\n\n    const handleClick = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onClick?.({ color: bar.color, ...data }, event)\n        },\n        [bar, data, onClick]\n    )\n    const handleTooltip = useCallback(\n        (event: MouseEvent<SVGRectElement>) => showTooltipFromEvent(renderTooltip(), event),\n        [showTooltipFromEvent, renderTooltip]\n    )\n    const handleMouseEnter = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onMouseEnter?.(data, event)\n            showTooltipFromEvent(renderTooltip(), event)\n        },\n        [data, onMouseEnter, showTooltipFromEvent, renderTooltip]\n    )\n    const handleMouseLeave = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onMouseLeave?.(data, event)\n            hideTooltip()\n        },\n        [data, hideTooltip, onMouseLeave]\n    )\n\n    // extra handlers to allow keyboard navigation\n    const handleFocus = useCallback(() => {\n        showTooltipAt(renderTooltip(), [bar.absX + bar.width / 2, bar.absY])\n    }, [showTooltipAt, renderTooltip, bar])\n    const handleBlur = useCallback(() => {\n        hideTooltip()\n    }, [hideTooltip])\n\n    return (\n        <animated.g transform={transform}>\n            <animated.rect\n                width={to(width, value => Math.max(value, 0))}\n                height={to(height, value => Math.max(value, 0))}\n                rx={borderRadius}\n                ry={borderRadius}\n                fill={data.fill ?? color}\n                strokeWidth={borderWidth}\n                stroke={borderColor}\n                focusable={isFocusable}\n                tabIndex={isFocusable ? 0 : undefined}\n                aria-label={ariaLabel ? ariaLabel(data) : undefined}\n                aria-labelledby={ariaLabelledBy ? ariaLabelledBy(data) : undefined}\n                aria-describedby={ariaDescribedBy ? ariaDescribedBy(data) : undefined}\n                aria-disabled={ariaDisabled ? ariaDisabled(data) : undefined}\n                aria-hidden={ariaHidden ? ariaHidden(data) : undefined}\n                onMouseEnter={isInteractive ? handleMouseEnter : undefined}\n                onMouseMove={isInteractive ? handleTooltip : undefined}\n                onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n                onClick={isInteractive ? handleClick : undefined}\n                onFocus={isInteractive && isFocusable ? handleFocus : undefined}\n                onBlur={isInteractive && isFocusable ? handleBlur : undefined}\n            />\n            {shouldRenderLabel && (\n                <animated.text\n                    x={labelX}\n                    y={labelY}\n                    textAnchor={textAnchor}\n                    dominantBaseline=\"central\"\n                    fillOpacity={labelOpacity}\n                    style={{\n                        ...theme.labels.text,\n                        pointerEvents: 'none',\n                        fill: labelColor,\n                    }}\n                >\n                    {label}\n                </animated.text>\n            )}\n        </animated.g>\n    )\n}\n","import { BarTooltipProps } from './types'\nimport { BasicTooltip } from '@nivo/tooltip'\n\nexport const BarTooltip = <RawDatum,>({ color, label, ...data }: BarTooltipProps<RawDatum>) => {\n    return <BasicTooltip id={label} value={data.formattedValue} enableChip={true} color={color} />\n}\n","import { BarItem } from './BarItem'\nimport { BarTooltip } from './BarTooltip'\nimport { BarCanvasLayerId, BarLayerId, ComputedDatum } from './types'\nimport { InheritedColorConfig, OrdinalColorScaleConfig } from '@nivo/colors'\nimport { ScaleBandSpec, ScaleSpec } from '@nivo/scales'\n\nexport const defaultProps = {\n    indexBy: 'id',\n    keys: ['value'],\n\n    groupMode: 'stacked' as const,\n    layout: 'vertical' as const,\n    reverse: false,\n\n    minValue: 'auto' as const,\n    maxValue: 'auto' as const,\n\n    valueScale: { type: 'linear' } as ScaleSpec,\n    indexScale: { type: 'band', round: true } as ScaleBandSpec,\n\n    padding: 0.1,\n    innerPadding: 0,\n\n    axisBottom: {},\n    axisLeft: {},\n    enableGridX: false,\n    enableGridY: true,\n\n    enableLabel: true,\n    label: 'formattedValue',\n    labelPosition: 'middle' as const,\n    labelOffset: 0,\n    labelSkipWidth: 0,\n    labelSkipHeight: 0,\n    labelTextColor: { from: 'theme', theme: 'labels.text.fill' },\n\n    colorBy: 'id' as const,\n    colors: { scheme: 'nivo' } as OrdinalColorScaleConfig,\n\n    borderRadius: 0,\n    borderWidth: 0,\n    borderColor: { from: 'color' } as InheritedColorConfig<any>,\n\n    isInteractive: true,\n    tooltip: BarTooltip,\n    tooltipLabel: <RawDatum>(datum: ComputedDatum<RawDatum>) => `${datum.id} - ${datum.indexValue}`,\n\n    legends: [],\n    initialHiddenIds: [],\n    annotations: [],\n    markers: [],\n\n    enableTotals: false,\n    totalsOffset: 10,\n}\n\nexport const svgDefaultProps = {\n    ...defaultProps,\n    layers: ['grid', 'axes', 'bars', 'totals', 'markers', 'legends', 'annotations'] as BarLayerId[],\n    barComponent: BarItem,\n\n    defs: [],\n    fill: [],\n\n    animate: true,\n    motionConfig: 'default',\n\n    role: 'img',\n    isFocusable: false,\n}\n\nexport const canvasDefaultProps = {\n    ...defaultProps,\n    layers: ['grid', 'axes', 'bars', 'totals', 'legends', 'annotations'] as BarCanvasLayerId[],\n\n    pixelRatio: typeof window !== 'undefined' ? window.devicePixelRatio ?? 1 : 1,\n}\n","import { ScaleBandSpec, ScaleBand, computeScale } from '@nivo/scales'\nimport { defaultProps } from '../props'\nimport { BarCommonProps, BarDatum } from '../types'\n\n/**\n * Generates indexed scale.\n */\nexport const getIndexScale = <RawDatum>(\n    data: readonly RawDatum[],\n    getIndex: (datum: RawDatum) => string,\n    padding: number,\n    indexScale: ScaleBandSpec,\n    size: number,\n    axis: 'x' | 'y'\n) => {\n    return (\n        computeScale(\n            indexScale,\n            { all: data.map(getIndex), min: 0, max: 0 },\n            size,\n            axis\n        ) as ScaleBand<string>\n    ).padding(padding)\n}\n\n/**\n * This method ensures all the provided keys exist in the entire series.\n */\nexport const normalizeData = <RawDatum>(data: readonly RawDatum[], keys: readonly string[]) =>\n    data.map(\n        item =>\n            ({\n                ...keys.reduce<Record<string, unknown>>((acc, key) => {\n                    acc[key] = null\n                    return acc\n                }, {}),\n                ...item,\n            } as RawDatum)\n    )\n\nexport const filterNullValues = <RawDatum extends Record<string, unknown>>(data: RawDatum) =>\n    Object.keys(data).reduce<Record<string, unknown>>((acc, key) => {\n        if (data[key]) {\n            acc[key] = data[key]\n        }\n        return acc\n    }, {}) as Exclude<RawDatum, null | undefined | false | '' | 0>\n\nexport const coerceValue = <T>(value: T) => [value, Number(value)] as const\n\nexport type BarLabelLayout = {\n    labelX: number\n    labelY: number\n    textAnchor: 'start' | 'middle' | 'end'\n}\n\n/**\n * Compute the label position and alignment based on a given position and offset.\n */\nexport function useComputeLabelLayout<RawDatum extends BarDatum>(\n    layout: BarCommonProps<RawDatum>['layout'] = defaultProps.layout,\n    reverse: BarCommonProps<RawDatum>['reverse'] = defaultProps.reverse,\n    labelPosition: BarCommonProps<RawDatum>['labelPosition'] = defaultProps.labelPosition,\n    labelOffset: BarCommonProps<RawDatum>['labelOffset'] = defaultProps.labelOffset\n): (width: number, height: number) => BarLabelLayout {\n    return (width: number, height: number) => {\n        // If the chart is reversed, we want to make sure the offset is also reversed\n        const computedLabelOffset = labelOffset * (reverse ? -1 : 1)\n\n        if (layout === 'horizontal') {\n            let x = width / 2\n            if (labelPosition === 'start') {\n                x = reverse ? width : 0\n            } else if (labelPosition === 'end') {\n                x = reverse ? 0 : width\n            }\n            return {\n                labelX: x + computedLabelOffset,\n                labelY: height / 2,\n                textAnchor: labelPosition === 'middle' ? 'middle' : reverse ? 'end' : 'start',\n            }\n        } else {\n            let y = height / 2\n            if (labelPosition === 'start') {\n                y = reverse ? 0 : height\n            } else if (labelPosition === 'end') {\n                y = reverse ? height : 0\n            }\n            return {\n                labelX: width / 2,\n                labelY: y - computedLabelOffset,\n                textAnchor: 'middle',\n            }\n        }\n    }\n}\n","import { Margin } from '@nivo/core'\nimport { OrdinalColorScale } from '@nivo/colors'\nimport { Scale, ScaleBand, computeScale } from '@nivo/scales'\nimport { BarDatum, BarSvgProps, ComputedBarDatum, ComputedDatum } from '../types'\nimport { coerceValue, filterNullValues, getIndexScale, normalizeData } from './common'\n\ntype Params<RawDatum, XScaleInput, YScaleInput> = {\n    data: readonly RawDatum[]\n    formatValue: (value: number) => string\n    getColor: OrdinalColorScale<ComputedDatum<RawDatum>>\n    getIndex: (datum: RawDatum) => string\n    getTooltipLabel: (datum: ComputedDatum<RawDatum>) => string\n    innerPadding: number\n    keys: string[]\n    xScale: XScaleInput extends string ? ScaleBand<XScaleInput> : Scale<XScaleInput, number>\n    yScale: YScaleInput extends string ? ScaleBand<YScaleInput> : Scale<YScaleInput, number>\n    margin: Margin\n}\n\nconst gt = (value: number, other: number) => value > other\nconst lt = (value: number, other: number) => value < other\n\nconst range = (start: number, end: number) =>\n    Array.from(' '.repeat(end - start), (_, index) => start + index)\n\nconst clampToZero = (value: number) => (gt(value, 0) ? 0 : value)\nconst zeroIfNotFinite = (value: number) => (isFinite(value) ? value : 0)\n\n/**\n * Generates x/y scales & bars for vertical grouped bar chart.\n */\nconst generateVerticalGroupedBars = <RawDatum extends Record<string, unknown>>(\n    {\n        data,\n        formatValue,\n        getColor,\n        getIndex,\n        getTooltipLabel,\n        innerPadding = 0,\n        keys,\n        xScale,\n        yScale,\n        margin,\n    }: Params<RawDatum, string, number>,\n    barWidth: number,\n    reverse: boolean,\n    yRef: number\n): ComputedBarDatum<RawDatum>[] => {\n    const compare = reverse ? lt : gt\n    const getY = (d: number) => (compare(d, 0) ? yScale(d) ?? 0 : yRef)\n    const getHeight = (d: number, y: number) => (compare(d, 0) ? yRef - y : (yScale(d) ?? 0) - yRef)\n    const cleanedData = data.map(filterNullValues)\n\n    const bars: ComputedBarDatum<RawDatum>[] = []\n    keys.forEach((key, i) =>\n        range(0, xScale.domain().length).forEach(index => {\n            const [rawValue, value] = coerceValue(data[index][key])\n            const indexValue = getIndex(data[index])\n            const x = (xScale(indexValue) ?? 0) + barWidth * i + innerPadding * i\n            const y = getY(value)\n            const barHeight = getHeight(value, y)\n            const barData: ComputedDatum<RawDatum> = {\n                id: key,\n                value: rawValue === null ? rawValue : value,\n                formattedValue: formatValue(value),\n                hidden: false,\n                index,\n                indexValue,\n                data: cleanedData[index],\n            }\n\n            bars.push({\n                key: `${key}.${barData.indexValue}`,\n                index: bars.length,\n                data: barData,\n                x,\n                y,\n                absX: margin.left + x,\n                absY: margin.top + y,\n                width: barWidth,\n                height: barHeight,\n                color: getColor(barData),\n                label: getTooltipLabel(barData),\n            })\n        })\n    )\n\n    return bars\n}\n\n/**\n * Generates x/y scales & bars for horizontal grouped bar chart.\n */\nconst generateHorizontalGroupedBars = <RawDatum extends Record<string, unknown>>(\n    {\n        data,\n        formatValue,\n        getIndex,\n        getColor,\n        getTooltipLabel,\n        keys,\n        innerPadding = 0,\n        xScale,\n        yScale,\n        margin,\n    }: Params<RawDatum, number, string>,\n    barHeight: number,\n    reverse: boolean,\n    xRef: number\n): ComputedBarDatum<RawDatum>[] => {\n    const compare = reverse ? lt : gt\n    const getX = (d: number) => (compare(d, 0) ? xRef : xScale(d) ?? 0)\n    const getWidth = (d: number, x: number) => (compare(d, 0) ? (xScale(d) ?? 0) - xRef : xRef - x)\n    const cleanedData = data.map(filterNullValues)\n\n    const bars: ComputedBarDatum<RawDatum>[] = []\n    keys.forEach((key, i) =>\n        range(0, yScale.domain().length).forEach(index => {\n            const [rawValue, value] = coerceValue(data[index][key])\n            const indexValue = getIndex(data[index])\n            const x = getX(value)\n            const y = (yScale(indexValue) ?? 0) + barHeight * i + innerPadding * i\n            const barWidth = getWidth(value, x)\n            const barData: ComputedDatum<RawDatum> = {\n                id: key,\n                value: rawValue === null ? rawValue : value,\n                formattedValue: formatValue(value),\n                hidden: false,\n                index,\n                indexValue,\n                data: cleanedData[index],\n            }\n\n            bars.push({\n                key: `${key}.${barData.indexValue}`,\n                index: bars.length,\n                data: barData,\n                x,\n                y,\n                absX: margin.left + x,\n                absY: margin.top + y,\n                width: barWidth,\n                height: barHeight,\n                color: getColor(barData),\n                label: getTooltipLabel(barData),\n            })\n        })\n    )\n\n    return bars\n}\n\n/**\n * Generates x/y scales & bars for grouped bar chart.\n */\nexport const generateGroupedBars = <RawDatum extends BarDatum>({\n    layout,\n    minValue,\n    maxValue,\n    reverse,\n    width,\n    height,\n    padding = 0,\n    innerPadding = 0,\n    valueScale,\n    indexScale: indexScaleConfig,\n    hiddenIds = [],\n    ...props\n}: Pick<\n    Required<BarSvgProps<RawDatum>>,\n    | 'data'\n    | 'height'\n    | 'indexScale'\n    | 'innerPadding'\n    | 'keys'\n    | 'layout'\n    | 'maxValue'\n    | 'minValue'\n    | 'padding'\n    | 'reverse'\n    | 'valueScale'\n    | 'width'\n> & {\n    formatValue: (value: number) => string\n    getColor: OrdinalColorScale<ComputedDatum<RawDatum>>\n    getIndex: (datum: RawDatum) => string\n    getTooltipLabel: (datum: ComputedDatum<RawDatum>) => string\n    margin: Margin\n    hiddenIds?: readonly (string | number)[]\n}) => {\n    const keys = props.keys.filter(key => !hiddenIds.includes(key))\n    const data = normalizeData(props.data, keys)\n    const [axis, otherAxis, size] =\n        layout === 'vertical' ? (['y', 'x', width] as const) : (['x', 'y', height] as const)\n    const indexScale = getIndexScale(\n        data,\n        props.getIndex,\n        padding,\n        indexScaleConfig,\n        size,\n        otherAxis\n    )\n\n    const scaleSpec = {\n        max: maxValue,\n        min: minValue,\n        reverse,\n        ...valueScale,\n    }\n\n    const clampMin = scaleSpec.min === 'auto' ? clampToZero : (value: number) => value\n\n    const values = data\n        .reduce<number[]>((acc, entry) => [...acc, ...keys.map(k => entry[k] as number)], [])\n        .filter(Boolean)\n    const min = clampMin(Math.min(...values))\n    const max = zeroIfNotFinite(Math.max(...values))\n\n    const scale = computeScale(\n        scaleSpec as any,\n        { all: values, min, max },\n        axis === 'x' ? width : height,\n        axis\n    )\n\n    const [xScale, yScale] = layout === 'vertical' ? [indexScale, scale] : [scale, indexScale]\n\n    const bandwidth = (indexScale.bandwidth() - innerPadding * (keys.length - 1)) / keys.length\n    const params = [\n        { ...props, data, keys, innerPadding, xScale, yScale } as Params<RawDatum, any, any>,\n        bandwidth,\n        scaleSpec.reverse,\n        scale(0) ?? 0,\n    ] as const\n\n    const bars: ComputedBarDatum<RawDatum>[] =\n        bandwidth > 0\n            ? layout === 'vertical'\n                ? generateVerticalGroupedBars(...params)\n                : generateHorizontalGroupedBars(...params)\n            : []\n\n    return { xScale, yScale, bars }\n}\n","import { Margin } from '@nivo/core'\nimport { OrdinalColorScale } from '@nivo/colors'\nimport { Scale, ScaleBand, computeScale } from '@nivo/scales'\nimport { Series, SeriesPoint, stack, stackOffsetDiverging } from 'd3-shape'\nimport { BarDatum, BarSvgProps, ComputedBarDatum, ComputedDatum } from '../types'\nimport { coerceValue, filterNullValues, getIndexScale, normalizeData } from './common'\n\ntype StackDatum<RawDatum> = SeriesPoint<RawDatum>\n\ntype Params<RawDatum, XScaleInput, YScaleInput> = {\n    formatValue: (value: number) => string\n    getColor: OrdinalColorScale<ComputedDatum<RawDatum>>\n    getIndex: (datum: RawDatum) => string\n    getTooltipLabel: (datum: ComputedDatum<RawDatum>) => string\n    innerPadding: number\n    stackedData: Series<RawDatum, string>[]\n    xScale: XScaleInput extends string ? ScaleBand<XScaleInput> : Scale<XScaleInput, number>\n    yScale: YScaleInput extends string ? ScaleBand<YScaleInput> : Scale<YScaleInput, number>\n    margin: Margin\n}\n\nconst flattenDeep = <T>(arr: T[]): T =>\n    arr.some(Array.isArray) ? flattenDeep(([] as T[]).concat(...arr)) : (arr as unknown as T)\n\nconst filterZerosIfLog = (array: number[], type: string) =>\n    type === 'log' ? array.filter(num => num !== 0) : array\n\n/**\n * Generates x/y scales & bars for vertical stacked bar chart.\n */\nconst generateVerticalStackedBars = <RawDatum extends Record<string, unknown>>(\n    {\n        formatValue,\n        getColor,\n        getIndex,\n        getTooltipLabel,\n        innerPadding,\n        stackedData,\n        xScale,\n        yScale,\n        margin,\n    }: Params<RawDatum, string, number>,\n    barWidth: number,\n    reverse: boolean\n): ComputedBarDatum<RawDatum>[] => {\n    const getY = (d: StackDatum<RawDatum>) => yScale(d[reverse ? 0 : 1])\n    const getHeight = (d: StackDatum<RawDatum>, y: number) => (yScale(d[reverse ? 1 : 0]) ?? 0) - y\n\n    const bars: ComputedBarDatum<RawDatum>[] = []\n    stackedData.forEach(stackedDataItem =>\n        xScale.domain().forEach((index, i) => {\n            const d = stackedDataItem[i]\n            const x = xScale(getIndex(d.data)) ?? 0\n            const y = (getY(d) ?? 0) + innerPadding * 0.5\n            const barHeight = getHeight(d, y) - innerPadding\n            const [rawValue, value] = coerceValue(d.data[stackedDataItem.key])\n\n            const barData: ComputedDatum<RawDatum> = {\n                id: stackedDataItem.key,\n                value: rawValue === null ? rawValue : value,\n                formattedValue: formatValue(value),\n                hidden: false,\n                index: i,\n                indexValue: index,\n                data: filterNullValues(d.data),\n            }\n\n            bars.push({\n                key: `${stackedDataItem.key}.${index}`,\n                index: bars.length,\n                data: barData,\n                x,\n                y,\n                absX: margin.left + x,\n                absY: margin.top + y,\n                width: barWidth,\n                height: barHeight,\n                color: getColor(barData),\n                label: getTooltipLabel(barData),\n            })\n        })\n    )\n\n    return bars\n}\n\n/**\n * Generates x/y scales & bars for horizontal stacked bar chart.\n */\nconst generateHorizontalStackedBars = <RawDatum extends Record<string, unknown>>(\n    {\n        formatValue,\n        getColor,\n        getIndex,\n        getTooltipLabel,\n        innerPadding,\n        stackedData,\n        xScale,\n        yScale,\n        margin,\n    }: Params<RawDatum, number, string>,\n    barHeight: number,\n    reverse: boolean\n): ComputedBarDatum<RawDatum>[] => {\n    const getX = (d: StackDatum<RawDatum>) => xScale(d[reverse ? 1 : 0])\n    const getWidth = (d: StackDatum<RawDatum>, x: number) => (xScale(d[reverse ? 0 : 1]) ?? 0) - x\n\n    const bars: ComputedBarDatum<RawDatum>[] = []\n    stackedData.forEach(stackedDataItem =>\n        yScale.domain().forEach((index, i) => {\n            const d = stackedDataItem[i]\n            const y = yScale(getIndex(d.data)) ?? 0\n            const x = (getX(d) ?? 0) + innerPadding * 0.5\n            const barWidth = getWidth(d, x) - innerPadding\n            const [rawValue, value] = coerceValue(d.data[stackedDataItem.key])\n\n            const barData: ComputedDatum<RawDatum> = {\n                id: stackedDataItem.key,\n                value: rawValue === null ? rawValue : value,\n                formattedValue: formatValue(value),\n                hidden: false,\n                index: i,\n                indexValue: index,\n                data: filterNullValues(d.data),\n            }\n\n            bars.push({\n                key: `${stackedDataItem.key}.${index}`,\n                index: bars.length,\n                data: barData,\n                x,\n                y,\n                absX: margin.left + x,\n                absY: margin.top + y,\n                width: barWidth,\n                height: barHeight,\n                color: getColor(barData),\n                label: getTooltipLabel(barData),\n            })\n        })\n    )\n\n    return bars\n}\n\n/**\n * Generates x/y scales & bars for stacked bar chart.\n */\nexport const generateStackedBars = <RawDatum extends BarDatum>({\n    data,\n    layout,\n    minValue,\n    maxValue,\n    reverse,\n    width,\n    height,\n    padding = 0,\n    valueScale,\n    indexScale: indexScaleConfig,\n    hiddenIds = [],\n    ...props\n}: Pick<\n    Required<BarSvgProps<RawDatum>>,\n    | 'data'\n    | 'height'\n    | 'indexScale'\n    | 'innerPadding'\n    | 'keys'\n    | 'layout'\n    | 'maxValue'\n    | 'minValue'\n    | 'padding'\n    | 'reverse'\n    | 'valueScale'\n    | 'width'\n> & {\n    formatValue: (value: number) => string\n    getColor: OrdinalColorScale<ComputedDatum<RawDatum>>\n    getIndex: (datum: RawDatum) => string\n    getTooltipLabel: (datum: ComputedDatum<RawDatum>) => string\n    margin: Margin\n    hiddenIds?: readonly (string | number)[]\n}) => {\n    const keys = props.keys.filter(key => !hiddenIds.includes(key))\n    const stackedData = stack<RawDatum, string>().keys(keys).offset(stackOffsetDiverging)(\n        normalizeData(data, keys)\n    )\n\n    const [axis, otherAxis, size] =\n        layout === 'vertical' ? (['y', 'x', width] as const) : (['x', 'y', height] as const)\n    const indexScale = getIndexScale(\n        data,\n        props.getIndex,\n        padding,\n        indexScaleConfig,\n        size,\n        otherAxis\n    )\n\n    const scaleSpec = {\n        max: maxValue,\n        min: minValue,\n        reverse,\n        ...valueScale,\n    }\n\n    const values = filterZerosIfLog(\n        flattenDeep(stackedData as unknown as number[][]),\n        valueScale.type\n    )\n    const min = Math.min(...values)\n    const max = Math.max(...values)\n\n    const scale = computeScale(\n        scaleSpec as any,\n        { all: values, min, max },\n        axis === 'x' ? width : height,\n        axis\n    )\n\n    const [xScale, yScale] = layout === 'vertical' ? [indexScale, scale] : [scale, indexScale]\n\n    const innerPadding = props.innerPadding > 0 ? props.innerPadding : 0\n    const bandwidth = indexScale.bandwidth()\n    const params = [\n        { ...props, innerPadding, stackedData, xScale, yScale } as Params<RawDatum, any, any>,\n        bandwidth,\n        scaleSpec.reverse,\n    ] as const\n\n    const bars: ComputedBarDatum<RawDatum>[] =\n        bandwidth > 0\n            ? layout === 'vertical'\n                ? generateVerticalStackedBars(...params)\n                : generateHorizontalStackedBars(...params)\n            : []\n\n    return { xScale, yScale, bars }\n}\n","import {\n    BarDatum,\n    BarLegendProps,\n    BarSvgProps,\n    BarsWithHidden,\n    LegendData,\n    LegendLabelDatum,\n} from '../types'\nimport { getPropertyAccessor } from '@nivo/core'\nimport uniqBy from 'lodash/uniqBy'\n\nexport const getLegendDataForKeys = <RawDatum extends BarDatum>(\n    bars: BarsWithHidden<RawDatum>,\n    layout: NonNullable<BarSvgProps<RawDatum>['layout']>,\n    direction: BarLegendProps['direction'],\n    groupMode: NonNullable<BarSvgProps<RawDatum>['groupMode']>,\n    reverse: boolean,\n    getLegendLabel: (datum: LegendLabelDatum<RawDatum>) => string\n): LegendData[] => {\n    const data = uniqBy(\n        bars.map(bar => ({\n            id: bar.data.id,\n            label: getLegendLabel(bar.data),\n            hidden: bar.data.hidden,\n            color: bar.color ?? '#000',\n        })),\n        ({ id }) => id\n    )\n\n    if (\n        (layout === 'vertical' &&\n            groupMode === 'stacked' &&\n            direction === 'column' &&\n            reverse !== true) ||\n        (layout === 'horizontal' && groupMode === 'stacked' && reverse === true)\n    ) {\n        data.reverse()\n    }\n\n    return data\n}\n\nexport const getLegendDataForIndexes = <RawDatum extends BarDatum>(\n    bars: BarsWithHidden<RawDatum>,\n    layout: NonNullable<BarSvgProps<RawDatum>['layout']>,\n    getLegendLabel: (datum: LegendLabelDatum<RawDatum>) => string\n): LegendData[] => {\n    const data = uniqBy(\n        bars.map(bar => ({\n            id: bar.data.indexValue ?? '',\n            label: getLegendLabel(bar.data),\n            hidden: bar.data.hidden,\n            color: bar.color ?? '#000',\n        })),\n        ({ id }) => id\n    )\n\n    if (layout === 'horizontal') {\n        data.reverse()\n    }\n\n    return data\n}\n\nexport const getLegendData = <RawDatum extends BarDatum>({\n    bars,\n    direction,\n    from,\n    groupMode,\n    layout,\n    legendLabel,\n    reverse,\n}: Pick<Required<BarSvgProps<RawDatum>>, 'layout' | 'groupMode' | 'reverse'> & {\n    bars: BarsWithHidden<RawDatum>\n    direction: BarLegendProps['direction']\n    from: BarLegendProps['dataFrom']\n    legendLabel: BarSvgProps<RawDatum>['legendLabel']\n}) => {\n    const getLegendLabel = getPropertyAccessor(\n        legendLabel ?? (from === 'indexes' ? 'indexValue' : 'id')\n    )\n\n    if (from === 'indexes') {\n        return getLegendDataForIndexes(bars, layout, getLegendLabel)\n    }\n\n    return getLegendDataForKeys(bars, layout, direction, groupMode, reverse, getLegendLabel)\n}\n","import { AnyScale, ScaleBand } from '@nivo/scales'\nimport { defaultProps } from '../props'\nimport { BarCommonProps, BarDatum, ComputedBarDatum } from '../types'\n\nexport interface BarTotalsData {\n    key: string\n    x: number\n    y: number\n    value: number\n    formattedValue: string\n    animationOffset: number\n}\n\nexport const computeBarTotals = <RawDatum extends BarDatum>(\n    bars: ComputedBarDatum<RawDatum>[],\n    xScale: ScaleBand<string> | AnyScale,\n    yScale: ScaleBand<string> | AnyScale,\n    layout: BarCommonProps<RawDatum>['layout'] = defaultProps.layout,\n    groupMode: BarCommonProps<RawDatum>['groupMode'] = defaultProps.groupMode,\n    totalsOffset: number,\n    formatValue: (value: number) => string\n) => {\n    const totals = [] as BarTotalsData[]\n\n    if (bars.length === 0) return totals\n\n    const totalsByIndex = new Map<string | number, number>()\n\n    const barWidth = bars[0].width\n    const barHeight = bars[0].height\n\n    if (groupMode === 'stacked') {\n        const totalsPositivesByIndex = new Map<string | number, number>()\n\n        bars.forEach(bar => {\n            const { indexValue, value } = bar.data\n            updateTotalsByIndex(totalsByIndex, indexValue, Number(value))\n            updateTotalsPositivesByIndex(totalsPositivesByIndex, indexValue, Number(value))\n        })\n\n        totalsPositivesByIndex.forEach((totalsPositive, indexValue) => {\n            const indexTotal = totalsByIndex.get(indexValue) || 0\n\n            let xPosition: number\n            let yPosition: number\n            let animationOffset: number\n\n            if (layout === 'vertical') {\n                xPosition = xScale(indexValue)\n                yPosition = yScale(totalsPositive)\n                animationOffset = yScale(totalsPositive / 2)\n            } else {\n                xPosition = xScale(totalsPositive)\n                yPosition = yScale(indexValue)\n                animationOffset = xScale(totalsPositive / 2)\n            }\n\n            xPosition += layout === 'vertical' ? barWidth / 2 : totalsOffset\n            yPosition += layout === 'vertical' ? -totalsOffset : barHeight / 2\n\n            totals.push({\n                key: 'total_' + indexValue,\n                x: xPosition,\n                y: yPosition,\n                value: indexTotal,\n                formattedValue: formatValue(indexTotal),\n                animationOffset,\n            })\n        })\n    } else if (groupMode === 'grouped') {\n        const greatestValueByIndex = new Map<string | number, number>()\n        const numberOfBarsByIndex = new Map()\n\n        bars.forEach(bar => {\n            const { indexValue, value } = bar.data\n            updateTotalsByIndex(totalsByIndex, indexValue, Number(value))\n            updateGreatestValueByIndex(greatestValueByIndex, indexValue, Number(value))\n            updateNumberOfBarsByIndex(numberOfBarsByIndex, indexValue)\n        })\n\n        greatestValueByIndex.forEach((greatestValue, indexValue) => {\n            const indexTotal = totalsByIndex.get(indexValue) || 0\n            const numberOfBars = numberOfBarsByIndex.get(indexValue)\n\n            let xPosition: number\n            let yPosition: number\n            let animationOffset: number\n\n            if (layout === 'vertical') {\n                xPosition = xScale(indexValue)\n                yPosition = yScale(greatestValue)\n                animationOffset = yScale(greatestValue / 2)\n            } else {\n                xPosition = xScale(greatestValue)\n                yPosition = yScale(indexValue)\n                animationOffset = xScale(greatestValue / 2)\n            }\n\n            const indexBarsWidth = numberOfBars * barWidth\n            const indexBarsHeight = numberOfBars * barHeight\n\n            xPosition += layout === 'vertical' ? indexBarsWidth / 2 : totalsOffset\n            yPosition += layout === 'vertical' ? -totalsOffset : indexBarsHeight / 2\n\n            totals.push({\n                key: 'total_' + indexValue,\n                x: xPosition,\n                y: yPosition,\n                value: indexTotal,\n                formattedValue: formatValue(indexTotal),\n                animationOffset,\n            })\n        })\n    }\n    return totals\n}\n\n// this function is used to compute the total value for the indexes. The total value is later rendered on the chart\nexport const updateTotalsByIndex = (\n    totalsByIndex: Map<string | number, number>,\n    indexValue: string | number,\n    value: number\n) => {\n    const currentIndexValue = totalsByIndex.get(indexValue) || 0\n    totalsByIndex.set(indexValue, currentIndexValue + value)\n}\n\n// this function is used to compute only the positive values of the indexes. Useful to position the text right above the last stacked bar. It prevents overlapping in case of negative values\nexport const updateTotalsPositivesByIndex = (\n    totalsPositivesByIndex: Map<string | number, number>,\n    indexValue: string | number,\n    value: number\n) => {\n    const currentIndexValue = totalsPositivesByIndex.get(indexValue) || 0\n    totalsPositivesByIndex.set(indexValue, currentIndexValue + (value > 0 ? value : 0))\n}\n\n// this function is used to keep track of the highest value for the indexes. Useful to position the text above the longest grouped bar\nexport const updateGreatestValueByIndex = (\n    greatestValueByIndex: Map<string | number, number>,\n    indexValue: string | number,\n    value: number\n) => {\n    const currentGreatestValue = greatestValueByIndex.get(indexValue) || 0\n    greatestValueByIndex.set(indexValue, Math.max(currentGreatestValue, Number(value)))\n}\n\n// this function is used to save the number of bars for the indexes. Useful to position the text in the middle of the grouped bars\nexport const updateNumberOfBarsByIndex = (\n    numberOfBarsByIndex: Map<string | number, number>,\n    indexValue: string | number\n) => {\n    const currentNumberOfBars = numberOfBarsByIndex.get(indexValue) || 0\n    numberOfBarsByIndex.set(indexValue, currentNumberOfBars + 1)\n}\n","import { useCallback, useMemo, useState } from 'react'\nimport { useInheritedColor, useOrdinalColorScale } from '@nivo/colors'\nimport { usePropertyAccessor, useTheme, useValueFormatter, Margin } from '@nivo/core'\nimport {\n    DataProps,\n    BarCommonProps,\n    BarDatum,\n    ComputedBarDatumWithValue,\n    LegendData,\n    BarLegendProps,\n} from './types'\nimport { defaultProps } from './props'\nimport { generateGroupedBars, generateStackedBars, getLegendData } from './compute'\nimport { computeBarTotals } from './compute/totals'\n\nexport const useBar = <RawDatum extends BarDatum>({\n    indexBy = defaultProps.indexBy,\n    keys = defaultProps.keys,\n    label = defaultProps.label,\n    tooltipLabel = defaultProps.tooltipLabel,\n    valueFormat,\n    colors = defaultProps.colors,\n    colorBy = defaultProps.colorBy,\n    borderColor = defaultProps.borderColor,\n    labelTextColor = defaultProps.labelTextColor,\n    groupMode = defaultProps.groupMode,\n    layout = defaultProps.layout,\n    reverse = defaultProps.reverse,\n    data,\n    minValue = defaultProps.minValue,\n    maxValue = defaultProps.maxValue,\n    margin,\n    width,\n    height,\n    padding = defaultProps.padding,\n    innerPadding = defaultProps.innerPadding,\n    valueScale = defaultProps.valueScale,\n    indexScale = defaultProps.indexScale,\n    initialHiddenIds = defaultProps.initialHiddenIds,\n    enableLabel = defaultProps.enableLabel,\n    labelSkipWidth = defaultProps.labelSkipWidth,\n    labelSkipHeight = defaultProps.labelSkipHeight,\n    legends = defaultProps.legends,\n    legendLabel,\n    totalsOffset = defaultProps.totalsOffset,\n}: {\n    indexBy?: BarCommonProps<RawDatum>['indexBy']\n    label?: BarCommonProps<RawDatum>['label']\n    tooltipLabel?: BarCommonProps<RawDatum>['tooltipLabel']\n    valueFormat?: BarCommonProps<RawDatum>['valueFormat']\n    colors?: BarCommonProps<RawDatum>['colors']\n    colorBy?: BarCommonProps<RawDatum>['colorBy']\n    borderColor?: BarCommonProps<RawDatum>['borderColor']\n    labelTextColor?: BarCommonProps<RawDatum>['labelTextColor']\n    groupMode?: BarCommonProps<RawDatum>['groupMode']\n    layout?: BarCommonProps<RawDatum>['layout']\n    reverse?: BarCommonProps<RawDatum>['reverse']\n    data: DataProps<RawDatum>['data']\n    keys?: BarCommonProps<RawDatum>['keys']\n    minValue?: BarCommonProps<RawDatum>['minValue']\n    maxValue?: BarCommonProps<RawDatum>['maxValue']\n    margin: Margin\n    width: number\n    height: number\n    padding?: BarCommonProps<RawDatum>['padding']\n    innerPadding?: BarCommonProps<RawDatum>['innerPadding']\n    valueScale?: BarCommonProps<RawDatum>['valueScale']\n    indexScale?: BarCommonProps<RawDatum>['indexScale']\n    initialHiddenIds?: BarCommonProps<RawDatum>['initialHiddenIds']\n    enableLabel?: BarCommonProps<RawDatum>['enableLabel']\n    labelSkipWidth?: BarCommonProps<RawDatum>['labelSkipWidth']\n    labelSkipHeight?: BarCommonProps<RawDatum>['labelSkipHeight']\n    legends?: BarCommonProps<RawDatum>['legends']\n    legendLabel?: BarCommonProps<RawDatum>['legendLabel']\n    totalsOffset?: BarCommonProps<RawDatum>['totalsOffset']\n}) => {\n    const [hiddenIds, setHiddenIds] = useState(initialHiddenIds ?? [])\n    const toggleSerie = useCallback((id: string | number) => {\n        setHiddenIds(state =>\n            state.indexOf(id) > -1 ? state.filter(item => item !== id) : [...state, id]\n        )\n    }, [])\n\n    const getIndex = usePropertyAccessor(indexBy)\n    const getLabel = usePropertyAccessor(label)\n    const getTooltipLabel = usePropertyAccessor(tooltipLabel)\n    const formatValue = useValueFormatter(valueFormat)\n\n    const theme = useTheme()\n    const getColor = useOrdinalColorScale(colors, colorBy)\n    const getBorderColor = useInheritedColor<ComputedBarDatumWithValue<RawDatum>>(\n        borderColor,\n        theme\n    )\n    const getLabelColor = useInheritedColor<ComputedBarDatumWithValue<RawDatum>>(\n        labelTextColor,\n        theme\n    )\n\n    const generateBars = groupMode === 'grouped' ? generateGroupedBars : generateStackedBars\n    const { bars, xScale, yScale } = generateBars({\n        layout,\n        reverse,\n        data,\n        getIndex,\n        keys,\n        minValue,\n        maxValue,\n        width,\n        height,\n        getColor,\n        padding,\n        innerPadding,\n        valueScale,\n        indexScale,\n        hiddenIds,\n        formatValue,\n        getTooltipLabel,\n        margin,\n    })\n\n    const barsWithValue = useMemo(\n        () =>\n            bars\n                .filter(\n                    (bar): bar is ComputedBarDatumWithValue<RawDatum> => bar.data.value !== null\n                )\n                .map((bar, index) => ({\n                    ...bar,\n                    index,\n                })),\n        [bars]\n    )\n\n    const shouldRenderBarLabel = useCallback(\n        ({ width, height }: { height: number; width: number }) => {\n            if (!enableLabel) return false\n            if (labelSkipWidth > 0 && width < labelSkipWidth) return false\n            if (labelSkipHeight > 0 && height < labelSkipHeight) return false\n            return true\n        },\n        [enableLabel, labelSkipWidth, labelSkipHeight]\n    )\n\n    const legendData = useMemo(\n        () =>\n            keys.map(key => {\n                const bar = bars.find(bar => bar.data.id === key)\n\n                return { ...bar, data: { id: key, ...bar?.data, hidden: hiddenIds.includes(key) } }\n            }),\n        [hiddenIds, keys, bars]\n    )\n\n    const legendsWithData: [BarLegendProps, LegendData[]][] = useMemo(\n        () =>\n            legends.map(legend => {\n                const data = getLegendData({\n                    bars: legend.dataFrom === 'keys' ? legendData : bars,\n                    direction: legend.direction,\n                    from: legend.dataFrom,\n                    groupMode,\n                    layout,\n                    legendLabel,\n                    reverse,\n                })\n\n                return [legend, data]\n            }),\n        [legends, legendData, bars, groupMode, layout, legendLabel, reverse]\n    )\n\n    const barTotals = useMemo(\n        () => computeBarTotals(bars, xScale, yScale, layout, groupMode, totalsOffset, formatValue),\n        [bars, xScale, yScale, layout, groupMode, totalsOffset, formatValue]\n    )\n\n    return {\n        bars,\n        barsWithValue,\n        xScale,\n        yScale,\n        getIndex,\n        getLabel,\n        getTooltipLabel,\n        formatValue,\n        getColor,\n        getBorderColor,\n        getLabelColor,\n        shouldRenderBarLabel,\n        hiddenIds,\n        toggleSerie,\n        legendsWithData,\n        barTotals,\n    }\n}\n","import { useTheme } from '@nivo/core'\nimport { AnimationConfig, animated, useTransition } from '@react-spring/web'\nimport { BarCommonProps, BarDatum } from './types'\nimport { svgDefaultProps } from './props'\nimport { BarTotalsData } from './compute/totals'\n\ninterface Props<RawDatum extends BarDatum> {\n    data: BarTotalsData[]\n    springConfig: Partial<AnimationConfig>\n    animate: boolean\n    layout?: BarCommonProps<RawDatum>['layout']\n}\n\nexport const BarTotals = <RawDatum extends BarDatum>({\n    data,\n    springConfig,\n    animate,\n    layout = svgDefaultProps.layout,\n}: Props<RawDatum>) => {\n    const theme = useTheme()\n    const totalsTransition = useTransition<\n        BarTotalsData,\n        {\n            x: number\n            y: number\n            labelOpacity: number\n        }\n    >(data, {\n        keys: barTotal => barTotal.key,\n        from: barTotal => ({\n            x: layout === 'vertical' ? barTotal.x : barTotal.animationOffset,\n            y: layout === 'vertical' ? barTotal.animationOffset : barTotal.y,\n            labelOpacity: 0,\n        }),\n        enter: barTotal => ({\n            x: barTotal.x,\n            y: barTotal.y,\n            labelOpacity: 1,\n        }),\n        update: barTotal => ({\n            x: barTotal.x,\n            y: barTotal.y,\n            labelOpacity: 1,\n        }),\n        leave: barTotal => ({\n            x: layout === 'vertical' ? barTotal.x : barTotal.animationOffset,\n            y: layout === 'vertical' ? barTotal.animationOffset : barTotal.y,\n            labelOpacity: 0,\n        }),\n        config: springConfig,\n        immediate: !animate,\n        initial: animate ? undefined : null,\n    })\n\n    return totalsTransition((style, barTotal) => (\n        <animated.text\n            key={barTotal.key}\n            x={style.x}\n            y={style.y}\n            fillOpacity={style.labelOpacity}\n            style={{\n                ...theme.labels.text,\n                pointerEvents: 'none',\n                fill: theme.text.fill,\n            }}\n            fontWeight=\"bold\"\n            fontSize={theme.labels.text.fontSize}\n            fontFamily={theme.labels.text.fontFamily}\n            textAnchor={layout === 'vertical' ? 'middle' : 'start'}\n            alignmentBaseline={layout === 'vertical' ? 'alphabetic' : 'middle'}\n        >\n            {barTotal.formattedValue}\n        </animated.text>\n    ))\n}\n","import { Axes, Grid } from '@nivo/axes'\nimport {\n    CartesianMarkers,\n    Container,\n    SvgWrapper,\n    // @ts-ignore\n    bindDefs,\n    useDimensions,\n    useMotionConfig,\n} from '@nivo/core'\nimport { useTransition } from '@react-spring/web'\nimport { Fragment, ReactNode, createElement, useMemo } from 'react'\nimport { BarAnnotations } from './BarAnnotations'\nimport { BarLegends } from './BarLegends'\nimport { useBar } from './hooks'\nimport { svgDefaultProps } from './props'\nimport {\n    BarCustomLayerProps,\n    BarDatum,\n    BarItemProps,\n    BarLayer,\n    BarLayerId,\n    BarSvgProps,\n    ComputedBarDatumWithValue,\n} from './types'\nimport { BarTotals } from './BarTotals'\nimport { useComputeLabelLayout } from './compute/common'\n\ntype InnerBarProps<RawDatum extends BarDatum> = Omit<\n    BarSvgProps<RawDatum>,\n    'animate' | 'motionConfig' | 'renderWrapper' | 'theme'\n>\n\nconst InnerBar = <RawDatum extends BarDatum>({\n    data,\n    indexBy,\n    keys,\n\n    margin: partialMargin,\n    width,\n    height,\n\n    groupMode,\n    layout,\n    reverse,\n    minValue,\n    maxValue,\n\n    valueScale,\n    indexScale,\n\n    padding,\n    innerPadding,\n\n    axisTop,\n    axisRight,\n    axisBottom = svgDefaultProps.axisBottom,\n    axisLeft = svgDefaultProps.axisLeft,\n    enableGridX = svgDefaultProps.enableGridX,\n    enableGridY = svgDefaultProps.enableGridY,\n    gridXValues,\n    gridYValues,\n\n    layers = svgDefaultProps.layers as readonly BarLayer<RawDatum>[],\n    barComponent = svgDefaultProps.barComponent,\n\n    enableLabel = svgDefaultProps.enableLabel,\n    label,\n    labelSkipWidth = svgDefaultProps.labelSkipWidth,\n    labelSkipHeight = svgDefaultProps.labelSkipHeight,\n    labelTextColor,\n    labelPosition = svgDefaultProps.labelPosition,\n    labelOffset = svgDefaultProps.labelOffset,\n\n    markers = svgDefaultProps.markers,\n\n    colorBy,\n    colors,\n    defs = svgDefaultProps.defs,\n    fill = svgDefaultProps.fill,\n    borderRadius = svgDefaultProps.borderRadius,\n    borderWidth = svgDefaultProps.borderWidth,\n    borderColor,\n\n    annotations = svgDefaultProps.annotations,\n\n    legendLabel,\n    tooltipLabel,\n\n    valueFormat,\n\n    isInteractive = svgDefaultProps.isInteractive,\n    tooltip = svgDefaultProps.tooltip,\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n\n    legends,\n\n    role = svgDefaultProps.role,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n    isFocusable = svgDefaultProps.isFocusable,\n    barAriaLabel,\n    barAriaLabelledBy,\n    barAriaDescribedBy,\n    barAriaHidden,\n    barAriaDisabled,\n\n    initialHiddenIds,\n\n    enableTotals = svgDefaultProps.enableTotals,\n    totalsOffset = svgDefaultProps.totalsOffset,\n}: InnerBarProps<RawDatum>) => {\n    const { animate, config: springConfig } = useMotionConfig()\n    const { outerWidth, outerHeight, margin, innerWidth, innerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const {\n        bars,\n        barsWithValue,\n        xScale,\n        yScale,\n        getLabel,\n        getTooltipLabel,\n        getBorderColor,\n        getLabelColor,\n        shouldRenderBarLabel,\n        toggleSerie,\n        legendsWithData,\n        barTotals,\n        getColor,\n    } = useBar<RawDatum>({\n        indexBy,\n        label,\n        tooltipLabel,\n        valueFormat,\n        colors,\n        colorBy,\n        borderColor,\n        labelTextColor,\n        groupMode,\n        layout,\n        reverse,\n        data,\n        keys,\n        minValue,\n        maxValue,\n        margin,\n        width: innerWidth,\n        height: innerHeight,\n        padding,\n        innerPadding,\n        valueScale,\n        indexScale,\n        enableLabel,\n        labelSkipWidth,\n        labelSkipHeight,\n        legends,\n        legendLabel,\n        initialHiddenIds,\n        totalsOffset,\n    })\n\n    const computeLabelLayout = useComputeLabelLayout(layout, reverse, labelPosition, labelOffset)\n\n    const transition = useTransition<\n        ComputedBarDatumWithValue<RawDatum>,\n        {\n            borderColor: string\n            color: string\n            height: number\n            labelColor: string\n            labelOpacity: number\n            labelX: number\n            labelY: number\n            opacity: number\n            transform: string\n            width: number\n            textAnchor: BarItemProps<RawDatum>['style']['textAnchor']\n        }\n    >(barsWithValue, {\n        keys: bar => bar.key,\n        from: bar => ({\n            borderColor: getBorderColor(bar) as string,\n            color: bar.color,\n            height: 0,\n            labelColor: getLabelColor(bar) as string,\n            labelOpacity: 0,\n            ...computeLabelLayout(bar.width, bar.height),\n            transform: `translate(${bar.x}, ${bar.y + bar.height})`,\n            width: bar.width,\n            ...(layout === 'vertical'\n                ? {}\n                : {\n                      height: bar.height,\n                      transform: `translate(${bar.x}, ${bar.y})`,\n                      width: 0,\n                  }),\n        }),\n        enter: bar => ({\n            borderColor: getBorderColor(bar) as string,\n            color: bar.color,\n            height: bar.height,\n            labelColor: getLabelColor(bar) as string,\n            labelOpacity: 1,\n            ...computeLabelLayout(bar.width, bar.height),\n            transform: `translate(${bar.x}, ${bar.y})`,\n            width: bar.width,\n        }),\n        update: bar => ({\n            borderColor: getBorderColor(bar) as string,\n            color: bar.color,\n            height: bar.height,\n            labelColor: getLabelColor(bar) as string,\n            labelOpacity: 1,\n            ...computeLabelLayout(bar.width, bar.height),\n            transform: `translate(${bar.x}, ${bar.y})`,\n            width: bar.width,\n        }),\n        leave: bar => ({\n            borderColor: getBorderColor(bar) as string,\n            color: bar.color,\n            height: 0,\n            labelColor: getLabelColor(bar) as string,\n            labelOpacity: 0,\n            ...computeLabelLayout(bar.width, bar.height),\n            labelY: 0,\n            transform: `translate(${bar.x}, ${bar.y + bar.height})`,\n            width: bar.width,\n            ...(layout === 'vertical'\n                ? {}\n                : {\n                      ...computeLabelLayout(bar.width, bar.height),\n                      labelX: 0,\n                      height: bar.height,\n                      transform: `translate(${bar.x}, ${bar.y})`,\n                      width: 0,\n                  }),\n        }),\n        config: springConfig,\n        immediate: !animate,\n        initial: animate ? undefined : null,\n    })\n\n    const commonProps = useMemo(\n        () => ({\n            borderRadius,\n            borderWidth,\n            enableLabel,\n            isInteractive,\n            labelSkipWidth,\n            labelSkipHeight,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n            getTooltipLabel,\n            tooltip,\n            isFocusable,\n            ariaLabel: barAriaLabel,\n            ariaLabelledBy: barAriaLabelledBy,\n            ariaDescribedBy: barAriaDescribedBy,\n            ariaHidden: barAriaHidden,\n            ariaDisabled: barAriaDisabled,\n        }),\n        [\n            borderRadius,\n            borderWidth,\n            enableLabel,\n            getTooltipLabel,\n            isInteractive,\n            labelSkipHeight,\n            labelSkipWidth,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n            tooltip,\n            isFocusable,\n            barAriaLabel,\n            barAriaLabelledBy,\n            barAriaDescribedBy,\n            barAriaHidden,\n            barAriaDisabled,\n        ]\n    )\n\n    const boundDefs = bindDefs(defs, bars, fill, {\n        dataKey: 'data',\n        targetKey: 'data.fill',\n    })\n\n    const layerById: Record<BarLayerId, ReactNode> = {\n        annotations: null,\n        axes: null,\n        bars: null,\n        grid: null,\n        legends: null,\n        markers: null,\n        totals: null,\n    }\n\n    if (layers.includes('annotations')) {\n        layerById.annotations = (\n            <BarAnnotations key=\"annotations\" bars={bars} annotations={annotations} />\n        )\n    }\n\n    if (layers.includes('axes')) {\n        layerById.axes = (\n            <Axes\n                key=\"axes\"\n                xScale={xScale}\n                yScale={yScale}\n                width={innerWidth}\n                height={innerHeight}\n                top={axisTop}\n                right={axisRight}\n                bottom={axisBottom}\n                left={axisLeft}\n            />\n        )\n    }\n\n    if (layers.includes('bars')) {\n        layerById.bars = (\n            <Fragment key=\"bars\">\n                {transition((style, bar) =>\n                    createElement(barComponent, {\n                        ...commonProps,\n                        bar,\n                        style,\n                        shouldRenderLabel: shouldRenderBarLabel(bar),\n                        label: getLabel(bar.data),\n                    })\n                )}\n            </Fragment>\n        )\n    }\n\n    if (layers.includes('grid')) {\n        layerById.grid = (\n            <Grid\n                key=\"grid\"\n                width={innerWidth}\n                height={innerHeight}\n                xScale={enableGridX ? xScale : null}\n                yScale={enableGridY ? yScale : null}\n                xValues={gridXValues}\n                yValues={gridYValues}\n            />\n        )\n    }\n\n    if (layers.includes('legends')) {\n        layerById.legends = (\n            <BarLegends\n                key=\"legends\"\n                width={innerWidth}\n                height={innerHeight}\n                legends={legendsWithData}\n                toggleSerie={toggleSerie}\n            />\n        )\n    }\n\n    if (layers.includes('markers')) {\n        layerById.markers = (\n            <CartesianMarkers<number | string, number>\n                key=\"markers\"\n                markers={markers as any[]}\n                width={innerWidth}\n                height={innerHeight}\n                xScale={xScale as (v: number | string) => number}\n                yScale={yScale as (v: number) => number}\n            />\n        )\n    }\n\n    if (layers.includes('totals') && enableTotals) {\n        layerById.totals = (\n            <BarTotals\n                key=\"totals\"\n                data={barTotals}\n                springConfig={springConfig}\n                animate={animate}\n                layout={layout}\n            />\n        )\n    }\n\n    const layerContext: BarCustomLayerProps<RawDatum> = useMemo(\n        () => ({\n            ...commonProps,\n            margin,\n            width,\n            height,\n            innerWidth,\n            innerHeight,\n            bars,\n            legendData: legendsWithData,\n            enableLabel,\n            xScale,\n            yScale,\n            tooltip,\n            getTooltipLabel,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n            getColor,\n        }),\n        [\n            commonProps,\n            margin,\n            width,\n            height,\n            innerWidth,\n            innerHeight,\n            bars,\n            legendsWithData,\n            enableLabel,\n            xScale,\n            yScale,\n            tooltip,\n            getTooltipLabel,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n            getColor,\n        ]\n    )\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            defs={boundDefs}\n            role={role}\n            ariaLabel={ariaLabel}\n            ariaLabelledBy={ariaLabelledBy}\n            ariaDescribedBy={ariaDescribedBy}\n            isFocusable={isFocusable}\n        >\n            {layers.map((layer, i) => {\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, layerContext)}</Fragment>\n                }\n\n                return layerById?.[layer] ?? null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const Bar = <RawDatum extends BarDatum>({\n    isInteractive = svgDefaultProps.isInteractive,\n    animate = svgDefaultProps.animate,\n    motionConfig = svgDefaultProps.motionConfig,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: BarSvgProps<RawDatum>) => (\n    <Container\n        {...{\n            animate,\n            isInteractive,\n            motionConfig,\n            renderWrapper,\n            theme,\n        }}\n    >\n        <InnerBar<RawDatum> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import {\n    BarCanvasCustomLayerProps,\n    BarCanvasLayer,\n    BarCanvasProps,\n    BarCommonProps,\n    BarDatum,\n    ComputedBarDatum,\n} from './types'\nimport {\n    CompleteTheme,\n    Container,\n    Margin,\n    getRelativeCursor,\n    isCursorInRect,\n    useDimensions,\n    useTheme,\n    useValueFormatter,\n} from '@nivo/core'\nimport {\n    ForwardedRef,\n    createElement,\n    forwardRef,\n    useCallback,\n    useEffect,\n    useMemo,\n    useRef,\n} from 'react'\nimport { canvasDefaultProps } from './props'\nimport {\n    renderAnnotationsToCanvas,\n    useAnnotations,\n    useComputedAnnotations,\n} from '@nivo/annotations'\nimport { renderAxesToCanvas, renderGridLinesToCanvas } from '@nivo/axes'\nimport { renderLegendToCanvas } from '@nivo/legends'\nimport { useTooltip } from '@nivo/tooltip'\nimport { useBar } from './hooks'\nimport { BarTotalsData } from './compute/totals'\nimport { useComputeLabelLayout } from './compute/common'\n\ntype InnerBarCanvasProps<RawDatum extends BarDatum> = Omit<\n    BarCanvasProps<RawDatum>,\n    'renderWrapper' | 'theme'\n> & {\n    canvasRef: ForwardedRef<HTMLCanvasElement>\n}\n\nconst findBarUnderCursor = <RawDatum,>(\n    nodes: ComputedBarDatum<RawDatum>[],\n    margin: Margin,\n    x: number,\n    y: number\n) =>\n    nodes.find(node =>\n        isCursorInRect(node.x + margin.left, node.y + margin.top, node.width, node.height, x, y)\n    )\n\nconst isNumber = (value: unknown): value is number => typeof value === 'number'\n\nfunction renderTotalsToCanvas<RawDatum extends BarDatum>(\n    ctx: CanvasRenderingContext2D,\n    barTotals: BarTotalsData[],\n    theme: CompleteTheme,\n    layout: BarCommonProps<RawDatum>['layout'] = canvasDefaultProps.layout\n) {\n    ctx.fillStyle = theme.text.fill\n    ctx.font = `bold ${theme.labels.text.fontSize}px ${theme.labels.text.fontFamily}`\n    ctx.textBaseline = layout === 'vertical' ? 'alphabetic' : 'middle'\n    ctx.textAlign = layout === 'vertical' ? 'center' : 'start'\n\n    barTotals.forEach(barTotal => {\n        ctx.fillText(barTotal.formattedValue, barTotal.x, barTotal.y)\n    })\n}\n\nconst InnerBarCanvas = <RawDatum extends BarDatum>({\n    data,\n    indexBy,\n    keys,\n\n    margin: partialMargin,\n    width,\n    height,\n\n    groupMode,\n    layout,\n    reverse,\n    minValue,\n    maxValue,\n\n    valueScale,\n    indexScale,\n\n    padding,\n    innerPadding,\n\n    axisTop,\n    axisRight,\n    axisBottom = canvasDefaultProps.axisBottom,\n    axisLeft = canvasDefaultProps.axisLeft,\n    enableGridX = canvasDefaultProps.enableGridX,\n    enableGridY = canvasDefaultProps.enableGridY,\n    gridXValues,\n    gridYValues,\n\n    labelPosition = canvasDefaultProps.labelPosition,\n    labelOffset = canvasDefaultProps.labelOffset,\n\n    layers = canvasDefaultProps.layers as BarCanvasLayer<RawDatum>[],\n    renderBar = (\n        ctx,\n        {\n            bar: { color, height, width, x, y },\n\n            borderColor,\n            borderRadius,\n            borderWidth,\n            label,\n            labelColor,\n            shouldRenderLabel,\n            labelX,\n            labelY,\n            textAnchor,\n        }\n    ) => {\n        ctx.fillStyle = color\n\n        if (borderWidth > 0) {\n            ctx.strokeStyle = borderColor\n            ctx.lineWidth = borderWidth\n        }\n\n        ctx.beginPath()\n\n        if (borderRadius > 0) {\n            const radius = Math.min(borderRadius, height)\n\n            ctx.moveTo(x + radius, y)\n            ctx.lineTo(x + width - radius, y)\n            ctx.quadraticCurveTo(x + width, y, x + width, y + radius)\n            ctx.lineTo(x + width, y + height - radius)\n            ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height)\n            ctx.lineTo(x + radius, y + height)\n            ctx.quadraticCurveTo(x, y + height, x, y + height - radius)\n            ctx.lineTo(x, y + radius)\n            ctx.quadraticCurveTo(x, y, x + radius, y)\n            ctx.closePath()\n        } else {\n            ctx.rect(x, y, width, height)\n        }\n\n        ctx.fill()\n\n        if (borderWidth > 0) {\n            ctx.stroke()\n        }\n\n        if (shouldRenderLabel) {\n            ctx.textBaseline = 'middle'\n            ctx.textAlign = textAnchor === 'middle' ? 'center' : textAnchor\n            ctx.fillStyle = labelColor\n            ctx.fillText(label, x + labelX, y + labelY)\n        }\n    },\n\n    enableLabel = canvasDefaultProps.enableLabel,\n    label,\n    labelSkipWidth = canvasDefaultProps.labelSkipWidth,\n    labelSkipHeight = canvasDefaultProps.labelSkipHeight,\n    labelTextColor,\n\n    colorBy,\n    colors,\n    borderRadius = canvasDefaultProps.borderRadius,\n    borderWidth = canvasDefaultProps.borderWidth,\n    borderColor,\n\n    annotations = canvasDefaultProps.annotations,\n\n    legendLabel,\n    tooltipLabel,\n\n    valueFormat,\n\n    isInteractive = canvasDefaultProps.isInteractive,\n    tooltip = canvasDefaultProps.tooltip,\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n\n    legends,\n\n    pixelRatio = canvasDefaultProps.pixelRatio,\n\n    canvasRef,\n\n    enableTotals = canvasDefaultProps.enableTotals,\n    totalsOffset = canvasDefaultProps.totalsOffset,\n}: InnerBarCanvasProps<RawDatum>) => {\n    const canvasEl = useRef<HTMLCanvasElement | null>(null)\n\n    const theme = useTheme()\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const {\n        bars,\n        barsWithValue,\n        xScale,\n        yScale,\n        getLabel,\n        getTooltipLabel,\n        getBorderColor,\n        getLabelColor,\n        shouldRenderBarLabel,\n        legendsWithData,\n        barTotals,\n        getColor,\n    } = useBar<RawDatum>({\n        indexBy,\n        label,\n        tooltipLabel,\n        valueFormat,\n        colors,\n        colorBy,\n        borderColor,\n        labelTextColor,\n        groupMode,\n        layout,\n        reverse,\n        data,\n        keys,\n        minValue,\n        maxValue,\n        margin,\n        width: innerWidth,\n        height: innerHeight,\n        padding,\n        innerPadding,\n        valueScale,\n        indexScale,\n        enableLabel,\n        labelSkipWidth,\n        labelSkipHeight,\n        legends,\n        legendLabel,\n        totalsOffset,\n    })\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    // Using any because return type isn't correct\n    const boundAnnotations: any = useComputedAnnotations({\n        annotations: useAnnotations({\n            data: bars,\n            annotations,\n            getPosition: node => ({\n                x: node.x,\n                y: node.y,\n            }),\n            getDimensions: ({ width, height }) => ({\n                width,\n                height,\n                size: Math.max(width, height),\n            }),\n        }),\n    })\n\n    // We use `any` here until we can figure out the best way to type xScale/yScale\n    const layerContext: BarCanvasCustomLayerProps<RawDatum> = useMemo(\n        () => ({\n            borderRadius,\n            borderWidth,\n            isInteractive,\n            isFocusable: false,\n            labelSkipWidth,\n            labelSkipHeight,\n            margin,\n            width,\n            height,\n            innerWidth,\n            innerHeight,\n            bars,\n            legendData: legendsWithData,\n            enableLabel,\n            xScale,\n            yScale,\n            tooltip,\n            getTooltipLabel,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n            getColor,\n        }),\n        [\n            borderRadius,\n            borderWidth,\n            isInteractive,\n            labelSkipWidth,\n            labelSkipHeight,\n            margin,\n            width,\n            height,\n            innerWidth,\n            innerHeight,\n            bars,\n            legendsWithData,\n            enableLabel,\n            xScale,\n            yScale,\n            tooltip,\n            getTooltipLabel,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n            getColor,\n        ]\n    )\n\n    const formatValue = useValueFormatter(valueFormat)\n    const computeLabelLayout = useComputeLabelLayout(layout, reverse, labelPosition, labelOffset)\n\n    useEffect(() => {\n        const ctx = canvasEl.current?.getContext('2d')\n\n        if (!canvasEl.current) return\n        if (!ctx) return\n\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n        ctx.translate(margin.left, margin.top)\n\n        layers.forEach(layer => {\n            if (layer === 'grid') {\n                if (isNumber(theme.grid.line.strokeWidth) && theme.grid.line.strokeWidth > 0) {\n                    ctx.lineWidth = theme.grid.line.strokeWidth\n                    ctx.strokeStyle = theme.grid.line.stroke as string\n\n                    if (enableGridX) {\n                        renderGridLinesToCanvas<string | number>(ctx, {\n                            width: innerWidth,\n                            height: innerHeight,\n                            scale: xScale,\n                            axis: 'x',\n                            values: gridXValues,\n                        })\n                    }\n\n                    if (enableGridY) {\n                        renderGridLinesToCanvas<string | number>(ctx, {\n                            width: innerWidth,\n                            height: innerHeight,\n                            scale: yScale,\n                            axis: 'y',\n                            values: gridYValues,\n                        })\n                    }\n                }\n            } else if (layer === 'axes') {\n                renderAxesToCanvas(ctx, {\n                    xScale: xScale,\n                    yScale: yScale,\n                    width: innerWidth,\n                    height: innerHeight,\n                    top: axisTop,\n                    right: axisRight,\n                    bottom: axisBottom,\n                    left: axisLeft,\n                    theme,\n                })\n            } else if (layer === 'bars') {\n                barsWithValue.forEach(bar => {\n                    renderBar(ctx, {\n                        bar,\n                        borderColor: getBorderColor(bar) as string,\n                        borderRadius,\n                        borderWidth,\n                        label: getLabel(bar.data),\n                        labelColor: getLabelColor(bar) as string,\n                        shouldRenderLabel: shouldRenderBarLabel(bar),\n                        ...computeLabelLayout(bar.width, bar.height),\n                    })\n                })\n            } else if (layer === 'legends') {\n                legendsWithData.forEach(([legend, data]) => {\n                    renderLegendToCanvas(ctx, {\n                        ...legend,\n                        data,\n                        containerWidth: innerWidth,\n                        containerHeight: innerHeight,\n                        theme,\n                    })\n                })\n            } else if (layer === 'annotations') {\n                renderAnnotationsToCanvas(ctx, { annotations: boundAnnotations, theme })\n            } else if (layer === 'totals' && enableTotals) {\n                renderTotalsToCanvas(ctx, barTotals, theme, layout)\n            } else if (typeof layer === 'function') {\n                layer(ctx, layerContext)\n            }\n        })\n\n        ctx.save()\n    }, [\n        axisBottom,\n        axisLeft,\n        axisRight,\n        axisTop,\n        barsWithValue,\n        borderRadius,\n        borderWidth,\n        boundAnnotations,\n        enableGridX,\n        enableGridY,\n        getBorderColor,\n        getLabel,\n        getLabelColor,\n        gridXValues,\n        gridYValues,\n        groupMode,\n        height,\n        innerHeight,\n        innerWidth,\n        layerContext,\n        layers,\n        layout,\n        legendsWithData,\n        margin.left,\n        margin.top,\n        outerHeight,\n        outerWidth,\n        pixelRatio,\n        renderBar,\n        xScale,\n        yScale,\n        reverse,\n        shouldRenderBarLabel,\n        theme,\n        width,\n        barTotals,\n        enableTotals,\n        formatValue,\n        computeLabelLayout,\n    ])\n\n    const handleMouseHover = useCallback(\n        (event: React.MouseEvent<HTMLCanvasElement>) => {\n            if (!bars) return\n            if (!canvasEl.current) return\n\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            const bar = findBarUnderCursor(bars, margin, x, y)\n\n            if (bar !== undefined) {\n                showTooltipFromEvent(\n                    createElement(tooltip, {\n                        ...bar.data,\n                        color: bar.color,\n                        label: bar.label,\n                        value: Number(bar.data.value),\n                    }),\n                    event\n                )\n\n                if (event.type === 'mouseenter') {\n                    onMouseEnter?.(bar.data, event)\n                }\n            } else {\n                hideTooltip()\n            }\n        },\n        [hideTooltip, margin, onMouseEnter, bars, showTooltipFromEvent, tooltip]\n    )\n\n    const handleMouseLeave = useCallback(\n        (event: React.MouseEvent<HTMLCanvasElement>) => {\n            if (!bars) return\n            if (!canvasEl.current) return\n\n            hideTooltip()\n\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            const bar = findBarUnderCursor(bars, margin, x, y)\n\n            if (bar) {\n                onMouseLeave?.(bar.data, event)\n            }\n        },\n        [hideTooltip, margin, onMouseLeave, bars]\n    )\n\n    const handleClick = useCallback(\n        (event: React.MouseEvent<HTMLCanvasElement>) => {\n            if (!bars) return\n            if (!canvasEl.current) return\n\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            const bar = findBarUnderCursor(bars, margin, x, y)\n\n            if (bar !== undefined) {\n                onClick?.({ ...bar.data, color: bar.color }, event)\n            }\n        },\n        [margin, onClick, bars]\n    )\n\n    return (\n        <canvas\n            ref={canvas => {\n                canvasEl.current = canvas\n                if (canvasRef && 'current' in canvasRef) canvasRef.current = canvas\n            }}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n                cursor: isInteractive ? 'auto' : 'normal',\n            }}\n            onMouseEnter={isInteractive ? handleMouseHover : undefined}\n            onMouseMove={isInteractive ? handleMouseHover : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onClick={isInteractive ? handleClick : undefined}\n        />\n    )\n}\n\nexport const BarCanvas = forwardRef(\n    <RawDatum extends BarDatum>(\n        { isInteractive, renderWrapper, theme, ...props }: BarCanvasProps<RawDatum>,\n        ref: ForwardedRef<HTMLCanvasElement>\n    ) => (\n        <Container {...{ isInteractive, renderWrapper, theme }} animate={false}>\n            <InnerBarCanvas<RawDatum> {...props} canvasRef={ref} />\n        </Container>\n    )\n)\n","import { BarDatum, BarCanvasProps } from './types'\nimport { BarCanvas } from './BarCanvas'\nimport { ForwardedRef, forwardRef } from 'react'\nimport { ResponsiveWrapper } from '@nivo/core'\n\nexport type ResponsiveBarCanvasProps<RawDatum extends BarDatum> = Omit<\n    BarCanvasProps<RawDatum>,\n    'height' | 'width'\n>\n\nexport const ResponsiveBarCanvas = forwardRef(function ResponsiveBarCanvas<\n    RawDatum extends BarDatum\n>(props: ResponsiveBarCanvasProps<RawDatum>, ref: ForwardedRef<HTMLCanvasElement>) {\n    return (\n        <ResponsiveWrapper>\n            {({ width, height }) => (\n                <BarCanvas\n                    width={width}\n                    height={height}\n                    {...(props as Omit<BarCanvasProps<BarDatum>, 'height' | 'width'>)}\n                    ref={ref}\n                />\n            )}\n        </ResponsiveWrapper>\n    )\n})\n","import { Bar } from './Bar'\nimport { BarDatum, BarSvgProps } from './types'\nimport { ResponsiveWrapper } from '@nivo/core'\n\nexport type ResponsiveBarSvgProps<RawDatum extends BarDatum> = Omit<\n    BarSvgProps<RawDatum>,\n    'height' | 'width'\n>\n\nexport const ResponsiveBar = <RawDatum extends BarDatum>(\n    props: ResponsiveBarSvgProps<RawDatum>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <Bar<RawDatum> width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n"],"names":["BarAnnotations","_ref","bars","annotations","boundAnnotations","useAnnotations","data","getPosition","bar","x","width","y","height","getDimensions","_ref2","size","Math","max","_jsx","_Fragment","children","map","annotation","i","Annotation","_extends","BarLegends","legends","toggleSerie","_legend$data","legend","jsx","BoxLegendSvg","containerWidth","containerHeight","dataFrom","undefined","BarItem","_data$fill","_ref$bar","_objectWithoutPropertiesLoose","_excluded","_ref$style","style","borderColor","color","labelColor","labelOpacity","labelX","labelY","transform","textAnchor","borderRadius","borderWidth","label","shouldRenderLabel","isInteractive","onClick","onMouseEnter","onMouseLeave","tooltip","isFocusable","ariaLabel","ariaLabelledBy","ariaDescribedBy","ariaDisabled","ariaHidden","theme","useTheme","_useTooltip","useTooltip","showTooltipFromEvent","showTooltipAt","hideTooltip","renderTooltip","useMemo","createElement","handleClick","useCallback","event","handleTooltip","handleMouseEnter","handleMouseLeave","handleFocus","absX","absY","handleBlur","_jsxs","jsxs","animated","g","rect","to","value","rx","ry","fill","strokeWidth","stroke","focusable","tabIndex","onMouseMove","onFocus","onBlur","text","dominantBaseline","fillOpacity","labels","pointerEvents","BarTooltip","BasicTooltip","id","formattedValue","enableChip","defaultProps","indexBy","keys","groupMode","layout","reverse","minValue","maxValue","valueScale","type","indexScale","round","padding","innerPadding","axisBottom","axisLeft","enableGridX","enableGridY","enableLabel","labelPosition","labelOffset","labelSkipWidth","labelSkipHeight","labelTextColor","from","colorBy","colors","scheme","tooltipLabel","datum","indexValue","initialHiddenIds","markers","enableTotals","totalsOffset","svgDefaultProps","layers","barComponent","defs","animate","motionConfig","role","canvasDefaultProps","pixelRatio","window","_window$devicePixelRa","devicePixelRatio","getIndexScale","getIndex","axis","computeScale","all","min","normalizeData","item","reduce","acc","key","filterNullValues","Object","coerceValue","Number","useComputeLabelLayout","computedLabelOffset","gt","other","lt","range","start","end","Array","repeat","_","index","clampToZero","generateVerticalGroupedBars","barWidth","yRef","formatValue","getColor","getTooltipLabel","_ref$innerPadding","xScale","yScale","margin","compare","cleanedData","forEach","domain","length","_xScale","d","_yScale","_coerceValue","rawValue","barHeight","_yScale2","getHeight","barData","hidden","push","left","top","generateHorizontalGroupedBars","xRef","_ref2$innerPadding","_yScale3","_xScale2","_coerceValue2","_xScale3","getWidth","generateGroupedBars","_ref3","_scale","_ref3$padding","_ref3$innerPadding","indexScaleConfig","_ref3$hiddenIds","hiddenIds","props","filter","includes","_ref4","otherAxis","scaleSpec","clampMin","values","entry","concat","k","Boolean","apply","isFinite","scale","_ref5","bandwidth","params","flattenDeep","arr","some","isArray","generateVerticalStackedBars","stackedData","stackedDataItem","_getY","getY","generateHorizontalStackedBars","_getX","getX","generateStackedBars","array","_ref4$padding","_ref4$hiddenIds","stack","offset","stackOffsetDiverging","num","_ref6","getLegendData","direction","legendLabel","getLegendLabel","getPropertyAccessor","uniqBy","_bar$data$indexValue","_bar$color2","getLegendDataForIndexes","_bar$color","getLegendDataForKeys","updateTotalsByIndex","totalsByIndex","currentIndexValue","get","set","updateTotalsPositivesByIndex","totalsPositivesByIndex","updateGreatestValueByIndex","greatestValueByIndex","currentGreatestValue","updateNumberOfBarsByIndex","numberOfBarsByIndex","currentNumberOfBars","useBar","_ref$indexBy","_ref$keys","_ref$label","_ref$tooltipLabel","valueFormat","_ref$colors","_ref$colorBy","_ref$borderColor","_ref$labelTextColor","_ref$groupMode","_ref$layout","_ref$reverse","_ref$minValue","_ref$maxValue","_ref$padding","_ref$valueScale","_ref$indexScale","_ref$initialHiddenIds","_ref$enableLabel","_ref$labelSkipWidth","_ref$labelSkipHeight","_ref$legends","_ref$totalsOffset","_useState","useState","setHiddenIds","state","indexOf","usePropertyAccessor","getLabel","useValueFormatter","useOrdinalColorScale","getBorderColor","useInheritedColor","getLabelColor","_generateBars","barsWithValue","shouldRenderBarLabel","legendData","find","legendsWithData","barTotals","totals","Map","_bar$data","totalsPositive","xPosition","yPosition","animationOffset","indexTotal","_bar$data2","greatestValue","numberOfBars","computeBarTotals","BarTotals","springConfig","useTransition","barTotal","enter","update","leave","config","immediate","initial","totalsTransition","fontWeight","fontSize","fontFamily","alignmentBaseline","InnerBar","partialMargin","axisTop","axisRight","_ref$axisBottom","_ref$axisLeft","_ref$enableGridX","_ref$enableGridY","gridXValues","gridYValues","_ref$layers","_ref$barComponent","_ref$labelPosition","_ref$labelOffset","_ref$markers","_ref$defs","_ref$fill","_ref$borderRadius","_ref$borderWidth","_ref$annotations","_ref$isInteractive","_ref$tooltip","_ref$role","_ref$isFocusable","barAriaLabel","barAriaLabelledBy","barAriaDescribedBy","barAriaHidden","barAriaDisabled","_ref$enableTotals","_useMotionConfig","useMotionConfig","_useDimensions","useDimensions","outerWidth","outerHeight","innerWidth","innerHeight","_useBar","computeLabelLayout","transition","commonProps","boundDefs","bindDefs","dataKey","targetKey","layerById","axes","grid","Axes","right","bottom","Fragment","Grid","xValues","yValues","CartesianMarkers","layerContext","SvgWrapper","layer","_layerById$layer","Bar","_ref2$isInteractive","_ref2$animate","_ref2$motionConfig","renderWrapper","otherProps","Container","findBarUnderCursor","nodes","node","isCursorInRect","InnerBarCanvas","_ref$renderBar","renderBar","ctx","_ref2$bar","fillStyle","strokeStyle","lineWidth","beginPath","radius","moveTo","lineTo","quadraticCurveTo","closePath","textBaseline","textAlign","fillText","_ref$pixelRatio","canvasRef","canvasEl","useRef","useComputedAnnotations","useEffect","_canvasEl$current","current","getContext","background","fillRect","translate","line","renderGridLinesToCanvas","renderAxesToCanvas","renderLegendToCanvas","renderAnnotationsToCanvas","font","renderTotalsToCanvas","save","handleMouseHover","_getRelativeCursor","getRelativeCursor","_getRelativeCursor2","_getRelativeCursor3","ref","canvas","cursor","BarCanvas","forwardRef","ResponsiveBarCanvas","ResponsiveWrapper"],"mappings":"srBAGO,MAAMA,EAAiB,SAAHC,GAAwE,IAAvDC,EAAID,EAAJC,KAAMC,EAAWF,EAAXE,YACxCC,EAAmBC,EAAAA,eAAe,CACpCC,KAAMJ,EACNC,YAAAA,EACAI,YAAa,SAAAC,GAAG,MAAK,CACjBC,EAAGD,EAAIC,EAAID,EAAIE,MAAQ,EACvBC,EAAGH,EAAIG,EAAIH,EAAII,OAAS,EAC1B,EACFC,cAAe,SAAAC,GAAA,IAAGF,EAAME,EAANF,OAAQF,EAAKI,EAALJ,MAAK,MAAQ,CACnCA,MAAAA,EACAE,OAAAA,EACAG,KAAMC,KAAKC,IAAIP,EAAOE,GACzB,IAGL,OACIM,EAAAA,IAAAC,EAAAA,SAAA,CAAAC,SACKhB,EAAiBiB,KAAI,SAACC,EAAYC,GAAC,OAChCL,EAAAA,IAACM,EAAAA,WAAUC,EAAaH,CAAAA,EAAAA,GAAPC,OAIjC,ECfaG,EAAa,SAAHzB,GAAA,IAAMS,EAAKT,EAALS,MAAOE,EAAMX,EAANW,OAAQe,EAAO1B,EAAP0B,QAASC,EAAW3B,EAAX2B,YAAW,OAC5DV,EAAAA,IAAAC,EAAAA,SAAA,CAAAC,SACKO,EAAQN,KAAI,SAAAP,EAAiBS,GAAC,IAAAM,EAAhBC,EAAMhB,EAAA,GAAER,EAAIQ,EAAA,GAAA,OACvBI,EAAAa,IAACC,EAAYA,aAAAP,KAELK,EAAM,CACVG,eAAgBvB,EAChBwB,gBAAiBtB,EACjBN,KAAiB,OAAbuB,EAAEC,EAAOxB,MAAIuB,EAAIvB,EACrBsB,YACIE,EAAOF,aAAmC,SAApBE,EAAOK,SAAsBP,OAAcQ,IANhEb,OAUd,aClBMc,EAAU,SAAHpC,GAmCU,IAAAqC,EAAAC,EAAAtC,EAlC1BO,IAAOF,EAAIiC,EAAJjC,KAASE,EAAGgC,EAAAD,EAAAE,GAAAC,EAAAzC,EAEnB0C,MACIC,EAAWF,EAAXE,YACAC,EAAKH,EAALG,MACAjC,EAAM8B,EAAN9B,OACAkC,EAAUJ,EAAVI,WACAC,EAAYL,EAAZK,aACAC,EAAMN,EAANM,OACAC,EAAMP,EAANO,OACAC,EAASR,EAATQ,UACAxC,EAAKgC,EAALhC,MACAyC,EAAUT,EAAVS,WAGJC,EAAYnD,EAAZmD,aACAC,EAAWpD,EAAXoD,YAEAC,EAAKrD,EAALqD,MACAC,EAAiBtD,EAAjBsD,kBAEAC,EAAavD,EAAbuD,cACAC,EAAOxD,EAAPwD,QACAC,EAAYzD,EAAZyD,aACAC,EAAY1D,EAAZ0D,aAEAC,EAAO3D,EAAP2D,QAEAC,EAAW5D,EAAX4D,YACAC,EAAS7D,EAAT6D,UACAC,EAAc9D,EAAd8D,eACAC,EAAe/D,EAAf+D,gBACAC,EAAYhE,EAAZgE,aACAC,EAAUjE,EAAViE,WAEMC,EAAQC,EAAAA,WACdC,EAA6DC,EAAAA,aAArDC,EAAoBF,EAApBE,qBAAsBC,EAAaH,EAAbG,cAAeC,EAAWJ,EAAXI,YAEvCC,EAAgBC,EAAAA,SAClB,WAAA,OAAM,WAAA,OAAMC,EAAAA,cAAchB,EAAOnC,KAAOjB,EAAQF,GAAO,CAAA,GACvD,CAACsD,EAASpD,EAAKF,IAGbuE,EAAcC,eAChB,SAACC,GACU,MAAPtB,GAAAA,EAAOhC,EAAA,CAAKoB,MAAOrC,EAAIqC,OAAUvC,GAAQyE,EAC5C,GACD,CAACvE,EAAKF,EAAMmD,IAEVuB,EAAgBF,eAClB,SAACC,GAAiC,OAAKR,EAAqBG,IAAiBK,EAAM,GACnF,CAACR,EAAsBG,IAErBO,EAAmBH,eACrB,SAACC,SACGrB,GAAAA,EAAepD,EAAMyE,GACrBR,EAAqBG,IAAiBK,EACzC,GACD,CAACzE,EAAMoD,EAAca,EAAsBG,IAEzCQ,EAAmBJ,eACrB,SAACC,SACGpB,GAAAA,EAAerD,EAAMyE,GACrBN,GACH,GACD,CAACnE,EAAMmE,EAAad,IAIlBwB,EAAcL,EAAAA,aAAY,WAC5BN,EAAcE,IAAiB,CAAClE,EAAI4E,KAAO5E,EAAIE,MAAQ,EAAGF,EAAI6E,MACjE,GAAE,CAACb,EAAeE,EAAelE,IAC5B8E,EAAaR,EAAAA,aAAY,WAC3BL,GACJ,GAAG,CAACA,IAEJ,OACIc,EAAAC,KAACC,EAAQA,SAACC,EAAC,CAACxC,UAAWA,EAAU9B,SAC7BF,CAAAA,EAAAA,IAACuE,EAAQA,SAACE,KAAI,CACVjF,MAAOkF,EAAEA,GAAClF,GAAO,SAAAmF,GAAK,OAAI7E,KAAKC,IAAI4E,EAAO,MAC1CjF,OAAQgF,EAAEA,GAAChF,GAAQ,SAAAiF,GAAK,OAAI7E,KAAKC,IAAI4E,EAAO,MAC5CC,GAAI1C,EACJ2C,GAAI3C,EACJ4C,KAAe,OAAX1D,EAAEhC,EAAK0F,MAAI1D,EAAIO,EACnBoD,YAAa5C,EACb6C,OAAQtD,EACRuD,UAAWtC,EACXuC,SAAUvC,EAAc,OAAIzB,EAC5B,aAAY0B,EAAYA,EAAUxD,QAAQ8B,EAC1C,kBAAiB2B,EAAiBA,EAAezD,QAAQ8B,EACzD,mBAAkB4B,EAAkBA,EAAgB1D,QAAQ8B,EAC5D,gBAAe6B,EAAeA,EAAa3D,QAAQ8B,EACnD,cAAa8B,EAAaA,EAAW5D,QAAQ8B,EAC7CsB,aAAcF,EAAgByB,OAAmB7C,EACjDiE,YAAa7C,EAAgBwB,OAAgB5C,EAC7CuB,aAAcH,EAAgB0B,OAAmB9C,EACjDqB,QAASD,EAAgBqB,OAAczC,EACvCkE,QAAS9C,GAAiBK,EAAcsB,OAAc/C,EACtDmE,OAAQ/C,GAAiBK,EAAcyB,OAAalD,IAEvDmB,GACGrC,MAACuE,EAAAA,SAASe,KAAI,CACV/F,EAAGuC,EACHrC,EAAGsC,EACHE,WAAYA,EACZsD,iBAAiB,UACjBC,YAAa3D,EACbJ,MAAKlB,EAAA,CAAA,EACE0C,EAAMwC,OAAOH,KAAI,CACpBI,cAAe,OACfZ,KAAMlD,IACR1B,SAEDkC,MAKrB,sBC1HauD,EAAa,SAAH5G,GAAwE,IAAvD4C,EAAK5C,EAAL4C,MAAOS,EAAKrD,EAALqD,MAAUhD,EAAIkC,EAAAvC,EAAAwC,GACzD,OAAOvB,EAAAA,IAAC4F,EAAAA,aAAY,CAACC,GAAIzD,EAAOuC,MAAOvF,EAAK0G,eAAgBC,YAAY,EAAMpE,MAAOA,GACzF,ECCaqE,EAAe,CACxBC,QAAS,KACTC,KAAM,CAAC,SAEPC,UAAW,UACXC,OAAQ,WACRC,SAAS,EAETC,SAAU,OACVC,SAAU,OAEVC,WAAY,CAAEC,KAAM,UACpBC,WAAY,CAAED,KAAM,OAAQE,OAAO,GAEnCC,QAAS,GACTC,aAAc,EAEdC,WAAY,CAAE,EACdC,SAAU,CAAE,EACZC,aAAa,EACbC,aAAa,EAEbC,aAAa,EACb9E,MAAO,iBACP+E,cAAe,SACfC,YAAa,EACbC,eAAgB,EAChBC,gBAAiB,EACjBC,eAAgB,CAAEC,KAAM,QAASvE,MAAO,oBAExCwE,QAAS,KACTC,OAAQ,CAAEC,OAAQ,QAElBzF,aAAc,EACdC,YAAa,EACbT,YAAa,CAAE8F,KAAM,SAErBlF,eAAe,EACfI,QAASiD,EACTiC,aAAc,SAAWC,GAA8B,OAAQA,EAAMhC,GAAQgC,MAAAA,EAAMC,UAAY,EAE/FrH,QAAS,GACTsH,iBAAkB,GAClB9I,YAAa,GACb+I,QAAS,GAETC,cAAc,EACdC,aAAc,IAGLC,EAAe5H,KACrByF,EAAY,CACfoC,OAAQ,CAAC,OAAQ,OAAQ,OAAQ,SAAU,UAAW,UAAW,eACjEC,aAAclH,EAEdmH,KAAM,GACNxD,KAAM,GAENyD,SAAS,EACTC,aAAc,UAEdC,KAAM,MACN9F,aAAa,IAGJ+F,EAAkBnI,KACxByF,EAAY,CACfoC,OAAQ,CAAC,OAAQ,OAAQ,OAAQ,SAAU,UAAW,eAEtDO,WAA8B,oBAAXC,QAAgD,OAA1BC,EAAGD,OAAOE,kBAAgBD,EAAQ,ICpElEE,EAAgB,SACzB3J,EACA4J,EACApC,EACAF,EACA7G,EACAoJ,GAEA,OACIC,EAAAA,aACIxC,EACA,CAAEyC,IAAK/J,EAAKe,IAAI6I,GAAWI,IAAK,EAAGrJ,IAAK,GACxCF,EACAoJ,GAENrC,QAAQA,EACd,EAKayC,EAAgB,SAAWjK,EAA2B8G,GAAuB,OACtF9G,EAAKe,KACD,SAAAmJ,GAAI,OAAA/I,EAEO2F,CAAAA,EAAAA,EAAKqD,QAAgC,SAACC,EAAKC,GAE1C,OADAD,EAAIC,GAAO,KACJD,CACX,GAAG,CAAE,GACFF,EAAI,GAElB,EAEQI,EAAmB,SAA2CtK,GAAc,OACrFuK,OAAOzD,KAAK9G,GAAMmK,QAAgC,SAACC,EAAKC,GAIpD,OAHIrK,EAAKqK,KACLD,EAAIC,GAAOrK,EAAKqK,IAEbD,CACV,GAAE,CAAE,EAAC,EAEGI,EAAc,SAAIjF,GAAQ,MAAK,CAACA,EAAOkF,OAAOlF,GAAO,EAW3D,SAASmF,EACZ1D,EACAC,EACAc,EACAC,GAEA,YAL0C,IAA1ChB,IAAAA,EAA6CJ,EAAaI,aACd,IAA5CC,IAAAA,EAA+CL,EAAaK,cACJ,IAAxDc,IAAAA,EAA2DnB,EAAamB,oBACpB,IAApDC,IAAAA,EAAuDpB,EAAaoB,aAE7D,SAAC5H,EAAeE,GAEnB,IAAMqK,EAAsB3C,GAAef,GAAW,EAAI,GAE1D,GAAe,eAAXD,EAAyB,CACzB,IAAI7G,EAAIC,EAAQ,EAMhB,MALsB,UAAlB2H,EACA5H,EAAI8G,EAAU7G,EAAQ,EACG,QAAlB2H,IACP5H,EAAI8G,EAAU,EAAI7G,GAEf,CACHsC,OAAQvC,EAAIwK,EACZhI,OAAQrC,EAAS,EACjBuC,WAA8B,WAAlBkF,EAA6B,SAAWd,EAAU,MAAQ,QAE9E,CACI,IAAI5G,EAAIC,EAAS,EAMjB,MALsB,UAAlByH,EACA1H,EAAI4G,EAAU,EAAI3G,EACO,QAAlByH,IACP1H,EAAI4G,EAAU3G,EAAS,GAEpB,CACHoC,OAAQtC,EAAQ,EAChBuC,OAAQtC,EAAIsK,EACZ9H,WAAY,UAI5B,kIC5EM+H,EAAK,SAACrF,EAAesF,GAAa,OAAKtF,EAAQsF,CAAK,EACpDC,EAAK,SAACvF,EAAesF,GAAa,OAAKtF,EAAQsF,CAAK,EAEpDE,EAAQ,SAACC,EAAeC,GAAW,OACrCC,MAAM9C,KAAK,IAAI+C,OAAOF,EAAMD,IAAQ,SAACI,EAAGC,GAAK,OAAKL,EAAQK,IAAM,EAE9DC,EAAc,SAAC/F,GAAa,OAAMqF,EAAGrF,EAAO,GAAK,EAAIA,CAAK,EAM1DgG,EAA8B,SAAH5L,EAa7B6L,EACAvE,EACAwE,GAC+B,IAd3BzL,EAAIL,EAAJK,KACA0L,EAAW/L,EAAX+L,YACAC,EAAQhM,EAARgM,SACA/B,EAAQjK,EAARiK,SACAgC,EAAejM,EAAfiM,gBAAeC,EAAAlM,EACf8H,aAAAA,OAAe,IAAHoE,EAAG,EAACA,EAChB/E,EAAInH,EAAJmH,KACAgF,EAAMnM,EAANmM,OACAC,EAAMpM,EAANoM,OACAC,EAAMrM,EAANqM,OAMEC,EAAUhF,EAAU6D,EAAKF,EAGzBsB,EAAclM,EAAKe,IAAIuJ,GAEvB1K,EAAqC,GAkC3C,OAjCAkH,EAAKqF,SAAQ,SAAC9B,EAAKpJ,GAAC,OAChB8J,EAAM,EAAGe,EAAOM,SAASC,QAAQF,SAAQ,SAAAd,GAAS,IAAAiB,EANxCC,EAASC,EAOfC,EAA0BjC,EAAYxK,EAAKqL,GAAOhB,IAA3CqC,EAAQD,EAAA,GAAElH,EAAKkH,EAAA,GAChB/D,EAAakB,EAAS5J,EAAKqL,IAC3BlL,GAAuB,OAAnBmM,EAACR,EAAOpD,IAAW4D,EAAI,GAAKd,EAAWvK,EAAIwG,EAAexG,EAC9DZ,EAVe4L,EAAfM,EAUShH,EAViB,GAAc,OAAZiH,EAAGT,EAAOQ,IAAEC,EAAI,EAAIf,EAWhDkB,EAVI,SAACJ,EAAWlM,GAAS,IAAAuM,EAAA,OAAMX,EAAQM,EAAG,GAAKd,EAAOpL,UAAIuM,EAACb,EAAOQ,IAAEK,EAAI,GAAKnB,EAUjEoB,CAAUtH,EAAOlF,GAC7ByM,EAAmC,CACrCrG,GAAI4D,EACJ9E,MAAoB,OAAbmH,EAAoBA,EAAWnH,EACtCmB,eAAgBgF,EAAYnG,GAC5BwH,QAAQ,EACR1B,MAAAA,EACA3C,WAAAA,EACA1I,KAAMkM,EAAYb,IAGtBzL,EAAKoN,KAAK,CACN3C,IAAQA,EAAOyC,IAAAA,EAAQpE,WACvB2C,MAAOzL,EAAKyM,OACZrM,KAAM8M,EACN3M,EAAAA,EACAE,EAAAA,EACAyE,KAAMkH,EAAOiB,KAAO9M,EACpB4E,KAAMiH,EAAOkB,IAAM7M,EACnBD,MAAOoL,EACPlL,OAAQqM,EACRpK,MAAOoJ,EAASmB,GAChB9J,MAAO4I,EAAgBkB,IAE/B,GAAE,IAGClN,CACX,EAKMuN,EAAgC,SAAH3M,EAa/BmM,EACA1F,EACAmG,GAC+B,IAd3BpN,EAAIQ,EAAJR,KACA0L,EAAWlL,EAAXkL,YACA9B,EAAQpJ,EAARoJ,SACA+B,EAAQnL,EAARmL,SACAC,EAAepL,EAAfoL,gBACA9E,EAAItG,EAAJsG,KAAIuG,EAAA7M,EACJiH,aAAAA,OAAe,IAAH4F,EAAG,EAACA,EAChBvB,EAAMtL,EAANsL,OACAC,EAAMvL,EAANuL,OACAC,EAAMxL,EAANwL,OAMEC,EAAUhF,EAAU6D,EAAKF,EAGzBsB,EAAclM,EAAKe,IAAIuJ,GAEvB1K,EAAqC,GAkC3C,OAjCAkH,EAAKqF,SAAQ,SAAC9B,EAAKpJ,GAAC,OAChB8J,EAAM,EAAGgB,EAAOK,SAASC,QAAQF,SAAQ,SAAAd,GAAS,IAAAiC,EANxCf,EAASgB,EAOfC,EAA0BhD,EAAYxK,EAAKqL,GAAOhB,IAA3CqC,EAAQc,EAAA,GAAEjI,EAAKiI,EAAA,GAChB9E,EAAakB,EAAS5J,EAAKqL,IAC3BlL,EATe8L,EAAfM,EASShH,EATiB,GAAK6H,EAAgBG,OAAZA,EAAGzB,EAAOS,IAAEgB,EAAI,EAUnDlN,GAAuB,OAAnBiN,EAACvB,EAAOrD,IAAW4E,EAAI,GAAKX,EAAY1L,EAAIwG,EAAexG,EAC/DuK,EAVG,SAACe,EAAWpM,GAAS,IAAAsN,EAAA,OAAMxB,EAAQM,EAAG,IAAekB,OAAVA,EAAC3B,EAAOS,IAAEkB,EAAI,GAAKL,EAAOA,EAAOjN,EAUpEuN,CAASnI,EAAOpF,GAC3B2M,EAAmC,CACrCrG,GAAI4D,EACJ9E,MAAoB,OAAbmH,EAAoBA,EAAWnH,EACtCmB,eAAgBgF,EAAYnG,GAC5BwH,QAAQ,EACR1B,MAAAA,EACA3C,WAAAA,EACA1I,KAAMkM,EAAYb,IAGtBzL,EAAKoN,KAAK,CACN3C,IAAQA,EAAOyC,IAAAA,EAAQpE,WACvB2C,MAAOzL,EAAKyM,OACZrM,KAAM8M,EACN3M,EAAAA,EACAE,EAAAA,EACAyE,KAAMkH,EAAOiB,KAAO9M,EACpB4E,KAAMiH,EAAOkB,IAAM7M,EACnBD,MAAOoL,EACPlL,OAAQqM,EACRpK,MAAOoJ,EAASmB,GAChB9J,MAAO4I,EAAgBkB,IAE/B,GAAE,IAGClN,CACX,EAKa+N,EAAsB,SAAHC,GAkC1B,IAAAC,EAnKmBtI,EAkIrByB,EAAM4G,EAAN5G,OACAE,EAAQ0G,EAAR1G,SACAC,EAAQyG,EAARzG,SACAF,EAAO2G,EAAP3G,QACA7G,EAAKwN,EAALxN,MACAE,EAAMsN,EAANtN,OAAMwN,EAAAF,EACNpG,QAAAA,OAAU,IAAHsG,EAAG,EAACA,EAAAC,EAAAH,EACXnG,aAAAA,OAAe,IAAHsG,EAAG,EAACA,EAChB3G,EAAUwG,EAAVxG,WACY4G,EAAgBJ,EAA5BtG,WAAU2G,EAAAL,EACVM,UAAAA,OAAY,IAAHD,EAAG,GAAEA,EACXE,EAAKjM,EAAA0L,EAAAzL,GAuBF2E,EAAOqH,EAAMrH,KAAKsH,QAAO,SAAA/D,GAAG,OAAK6D,EAAUG,SAAShE,MACpDrK,EAAOiK,EAAckE,EAAMnO,KAAM8G,GACvCwH,EACe,aAAXtH,EAAyB,CAAC,IAAK,IAAK5G,GAAoB,CAAC,IAAK,IAAKE,GADhEuJ,EAAIyE,EAAA,GAAEC,EAASD,EAAA,GAAE7N,EAAI6N,EAAA,GAEtBhH,EAAaqC,EACf3J,EACAmO,EAAMvE,SACNpC,EACAwG,EACAvN,EACA8N,GAGEC,EAASrN,EAAA,CACXR,IAAKwG,EACL6C,IAAK9C,EACLD,QAAAA,GACGG,GAGDqH,EAA6B,SAAlBD,EAAUxE,IAAiBsB,EAAc,SAAC/F,GAAa,OAAKA,CAAK,EAE5EmJ,EAAS1O,EACVmK,QAAiB,SAACC,EAAKuE,GAAK,MAAAC,GAAAA,OAASxE,EAAQtD,EAAK/F,KAAI,SAAA8N,GAAC,OAAIF,EAAME,EAAY,IAAE,GAAE,IACjFT,OAAOU,SACN9E,EAAMyE,EAAS/N,KAAKsJ,IAAG+E,MAARrO,KAAYgO,IAC3B/N,GA9Le4E,EA8LO7E,KAAKC,IAAGoO,MAARrO,KAAYgO,GA9LAM,SAASzJ,GAASA,EAAQ,GAgM5D0J,EAAQnF,EAAYA,aACtB0E,EACA,CAAEzE,IAAK2E,EAAQ1E,IAAAA,EAAKrJ,IAAAA,GACX,MAATkJ,EAAezJ,EAAQE,EACvBuJ,GAGJqF,EAAoC,aAAXlI,EAAwB,CAACM,EAAY2H,GAAS,CAACA,EAAO3H,GAAxEwE,EAAMoD,EAAA,GAAEnD,EAAMmD,EAAA,GAEfC,GAAa7H,EAAW6H,YAAc1H,GAAgBX,EAAKuF,OAAS,IAAMvF,EAAKuF,OAC/E+C,EAAS,CAAAjO,KACNgN,EAAK,CAAEnO,KAAAA,EAAM8G,KAAAA,EAAMW,aAAAA,EAAcqE,OAAAA,EAAQC,OAAAA,IAC9CoD,EACAX,EAAUvH,QACF,OADS4G,EACjBoB,EAAM,IAAEpB,EAAI,GAUhB,MAAO,CAAE/B,OAAAA,EAAQC,OAAAA,EAAQnM,KANrBuP,EAAY,EACK,aAAXnI,EACIuE,EAA2BwD,WAAIK,EAAAA,GAC/BjC,EAA6B4B,WAAIK,EAAAA,GACrC,GAGd,uHC9NMC,EAAc,SAAdA,EAAkBC,GAAQ,IAAA3P,EAAA,OAC5B2P,EAAIC,KAAKrE,MAAMsE,SAAWH,GAAY1P,EAAC,IAAWiP,OAAMG,MAAApP,EAAI2P,IAASA,CAAoB,EAQvFG,EAA8B,SAAHjP,EAY7BgL,EACAvE,GAC+B,IAZ3ByE,EAAWlL,EAAXkL,YACAC,EAAQnL,EAARmL,SACA/B,EAAQpJ,EAARoJ,SACAgC,EAAepL,EAAfoL,gBACAnE,EAAYjH,EAAZiH,aACAiI,EAAWlP,EAAXkP,YACA5D,EAAMtL,EAANsL,OACAC,EAAMvL,EAANuL,OACAC,EAAMxL,EAANwL,OAQEpM,EAAqC,GAmC3C,OAlCA8P,EAAYvD,SAAQ,SAAAwD,GAAe,OAC/B7D,EAAOM,SAASD,SAAQ,SAACd,EAAOpK,GAAM,IAAAqL,EAAAsD,EAC5BrD,EAAIoD,EAAgB1O,GACpBd,EAA4BmM,OAA3BA,EAAGR,EAAOlC,EAAS2C,EAAEvM,QAAMsM,EAAI,EAChCjM,GAAY,OAARuP,EARL,SAACrD,GAAuB,OAAKR,EAAOQ,EAAEtF,EAAU,EAAI,GAAG,CAQjD4I,CAAKtD,IAAEqD,EAAI,GAAoB,GAAfnI,EACrBkF,EARI,SAACJ,EAAyBlM,GAAS,IAAAmM,EAAA,OAAgC,OAA3BA,EAACT,EAAOQ,EAAEtF,EAAU,EAAI,KAAGuF,EAAI,GAAKnM,CAAC,CAQrEwM,CAAUN,EAAGlM,GAAKoH,EACpCgF,EAA0BjC,EAAY+B,EAAEvM,KAAK2P,EAAgBtF,MAAtDqC,EAAQD,EAAA,GAAElH,EAAKkH,EAAA,GAEhBK,EAAmC,CACrCrG,GAAIkJ,EAAgBtF,IACpB9E,MAAoB,OAAbmH,EAAoBA,EAAWnH,EACtCmB,eAAgBgF,EAAYnG,GAC5BwH,QAAQ,EACR1B,MAAOpK,EACPyH,WAAY2C,EACZrL,KAAMsK,EAAiBiC,EAAEvM,OAG7BJ,EAAKoN,KAAK,CACN3C,IAAQsF,EAAgBtF,QAAOgB,EAC/BA,MAAOzL,EAAKyM,OACZrM,KAAM8M,EACN3M,EAAAA,EACAE,EAAAA,EACAyE,KAAMkH,EAAOiB,KAAO9M,EACpB4E,KAAMiH,EAAOkB,IAAM7M,EACnBD,MAAOoL,EACPlL,OAAQqM,EACRpK,MAAOoJ,EAASmB,GAChB9J,MAAO4I,EAAgBkB,IAE/B,GAAE,IAGClN,CACX,EAKMkQ,EAAgC,SAAHlC,EAY/BjB,EACA1F,GAC+B,IAZ3ByE,EAAWkC,EAAXlC,YACAC,EAAQiC,EAARjC,SACA/B,EAAQgE,EAARhE,SACAgC,EAAegC,EAAfhC,gBACAnE,EAAYmG,EAAZnG,aACAiI,EAAW9B,EAAX8B,YACA5D,EAAM8B,EAAN9B,OACAC,EAAM6B,EAAN7B,OACAC,EAAM4B,EAAN5B,OAQEpM,EAAqC,GAmC3C,OAlCA8P,EAAYvD,SAAQ,SAAAwD,GAAe,OAC/B5D,EAAOK,SAASD,SAAQ,SAACd,EAAOpK,GAAM,IAAA2L,EAAAmD,EAC5BxD,EAAIoD,EAAgB1O,GACpBZ,EAA4BuM,OAA3BA,EAAGb,EAAOnC,EAAS2C,EAAEvM,QAAM4M,EAAI,EAChCzM,GAAY,OAAR4P,EARL,SAACxD,GAAuB,OAAKT,EAAOS,EAAEtF,EAAU,EAAI,GAAG,CAQjD+I,CAAKzD,IAAEwD,EAAI,GAAoB,GAAftI,EACrB+D,EARG,SAACe,EAAyBpM,GAAS,IAAAoN,EAAA,OAAgC,OAA3BA,EAACzB,EAAOS,EAAEtF,EAAU,EAAI,KAAGsG,EAAI,GAAKpN,CAAC,CAQrEuN,CAASnB,EAAGpM,GAAKsH,EAClC+F,EAA0BhD,EAAY+B,EAAEvM,KAAK2P,EAAgBtF,MAAtDqC,EAAQc,EAAA,GAAEjI,EAAKiI,EAAA,GAEhBV,EAAmC,CACrCrG,GAAIkJ,EAAgBtF,IACpB9E,MAAoB,OAAbmH,EAAoBA,EAAWnH,EACtCmB,eAAgBgF,EAAYnG,GAC5BwH,QAAQ,EACR1B,MAAOpK,EACPyH,WAAY2C,EACZrL,KAAMsK,EAAiBiC,EAAEvM,OAG7BJ,EAAKoN,KAAK,CACN3C,IAAQsF,EAAgBtF,QAAOgB,EAC/BA,MAAOzL,EAAKyM,OACZrM,KAAM8M,EACN3M,EAAAA,EACAE,EAAAA,EACAyE,KAAMkH,EAAOiB,KAAO9M,EACpB4E,KAAMiH,EAAOkB,IAAM7M,EACnBD,MAAOoL,EACPlL,OAAQqM,EACRpK,MAAOoJ,EAASmB,GAChB9J,MAAO4I,EAAgBkB,IAE/B,GAAE,IAGClN,CACX,EAKaqQ,EAAsB,SAAH3B,GAkC1B,IA9JoB4B,EA6HtBlQ,EAAIsO,EAAJtO,KACAgH,EAAMsH,EAANtH,OACAE,EAAQoH,EAARpH,SACAC,EAAQmH,EAARnH,SACAF,EAAOqH,EAAPrH,QACA7G,EAAKkO,EAALlO,MACAE,EAAMgO,EAANhO,OAAM6P,EAAA7B,EACN9G,QAAAA,OAAU,IAAH2I,EAAG,EAACA,EACX/I,EAAUkH,EAAVlH,WACY4G,EAAgBM,EAA5BhH,WAAU8I,EAAA9B,EACVJ,UAAAA,OAAY,IAAHkC,EAAG,GAAEA,EACXjC,EAAKjM,EAAAoM,EAAAnM,GAuBF2E,EAAOqH,EAAMrH,KAAKsH,QAAO,SAAA/D,GAAG,OAAK6D,EAAUG,SAAShE,MACpDqF,EAAcW,EAAAA,QAA0BvJ,KAAKA,GAAMwJ,OAAOC,EAAAA,qBAA5CF,CAChBpG,EAAcjK,EAAM8G,IAGxBoI,EACe,aAAXlI,EAAyB,CAAC,IAAK,IAAK5G,GAAoB,CAAC,IAAK,IAAKE,GADhEuJ,EAAIqF,EAAA,GAAEX,EAASW,EAAA,GAAEzO,EAAIyO,EAAA,GAEtB5H,EAAaqC,EACf3J,EACAmO,EAAMvE,SACNpC,EACAwG,EACAvN,EACA8N,GAGEC,EAASrN,EAAA,CACXR,IAAKwG,EACL6C,IAAK9C,EACLD,QAAAA,GACGG,GAGDsH,GAtLgBwB,EAuLlBb,EAAYK,GAtLP,QAuLLtI,EAAWC,KAvLE6I,EAAM9B,QAAO,SAAAoC,GAAG,OAAY,IAARA,CAAS,IAAIN,GAyL5ClG,EAAMtJ,KAAKsJ,IAAG+E,MAARrO,KAAYgO,GAClB/N,EAAMD,KAAKC,IAAGoO,MAARrO,KAAYgO,GAElBO,EAAQnF,EAAYA,aACtB0E,EACA,CAAEzE,IAAK2E,EAAQ1E,IAAAA,EAAKrJ,IAAAA,GACX,MAATkJ,EAAezJ,EAAQE,EACvBuJ,GAGJ4G,EAAoC,aAAXzJ,EAAwB,CAACM,EAAY2H,GAAS,CAACA,EAAO3H,GAAxEwE,EAAM2E,EAAA,GAAE1E,EAAM0E,EAAA,GAEfhJ,EAAe0G,EAAM1G,aAAe,EAAI0G,EAAM1G,aAAe,EAC7D0H,EAAY7H,EAAW6H,YACvBC,EAAS,CAAAjO,KACNgN,EAAK,CAAE1G,aAAAA,EAAciI,YAAAA,EAAa5D,OAAAA,EAAQC,OAAAA,IAC/CoD,EACAX,EAAUvH,SAUd,MAAO,CAAE6E,OAAAA,EAAQC,OAAAA,EAAQnM,KANrBuP,EAAY,EACK,aAAXnI,EACIyI,EAA2BV,WAAIK,EAAAA,GAC/BU,EAA6Bf,WAAIK,EAAAA,GACrC,GAGd,EC9KasB,EAAgB,SAAH9C,GAapB,IAZFhO,EAAIgO,EAAJhO,KACA+Q,EAAS/C,EAAT+C,UACAvI,EAAIwF,EAAJxF,KACArB,EAAS6G,EAAT7G,UACAC,EAAM4G,EAAN5G,OACA4J,EAAWhD,EAAXgD,YACA3J,EAAO2G,EAAP3G,QAOM4J,EAAiBC,sBACnBF,MAAAA,EAAAA,EAAyB,YAATxI,EAAqB,aAAe,MAGxD,MAAa,YAATA,EAxC+B,SACnCxI,EACAoH,EACA6J,GAEA,IAAM7Q,EAAO+Q,EACTnR,EAAKmB,KAAI,SAAAb,GAAG,IAAA8Q,EAAAC,EAAA,MAAK,CACbxK,GAAuB,OAArBuK,EAAE9Q,EAAIF,KAAK0I,YAAUsI,EAAI,GAC3BhO,MAAO6N,EAAe3Q,EAAIF,MAC1B+M,OAAQ7M,EAAIF,KAAK+M,OACjBxK,MAAgB,OAAX0O,EAAE/Q,EAAIqC,OAAK0O,EAAI,YAExB,SAAAzQ,GAAK,OAAAA,EAAFiG,EAAW,IAOlB,MAJe,eAAXO,GACAhH,EAAKiH,UAGFjH,CACX,CAqBekR,CAAwBtR,EAAMoH,EAAQ6J,GAxEjB,SAChCjR,EACAoH,EACA2J,EACA5J,EACAE,EACA4J,GAEA,IAAM7Q,EAAO+Q,EACTnR,EAAKmB,KAAI,SAAAb,GAAG,IAAAiR,EAAA,MAAK,CACb1K,GAAIvG,EAAIF,KAAKyG,GACbzD,MAAO6N,EAAe3Q,EAAIF,MAC1B+M,OAAQ7M,EAAIF,KAAK+M,OACjBxK,MAAgB,OAAX4O,EAAEjR,EAAIqC,OAAK4O,EAAI,YAExB,SAAAxR,GAAK,OAAAA,EAAF8G,EAAW,IAalB,OATgB,aAAXO,GACiB,YAAdD,GACc,WAAd4J,IACY,IAAZ1J,GACQ,eAAXD,GAAyC,YAAdD,IAAuC,IAAZE,IAEvDjH,EAAKiH,UAGFjH,CACX,CA8CWoR,CAAqBxR,EAAMoH,EAAQ2J,EAAW5J,EAAWE,EAAS4J,EAC7E,EC+BaQ,EAAsB,SAC/BC,EACA5I,EACAnD,GAEA,IAAMgM,EAAoBD,EAAcE,IAAI9I,IAAe,EAC3D4I,EAAcG,IAAI/I,EAAY6I,EAAoBhM,EACtD,EAGamM,EAA+B,SACxCC,EACAjJ,EACAnD,GAEA,IAAMgM,EAAoBI,EAAuBH,IAAI9I,IAAe,EACpEiJ,EAAuBF,IAAI/I,EAAY6I,GAAqBhM,EAAQ,EAAIA,EAAQ,GACpF,EAGaqM,EAA6B,SACtCC,EACAnJ,EACAnD,GAEA,IAAMuM,EAAuBD,EAAqBL,IAAI9I,IAAe,EACrEmJ,EAAqBJ,IAAI/I,EAAYhI,KAAKC,IAAImR,EAAsBrH,OAAOlF,IAC/E,EAGawM,EAA4B,SACrCC,EACAtJ,GAEA,IAAMuJ,EAAsBD,EAAoBR,IAAI9I,IAAe,EACnEsJ,EAAoBP,IAAI/I,EAAYuJ,EAAsB,EAC9D,EC3IaC,EAAS,SAAHvS,GA4Db,IAAAwS,EAAAxS,EA3DFkH,QAAAA,OAAO,IAAAsL,EAAGvL,EAAaC,QAAOsL,EAAAC,EAAAzS,EAC9BmH,KAAAA,OAAI,IAAAsL,EAAGxL,EAAaE,KAAIsL,EAAAC,EAAA1S,EACxBqD,MAAAA,OAAK,IAAAqP,EAAGzL,EAAa5D,MAAKqP,EAAAC,EAAA3S,EAC1B6I,aAAAA,OAAY,IAAA8J,EAAG1L,EAAa4B,aAAY8J,EACxCC,EAAW5S,EAAX4S,YAAWC,EAAA7S,EACX2I,OAAAA,OAAM,IAAAkK,EAAG5L,EAAa0B,OAAMkK,EAAAC,EAAA9S,EAC5B0I,QAAAA,OAAO,IAAAoK,EAAG7L,EAAayB,QAAOoK,EAAAC,EAAA/S,EAC9B2C,YAAAA,OAAW,IAAAoQ,EAAG9L,EAAatE,YAAWoQ,EAAAC,EAAAhT,EACtCwI,eAAAA,OAAc,IAAAwK,EAAG/L,EAAauB,eAAcwK,EAAAC,EAAAjT,EAC5CoH,UAAAA,OAAS,IAAA6L,EAAGhM,EAAaG,UAAS6L,EAAAC,EAAAlT,EAClCqH,OAAAA,OAAM,IAAA6L,EAAGjM,EAAaI,OAAM6L,EAAAC,EAAAnT,EAC5BsH,QAAAA,OAAO,IAAA6L,EAAGlM,EAAaK,QAAO6L,EAC9B9S,EAAIL,EAAJK,KAAI+S,EAAApT,EACJuH,SAAAA,OAAQ,IAAA6L,EAAGnM,EAAaM,SAAQ6L,EAAAC,EAAArT,EAChCwH,SAAAA,OAAQ,IAAA6L,EAAGpM,EAAaO,SAAQ6L,EAChChH,EAAMrM,EAANqM,OACA5L,EAAKT,EAALS,MACAE,EAAMX,EAANW,OAAM2S,EAAAtT,EACN6H,QAAAA,OAAO,IAAAyL,EAAGrM,EAAaY,QAAOyL,EAAApH,EAAAlM,EAC9B8H,aAAAA,OAAY,IAAAoE,EAAGjF,EAAaa,aAAYoE,EAAAqH,EAAAvT,EACxCyH,WAAAA,OAAU,IAAA8L,EAAGtM,EAAaQ,WAAU8L,EAAAC,EAAAxT,EACpC2H,WAAAA,OAAU,IAAA6L,EAAGvM,EAAaU,WAAU6L,EAAAC,EAAAzT,EACpCgJ,iBAAAA,OAAgB,IAAAyK,EAAGxM,EAAa+B,iBAAgByK,EAAAC,GAAA1T,EAChDmI,YAAAA,QAAW,IAAAuL,GAAGzM,EAAakB,YAAWuL,GAAAC,GAAA3T,EACtCsI,eAAAA,QAAc,IAAAqL,GAAG1M,EAAaqB,eAAcqL,GAAAC,GAAA5T,EAC5CuI,gBAAAA,QAAe,IAAAqL,GAAG3M,EAAasB,gBAAeqL,GAAAC,GAAA7T,EAC9C0B,QAAAA,QAAO,IAAAmS,GAAG5M,EAAavF,QAAOmS,GAC9B5C,GAAWjR,EAAXiR,YAAW6C,GAAA9T,EACXmJ,aAAAA,QAAY,IAAA2K,GAAG7M,EAAakC,aAAY2K,GAgCxCC,GAAkCC,EAAAA,SAAShL,MAAAA,EAAAA,EAAoB,IAAxDuF,GAASwF,GAAA,GAAEE,GAAYF,GAAA,GACxBpS,GAAckD,eAAY,SAACiC,GAC7BmN,IAAa,SAAAC,GAAK,OACdA,EAAMC,QAAQrN,IAAO,EAAIoN,EAAMzF,QAAO,SAAAlE,GAAI,OAAIA,IAASzD,CAAE,OAACmI,OAAOiF,EAAK,CAAEpN,GAAG,GAElF,GAAE,IAEGmD,GAAWmK,sBAAoBlN,GAC/BmN,GAAWD,sBAAoB/Q,GAC/B4I,GAAkBmI,sBAAoBvL,GACtCkD,GAAcuI,oBAAkB1B,GAEhC1O,GAAQC,EAAAA,WACR6H,GAAWuI,EAAAA,qBAAqB5L,EAAQD,GACxC8L,GAAiBC,EAAAA,kBACnB9R,EACAuB,IAEEwQ,GAAgBD,EAAAA,kBAClBjM,EACAtE,IAIJyQ,IADmC,YAAdvN,EAA0B4G,EAAsBsC,GACvB,CAC1CjJ,OAAAA,EACAC,QAAAA,EACAjH,KAAAA,EACA4J,SAAAA,GACA9C,KAAAA,EACAI,SAAAA,EACAC,SAAAA,EACA/G,MAAAA,EACAE,OAAAA,EACAqL,SAAAA,GACAnE,QAAAA,EACAC,aAAAA,EACAL,WAAAA,EACAE,WAAAA,EACA4G,UAAAA,GACAxC,YAAAA,GACAE,gBAAAA,GACAI,OAAAA,IAlBIpM,GAAI0U,GAAJ1U,KAAMkM,GAAMwI,GAANxI,OAAQC,GAAMuI,GAANvI,OAqBhBwI,GAAgBlQ,EAAAA,SAClB,WAAA,OACIzE,GACKwO,QACG,SAAClO,GAAG,OAAoE,OAAnBA,EAAIF,KAAKuF,KAClE,IACCxE,KAAI,SAACb,EAAKmL,GAAK,OAAAlK,KACTjB,EAAG,CACNmL,MAAAA,GAAK,MAEjB,CAACzL,KAGC4U,GAAuBhQ,eACzB,SAAAhE,GAA0D,IAAvDJ,EAAKI,EAALJ,MAAOE,EAAME,EAANF,OACN,QAAKwH,OACDG,GAAiB,GAAK7H,EAAQ6H,OAC9BC,GAAkB,GAAK5H,EAAS4H,IAEvC,GACD,CAACJ,GAAaG,GAAgBC,KAG5BuM,GAAapQ,EAAAA,SACf,WAAA,OACIyC,EAAK/F,KAAI,SAAAsJ,GACL,IAAMnK,EAAMN,GAAK8U,MAAK,SAAAxU,GAAG,OAAIA,EAAIF,KAAKyG,KAAO4D,KAE7C,OAAAlJ,KAAYjB,EAAG,CAAEF,KAAImB,EAAA,CAAIsF,GAAI4D,GAAW,MAAHnK,OAAG,EAAHA,EAAKF,KAAI,CAAE+M,OAAQmB,GAAUG,SAAShE,MAC/E,GAAE,GACN,CAAC6D,GAAWpH,EAAMlH,KAGhB+U,GAAoDtQ,EAAAA,SACtD,WAAA,OACIhD,GAAQN,KAAI,SAAAS,GAWR,MAAO,CAACA,EAVKkP,EAAc,CACvB9Q,KAA0B,SAApB4B,EAAOK,SAAsB4S,GAAa7U,GAChD+Q,UAAWnP,EAAOmP,UAClBvI,KAAM5G,EAAOK,SACbkF,UAAAA,EACAC,OAAAA,EACA4J,YAAAA,GACA3J,QAAAA,IAIR,GAAE,GACN,CAAC5F,GAASoT,GAAY7U,GAAMmH,EAAWC,EAAQ4J,GAAa3J,IAG1D2N,GAAYvQ,EAAAA,SACd,WAAA,ODhKwB,SAC5BzE,EACAkM,EACAC,EACA/E,EACAD,EACA+B,EACA4C,QAH0C,IAA1C1E,IAAAA,EAA6CJ,EAAaI,aACV,IAAhDD,IAAAA,EAAmDH,EAAaG,WAIhE,IAAM8N,EAAS,GAEf,GAAoB,IAAhBjV,EAAKyM,OAAc,OAAOwI,EAE9B,IAAMvD,EAAgB,IAAIwD,IAEpBtJ,EAAW5L,EAAK,GAAGQ,MACnBuM,EAAY/M,EAAK,GAAGU,OAE1B,GAAkB,YAAdyG,EAAyB,CACzB,IAAM4K,EAAyB,IAAImD,IAEnClV,EAAKuM,SAAQ,SAAAjM,GACT,IAAA6U,EAA8B7U,EAAIF,KAA1B0I,EAAUqM,EAAVrM,WAAYnD,EAAKwP,EAALxP,MACpB8L,EAAoBC,EAAe5I,EAAY+B,OAAOlF,IACtDmM,EAA6BC,EAAwBjJ,EAAY+B,OAAOlF,GAC5E,IAEAoM,EAAuBxF,SAAQ,SAAC6I,EAAgBtM,GAC5C,IAEIuM,EACAC,EACAC,EAJEC,EAAa9D,EAAcE,IAAI9I,IAAe,EAMrC,aAAX1B,GACAiO,EAAYnJ,EAAOpD,GACnBwM,EAAYnJ,EAAOiJ,GACnBG,EAAkBpJ,EAAOiJ,EAAiB,KAE1CC,EAAYnJ,EAAOkJ,GACnBE,EAAYnJ,EAAOrD,GACnByM,EAAkBrJ,EAAOkJ,EAAiB,IAG9CC,GAAwB,aAAXjO,EAAwBwE,EAAW,EAAI1C,EACpDoM,GAAwB,aAAXlO,GAAyB8B,EAAe6D,EAAY,EAEjEkI,EAAO7H,KAAK,CACR3C,IAAK,SAAW3B,EAChBvI,EAAG8U,EACH5U,EAAG6U,EACH3P,MAAO6P,EACP1O,eAAgBgF,EAAY0J,GAC5BD,gBAAAA,GAER,GACJ,MAAO,GAAkB,YAAdpO,EAAyB,CAChC,IAAM8K,EAAuB,IAAIiD,IAC3B9C,EAAsB,IAAI8C,IAEhClV,EAAKuM,SAAQ,SAAAjM,GACT,IAAAmV,EAA8BnV,EAAIF,KAA1B0I,EAAU2M,EAAV3M,WAAYnD,EAAK8P,EAAL9P,MACpB8L,EAAoBC,EAAe5I,EAAY+B,OAAOlF,IACtDqM,EAA2BC,EAAsBnJ,EAAY+B,OAAOlF,IACpEwM,EAA0BC,EAAqBtJ,EACnD,IAEAmJ,EAAqB1F,SAAQ,SAACmJ,EAAe5M,GACzC,IAGIuM,EACAC,EACAC,EALEC,EAAa9D,EAAcE,IAAI9I,IAAe,EAC9C6M,EAAevD,EAAoBR,IAAI9I,GAM9B,aAAX1B,GACAiO,EAAYnJ,EAAOpD,GACnBwM,EAAYnJ,EAAOuJ,GACnBH,EAAkBpJ,EAAOuJ,EAAgB,KAEzCL,EAAYnJ,EAAOwJ,GACnBJ,EAAYnJ,EAAOrD,GACnByM,EAAkBrJ,EAAOwJ,EAAgB,IAM7CL,GAAwB,aAAXjO,EAHUuO,EAAe/J,EAGgB,EAAI1C,EAC1DoM,GAAwB,aAAXlO,GAAyB8B,EAHdyM,EAAe5I,EAGgC,EAEvEkI,EAAO7H,KAAK,CACR3C,IAAK,SAAW3B,EAChBvI,EAAG8U,EACH5U,EAAG6U,EACH3P,MAAO6P,EACP1O,eAAgBgF,EAAY0J,GAC5BD,gBAAAA,GAER,GACJ,CACA,OAAON,CACX,CC0DcW,CAAiB5V,GAAMkM,GAAQC,GAAQ/E,EAAQD,EAAW+B,GAAc4C,GAAY,GAC1F,CAAC9L,GAAMkM,GAAQC,GAAQ/E,EAAQD,EAAW+B,GAAc4C,KAG5D,MAAO,CACH9L,KAAAA,GACA2U,cAAAA,GACAzI,OAAAA,GACAC,OAAAA,GACAnC,SAAAA,GACAoK,SAAAA,GACApI,gBAAAA,GACAF,YAAAA,GACAC,SAAAA,GACAwI,eAAAA,GACAE,cAAAA,GACAG,qBAAAA,GACAtG,UAAAA,GACA5M,YAAAA,GACAqT,gBAAAA,GACAC,UAAAA,GAER,ECtLaa,EAAY,SAAH9V,GAKC,IAJnBK,EAAIL,EAAJK,KACA0V,EAAY/V,EAAZ+V,aACAvM,EAAOxJ,EAAPwJ,QAAO0J,EAAAlT,EACPqH,OAAAA,OAAM,IAAA6L,EAAG9J,EAAgB/B,OAAM6L,EAEzBhP,EAAQC,EAAAA,WAmCd,OAlCyB6R,EAAaA,cAOpC3V,EAAM,CACJ8G,KAAM,SAAA8O,GAAQ,OAAIA,EAASvL,GAAG,EAC9BjC,KAAM,SAAAwN,GAAQ,MAAK,CACfzV,EAAc,aAAX6G,EAAwB4O,EAASzV,EAAIyV,EAAST,gBACjD9U,EAAc,aAAX2G,EAAwB4O,EAAST,gBAAkBS,EAASvV,EAC/DoC,aAAc,EAChB,EACFoT,MAAO,SAAAD,GAAQ,MAAK,CAChBzV,EAAGyV,EAASzV,EACZE,EAAGuV,EAASvV,EACZoC,aAAc,EAChB,EACFqT,OAAQ,SAAAF,GAAQ,MAAK,CACjBzV,EAAGyV,EAASzV,EACZE,EAAGuV,EAASvV,EACZoC,aAAc,EAChB,EACFsT,MAAO,SAAAH,GAAQ,MAAK,CAChBzV,EAAc,aAAX6G,EAAwB4O,EAASzV,EAAIyV,EAAST,gBACjD9U,EAAc,aAAX2G,EAAwB4O,EAAST,gBAAkBS,EAASvV,EAC/DoC,aAAc,EAChB,EACFuT,OAAQN,EACRO,WAAY9M,EACZ+M,QAAS/M,OAAUrH,EAAY,MAG5BqU,EAAiB,SAAC9T,EAAOuT,GAAQ,OACpChV,EAAAa,IAAC0D,EAAQA,SAACe,KAAI,CAEV/F,EAAGkC,EAAMlC,EACTE,EAAGgC,EAAMhC,EACT+F,YAAa/D,EAAMI,aACnBJ,MAAKlB,EAAA,CAAA,EACE0C,EAAMwC,OAAOH,KAAI,CACpBI,cAAe,OACfZ,KAAM7B,EAAMqC,KAAKR,OAErB0Q,WAAW,OACXC,SAAUxS,EAAMwC,OAAOH,KAAKmQ,SAC5BC,WAAYzS,EAAMwC,OAAOH,KAAKoQ,WAC9BzT,WAAuB,aAAXmE,EAAwB,SAAW,QAC/CuP,kBAA8B,aAAXvP,EAAwB,aAAe,SAASlG,SAElE8U,EAASlP,gBAfLkP,EAASvL,IAgBF,GAExB,uECzCMmM,EAAW,SAAH7W,GAiFiB,IAhF3BK,EAAIL,EAAJK,KACA6G,EAAOlH,EAAPkH,QACAC,EAAInH,EAAJmH,KAEQ2P,EAAa9W,EAArBqM,OACA5L,EAAKT,EAALS,MACAE,EAAMX,EAANW,OAEAyG,EAASpH,EAAToH,UACAC,EAAMrH,EAANqH,OACAC,EAAOtH,EAAPsH,QACAC,EAAQvH,EAARuH,SACAC,EAAQxH,EAARwH,SAEAC,EAAUzH,EAAVyH,WACAE,EAAU3H,EAAV2H,WAEAE,EAAO7H,EAAP6H,QACAC,EAAY9H,EAAZ8H,aAEAiP,EAAO/W,EAAP+W,QACAC,EAAShX,EAATgX,UAASC,EAAAjX,EACT+H,WAAAA,OAAU,IAAAkP,EAAG7N,EAAgBrB,WAAUkP,EAAAC,EAAAlX,EACvCgI,SAAAA,OAAQ,IAAAkP,EAAG9N,EAAgBpB,SAAQkP,EAAAC,EAAAnX,EACnCiI,YAAAA,OAAW,IAAAkP,EAAG/N,EAAgBnB,YAAWkP,EAAAC,EAAApX,EACzCkI,YAAAA,OAAW,IAAAkP,EAAGhO,EAAgBlB,YAAWkP,EACzCC,EAAWrX,EAAXqX,YACAC,EAAWtX,EAAXsX,YAAWC,EAAAvX,EAEXqJ,OAAAA,OAAM,IAAAkO,EAAGnO,EAAgBC,OAAMkO,EAAAC,EAAAxX,EAC/BsJ,aAAAA,OAAY,IAAAkO,EAAGpO,EAAgBE,aAAYkO,EAAA9D,EAAA1T,EAE3CmI,YAAAA,OAAW,IAAAuL,EAAGtK,EAAgBjB,YAAWuL,EACzCrQ,EAAKrD,EAALqD,MAAKsQ,EAAA3T,EACLsI,eAAAA,OAAc,IAAAqL,EAAGvK,EAAgBd,eAAcqL,EAAAC,EAAA5T,EAC/CuI,gBAAAA,OAAe,IAAAqL,EAAGxK,EAAgBb,gBAAeqL,EACjDpL,EAAcxI,EAAdwI,eAAciP,EAAAzX,EACdoI,cAAAA,OAAa,IAAAqP,EAAGrO,EAAgBhB,cAAaqP,EAAAC,GAAA1X,EAC7CqI,YAAAA,QAAW,IAAAqP,GAAGtO,EAAgBf,YAAWqP,GAAAC,GAAA3X,EAEzCiJ,QAAAA,QAAO,IAAA0O,GAAGvO,EAAgBH,QAAO0O,GAEjCjP,GAAO1I,EAAP0I,QACAC,GAAM3I,EAAN2I,OAAMiP,GAAA5X,EACNuJ,KAAAA,QAAI,IAAAqO,GAAGxO,EAAgBG,KAAIqO,GAAAC,GAAA7X,EAC3B+F,KAAAA,QAAI,IAAA8R,GAAGzO,EAAgBrD,KAAI8R,GAAAC,GAAA9X,EAC3BmD,aAAAA,QAAY,IAAA2U,GAAG1O,EAAgBjG,aAAY2U,GAAAC,GAAA/X,EAC3CoD,YAAAA,QAAW,IAAA2U,GAAG3O,EAAgBhG,YAAW2U,GACzCpV,GAAW3C,EAAX2C,YAAWqV,GAAAhY,EAEXE,YAAAA,QAAW,IAAA8X,GAAG5O,EAAgBlJ,YAAW8X,GAEzC/G,GAAWjR,EAAXiR,YACApI,GAAY7I,EAAZ6I,aAEA+J,GAAW5S,EAAX4S,YAAWqF,GAAAjY,EAEXuD,cAAAA,QAAa,IAAA0U,GAAG7O,EAAgB7F,cAAa0U,GAAAC,GAAAlY,EAC7C2D,QAAAA,QAAO,IAAAuU,GAAG9O,EAAgBzF,QAAOuU,GACjC1U,GAAOxD,EAAPwD,QACAC,GAAYzD,EAAZyD,aACAC,GAAY1D,EAAZ0D,aAEAhC,GAAO1B,EAAP0B,QAAOyW,GAAAnY,EAEP0J,KAAAA,QAAI,IAAAyO,GAAG/O,EAAgBM,KAAIyO,GAC3BtU,GAAS7D,EAAT6D,UACAC,GAAc9D,EAAd8D,eACAC,GAAe/D,EAAf+D,gBAAeqU,GAAApY,EACf4D,YAAAA,QAAW,IAAAwU,GAAGhP,EAAgBxF,YAAWwU,GACzCC,GAAYrY,EAAZqY,aACAC,GAAiBtY,EAAjBsY,kBACAC,GAAkBvY,EAAlBuY,mBACAC,GAAaxY,EAAbwY,cACAC,GAAezY,EAAfyY,gBAEAzP,GAAgBhJ,EAAhBgJ,iBAAgB0P,GAAA1Y,EAEhBkJ,aAAAA,QAAY,IAAAwP,GAAGtP,EAAgBF,aAAYwP,GAAA5E,GAAA9T,EAC3CmJ,aAAAA,QAAY,IAAA2K,GAAG1K,EAAgBD,aAAY2K,GAE3C6E,GAA0CC,EAAAA,kBAAlCpP,GAAOmP,GAAPnP,QAAiBuM,GAAY4C,GAApBtC,OACjBwC,GAAqEC,EAAaA,cAC9ErY,EACAE,EACAmW,GAHIiC,GAAUF,GAAVE,WAAYC,GAAWH,GAAXG,YAAa3M,GAAMwM,GAANxM,OAAQ4M,GAAUJ,GAAVI,WAAYC,GAAWL,GAAXK,YAMrDC,GAcI5G,EAAiB,CACjBrL,QAAAA,EACA7D,MAAAA,EACAwF,aAAAA,GACA+J,YAAAA,GACAjK,OAAAA,GACAD,QAAAA,GACA/F,YAAAA,GACA6F,eAAAA,EACApB,UAAAA,EACAC,OAAAA,EACAC,QAAAA,EACAjH,KAAAA,EACA8G,KAAAA,EACAI,SAAAA,EACAC,SAAAA,EACA6E,OAAAA,GACA5L,MAAOwY,GACPtY,OAAQuY,GACRrR,QAAAA,EACAC,aAAAA,EACAL,WAAAA,EACAE,WAAAA,EACAQ,YAAAA,EACAG,eAAAA,EACAC,gBAAAA,EACA7G,QAAAA,GACAuP,YAAAA,GACAjI,iBAAAA,GACAG,aAAAA,KA1CAlJ,GAAIkZ,GAAJlZ,KACA2U,GAAauE,GAAbvE,cACAzI,GAAMgN,GAANhN,OACAC,GAAM+M,GAAN/M,OACAiI,GAAQ8E,GAAR9E,SACApI,GAAekN,GAAflN,gBACAuI,GAAc2E,GAAd3E,eACAE,GAAayE,GAAbzE,cACAG,GAAoBsE,GAApBtE,qBACAlT,GAAWwX,GAAXxX,YACAqT,GAAemE,GAAfnE,gBACAC,GAASkE,GAATlE,UACAjJ,GAAQmN,GAARnN,SAiCEoN,GAAqBrO,EAAsB1D,EAAQC,EAASc,EAAeC,IAE3EgR,GAAarD,EAAaA,cAe9BpB,GAAe,CACbzN,KAAM,SAAA5G,GAAG,OAAIA,EAAImK,GAAG,EACpBjC,KAAM,SAAAlI,GAAG,OAAAiB,EAAA,CACLmB,YAAa6R,GAAejU,GAC5BqC,MAAOrC,EAAIqC,MACXjC,OAAQ,EACRkC,WAAY6R,GAAcnU,GAC1BuC,aAAc,GACXsW,GAAmB7Y,EAAIE,MAAOF,EAAII,QAAO,CAC5CsC,UAAwB1C,aAAAA,EAAIC,EAAMD,MAAAA,EAAIG,EAAIH,EAAII,QAAS,IACvDF,MAAOF,EAAIE,OACI,aAAX4G,EACE,GACA,CACI1G,OAAQJ,EAAII,OACZsC,UAAS,aAAe1C,EAAIC,OAAMD,EAAIG,EAAI,IAC1CD,MAAO,GAEnB,EACFyV,MAAO,SAAA3V,GAAG,OAAAiB,EAAA,CACNmB,YAAa6R,GAAejU,GAC5BqC,MAAOrC,EAAIqC,MACXjC,OAAQJ,EAAII,OACZkC,WAAY6R,GAAcnU,GAC1BuC,aAAc,GACXsW,GAAmB7Y,EAAIE,MAAOF,EAAII,QAAO,CAC5CsC,UAAS,aAAe1C,EAAIC,OAAMD,EAAIG,EAAI,IAC1CD,MAAOF,EAAIE,OACb,EACF0V,OAAQ,SAAA5V,GAAG,OAAAiB,EAAA,CACPmB,YAAa6R,GAAejU,GAC5BqC,MAAOrC,EAAIqC,MACXjC,OAAQJ,EAAII,OACZkC,WAAY6R,GAAcnU,GAC1BuC,aAAc,GACXsW,GAAmB7Y,EAAIE,MAAOF,EAAII,QAAO,CAC5CsC,UAAS,aAAe1C,EAAIC,OAAMD,EAAIG,EAAI,IAC1CD,MAAOF,EAAIE,OACb,EACF2V,MAAO,SAAA7V,GAAG,OAAAiB,EAAA,CACNmB,YAAa6R,GAAejU,GAC5BqC,MAAOrC,EAAIqC,MACXjC,OAAQ,EACRkC,WAAY6R,GAAcnU,GAC1BuC,aAAc,GACXsW,GAAmB7Y,EAAIE,MAAOF,EAAII,QAAO,CAC5CqC,OAAQ,EACRC,UAAwB1C,aAAAA,EAAIC,EAAMD,MAAAA,EAAIG,EAAIH,EAAII,QAAS,IACvDF,MAAOF,EAAIE,OACI,aAAX4G,EACE,CAAE,EAAA7F,EAAA,CAAA,EAEK4X,GAAmB7Y,EAAIE,MAAOF,EAAII,QAAO,CAC5CoC,OAAQ,EACRpC,OAAQJ,EAAII,OACZsC,UAAS,aAAe1C,EAAIC,OAAMD,EAAIG,EAAI,IAC1CD,MAAO,IAEnB,EACF4V,OAAQN,GACRO,WAAY9M,GACZ+M,QAAS/M,QAAUrH,EAAY,OAG7BmX,GAAc5U,EAAAA,SAChB,WAAA,MAAO,CACHvB,aAAAA,GACAC,YAAAA,GACA+E,YAAAA,EACA5E,cAAAA,GACA+E,eAAAA,EACAC,gBAAAA,EACA/E,QAAAA,GACAC,aAAAA,GACAC,aAAAA,GACAuI,gBAAAA,GACAtI,QAAAA,GACAC,YAAAA,GACAC,UAAWwU,GACXvU,eAAgBwU,GAChBvU,gBAAiBwU,GACjBtU,WAAYuU,GACZxU,aAAcyU,GACjB,GACD,CACItV,GACAC,GACA+E,EACA8D,GACA1I,GACAgF,EACAD,EACA9E,GACAC,GACAC,GACAC,GACAC,GACAyU,GACAC,GACAC,GACAC,GACAC,KAIFc,GAAYC,EAAQA,SAACjQ,GAAMtJ,GAAM8F,GAAM,CACzC0T,QAAS,OACTC,UAAW,cAGTC,GAA2C,CAC7CzZ,YAAa,KACb0Z,KAAM,KACN3Z,KAAM,KACN4Z,KAAM,KACNnY,QAAS,KACTuH,QAAS,KACTiM,OAAQ,MAGR7L,EAAOqF,SAAS,iBAChBiL,GAAUzZ,YACNe,EAAAa,IAAC/B,EAAc,CAAmBE,KAAMA,GAAMC,YAAaA,IAAvC,gBAIxBmJ,EAAOqF,SAAS,UAChBiL,GAAUC,KACN3Y,EAAAa,IAACgY,OAAI,CAED3N,OAAQA,GACRC,OAAQA,GACR3L,MAAOwY,GACPtY,OAAQuY,GACR3L,IAAKwJ,EACLgD,MAAO/C,EACPgD,OAAQjS,EACRuF,KAAMtF,GARF,SAaZqB,EAAOqF,SAAS,UAChBiL,GAAU1Z,KACNgB,EAAAa,IAACmY,WAAQ,CAAA9Y,SACJkY,IAAW,SAAC3W,EAAOnC,GAAG,OACnBoE,EAAaA,cAAC2E,EAAY9H,KACnB8X,GAAW,CACd/Y,IAAAA,EACAmC,MAAAA,EACAY,kBAAmBuR,GAAqBtU,GACxC8C,MAAOgR,GAAS9T,EAAIF,aAPlB,SAclBgJ,EAAOqF,SAAS,UAChBiL,GAAUE,KACN5Y,EAAAa,IAACoY,OAAI,CAEDzZ,MAAOwY,GACPtY,OAAQuY,GACR/M,OAAQlE,EAAckE,GAAS,KAC/BC,OAAQlE,EAAckE,GAAS,KAC/B+N,QAAS9C,EACT+C,QAAS9C,GANL,SAWZjO,EAAOqF,SAAS,aAChBiL,GAAUjY,QACNT,EAAAa,IAACL,EAAU,CAEPhB,MAAOwY,GACPtY,OAAQuY,GACRxX,QAASsT,GACTrT,YAAaA,IAJT,YASZ0H,EAAOqF,SAAS,aAChBiL,GAAU1Q,QACNhI,EAAAa,IAACuY,mBAAgB,CAEbpR,QAASA,GACTxI,MAAOwY,GACPtY,OAAQuY,GACR/M,OAAQA,GACRC,OAAQA,IALJ,YAUZ/C,EAAOqF,SAAS,WAAaxF,KAC7ByQ,GAAUzE,OACNjU,EAAAa,IAACgU,EAAS,CAENzV,KAAM4U,GACNc,aAAcA,GACdvM,QAASA,GACTnC,OAAQA,GAJJ,WAShB,IAAMiT,GAA8C5V,EAAAA,SAChD,WAAA,OAAAlD,KACO8X,GAAW,CACdjN,OAAAA,GACA5L,MAAAA,EACAE,OAAAA,EACAsY,WAAAA,GACAC,YAAAA,GACAjZ,KAAAA,GACA6U,WAAYE,GACZ7M,YAAAA,EACAgE,OAAAA,GACAC,OAAAA,GACAzI,QAAAA,GACAsI,gBAAAA,GACAzI,QAAAA,GACAC,aAAAA,GACAC,aAAAA,GACAsI,SAAAA,IAAQ,GAEZ,CACIsN,GACAjN,GACA5L,EACAE,EACAsY,GACAC,GACAjZ,GACA+U,GACA7M,EACAgE,GACAC,GACAzI,GACAsI,GACAzI,GACAC,GACAC,GACAsI,KAIR,OACI/K,EAAAA,IAACsZ,EAAAA,WAAU,CACP9Z,MAAOsY,GACPpY,OAAQqY,GACR3M,OAAQA,GACR9C,KAAMgQ,GACN7P,KAAMA,GACN7F,UAAWA,GACXC,eAAgBA,GAChBC,gBAAiBA,GACjBH,YAAaA,GAAYzC,SAExBkI,EAAOjI,KAAI,SAACoZ,EAAOlZ,GAAM,IAAAmZ,EACtB,MAAqB,mBAAVD,EACAvZ,EAAAA,IAACgZ,EAAAA,SAAQ,CAAA9Y,SAAUwD,EAAAA,cAAc6V,EAAOF,KAAzBhZ,GAGD,OAAzBmZ,EAAOd,MAAAA,QAAAA,EAAAA,GAAYa,IAAMC,EAAI,SAI7C,EAEaC,EAAM,SAAH7Z,GAAA,IAAA8Z,EAAA9Z,EACZ0C,cAAAA,OAAa,IAAAoX,EAAGvR,EAAgB7F,cAAaoX,EAAAC,EAAA/Z,EAC7C2I,QAAAA,OAAO,IAAAoR,EAAGxR,EAAgBI,QAAOoR,EAAAC,EAAAha,EACjC4I,aAAAA,OAAY,IAAAoR,EAAGzR,EAAgBK,aAAYoR,EAC3C3W,EAAKrD,EAALqD,MACA4W,EAAaja,EAAbia,cACGC,EAAUxY,EAAA1B,EAAA2B,GAAA,OAEbvB,EAAAA,IAAC+Z,EAAAA,UAAS,CAEFxR,QAAAA,EACAjG,cAAAA,EACAkG,aAAAA,EACAqR,cAAAA,EACA5W,MAAAA,EAAK/C,SAGTF,EAAAA,IAAC4V,EAAQrV,EAAA,CAAW+B,cAAeA,GAAmBwX,KAC9C,8CC7aVE,EAAqB,SACvBC,EACA7O,EACA7L,EACAE,GAAS,OAETwa,EAAMnG,MAAK,SAAAoG,GAAI,OACXC,EAAAA,eAAeD,EAAK3a,EAAI6L,EAAOiB,KAAM6N,EAAKza,EAAI2L,EAAOkB,IAAK4N,EAAK1a,MAAO0a,EAAKxa,OAAQH,EAAGE,EAAE,GAC3F,EAoBL,IAAM2a,GAAiB,SAAHrb,GA2HiB,IA1HjCK,EAAIL,EAAJK,KACA6G,EAAOlH,EAAPkH,QACAC,EAAInH,EAAJmH,KAEQ2P,EAAa9W,EAArBqM,OACA5L,EAAKT,EAALS,MACAE,EAAMX,EAANW,OAEAyG,EAASpH,EAAToH,UACAC,EAAMrH,EAANqH,OACAC,EAAOtH,EAAPsH,QACAC,EAAQvH,EAARuH,SACAC,EAAQxH,EAARwH,SAEAC,EAAUzH,EAAVyH,WACAE,EAAU3H,EAAV2H,WAEAE,EAAO7H,EAAP6H,QACAC,EAAY9H,EAAZ8H,aAEAiP,EAAO/W,EAAP+W,QACAC,EAAShX,EAATgX,UAASC,EAAAjX,EACT+H,WAAAA,OAAU,IAAAkP,EAAGtN,EAAmB5B,WAAUkP,EAAAC,EAAAlX,EAC1CgI,SAAAA,OAAQ,IAAAkP,EAAGvN,EAAmB3B,SAAQkP,EAAAC,EAAAnX,EACtCiI,YAAAA,OAAW,IAAAkP,EAAGxN,EAAmB1B,YAAWkP,EAAAC,EAAApX,EAC5CkI,YAAAA,OAAW,IAAAkP,EAAGzN,EAAmBzB,YAAWkP,EAC5CC,EAAWrX,EAAXqX,YACAC,EAAWtX,EAAXsX,YAAWG,EAAAzX,EAEXoI,cAAAA,OAAa,IAAAqP,EAAG9N,EAAmBvB,cAAaqP,EAAAC,EAAA1X,EAChDqI,YAAAA,OAAW,IAAAqP,EAAG/N,EAAmBtB,YAAWqP,EAAAH,EAAAvX,EAE5CqJ,OAAAA,OAAM,IAAAkO,EAAG5N,EAAmBN,OAAMkO,EAAA+D,EAAAtb,EAClCub,UAAAA,OAAS,IAAAD,EAAG,SACRE,EAAG3a,GAcF,IAAA4a,EAAA5a,EAZGN,IAAOqC,EAAK6Y,EAAL7Y,MAAOjC,EAAM8a,EAAN9a,OAAQF,EAAKgb,EAALhb,MAAOD,EAACib,EAADjb,EAAGE,EAAC+a,EAAD/a,EAEhCiC,EAAW9B,EAAX8B,YACAQ,EAAYtC,EAAZsC,aACAC,EAAWvC,EAAXuC,YACAC,EAAKxC,EAALwC,MACAR,EAAUhC,EAAVgC,WACAS,EAAiBzC,EAAjByC,kBACAP,EAAMlC,EAANkC,OACAC,EAAMnC,EAANmC,OACAE,EAAUrC,EAAVqC,WAYJ,GATAsY,EAAIE,UAAY9Y,EAEZQ,EAAc,IACdoY,EAAIG,YAAchZ,EAClB6Y,EAAII,UAAYxY,GAGpBoY,EAAIK,YAEA1Y,EAAe,EAAG,CAClB,IAAM2Y,EAAS/a,KAAKsJ,IAAIlH,EAAcxC,GAEtC6a,EAAIO,OAAOvb,EAAIsb,EAAQpb,GACvB8a,EAAIQ,OAAOxb,EAAIC,EAAQqb,EAAQpb,GAC/B8a,EAAIS,iBAAiBzb,EAAIC,EAAOC,EAAGF,EAAIC,EAAOC,EAAIob,GAClDN,EAAIQ,OAAOxb,EAAIC,EAAOC,EAAIC,EAASmb,GACnCN,EAAIS,iBAAiBzb,EAAIC,EAAOC,EAAIC,EAAQH,EAAIC,EAAQqb,EAAQpb,EAAIC,GACpE6a,EAAIQ,OAAOxb,EAAIsb,EAAQpb,EAAIC,GAC3B6a,EAAIS,iBAAiBzb,EAAGE,EAAIC,EAAQH,EAAGE,EAAIC,EAASmb,GACpDN,EAAIQ,OAAOxb,EAAGE,EAAIob,GAClBN,EAAIS,iBAAiBzb,EAAGE,EAAGF,EAAIsb,EAAQpb,GACvC8a,EAAIU,WACR,MACIV,EAAI9V,KAAKlF,EAAGE,EAAGD,EAAOE,GAG1B6a,EAAIzV,OAEA3C,EAAc,GACdoY,EAAIvV,SAGJ3C,IACAkY,EAAIW,aAAe,SACnBX,EAAIY,UAA2B,WAAflZ,EAA0B,SAAWA,EACrDsY,EAAIE,UAAY7Y,EAChB2Y,EAAIa,SAAShZ,EAAO7C,EAAIuC,EAAQrC,EAAIsC,GAE5C,EAACsY,EAAA5H,EAAA1T,EAEDmI,YAAAA,OAAW,IAAAuL,EAAG/J,EAAmBxB,YAAWuL,EAC5CrQ,EAAKrD,EAALqD,MAAKsQ,EAAA3T,EACLsI,eAAAA,OAAc,IAAAqL,EAAGhK,EAAmBrB,eAAcqL,EAAAC,EAAA5T,EAClDuI,gBAAAA,QAAe,IAAAqL,EAAGjK,EAAmBpB,gBAAeqL,EACpDpL,GAAcxI,EAAdwI,eAEAE,GAAO1I,EAAP0I,QACAC,GAAM3I,EAAN2I,OAAMmP,GAAA9X,EACNmD,aAAAA,QAAY,IAAA2U,GAAGnO,EAAmBxG,aAAY2U,GAAAC,GAAA/X,EAC9CoD,YAAAA,QAAW,IAAA2U,GAAGpO,EAAmBvG,YAAW2U,GAC5CpV,GAAW3C,EAAX2C,YAAWqV,GAAAhY,EAEXE,YAAAA,QAAW,IAAA8X,GAAGrO,EAAmBzJ,YAAW8X,GAE5C/G,GAAWjR,EAAXiR,YACApI,GAAY7I,EAAZ6I,aAEA+J,GAAW5S,EAAX4S,YAAWqF,GAAAjY,EAEXuD,cAAAA,QAAa,IAAA0U,GAAGtO,EAAmBpG,cAAa0U,GAAAC,GAAAlY,EAChD2D,QAAAA,QAAO,IAAAuU,GAAGvO,EAAmBhG,QAAOuU,GACpC1U,GAAOxD,EAAPwD,QACAC,GAAYzD,EAAZyD,aACAC,GAAY1D,EAAZ0D,aAEAhC,GAAO1B,EAAP0B,QAAO4a,GAAAtc,EAEP4J,WAAAA,QAAU,IAAA0S,GAAG3S,EAAmBC,WAAU0S,GAE1CC,GAASvc,EAATuc,UAAS7D,GAAA1Y,EAETkJ,aAAAA,QAAY,IAAAwP,GAAG/O,EAAmBT,aAAYwP,GAAA5E,GAAA9T,EAC9CmJ,aAAAA,QAAY,IAAA2K,GAAGnK,EAAmBR,aAAY2K,GAExC0I,GAAWC,SAAiC,MAE5CvY,GAAQC,EAAAA,WACd0U,GAAqEC,EAAaA,cAC9ErY,EACAE,EACAmW,GAHIzK,GAAMwM,GAANxM,OAAQ4M,GAAUJ,GAAVI,WAAYC,GAAWL,GAAXK,YAAaH,GAAUF,GAAVE,WAAYC,GAAWH,GAAXG,YAMrDG,GAaI5G,EAAiB,CACjBrL,QAAAA,EACA7D,MAAAA,EACAwF,aAAAA,GACA+J,YAAAA,GACAjK,OAAAA,GACAD,QAAAA,GACA/F,YAAAA,GACA6F,eAAAA,GACApB,UAAAA,EACAC,OAAAA,EACAC,QAAAA,EACAjH,KAAAA,EACA8G,KAAAA,EACAI,SAAAA,EACAC,SAAAA,EACA6E,OAAAA,GACA5L,MAAOwY,GACPtY,OAAQuY,GACRrR,QAAAA,EACAC,aAAAA,EACAL,WAAAA,EACAE,WAAAA,EACAQ,YAAAA,EACAG,eAAAA,EACAC,gBAAAA,GACA7G,QAAAA,GACAuP,YAAAA,GACA9H,aAAAA,KAxCAlJ,GAAIkZ,GAAJlZ,KACA2U,GAAauE,GAAbvE,cACAzI,GAAMgN,GAANhN,OACAC,GAAM+M,GAAN/M,OACAiI,GAAQ8E,GAAR9E,SACApI,GAAekN,GAAflN,gBACAuI,GAAc2E,GAAd3E,eACAE,GAAayE,GAAbzE,cACAG,GAAoBsE,GAApBtE,qBACAG,GAAemE,GAAfnE,gBACAC,GAASkE,GAATlE,UACAjJ,GAAQmN,GAARnN,SAgCJ5H,GAA8CC,EAAAA,aAAtCC,GAAoBF,GAApBE,qBAAsBE,GAAWJ,GAAXI,YAGxBrE,GAAwBuc,EAAAA,uBAAuB,CACjDxc,YAAaE,EAAAA,eAAe,CACxBC,KAAMJ,GACNC,YAAAA,GACAI,YAAa,SAAA6a,GAAI,MAAK,CAClB3a,EAAG2a,EAAK3a,EACRE,EAAGya,EAAKza,EACV,EACFE,cAAe,SAAAqN,GAAA,IAAGxN,EAAKwN,EAALxN,MAAOE,EAAMsN,EAANtN,OAAM,MAAQ,CACnCF,MAAAA,EACAE,OAAAA,EACAG,KAAMC,KAAKC,IAAIP,EAAOE,GACzB,MAKH2Z,GAAoD5V,EAAAA,SACtD,WAAA,MAAO,CACHvB,aAAAA,GACAC,YAAAA,GACAG,cAAAA,GACAK,aAAa,EACb0E,eAAAA,EACAC,gBAAAA,GACA8D,OAAAA,GACA5L,MAAAA,EACAE,OAAAA,EACAsY,WAAAA,GACAC,YAAAA,GACAjZ,KAAAA,GACA6U,WAAYE,GACZ7M,YAAAA,EACAgE,OAAAA,GACAC,OAAAA,GACAzI,QAAAA,GACAsI,gBAAAA,GACAzI,QAAAA,GACAC,aAAAA,GACAC,aAAAA,GACAsI,SAAAA,GACF,GACF,CACI7I,GACAC,GACAG,GACA+E,EACAC,GACA8D,GACA5L,EACAE,EACAsY,GACAC,GACAjZ,GACA+U,GACA7M,EACAgE,GACAC,GACAzI,GACAsI,GACAzI,GACAC,GACAC,GACAsI,KAIFD,GAAcuI,oBAAkB1B,IAChCwG,GAAqBrO,EAAsB1D,EAAQC,EAASc,EAAeC,GAEjFsU,EAAAA,WAAU,WAAM,IAAAC,EACNpB,EAAsB,OAAnBoB,EAAGJ,GAASK,cAAO,EAAhBD,EAAkBE,WAAW,MAEpCN,GAASK,SACTrB,IAELgB,GAASK,QAAQpc,MAAQsY,GAAanP,GACtC4S,GAASK,QAAQlc,OAASqY,GAAcpP,GAExC4R,EAAIlM,MAAM1F,GAAYA,IAEtB4R,EAAIE,UAAYxX,GAAM6Y,WACtBvB,EAAIwB,SAAS,EAAG,EAAGjE,GAAYC,IAC/BwC,EAAIyB,UAAU5Q,GAAOiB,KAAMjB,GAAOkB,KAElClE,EAAOmD,SAAQ,SAAAgO,GACG,SAAVA,EA5RuD,iBA6R1CtW,GAAM2V,KAAKqD,KAAKlX,aAAgB9B,GAAM2V,KAAKqD,KAAKlX,YAAc,IACvEwV,EAAII,UAAY1X,GAAM2V,KAAKqD,KAAKlX,YAChCwV,EAAIG,YAAczX,GAAM2V,KAAKqD,KAAKjX,OAE9BgC,GACAkV,EAAAA,wBAAyC3B,EAAK,CAC1C/a,MAAOwY,GACPtY,OAAQuY,GACR5J,MAAOnD,GACPjC,KAAM,IACN6E,OAAQsI,IAIZnP,GACAiV,EAAAA,wBAAyC3B,EAAK,CAC1C/a,MAAOwY,GACPtY,OAAQuY,GACR5J,MAAOlD,GACPlC,KAAM,IACN6E,OAAQuI,KAIH,SAAVkD,EACP4C,EAAAA,mBAAmB5B,EAAK,CACpBrP,OAAQA,GACRC,OAAQA,GACR3L,MAAOwY,GACPtY,OAAQuY,GACR3L,IAAKwJ,EACLgD,MAAO/C,EACPgD,OAAQjS,EACRuF,KAAMtF,EACN9D,MAAAA,KAEa,SAAVsW,EACP5F,GAAcpI,SAAQ,SAAAjM,GAClBgb,EAAUC,EAAGha,EAAA,CACTjB,IAAAA,EACAoC,YAAa6R,GAAejU,GAC5B4C,aAAAA,GACAC,YAAAA,GACAC,MAAOgR,GAAS9T,EAAIF,MACpBwC,WAAY6R,GAAcnU,GAC1B+C,kBAAmBuR,GAAqBtU,IACrC6Y,GAAmB7Y,EAAIE,MAAOF,EAAII,SAE7C,IACiB,YAAV6Z,EACPxF,GAAgBxI,SAAQ,SAAAmC,GAAoB,IAAlB9M,EAAM8M,EAAA,GAAEtO,EAAIsO,EAAA,GAClC0O,EAAAA,qBAAqB7B,EAAGha,KACjBK,EAAM,CACTxB,KAAAA,EACA2B,eAAgBiX,GAChBhX,gBAAiBiX,GACjBhV,MAAAA,KAER,IACiB,gBAAVsW,EACP8C,EAAAA,0BAA0B9B,EAAK,CAAEtb,YAAaC,GAAkB+D,MAAAA,KAC/C,WAAVsW,GAAsBtR,GAxV7C,SACIsS,EACAvG,EACA/Q,EACAmD,QAA0C,IAA1CA,IAAAA,EAA6CsC,EAAmBtC,QAEhEmU,EAAIE,UAAYxX,EAAMqC,KAAKR,KAC3ByV,EAAI+B,KAAI,QAAWrZ,EAAMwC,OAAOH,KAAKmQ,eAAcxS,EAAMwC,OAAOH,KAAKoQ,WACrE6E,EAAIW,aAA0B,aAAX9U,EAAwB,aAAe,SAC1DmU,EAAIY,UAAuB,aAAX/U,EAAwB,SAAW,QAEnD4N,EAAUzI,SAAQ,SAAAyJ,GACduF,EAAIa,SAASpG,EAASlP,eAAgBkP,EAASzV,EAAGyV,EAASvV,EAC/D,GACJ,CA2UgB8c,CAAqBhC,EAAKvG,GAAW/Q,GAAOmD,GACpB,mBAAVmT,GACdA,EAAMgB,EAAKlB,GAEnB,IAEAkB,EAAIiC,OACR,GAAG,CACC1V,EACAC,EACAgP,EACAD,EACAnC,GACAzR,GACAC,GACAjD,GACA8H,EACAC,EACAsM,GACAH,GACAK,GACA2C,EACAC,EACAlQ,EACAzG,EACAuY,GACAD,GACAqB,GACAjR,EACAhC,EACA2N,GACA3I,GAAOiB,KACPjB,GAAOkB,IACPyL,GACAD,GACAnP,GACA2R,EACApP,GACAC,GACA9E,EACAuN,GACA3Q,GACAzD,EACAwU,GACA/L,GACA6C,GACAqN,KAGJ,IAAMsE,GAAmB7Y,eACrB,SAACC,GACG,GAAK7E,IACAuc,GAASK,QAAd,CAEA,IAAAc,EAAeC,EAAiBA,kBAACpB,GAASK,QAAS/X,GAA5CtE,EAACmd,EAAA,GAAEjd,EAACid,EAAA,GACLpd,EAAM0a,EAAmBhb,GAAMoM,GAAQ7L,EAAGE,QAEpCyB,IAAR5B,GACA+D,GACIK,EAAaA,cAAChB,GAAOnC,EAAA,CAAA,EACdjB,EAAIF,KAAI,CACXuC,MAAOrC,EAAIqC,MACXS,MAAO9C,EAAI8C,MACXuC,MAAOkF,OAAOvK,EAAIF,KAAKuF,UAE3Bd,GAGe,eAAfA,EAAM4C,OACM,MAAZjE,IAAAA,GAAelD,EAAIF,KAAMyE,KAG7BN,IApBmB,CAsB3B,GACA,CAACA,GAAa6H,GAAQ5I,GAAcxD,GAAMqE,GAAsBX,KAG9DsB,GAAmBJ,eACrB,SAACC,GACG,GAAK7E,IACAuc,GAASK,QAAd,CAEArY,KAEA,IAAAqZ,EAAeD,EAAiBA,kBAACpB,GAASK,QAAS/X,GAA5CtE,EAACqd,EAAA,GAAEnd,EAACmd,EAAA,GACLtd,EAAM0a,EAAmBhb,GAAMoM,GAAQ7L,EAAGE,GAE5CH,IACY,MAAZmD,IAAAA,GAAenD,EAAIF,KAAMyE,GARN,CAU1B,GACD,CAACN,GAAa6H,GAAQ3I,GAAczD,KAGlC2E,GAAcC,eAChB,SAACC,GACG,GAAK7E,IACAuc,GAASK,QAAd,CAEA,IAAAiB,EAAeF,EAAiBA,kBAACpB,GAASK,QAAS/X,GAA5CtE,EAACsd,EAAA,GAAEpd,EAACod,EAAA,GACLvd,EAAM0a,EAAmBhb,GAAMoM,GAAQ7L,EAAGE,QAEpCyB,IAAR5B,UACAiD,IAAAA,GAAOhC,EAAQjB,CAAAA,EAAAA,EAAIF,KAAI,CAAEuC,MAAOrC,EAAIqC,QAASkC,GAN1B,CAQ1B,GACD,CAACuH,GAAQ7I,GAASvD,KAGtB,OACIgB,EAAAA,IAAA,SAAA,CACI8c,IAAK,SAAAC,GACDxB,GAASK,QAAUmB,EACfzB,IAAa,YAAaA,KAAWA,GAAUM,QAAUmB,EAC/D,EACFvd,MAAOsY,GAAanP,GACpBjJ,OAAQqY,GAAcpP,GACtBlH,MAAO,CACHjC,MAAOsY,GACPpY,OAAQqY,GACRiF,OAAQ1a,GAAgB,OAAS,UAErCE,aAAcF,GAAgBma,QAAmBvb,EACjDiE,YAAa7C,GAAgBma,QAAmBvb,EAChDuB,aAAcH,GAAgB0B,QAAmB9C,EACjDqB,QAASD,GAAgBqB,QAAczC,GAGnD,EAEa+b,GAAYC,EAAUA,YAC/B,SAAA5O,EAEIwO,GAAoC,IADlCxa,EAAagM,EAAbhM,cAAeuX,EAAavL,EAAbuL,cAAe5W,EAAKqL,EAALrL,MAAUsK,EAAKjM,EAAAgN,EAAA/M,GAAA,OAG/CvB,EAAAA,IAAC+Z,EAAAA,UAAS,CAAOzX,cAAAA,EAAeuX,cAAAA,EAAe5W,MAAAA,EAASsF,SAAS,EAAMrI,SACnEF,EAAAA,IAACoa,GAAc7Z,KAAegN,EAAK,CAAE+N,UAAWwB,MACxC,ICphBPK,GAAsBD,EAAAA,YAAW,SAE5C3P,EAA2CuP,GACzC,OACI9c,EAAAA,IAACod,EAAAA,kBAAiB,CAAAld,SACb,SAAAnB,GAAA,IAAGS,EAAKT,EAALS,MAAOE,EAAMX,EAANW,OAAM,OACbM,EAAAa,IAACoc,GAAS1c,EAAA,CACNf,MAAOA,EACPE,OAAQA,GACH6N,EAAK,CACVuP,IAAKA,IACP,GAIlB,wHChB6B,SACzBvP,GAAsC,OAEtCvN,EAAAA,IAACod,EAAAA,kBAAiB,CAAAld,SACb,SAAAnB,GAAA,IAAGS,EAAKT,EAALS,MAAOE,EAAMX,EAANW,OAAM,OAAOM,EAAAa,IAAC4Y,EAAGlZ,EAAA,CAAWf,MAAOA,EAAOE,OAAQA,GAAY6N,GAAS,GAClE"}