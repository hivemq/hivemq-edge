{"version":3,"file":"nivo-sunburst.cjs.js","sources":["../src/SunburstTooltip.tsx","../src/props.ts","../src/hooks.ts","../src/Arcs.tsx","../src/Sunburst.tsx","../src/ResponsiveSunburst.tsx"],"sourcesContent":["import { BasicTooltip } from '@nivo/tooltip'\nimport { ComputedDatum } from './types'\n\nexport const SunburstTooltip = <RawDatum,>({\n    id,\n    formattedValue,\n    color,\n}: ComputedDatum<RawDatum>) => (\n    <BasicTooltip id={id} value={formattedValue} enableChip={true} color={color} />\n)\n","import { ArcTransitionMode } from '@nivo/arcs'\nimport { OrdinalColorScaleConfig } from '@nivo/colors'\nimport { SunburstTooltip } from './SunburstTooltip'\nimport { SunburstLayerId } from './types'\n\nexport const defaultProps = {\n    id: 'id',\n    value: 'value',\n    cornerRadius: 0,\n    layers: ['arcs', 'arcLabels'] as SunburstLayerId[],\n    colors: { scheme: 'nivo' } as unknown as OrdinalColorScaleConfig,\n    colorBy: 'id' as const,\n    inheritColorFromParent: true,\n    childColor: { from: 'color' },\n    borderWidth: 1,\n    borderColor: 'white',\n    enableArcLabels: false,\n    arcLabel: 'formattedValue',\n    arcLabelsRadiusOffset: 0.5,\n    arcLabelsSkipAngle: 0,\n    arcLabelsTextColor: { theme: 'labels.text.fill' },\n    animate: true,\n    motionConfig: 'gentle',\n    transitionMode: 'innerRadius' as ArcTransitionMode,\n    isInteractive: true,\n    defs: [],\n    fill: [],\n    tooltip: SunburstTooltip,\n    role: 'img',\n}\n","import { useMemo } from 'react'\nimport { partition as d3Partition, hierarchy as d3Hierarchy } from 'd3-hierarchy'\nimport cloneDeep from 'lodash/cloneDeep'\nimport sortBy from 'lodash/sortBy'\nimport { usePropertyAccessor, useTheme, useValueFormatter } from '@nivo/core'\nimport { Arc, useArcGenerator } from '@nivo/arcs'\nimport { useOrdinalColorScale, useInheritedColor, InheritedColorConfig } from '@nivo/colors'\nimport {\n    SunburstCommonProps,\n    ComputedDatum,\n    DataProps,\n    DatumId,\n    SunburstCustomLayerProps,\n} from './types'\nimport { defaultProps } from './props'\n\nexport const useSunburst = <RawDatum>({\n    data,\n    id = defaultProps.id,\n    value = defaultProps.value,\n    valueFormat,\n    radius,\n    cornerRadius = defaultProps.cornerRadius,\n    colors = defaultProps.colors,\n    colorBy = defaultProps.colorBy,\n    inheritColorFromParent = defaultProps.inheritColorFromParent,\n    childColor = defaultProps.childColor as InheritedColorConfig<ComputedDatum<RawDatum>>,\n}: {\n    data: DataProps<RawDatum>['data']\n    id?: DataProps<RawDatum>['id']\n    value?: DataProps<RawDatum>['value']\n    valueFormat?: DataProps<RawDatum>['valueFormat']\n    radius: number\n    cornerRadius?: SunburstCommonProps<RawDatum>['cornerRadius']\n    colors?: SunburstCommonProps<RawDatum>['colors']\n    colorBy?: SunburstCommonProps<RawDatum>['colorBy']\n    inheritColorFromParent?: SunburstCommonProps<RawDatum>['inheritColorFromParent']\n    childColor?: SunburstCommonProps<RawDatum>['childColor']\n}) => {\n    const theme = useTheme()\n    const getColor = useOrdinalColorScale<Omit<ComputedDatum<RawDatum>, 'color' | 'fill'>>(\n        colors,\n        colorBy\n    )\n    const getChildColor = useInheritedColor<ComputedDatum<RawDatum>>(childColor, theme)\n\n    const getId = usePropertyAccessor<RawDatum, DatumId>(id)\n    const getValue = usePropertyAccessor<RawDatum, number>(value)\n    const formatValue = useValueFormatter<number>(valueFormat)\n\n    const nodes: ComputedDatum<RawDatum>[] = useMemo(() => {\n        // d3 mutates the data for performance reasons,\n        // however it does not work well with reactive programming,\n        // this ensures that we don't mutate the input data\n        const clonedData = cloneDeep(data)\n\n        const hierarchy = d3Hierarchy(clonedData).sum(getValue)\n\n        const partition = d3Partition<RawDatum>().size([2 * Math.PI, radius * radius])\n        // exclude root node\n        const descendants = partition(hierarchy).descendants().slice(1)\n\n        const total = hierarchy.value ?? 0\n\n        // It's important to sort node by depth,\n        // it ensures that we assign a parent node\n        // which has already been computed, because parent nodes\n        // are going to be computed first\n        const sortedNodes = sortBy(descendants, 'depth')\n\n        return sortedNodes.reduce<ComputedDatum<RawDatum>[]>((acc, descendant) => {\n            const id = getId(descendant.data)\n            // d3 hierarchy node value is optional by default as it depends on\n            // a call to `count()` or `sum()`, and we previously called `sum()`,\n            // d3 typings could be improved and make it non optional when calling\n            // one of those.\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            const value = descendant.value!\n            const percentage = (100 * value) / total\n            const path = descendant.ancestors().map(ancestor => getId(ancestor.data))\n\n            const arc: Arc = {\n                startAngle: descendant.x0,\n                endAngle: descendant.x1,\n                innerRadius: Math.sqrt(descendant.y0),\n                outerRadius: Math.sqrt(descendant.y1),\n            }\n\n            let parent: ComputedDatum<RawDatum> | undefined\n            if (descendant.parent) {\n                // as the parent is defined by the input data, and we sorted the data\n                // by `depth`, we can safely assume it's defined.\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                parent = acc.find(node => node.id === getId(descendant.parent!.data))\n            }\n\n            const normalizedNode: ComputedDatum<RawDatum> = {\n                id,\n                path,\n                value,\n                percentage,\n                formattedValue: valueFormat ? formatValue(value) : `${percentage.toFixed(2)}%`,\n                color: '',\n                arc,\n                data: descendant.data,\n                depth: descendant.depth,\n                height: descendant.height,\n            }\n\n            if (inheritColorFromParent && parent && normalizedNode.depth > 1) {\n                normalizedNode.color = getChildColor(parent, normalizedNode)\n            } else {\n                normalizedNode.color = getColor(normalizedNode)\n            }\n\n            return [...acc, normalizedNode]\n        }, [])\n    }, [\n        data,\n        radius,\n        getValue,\n        getId,\n        valueFormat,\n        formatValue,\n        getColor,\n        inheritColorFromParent,\n        getChildColor,\n    ])\n\n    const arcGenerator = useArcGenerator({ cornerRadius })\n\n    return { arcGenerator, nodes }\n}\n\n/**\n * Memoize the context to pass to custom layers.\n */\nexport const useSunburstLayerContext = <RawDatum>({\n    nodes,\n    arcGenerator,\n    centerX,\n    centerY,\n    radius,\n}: SunburstCustomLayerProps<RawDatum>): SunburstCustomLayerProps<RawDatum> =>\n    useMemo(\n        () => ({\n            nodes,\n            arcGenerator,\n            centerX,\n            centerY,\n            radius,\n        }),\n        [nodes, arcGenerator, centerX, centerY, radius]\n    )\n","import { createElement, useMemo } from 'react'\nimport * as React from 'react'\nimport { ArcGenerator, ArcsLayer } from '@nivo/arcs'\nimport { ComputedDatum, SunburstCommonProps, MouseHandlers } from './types'\nimport { useTooltip } from '@nivo/tooltip'\n\ninterface ArcsProps<RawDatum> {\n    center: [number, number]\n    data: ComputedDatum<RawDatum>[]\n    arcGenerator: ArcGenerator\n    borderWidth: SunburstCommonProps<RawDatum>['borderWidth']\n    borderColor: SunburstCommonProps<RawDatum>['borderColor']\n    isInteractive: SunburstCommonProps<RawDatum>['isInteractive']\n    onClick?: MouseHandlers<RawDatum>['onClick']\n    onMouseEnter?: MouseHandlers<RawDatum>['onMouseEnter']\n    onMouseMove?: MouseHandlers<RawDatum>['onMouseMove']\n    onMouseLeave?: MouseHandlers<RawDatum>['onMouseLeave']\n    tooltip: SunburstCommonProps<RawDatum>['tooltip']\n    transitionMode: SunburstCommonProps<RawDatum>['transitionMode']\n}\n\nexport const Arcs = <RawDatum,>({\n    center,\n    data,\n    arcGenerator,\n    borderWidth,\n    borderColor,\n    isInteractive,\n    onClick,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    tooltip,\n    transitionMode,\n}: ArcsProps<RawDatum>) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleClick = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (datum: ComputedDatum<RawDatum>, event: React.MouseEvent<SVGPathElement>) => {\n            onClick?.(datum, event)\n        }\n    }, [isInteractive, onClick])\n\n    const handleMouseEnter = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (datum: ComputedDatum<RawDatum>, event: React.MouseEvent<SVGPathElement>) => {\n            showTooltipFromEvent(createElement(tooltip, datum), event)\n            onMouseEnter?.(datum, event)\n        }\n    }, [isInteractive, showTooltipFromEvent, tooltip, onMouseEnter])\n\n    const handleMouseMove = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (datum: ComputedDatum<RawDatum>, event: React.MouseEvent<SVGPathElement>) => {\n            showTooltipFromEvent(createElement(tooltip, datum), event)\n            onMouseMove?.(datum, event)\n        }\n    }, [isInteractive, showTooltipFromEvent, tooltip, onMouseMove])\n\n    const handleMouseLeave = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (datum: ComputedDatum<RawDatum>, event: React.MouseEvent<SVGPathElement>) => {\n            hideTooltip()\n            onMouseLeave?.(datum, event)\n        }\n    }, [isInteractive, hideTooltip, onMouseLeave])\n\n    return (\n        <ArcsLayer<ComputedDatum<RawDatum>>\n            center={center}\n            data={data}\n            arcGenerator={arcGenerator}\n            borderWidth={borderWidth}\n            borderColor={borderColor}\n            transitionMode={transitionMode}\n            onClick={handleClick}\n            onMouseEnter={handleMouseEnter}\n            onMouseMove={handleMouseMove}\n            onMouseLeave={handleMouseLeave}\n        />\n    )\n}\n","import { Fragment, ReactNode, createElement, useMemo } from 'react'\nimport {\n    // @ts-ignore\n    bindDefs,\n    Container,\n    SvgWrapper,\n    useDimensions,\n} from '@nivo/core'\nimport { ArcLabelsLayer } from '@nivo/arcs'\nimport { defaultProps } from './props'\nimport { useSunburst, useSunburstLayerContext } from './hooks'\nimport { SunburstSvgProps, SunburstLayerId, SunburstLayer, ComputedDatum } from './types'\nimport { Arcs } from './Arcs'\nimport { InheritedColorConfig } from '@nivo/colors'\n\ntype InnerSunburstProps<RawDatum> = Partial<\n    Omit<\n        SunburstSvgProps<RawDatum>,\n        'data' | 'width' | 'height' | 'isInteractive' | 'animate' | 'motionConfig'\n    >\n> &\n    Pick<SunburstSvgProps<RawDatum>, 'data' | 'width' | 'height' | 'isInteractive'>\n\nconst InnerSunburst = <RawDatum,>({\n    data,\n    id = defaultProps.id,\n    value = defaultProps.value,\n    valueFormat,\n    cornerRadius = defaultProps.cornerRadius,\n    layers = defaultProps.layers as SunburstLayer<RawDatum>[],\n    colors = defaultProps.colors,\n    colorBy = defaultProps.colorBy,\n    inheritColorFromParent = defaultProps.inheritColorFromParent,\n    childColor = defaultProps.childColor as InheritedColorConfig<ComputedDatum<RawDatum>>,\n    borderWidth = defaultProps.borderWidth,\n    borderColor = defaultProps.borderColor,\n    margin: partialMargin,\n    width,\n    height,\n    enableArcLabels = defaultProps.enableArcLabels,\n    arcLabel = defaultProps.arcLabel,\n    arcLabelsRadiusOffset = defaultProps.arcLabelsRadiusOffset,\n    arcLabelsSkipAngle = defaultProps.arcLabelsSkipAngle,\n    arcLabelsTextColor = defaultProps.arcLabelsTextColor,\n    arcLabelsComponent,\n    defs = defaultProps.defs,\n    fill = defaultProps.fill,\n    transitionMode = defaultProps.transitionMode,\n    isInteractive = defaultProps.isInteractive,\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    onMouseMove,\n    tooltip = defaultProps.tooltip,\n    role = defaultProps.role,\n}: InnerSunburstProps<RawDatum>) => {\n    const { innerHeight, innerWidth, margin, outerHeight, outerWidth } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { centerX, centerY, radius } = useMemo(() => {\n        const radius = Math.min(innerWidth, innerHeight) / 2\n\n        return { radius, centerX: innerWidth / 2, centerY: innerHeight / 2 }\n    }, [innerHeight, innerWidth])\n\n    const { arcGenerator, nodes } = useSunburst({\n        data,\n        id,\n        value,\n        valueFormat,\n        radius,\n        cornerRadius,\n        colors,\n        colorBy,\n        inheritColorFromParent,\n        childColor,\n    })\n\n    const boundDefs = bindDefs(defs, nodes, fill, {\n        dataKey: '.',\n        colorKey: 'color',\n        targetKey: 'fill',\n    })\n\n    const layerById: Record<SunburstLayerId, ReactNode> = {\n        arcs: null,\n        arcLabels: null,\n    }\n\n    if (layers.includes('arcs')) {\n        layerById.arcs = (\n            <Arcs<RawDatum>\n                key=\"arcs\"\n                center={[centerX, centerY]}\n                data={nodes}\n                arcGenerator={arcGenerator}\n                borderWidth={borderWidth}\n                borderColor={borderColor}\n                transitionMode={transitionMode}\n                isInteractive={isInteractive}\n                tooltip={tooltip}\n                onClick={onClick}\n                onMouseEnter={onMouseEnter}\n                onMouseLeave={onMouseLeave}\n                onMouseMove={onMouseMove}\n            />\n        )\n    }\n\n    if (enableArcLabels && layers.includes('arcLabels')) {\n        layerById.arcLabels = (\n            <ArcLabelsLayer<ComputedDatum<RawDatum>>\n                key=\"arcLabels\"\n                center={[centerX, centerY]}\n                data={nodes}\n                label={arcLabel}\n                radiusOffset={arcLabelsRadiusOffset}\n                skipAngle={arcLabelsSkipAngle}\n                textColor={arcLabelsTextColor}\n                transitionMode={transitionMode}\n                component={arcLabelsComponent}\n            />\n        )\n    }\n\n    const layerContext = useSunburstLayerContext<RawDatum>({\n        nodes,\n        arcGenerator,\n        centerX,\n        centerY,\n        radius,\n    })\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            defs={boundDefs}\n            margin={margin}\n            role={role}\n        >\n            {layers.map((layer, i) => {\n                if (layerById[layer as SunburstLayerId] !== undefined) {\n                    return layerById[layer as SunburstLayerId]\n                }\n\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, layerContext)}</Fragment>\n                }\n\n                return null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const Sunburst = <RawDatum,>({\n    isInteractive = defaultProps.isInteractive,\n    animate = defaultProps.animate,\n    motionConfig = defaultProps.motionConfig,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: Partial<Omit<SunburstSvgProps<RawDatum>, 'data' | 'width' | 'height'>> &\n    Pick<SunburstSvgProps<RawDatum>, 'data' | 'width' | 'height'>) => (\n    <Container {...{ isInteractive, animate, motionConfig, theme, renderWrapper }}>\n        <InnerSunburst<RawDatum> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { Sunburst } from './Sunburst'\nimport { SunburstSvgProps } from './types'\n\ntype ResponsiveSunburstProps<RawDatum> = Partial<\n    Omit<SunburstSvgProps<RawDatum>, 'data' | 'width' | 'height'>\n> &\n    Pick<SunburstSvgProps<RawDatum>, 'data'>\n\nexport const ResponsiveSunburst = <RawDatum,>(props: ResponsiveSunburstProps<RawDatum>) => (\n    <ResponsiveWrapper>\n        {({ width, height }: { width: number; height: number }) => (\n            <Sunburst<RawDatum> width={width} height={height} {...props} />\n        )}\n    </ResponsiveWrapper>\n)\n"],"names":["defaultProps","id","value","cornerRadius","layers","colors","scheme","colorBy","inheritColorFromParent","childColor","from","borderWidth","borderColor","enableArcLabels","arcLabel","arcLabelsRadiusOffset","arcLabelsSkipAngle","arcLabelsTextColor","theme","animate","motionConfig","transitionMode","isInteractive","defs","fill","tooltip","_ref","formattedValue","color","_jsx","BasicTooltip","enableChip","role","useSunburst","data","_ref$id","_ref$value","valueFormat","radius","_ref$cornerRadius","_ref$colors","_ref$colorBy","_ref$inheritColorFrom","_ref$childColor","useTheme","getColor","useOrdinalColorScale","getChildColor","useInheritedColor","getId","usePropertyAccessor","getValue","formatValue","useValueFormatter","nodes","useMemo","_hierarchy$value","clonedData","cloneDeep","hierarchy","d3Hierarchy","sum","descendants","d3Partition","size","Math","PI","partition","slice","total","sortBy","reduce","acc","descendant","parent","percentage","path","ancestors","map","ancestor","arc","startAngle","x0","endAngle","x1","innerRadius","sqrt","y0","outerRadius","y1","find","node","normalizedNode","toFixed","depth","height","concat","arcGenerator","useArcGenerator","useSunburstLayerContext","_ref2","centerX","centerY","Arcs","center","onClick","onMouseEnter","onMouseMove","onMouseLeave","_useTooltip","useTooltip","showTooltipFromEvent","hideTooltip","handleClick","datum","event","handleMouseEnter","createElement","handleMouseMove","handleMouseLeave","ArcsLayer","InnerSunburst","_ref$layers","_ref$borderWidth","_ref$borderColor","partialMargin","margin","width","_ref$enableArcLabels","_ref$arcLabel","_ref$arcLabelsRadiusO","_ref$arcLabelsSkipAng","_ref$arcLabelsTextCol","arcLabelsComponent","_ref$defs","_ref$fill","_ref$transitionMode","_ref$isInteractive","_ref$tooltip","_ref$role","_useDimensions","useDimensions","innerHeight","innerWidth","outerHeight","outerWidth","_useMemo","min","_useSunburst","boundDefs","bindDefs","dataKey","colorKey","targetKey","layerById","arcs","arcLabels","includes","jsx","ArcLabelsLayer","label","radiusOffset","skipAngle","textColor","component","layerContext","SvgWrapper","children","layer","i","undefined","Fragment","Sunburst","_ref2$isInteractive","_ref2$animate","_ref2$motionConfig","renderWrapper","otherProps","_objectWithoutPropertiesLoose","_excluded","Container","_extends","props","ResponsiveWrapper"],"mappings":"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"}