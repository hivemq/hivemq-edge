import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { FormControl, FormLabel, Slider, SliderFilledTrack, SliderThumb, SliderTrack } from '@chakra-ui/react';
import { ariaDescribedByIds, labelValue, rangeSpec, } from '@rjsf/utils';
import { getChakra } from '../utils';
export default function RangeWidget({ value, readonly, disabled, onBlur, onFocus, options, schema, uiSchema, onChange, label, hideLabel, id, }) {
    const chakraProps = getChakra({ uiSchema });
    const sliderWidgetProps = { value, label, id, ...rangeSpec(schema) };
    const _onChange = (value) => onChange(value === undefined ? options.emptyValue : value);
    const _onBlur = ({ target }) => onBlur(id, target && target.value);
    const _onFocus = ({ target }) => onFocus(id, target && target.value);
    return (_jsxs(FormControl, { mb: 1, ...chakraProps, children: [labelValue(_jsx(FormLabel, { htmlFor: id, children: label }), hideLabel || !label), _jsxs(Slider, { ...sliderWidgetProps, id: id, name: id, isDisabled: disabled || readonly, onChange: _onChange, onBlur: _onBlur, onFocus: _onFocus, "aria-describedby": ariaDescribedByIds(id), children: [_jsx(SliderTrack, { children: _jsx(SliderFilledTrack, {}) }), _jsx(SliderThumb, {})] })] }));
}
//# sourceMappingURL=RangeWidget.js.map