import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { FormControl, FormLabel, Textarea } from '@chakra-ui/react';
import { ariaDescribedByIds, labelValue, } from '@rjsf/utils';
import { getChakra } from '../utils';
export default function TextareaWidget({ id, placeholder, value, label, hideLabel, disabled, autofocus, readonly, onBlur, onFocus, onChange, options, uiSchema, required, rawErrors, }) {
    const chakraProps = getChakra({ uiSchema });
    const _onChange = ({ target: { value } }) => onChange(value === '' ? options.emptyValue : value);
    const _onBlur = ({ target }) => onBlur(id, target && target.value);
    const _onFocus = ({ target }) => onFocus(id, target && target.value);
    return (_jsxs(FormControl, { mb: 1, ...chakraProps, isDisabled: disabled || readonly, isRequired: required, isReadOnly: readonly, isInvalid: rawErrors && rawErrors.length > 0, children: [labelValue(_jsx(FormLabel, { htmlFor: id, children: label }), hideLabel || !label), _jsx(Textarea, { id: id, name: id, value: value !== null && value !== void 0 ? value : '', placeholder: placeholder, autoFocus: autofocus, onChange: _onChange, onBlur: _onBlur, onFocus: _onFocus, rows: options.rows, "aria-describedby": ariaDescribedByIds(id) })] }));
}
//# sourceMappingURL=TextareaWidget.js.map