import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { FormControl, FormLabel, Radio, RadioGroup, Stack } from '@chakra-ui/react';
import { ariaDescribedByIds, enumOptionsIndexForValue, enumOptionsValueForIndex, labelValue, optionId, } from '@rjsf/utils';
import { getChakra } from '../utils';
export default function RadioWidget({ id, options, value, required, disabled, readonly, label, hideLabel, onChange, onBlur, onFocus, uiSchema, }) {
    var _a;
    const { enumOptions, enumDisabled, emptyValue } = options;
    const chakraProps = getChakra({ uiSchema });
    const _onChange = (nextValue) => onChange(enumOptionsValueForIndex(nextValue, enumOptions, emptyValue));
    const _onBlur = ({ target: { value } }) => onBlur(id, enumOptionsValueForIndex(value, enumOptions, emptyValue));
    const _onFocus = ({ target: { value } }) => onFocus(id, enumOptionsValueForIndex(value, enumOptions, emptyValue));
    const row = options ? options.inline : false;
    const selectedIndex = (_a = enumOptionsIndexForValue(value, enumOptions)) !== null && _a !== void 0 ? _a : null;
    return (_jsxs(FormControl, { mb: 1, ...chakraProps, isDisabled: disabled || readonly, isRequired: required, isReadOnly: readonly, children: [labelValue(_jsx(FormLabel, { htmlFor: id, id: `${id}-label`, children: label }), hideLabel || !label), _jsx(RadioGroup, { onChange: _onChange, onBlur: _onBlur, onFocus: _onFocus, value: selectedIndex, name: id, "aria-describedby": ariaDescribedByIds(id), children: _jsx(Stack, { direction: row ? 'row' : 'column', children: Array.isArray(enumOptions) &&
                        enumOptions.map((option, index) => {
                            const itemDisabled = Array.isArray(enumDisabled) && enumDisabled.indexOf(option.value) !== -1;
                            return (_jsx(Radio, { value: String(index), id: optionId(id, index), disabled: disabled || itemDisabled || readonly, children: option.label }, index));
                        }) }) })] }));
}
//# sourceMappingURL=RadioWidget.js.map