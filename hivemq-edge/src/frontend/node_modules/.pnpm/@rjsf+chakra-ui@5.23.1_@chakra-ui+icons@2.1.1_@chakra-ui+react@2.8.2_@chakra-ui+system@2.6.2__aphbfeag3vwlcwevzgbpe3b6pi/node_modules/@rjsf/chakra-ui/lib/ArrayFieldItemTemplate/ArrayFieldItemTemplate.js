import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useMemo } from 'react';
import { Box, ButtonGroup, HStack } from '@chakra-ui/react';
export default function ArrayFieldItemTemplate(props) {
    const { children, disabled, hasToolbar, hasCopy, hasMoveDown, hasMoveUp, hasRemove, index, onCopyIndexClick, onDropIndexClick, onReorderClick, readonly, uiSchema, registry, } = props;
    const { CopyButton, MoveDownButton, MoveUpButton, RemoveButton } = registry.templates.ButtonTemplates;
    const onCopyClick = useMemo(() => onCopyIndexClick(index), [index, onCopyIndexClick]);
    const onRemoveClick = useMemo(() => onDropIndexClick(index), [index, onDropIndexClick]);
    const onArrowUpClick = useMemo(() => onReorderClick(index, index - 1), [index, onReorderClick]);
    const onArrowDownClick = useMemo(() => onReorderClick(index, index + 1), [index, onReorderClick]);
    return (_jsxs(HStack, { alignItems: 'flex-end', py: 1, children: [_jsx(Box, { w: '100%', children: children }), hasToolbar && (_jsx(Box, { children: _jsxs(ButtonGroup, { isAttached: true, mb: 1, children: [(hasMoveUp || hasMoveDown) && (_jsx(MoveUpButton, { disabled: disabled || readonly || !hasMoveUp, onClick: onArrowUpClick, uiSchema: uiSchema, registry: registry })), (hasMoveUp || hasMoveDown) && (_jsx(MoveDownButton, { disabled: disabled || readonly || !hasMoveDown, onClick: onArrowDownClick, uiSchema: uiSchema, registry: registry })), hasCopy && (_jsx(CopyButton, { disabled: disabled || readonly, onClick: onCopyClick, uiSchema: uiSchema, registry: registry })), hasRemove && (_jsx(RemoveButton, { disabled: disabled || readonly, onClick: onRemoveClick, uiSchema: uiSchema, registry: registry }))] }) }))] }));
}
//# sourceMappingURL=ArrayFieldItemTemplate.js.map