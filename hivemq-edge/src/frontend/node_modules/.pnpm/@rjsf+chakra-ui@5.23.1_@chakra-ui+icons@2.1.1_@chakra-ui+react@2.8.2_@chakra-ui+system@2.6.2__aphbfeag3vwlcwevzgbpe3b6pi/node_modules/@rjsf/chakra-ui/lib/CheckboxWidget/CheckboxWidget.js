import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { Checkbox, FormControl, Text } from '@chakra-ui/react';
import { ariaDescribedByIds, descriptionId, getTemplate, labelValue, schemaRequiresTrueValue, } from '@rjsf/utils';
import { getChakra } from '../utils';
export default function CheckboxWidget(props) {
    const { id, value, disabled, readonly, onChange, onBlur, onFocus, label, hideLabel, registry, options, uiSchema, schema, } = props;
    const chakraProps = getChakra({ uiSchema });
    // Because an unchecked checkbox will cause html5 validation to fail, only add
    // the "required" attribute if the field value must be "true", due to the
    // "const" or "enum" keywords
    const required = schemaRequiresTrueValue(schema);
    const DescriptionFieldTemplate = getTemplate('DescriptionFieldTemplate', registry, options);
    const description = options.description || schema.description;
    const _onChange = ({ target: { checked } }) => onChange(checked);
    const _onBlur = ({ target }) => onBlur(id, target && target.value);
    const _onFocus = ({ target }) => onFocus(id, target && target.value);
    return (_jsxs(FormControl, { mb: 1, ...chakraProps, isRequired: required, children: [!hideLabel && !!description && (_jsx(DescriptionFieldTemplate, { id: descriptionId(id), description: description, schema: schema, uiSchema: uiSchema, registry: registry })), _jsx(Checkbox, { id: id, name: id, isChecked: typeof value === 'undefined' ? false : value, isDisabled: disabled || readonly, onChange: _onChange, onBlur: _onBlur, onFocus: _onFocus, "aria-describedby": ariaDescribedByIds(id), children: labelValue(_jsx(Text, { children: label }), hideLabel || !label) })] }));
}
//# sourceMappingURL=CheckboxWidget.js.map