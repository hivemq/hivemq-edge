{
  "version": 3,
  "sources": ["../src/Form/Form.tsx", "../src/AddButton/AddButton.tsx", "../src/ArrayFieldItemTemplate/ArrayFieldItemTemplate.tsx", "../src/ArrayFieldTemplate/ArrayFieldTemplate.tsx", "../src/BaseInputTemplate/BaseInputTemplate.tsx", "../src/utils.ts", "../src/DescriptionField/DescriptionField.tsx", "../src/ErrorList/ErrorList.tsx", "../src/IconButton/ChakraIconButton.tsx", "../src/IconButton/IconButton.tsx", "../src/FieldErrorTemplate/FieldErrorTemplate.tsx", "../src/FieldHelpTemplate/FieldHelpTemplate.tsx", "../src/FieldTemplate/FieldTemplate.tsx", "../src/ObjectFieldTemplate/ObjectFieldTemplate.tsx", "../src/SubmitButton/SubmitButton.tsx", "../src/TitleField/TitleField.tsx", "../src/WrapIfAdditionalTemplate/WrapIfAdditionalTemplate.tsx", "../src/Templates/Templates.ts", "../src/AltDateWidget/AltDateWidget.tsx", "../src/AltDateTimeWidget/AltDateTimeWidget.tsx", "../src/CheckboxWidget/CheckboxWidget.tsx", "../src/CheckboxesWidget/CheckboxesWidget.tsx", "../src/RadioWidget/RadioWidget.tsx", "../src/RangeWidget/RangeWidget.tsx", "../src/SelectWidget/SelectWidget.tsx", "../src/TextareaWidget/TextareaWidget.tsx", "../src/UpDownWidget/UpDownWidget.tsx", "../src/Widgets/Widgets.ts", "../src/Theme/Theme.tsx", "../src/ChakraFrameProvider.tsx", "../src/CssReset.tsx", "../src/index.ts"],
  "sourcesContent": ["import { ComponentType } from 'react';\nimport { withTheme, FormProps } from '@rjsf/core';\nimport { generateTheme } from '../Theme';\nimport { FormContextType, RJSFSchema, StrictRJSFSchema } from '@rjsf/utils';\n\nexport function generateForm<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(): ComponentType<FormProps<T, S, F>> {\n  return withTheme<T, S, F>(generateTheme<T, S, F>());\n}\n\nexport default generateForm();\n", "import { FormContextType, IconButtonProps, RJSFSchema, StrictRJSFSchema, TranslatableString } from '@rjsf/utils';\nimport { Button } from '@chakra-ui/react';\nimport { AddIcon } from '@chakra-ui/icons';\n\nexport default function AddButton<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>({\n  uiSchema,\n  registry,\n  ...props\n}: IconButtonProps<T, S, F>) {\n  const { translateString } = registry;\n  return (\n    <Button leftIcon={<AddIcon />} {...props}>\n      {translateString(TranslatableString.AddItemButton)}\n    </Button>\n  );\n}\n", "import { useMemo } from 'react';\nimport { Box, ButtonGroup, HStack } from '@chakra-ui/react';\nimport { ArrayFieldTemplateItemType, FormContextType, RJSFSchema, StrictRJSFSchema } from '@rjsf/utils';\n\nexport default function ArrayFieldItemTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: ArrayFieldTemplateItemType<T, S, F>) {\n  const {\n    children,\n    disabled,\n    hasToolbar,\n    hasCopy,\n    hasMoveDown,\n    hasMoveUp,\n    hasRemove,\n    index,\n    onCopyIndexClick,\n    onDropIndexClick,\n    onReorderClick,\n    readonly,\n    uiSchema,\n    registry,\n  } = props;\n  const { CopyButton, MoveDownButton, MoveUpButton, RemoveButton } = registry.templates.ButtonTemplates;\n  const onCopyClick = useMemo(() => onCopyIndexClick(index), [index, onCopyIndexClick]);\n\n  const onRemoveClick = useMemo(() => onDropIndexClick(index), [index, onDropIndexClick]);\n\n  const onArrowUpClick = useMemo(() => onReorderClick(index, index - 1), [index, onReorderClick]);\n\n  const onArrowDownClick = useMemo(() => onReorderClick(index, index + 1), [index, onReorderClick]);\n\n  return (\n    <HStack alignItems={'flex-end'} py={1}>\n      <Box w='100%'>{children}</Box>\n      {hasToolbar && (\n        <Box>\n          <ButtonGroup isAttached mb={1}>\n            {(hasMoveUp || hasMoveDown) && (\n              <MoveUpButton\n                disabled={disabled || readonly || !hasMoveUp}\n                onClick={onArrowUpClick}\n                uiSchema={uiSchema}\n                registry={registry}\n              />\n            )}\n            {(hasMoveUp || hasMoveDown) && (\n              <MoveDownButton\n                disabled={disabled || readonly || !hasMoveDown}\n                onClick={onArrowDownClick}\n                uiSchema={uiSchema}\n                registry={registry}\n              />\n            )}\n            {hasCopy && (\n              <CopyButton\n                disabled={disabled || readonly}\n                onClick={onCopyClick}\n                uiSchema={uiSchema}\n                registry={registry}\n              />\n            )}\n            {hasRemove && (\n              <RemoveButton\n                disabled={disabled || readonly}\n                onClick={onRemoveClick}\n                uiSchema={uiSchema}\n                registry={registry}\n              />\n            )}\n          </ButtonGroup>\n        </Box>\n      )}\n    </HStack>\n  );\n}\n", "import { Box, Grid, GridItem } from '@chakra-ui/react';\nimport {\n  getTemplate,\n  getUiOptions,\n  ArrayFieldTemplateItemType,\n  ArrayFieldTemplateProps,\n  StrictRJSFSchema,\n  RJSFSchema,\n  FormContextType,\n} from '@rjsf/utils';\n\nexport default function ArrayFieldTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: ArrayFieldTemplateProps<T, S, F>) {\n  const { canAdd, disabled, idSchema, uiSchema, items, onAddClick, readonly, registry, required, schema, title } =\n    props;\n  const uiOptions = getUiOptions<T, S, F>(uiSchema);\n  const ArrayFieldDescriptionTemplate = getTemplate<'ArrayFieldDescriptionTemplate', T, S, F>(\n    'ArrayFieldDescriptionTemplate',\n    registry,\n    uiOptions\n  );\n  const ArrayFieldItemTemplate = getTemplate<'ArrayFieldItemTemplate', T, S, F>(\n    'ArrayFieldItemTemplate',\n    registry,\n    uiOptions\n  );\n  const ArrayFieldTitleTemplate = getTemplate<'ArrayFieldTitleTemplate', T, S, F>(\n    'ArrayFieldTitleTemplate',\n    registry,\n    uiOptions\n  );\n  // Button templates are not overridden in the uiSchema\n  const {\n    ButtonTemplates: { AddButton },\n  } = registry.templates;\n  return (\n    <Box>\n      <ArrayFieldTitleTemplate\n        idSchema={idSchema}\n        title={uiOptions.title || title}\n        schema={schema}\n        uiSchema={uiSchema}\n        required={required}\n        registry={registry}\n      />\n      <ArrayFieldDescriptionTemplate\n        idSchema={idSchema}\n        description={uiOptions.description || schema.description}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n      />\n      <Grid key={`array-item-list-${idSchema.$id}`}>\n        <GridItem>\n          {items.length > 0 &&\n            items.map(({ key, ...itemProps }: ArrayFieldTemplateItemType<T, S, F>) => (\n              <ArrayFieldItemTemplate key={key} {...itemProps} />\n            ))}\n        </GridItem>\n        {canAdd && (\n          <GridItem justifySelf={'flex-end'}>\n            <Box mt={2}>\n              <AddButton\n                className='array-item-add'\n                onClick={onAddClick}\n                disabled={disabled || readonly}\n                uiSchema={uiSchema}\n                registry={registry}\n              />\n            </Box>\n          </GridItem>\n        )}\n      </Grid>\n    </Box>\n  );\n}\n", "import { ChangeEvent, FocusEvent } from 'react';\nimport { FormControl, FormLabel, Input } from '@chakra-ui/react';\nimport {\n  ariaDescribedByIds,\n  BaseInputTemplateProps,\n  examplesId,\n  labelValue,\n  FormContextType,\n  getInputProps,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from '@rjsf/utils';\nimport { getChakra } from '../utils';\n\nexport default function BaseInputTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: BaseInputTemplateProps<T, S, F>) {\n  const {\n    id,\n    type,\n    value,\n    label,\n    hideLabel,\n    schema,\n    uiSchema,\n    onChange,\n    onChangeOverride,\n    onBlur,\n    onFocus,\n    options,\n    required,\n    readonly,\n    rawErrors,\n    autofocus,\n    placeholder,\n    disabled,\n  } = props;\n  const inputProps = getInputProps<T, S, F>(schema, type, options);\n  const chakraProps = getChakra({ uiSchema });\n\n  const _onChange = ({ target: { value } }: ChangeEvent<HTMLInputElement>) =>\n    onChange(value === '' ? options.emptyValue : value);\n  const _onBlur = ({ target }: FocusEvent<HTMLInputElement>) => onBlur(id, target && target.value);\n  const _onFocus = ({ target }: FocusEvent<HTMLInputElement>) => onFocus(id, target && target.value);\n\n  return (\n    <FormControl\n      mb={1}\n      {...chakraProps}\n      isDisabled={disabled || readonly}\n      isRequired={required}\n      isReadOnly={readonly}\n      isInvalid={rawErrors && rawErrors.length > 0}\n    >\n      {labelValue(\n        <FormLabel htmlFor={id} id={`${id}-label`}>\n          {label}\n        </FormLabel>,\n        hideLabel || !label\n      )}\n      <Input\n        id={id}\n        name={id}\n        value={value || value === 0 ? value : ''}\n        onChange={onChangeOverride || _onChange}\n        onBlur={_onBlur}\n        onFocus={_onFocus}\n        autoFocus={autofocus}\n        placeholder={placeholder}\n        {...inputProps}\n        list={schema.examples ? examplesId<T>(id) : undefined}\n        aria-describedby={ariaDescribedByIds<T>(id, !!schema.examples)}\n      />\n      {Array.isArray(schema.examples) ? (\n        <datalist id={examplesId<T>(id)}>\n          {(schema.examples as string[])\n            .concat(schema.default && !schema.examples.includes(schema.default) ? ([schema.default] as string[]) : [])\n            .map((example: any) => {\n              return <option key={example} value={example} />;\n            })}\n        </datalist>\n      ) : null}\n    </FormControl>\n  );\n}\n", "import { ChakraProps, shouldForwardProp } from '@chakra-ui/react';\nimport { UiSchema } from '@rjsf/utils';\n\nexport interface ChakraUiSchema extends Omit<UiSchema, 'ui:options'> {\n  'ui:options'?: ChakraUiOptions;\n}\n\ntype ChakraUiOptions = UiSchema['ui:options'] & { chakra?: ChakraProps };\n\ninterface GetChakraProps {\n  uiSchema?: ChakraUiSchema;\n}\n\nexport function getChakra({ uiSchema = {} }: GetChakraProps): ChakraProps {\n  const chakraProps = (uiSchema['ui:options'] && uiSchema['ui:options'].chakra) || {};\n\n  Object.keys(chakraProps).forEach((key) => {\n    /**\n     * Leveraging `shouldForwardProp` to remove props\n     *\n     * This is a utility function that's used in `@chakra-ui/react`'s factory function.\n     * Normally, it prevents ChakraProps from being passed to the DOM.\n     * In this case we just want to delete the unknown props. So we flip the boolean.\n     */\n    if (shouldForwardProp(key)) {\n      delete (chakraProps as any)[key];\n    }\n  });\n\n  return chakraProps;\n}\n", "import { DescriptionFieldProps, FormContextType, RJSFSchema, StrictRJSFSchema } from '@rjsf/utils';\nimport { Text } from '@chakra-ui/react';\n\nexport default function DescriptionField<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>({ description, id }: DescriptionFieldProps<T, S, F>) {\n  if (!description) {\n    return null;\n  }\n\n  if (typeof description === 'string') {\n    return (\n      <Text as='sup' fontSize='md' id={id}>\n        {description}\n      </Text>\n    );\n  }\n\n  return <>{description}</>;\n}\n", "import { ErrorListProps, FormContextType, RJSFSchema, StrictRJSFSchema, TranslatableString } from '@rjsf/utils';\nimport { List, ListIcon, ListItem, Alert, AlertTitle } from '@chakra-ui/react';\nimport { WarningIcon } from '@chakra-ui/icons';\n\nexport default function ErrorList<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>({\n  errors,\n  registry,\n}: ErrorListProps<T, S, F>) {\n  const { translateString } = registry;\n  return (\n    <Alert flexDirection='column' alignItems='flex-start' gap={3} status='error'>\n      <AlertTitle>{translateString(TranslatableString.ErrorsLabel)}</AlertTitle>\n      <List>\n        {errors.map((error, i) => (\n          <ListItem key={i}>\n            <ListIcon as={WarningIcon} color='red.500' />\n            {error.stack}\n          </ListItem>\n        ))}\n      </List>\n    </Alert>\n  );\n}\n", "import { memo } from 'react';\nimport { IconButton } from '@chakra-ui/react';\ntype ChakraIconButtonProps = React.ComponentProps<typeof IconButton>;\nimport { FormContextType, IconButtonProps, RJSFSchema, StrictRJSFSchema } from '@rjsf/utils';\n\nfunction ChakraIconButton<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: IconButtonProps<T, S, F>\n) {\n  const { icon, iconType, uiSchema, registry, ...otherProps } = props;\n  return <IconButton aria-label={props.title!} {...otherProps} icon={icon as ChakraIconButtonProps['icon']} />;\n}\n\nChakraIconButton.displayName = 'ChakraIconButton';\n\nexport default memo(ChakraIconButton) as typeof ChakraIconButton;\n", "import { FormContextType, IconButtonProps, RJSFSchema, StrictRJSFSchema, TranslatableString } from '@rjsf/utils';\n\nimport { ArrowUpIcon, ArrowDownIcon, CopyIcon, DeleteIcon } from '@chakra-ui/icons';\nimport ChakraIconButton from './ChakraIconButton';\n\nexport function CopyButton<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: IconButtonProps<T, S, F>\n) {\n  const {\n    registry: { translateString },\n  } = props;\n  return (\n    <ChakraIconButton<T, S, F> title={translateString(TranslatableString.CopyButton)} {...props} icon={<CopyIcon />} />\n  );\n}\n\nexport function MoveDownButton<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: IconButtonProps<T, S, F>\n) {\n  const {\n    registry: { translateString },\n  } = props;\n  return (\n    <ChakraIconButton<T, S, F>\n      title={translateString(TranslatableString.MoveDownButton)}\n      {...props}\n      icon={<ArrowDownIcon />}\n    />\n  );\n}\n\nexport function MoveUpButton<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: IconButtonProps<T, S, F>\n) {\n  const {\n    registry: { translateString },\n  } = props;\n  return (\n    <ChakraIconButton<T, S, F>\n      title={translateString(TranslatableString.MoveUpButton)}\n      {...props}\n      icon={<ArrowUpIcon />}\n    />\n  );\n}\n\nexport function RemoveButton<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: IconButtonProps<T, S, F>\n) {\n  const {\n    registry: { translateString },\n  } = props;\n  return (\n    <ChakraIconButton<T, S, F>\n      title={translateString(TranslatableString.RemoveButton)}\n      {...props}\n      icon={<DeleteIcon />}\n    />\n  );\n}\n", "import { errorId, FieldErrorProps, FormContextType, RJSFSchema, StrictRJSFSchema } from '@rjsf/utils';\nimport { FormErrorMessage, List, ListItem } from '@chakra-ui/react';\n\n/** The `FieldErrorTemplate` component renders the errors local to the particular field\n *\n * @param props - The `FieldErrorProps` for the errors being rendered\n */\nexport default function FieldErrorTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: FieldErrorProps<T, S, F>) {\n  const { errors = [], idSchema } = props;\n  if (errors.length === 0) {\n    return null;\n  }\n  const id = errorId<T>(idSchema);\n\n  return (\n    <List>\n      {errors.map((error, i: number) => {\n        return (\n          <ListItem key={i}>\n            <FormErrorMessage id={id}>{error}</FormErrorMessage>\n          </ListItem>\n        );\n      })}\n    </List>\n  );\n}\n", "import { helpId, FieldHelpProps, FormContextType, RJSFSchema, StrictRJSFSchema } from '@rjsf/utils';\nimport { FormHelperText } from '@chakra-ui/react';\n\n/** The `FieldHelpTemplate` component renders any help desired for a field\n *\n * @param props - The `FieldHelpProps` to be rendered\n */\nexport default function FieldHelpTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: FieldHelpProps<T, S, F>) {\n  const { idSchema, help } = props;\n  if (!help) {\n    return null;\n  }\n  const id = helpId<T>(idSchema);\n  return <FormHelperText id={id}>{help}</FormHelperText>;\n}\n", "import {\n  FieldTemplateProps,\n  FormContextType,\n  getTemplate,\n  getUiOptions,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from '@rjsf/utils';\nimport { Text, FormControl } from '@chakra-ui/react';\n\nexport default function FieldTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: FieldTemplateProps<T, S, F>) {\n  const {\n    id,\n    children,\n    classNames,\n    style,\n    disabled,\n    displayLabel,\n    hidden,\n    label,\n    onDropPropertyClick,\n    onKeyChange,\n    readonly,\n    registry,\n    required,\n    rawErrors = [],\n    errors,\n    help,\n    description,\n    rawDescription,\n    schema,\n    uiSchema,\n  } = props;\n  const uiOptions = getUiOptions<T, S, F>(uiSchema);\n  const WrapIfAdditionalTemplate = getTemplate<'WrapIfAdditionalTemplate', T, S, F>(\n    'WrapIfAdditionalTemplate',\n    registry,\n    uiOptions\n  );\n\n  if (hidden) {\n    return <div style={{ display: 'none' }}>{children}</div>;\n  }\n\n  return (\n    <WrapIfAdditionalTemplate\n      classNames={classNames}\n      style={style}\n      disabled={disabled}\n      id={id}\n      label={label}\n      onDropPropertyClick={onDropPropertyClick}\n      onKeyChange={onKeyChange}\n      readonly={readonly}\n      required={required}\n      schema={schema}\n      uiSchema={uiSchema}\n      registry={registry}\n    >\n      <FormControl isRequired={required} isInvalid={rawErrors && rawErrors.length > 0}>\n        {children}\n        {displayLabel && rawDescription ? <Text mt={2}>{description}</Text> : null}\n        {errors}\n        {help}\n      </FormControl>\n    </WrapIfAdditionalTemplate>\n  );\n}\n", "import { Grid, GridItem } from '@chakra-ui/react';\nimport {\n  canExpand,\n  descriptionId,\n  FormContextType,\n  getTemplate,\n  getUiOptions,\n  ObjectFieldTemplateProps,\n  RJSFSchema,\n  StrictRJSFSchema,\n  titleId,\n} from '@rjsf/utils';\n\nexport default function ObjectFieldTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: ObjectFieldTemplateProps<T, S, F>) {\n  const {\n    description,\n    title,\n    properties,\n    required,\n    disabled,\n    readonly,\n    uiSchema,\n    idSchema,\n    schema,\n    formData,\n    onAddClick,\n    registry,\n  } = props;\n  const uiOptions = getUiOptions<T, S, F>(uiSchema);\n  const TitleFieldTemplate = getTemplate<'TitleFieldTemplate', T, S, F>('TitleFieldTemplate', registry, uiOptions);\n  const DescriptionFieldTemplate = getTemplate<'DescriptionFieldTemplate', T, S, F>(\n    'DescriptionFieldTemplate',\n    registry,\n    uiOptions\n  );\n  // Button templates are not overridden in the uiSchema\n  const {\n    ButtonTemplates: { AddButton },\n  } = registry.templates;\n\n  return (\n    <>\n      {title && (\n        <TitleFieldTemplate\n          id={titleId<T>(idSchema)}\n          title={title}\n          required={required}\n          schema={schema}\n          uiSchema={uiSchema}\n          registry={registry}\n        />\n      )}\n      {description && (\n        <DescriptionFieldTemplate\n          id={descriptionId<T>(idSchema)}\n          description={description}\n          schema={schema}\n          uiSchema={uiSchema}\n          registry={registry}\n        />\n      )}\n      <Grid gap={description ? 2 : 6} mb={4}>\n        {properties.map((element, index) =>\n          element.hidden ? (\n            element.content\n          ) : (\n            <GridItem key={`${idSchema.$id}-${element.name}-${index}`}>{element.content}</GridItem>\n          )\n        )}\n        {canExpand<T, S, F>(schema, uiSchema, formData) && (\n          <GridItem justifySelf='flex-end'>\n            <AddButton\n              className='object-property-expand'\n              onClick={onAddClick(schema)}\n              disabled={disabled || readonly}\n              uiSchema={uiSchema}\n              registry={registry}\n            />\n          </GridItem>\n        )}\n      </Grid>\n    </>\n  );\n}\n", "import { Box, Button } from '@chakra-ui/react';\nimport { FormContextType, getSubmitButtonOptions, RJSFSchema, StrictRJSFSchema, SubmitButtonProps } from '@rjsf/utils';\n\nexport default function SubmitButton<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>({ uiSchema }: SubmitButtonProps<T, S, F>) {\n  const { submitText, norender, props: submitButtonProps } = getSubmitButtonOptions(uiSchema);\n  if (norender) {\n    return null;\n  }\n\n  return (\n    <Box marginTop={3}>\n      <Button type='submit' variant='solid' {...submitButtonProps}>\n        {submitText}\n      </Button>\n    </Box>\n  );\n}\n", "import { FormContextType, RJSFSchema, StrictRJSFSchema, TitleFieldProps } from '@rjsf/utils';\nimport { Box, Divider, Heading } from '@chakra-ui/react';\n\nexport default function TitleField<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>({\n  id,\n  title,\n}: TitleFieldProps<T, S, F>) {\n  return (\n    <Box id={id} mt={1} mb={4}>\n      <Heading as='h5'>{title}</Heading>\n      <Divider />\n    </Box>\n  );\n}\n", "import { FocusEvent } from 'react';\nimport {\n  ADDITIONAL_PROPERTY_FLAG,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  TranslatableString,\n  WrapIfAdditionalTemplateProps,\n} from '@rjsf/utils';\nimport { FormControl, FormLabel, Grid, GridItem, Input } from '@chakra-ui/react';\n\nexport default function WrapIfAdditionalTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: WrapIfAdditionalTemplateProps<T, S, F>) {\n  const {\n    children,\n    classNames,\n    style,\n    disabled,\n    id,\n    label,\n    onDropPropertyClick,\n    onKeyChange,\n    readonly,\n    registry,\n    required,\n    schema,\n    uiSchema,\n  } = props;\n  const { templates, translateString } = registry;\n  // Button templates are not overridden in the uiSchema\n  const { RemoveButton } = templates.ButtonTemplates;\n  const keyLabel = translateString(TranslatableString.KeyLabel, [label]);\n  const additional = ADDITIONAL_PROPERTY_FLAG in schema;\n  if (!additional) {\n    return (\n      <div className={classNames} style={style}>\n        {children}\n      </div>\n    );\n  }\n\n  const handleBlur = ({ target }: FocusEvent<HTMLInputElement>) => onKeyChange(target.value);\n\n  return (\n    <Grid key={`${id}-key`} className={classNames} style={style} alignItems='center' gap={2}>\n      <GridItem>\n        <FormControl isRequired={required}>\n          <FormLabel htmlFor={`${id}-key`} id={`${id}-key-label`}>\n            {keyLabel}\n          </FormLabel>\n          <Input\n            defaultValue={label}\n            disabled={disabled || readonly}\n            id={`${id}-key`}\n            name={`${id}-key`}\n            onBlur={!readonly ? handleBlur : undefined}\n            type='text'\n            mb={1}\n          />\n        </FormControl>\n      </GridItem>\n      <GridItem>{children}</GridItem>\n      <GridItem>\n        <RemoveButton\n          disabled={disabled || readonly}\n          onClick={onDropPropertyClick(label)}\n          uiSchema={uiSchema}\n          registry={registry}\n        />\n      </GridItem>\n    </Grid>\n  );\n}\n", "import AddButton from '../AddButton';\nimport ArrayFieldItemTemplate from '../ArrayFieldItemTemplate';\nimport ArrayFieldTemplate from '../ArrayFieldTemplate';\nimport BaseInputTemplate from '../BaseInputTemplate/BaseInputTemplate';\nimport DescriptionField from '../DescriptionField';\nimport ErrorList from '../ErrorList';\nimport { CopyButton, MoveDownButton, MoveUpButton, RemoveButton } from '../IconButton';\nimport FieldErrorTemplate from '../FieldErrorTemplate';\nimport FieldHelpTemplate from '../FieldHelpTemplate';\nimport FieldTemplate from '../FieldTemplate';\nimport ObjectFieldTemplate from '../ObjectFieldTemplate';\nimport SubmitButton from '../SubmitButton';\nimport TitleField from '../TitleField';\nimport WrapIfAdditionalTemplate from '../WrapIfAdditionalTemplate';\nimport { FormContextType, RJSFSchema, StrictRJSFSchema, TemplatesType } from '@rjsf/utils';\n\nexport function generateTemplates<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(): Partial<TemplatesType<T, S, F>> {\n  return {\n    ArrayFieldItemTemplate,\n    ArrayFieldTemplate,\n    BaseInputTemplate,\n    ButtonTemplates: {\n      CopyButton,\n      AddButton,\n      MoveDownButton,\n      MoveUpButton,\n      RemoveButton,\n      SubmitButton,\n    },\n    DescriptionFieldTemplate: DescriptionField,\n    ErrorListTemplate: ErrorList,\n    FieldErrorTemplate,\n    FieldHelpTemplate,\n    FieldTemplate,\n    ObjectFieldTemplate,\n    TitleFieldTemplate: TitleField,\n    WrapIfAdditionalTemplate,\n  };\n}\n\nexport default generateTemplates();\n", "import { MouseEvent, useEffect, useState } from 'react';\nimport {\n  ariaDescribedByIds,\n  dateRangeOptions,\n  DateElementFormat,\n  DateObject,\n  FormContextType,\n  getDateElementProps,\n  parseDateString,\n  RJSFSchema,\n  StrictRJSFSchema,\n  toDateString,\n  TranslatableString,\n  WidgetProps,\n} from '@rjsf/utils';\nimport { Box, Button } from '@chakra-ui/react';\n\nfunction DateElement<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: WidgetProps<T, S, F>\n) {\n  const { SelectWidget } = props.registry.widgets;\n  const value = props.value ? props.value : undefined;\n  return (\n    <SelectWidget\n      {...props}\n      label={''}\n      className='form-control'\n      onChange={(elemValue: WidgetProps<T, S, F>) => props.select(props.type, elemValue)}\n      options={{\n        enumOptions: dateRangeOptions<S>(props.range[0], props.range[1]),\n      }}\n      placeholder={props.type}\n      schema={{ type: 'integer' } as S}\n      value={value}\n      aria-describedby={ariaDescribedByIds<T>(props.name)}\n    />\n  );\n}\n\ninterface AltDateStateType extends DateObject {\n  [x: string]: number | undefined;\n}\n\nconst readyForChange = (state: AltDateStateType) => {\n  return Object.keys(state).every((key) => typeof state[key] !== 'undefined' && state[key] !== -1);\n};\n\nfunction AltDateWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: WidgetProps<T, S, F>\n) {\n  const { autofocus, disabled, id, onBlur, onChange, onFocus, options, readonly, registry, showTime, value } = props;\n  const { translateString } = registry;\n  const [state, setState] = useState(parseDateString(value, showTime));\n  useEffect(() => {\n    setState(parseDateString(value, showTime));\n  }, [showTime, value]);\n\n  const handleChange = (property: string, nextValue: string) => {\n    const nextState = {\n      ...state,\n      [property]: typeof nextValue === 'undefined' ? -1 : nextValue,\n    };\n\n    if (readyForChange(nextState)) {\n      onChange(toDateString(nextState, showTime));\n    } else {\n      setState(nextState);\n    }\n  };\n\n  const handleNow = (event: MouseEvent<HTMLButtonElement>) => {\n    event.preventDefault();\n    if (disabled || readonly) {\n      return;\n    }\n    const nextState = parseDateString(new Date().toJSON(), showTime);\n    onChange(toDateString(nextState, showTime));\n  };\n\n  const handleClear = (event: MouseEvent<HTMLButtonElement>) => {\n    event.preventDefault();\n    if (disabled || readonly) {\n      return;\n    }\n    onChange(undefined);\n  };\n\n  return (\n    <Box>\n      <Box display='flex' flexWrap='wrap' alignItems='center'>\n        {getDateElementProps(\n          state,\n          showTime,\n          options.yearsRange as [number, number] | undefined,\n          options.format as DateElementFormat | undefined\n        ).map((elemProps: any, i) => {\n          const elemId = id + '_' + elemProps.type;\n          return (\n            <Box key={elemId} mr='2' mb='2'>\n              <DateElement<T, S, F>\n                {...props}\n                {...elemProps}\n                autofocus={autofocus && i === 0}\n                disabled={disabled}\n                id={elemId}\n                name={id}\n                onBlur={onBlur}\n                onFocus={onFocus}\n                readonly={readonly}\n                registry={registry}\n                select={handleChange}\n                value={elemProps.value < 0 ? '' : elemProps.value}\n              />\n            </Box>\n          );\n        })}\n      </Box>\n      <Box display='flex'>\n        {!options.hideNowButton && (\n          <Button onClick={(e: MouseEvent<HTMLButtonElement>) => handleNow(e)} mr='2'>\n            {translateString(TranslatableString.NowLabel)}\n          </Button>\n        )}\n        {!options.hideClearButton && (\n          <Button onClick={(e: MouseEvent<HTMLButtonElement>) => handleClear(e)}>\n            {translateString(TranslatableString.ClearLabel)}\n          </Button>\n        )}\n      </Box>\n    </Box>\n  );\n}\n\nAltDateWidget.defaultProps = {\n  autofocus: false,\n  disabled: false,\n  readonly: false,\n  showTime: false,\n  options: {\n    yearsRange: [1900, new Date().getFullYear() + 2],\n  },\n};\n\nexport default AltDateWidget;\n", "import _AltDateWidget from '../AltDateWidget';\nimport { FormContextType, RJSFSchema, StrictRJSFSchema, WidgetProps } from '@rjsf/utils';\n\nfunction AltDateTimeWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: WidgetProps<T, S, F>\n) {\n  const { AltDateWidget } = props.registry.widgets;\n  return <AltDateWidget {...props} showTime />;\n}\n\nAltDateTimeWidget.defaultProps = {\n  ..._AltDateWidget.defaultProps,\n  showTime: true,\n};\n\nexport default AltDateTimeWidget;\n", "import { ChangeEvent, FocusEvent } from 'react';\nimport { Checkbox, FormControl, Text } from '@chakra-ui/react';\nimport {\n  ariaDescribedByIds,\n  descriptionId,\n  getTemplate,\n  labelValue,\n  WidgetProps,\n  schemaRequiresTrueValue,\n  StrictRJSFSchema,\n  RJSFSchema,\n  FormContextType,\n} from '@rjsf/utils';\nimport { getChakra } from '../utils';\n\nexport default function CheckboxWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: WidgetProps<T, S, F>) {\n  const {\n    id,\n    value,\n    disabled,\n    readonly,\n    onChange,\n    onBlur,\n    onFocus,\n    label,\n    hideLabel,\n    registry,\n    options,\n    uiSchema,\n    schema,\n  } = props;\n  const chakraProps = getChakra({ uiSchema });\n  // Because an unchecked checkbox will cause html5 validation to fail, only add\n  // the \"required\" attribute if the field value must be \"true\", due to the\n  // \"const\" or \"enum\" keywords\n  const required = schemaRequiresTrueValue<S>(schema);\n  const DescriptionFieldTemplate = getTemplate<'DescriptionFieldTemplate', T, S, F>(\n    'DescriptionFieldTemplate',\n    registry,\n    options\n  );\n  const description = options.description || schema.description;\n\n  const _onChange = ({ target: { checked } }: ChangeEvent<HTMLInputElement>) => onChange(checked);\n  const _onBlur = ({ target }: FocusEvent<HTMLInputElement | any>) => onBlur(id, target && target.value);\n  const _onFocus = ({ target }: FocusEvent<HTMLInputElement | any>) => onFocus(id, target && target.value);\n\n  return (\n    <FormControl mb={1} {...chakraProps} isRequired={required}>\n      {!hideLabel && !!description && (\n        <DescriptionFieldTemplate\n          id={descriptionId<T>(id)}\n          description={description}\n          schema={schema}\n          uiSchema={uiSchema}\n          registry={registry}\n        />\n      )}\n      <Checkbox\n        id={id}\n        name={id}\n        isChecked={typeof value === 'undefined' ? false : value}\n        isDisabled={disabled || readonly}\n        onChange={_onChange}\n        onBlur={_onBlur}\n        onFocus={_onFocus}\n        aria-describedby={ariaDescribedByIds<T>(id)}\n      >\n        {labelValue(<Text>{label}</Text>, hideLabel || !label)}\n      </Checkbox>\n    </FormControl>\n  );\n}\n", "import { FocusEvent } from 'react';\nimport { CheckboxGroup, Checkbox, FormLabel, FormControl, Text, Stack } from '@chakra-ui/react';\nimport {\n  ariaDescribedByIds,\n  enumOptionsIndexForValue,\n  enumOptionsIsSelected,\n  enumOptionsValueForIndex,\n  labelValue,\n  optionId,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from '@rjsf/utils';\nimport { getChakra } from '../utils';\n\nexport default function CheckboxesWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: WidgetProps<T, S, F>) {\n  const {\n    id,\n    disabled,\n    options,\n    value,\n    readonly,\n    onChange,\n    onBlur,\n    onFocus,\n    required,\n    label,\n    hideLabel,\n    uiSchema,\n    rawErrors = [],\n  } = props;\n  const { enumOptions, enumDisabled, emptyValue } = options;\n  const chakraProps = getChakra({ uiSchema });\n  const checkboxesValues = Array.isArray(value) ? value : [value];\n\n  const _onBlur = ({ target }: FocusEvent<HTMLInputElement | any>) =>\n    onBlur(id, enumOptionsValueForIndex<S>(target && target.value, enumOptions, emptyValue));\n  const _onFocus = ({ target }: FocusEvent<HTMLInputElement | any>) =>\n    onFocus(id, enumOptionsValueForIndex<S>(target && target.value, enumOptions, emptyValue));\n\n  const row = options ? options.inline : false;\n  const selectedIndexes = enumOptionsIndexForValue<S>(value, enumOptions, true) as string[];\n\n  return (\n    <FormControl\n      mb={1}\n      {...chakraProps}\n      isDisabled={disabled || readonly}\n      isRequired={required}\n      isReadOnly={readonly}\n      isInvalid={rawErrors && rawErrors.length > 0}\n    >\n      {labelValue(\n        <FormLabel htmlFor={id} id={`${id}-label`}>\n          {label}\n        </FormLabel>,\n        hideLabel || !label\n      )}\n      <CheckboxGroup\n        onChange={(option) => onChange(enumOptionsValueForIndex<S>(option, enumOptions, emptyValue))}\n        defaultValue={selectedIndexes}\n        aria-describedby={ariaDescribedByIds<T>(id)}\n      >\n        <Stack direction={row ? 'row' : 'column'}>\n          {Array.isArray(enumOptions) &&\n            enumOptions.map((option, index) => {\n              const checked = enumOptionsIsSelected<S>(option.value, checkboxesValues);\n              const itemDisabled = Array.isArray(enumDisabled) && enumDisabled.indexOf(option.value) !== -1;\n              return (\n                <Checkbox\n                  key={index}\n                  id={optionId(id, index)}\n                  name={id}\n                  value={String(index)}\n                  isChecked={checked}\n                  isDisabled={disabled || itemDisabled || readonly}\n                  onBlur={_onBlur}\n                  onFocus={_onFocus}\n                >\n                  {option.label && <Text>{option.label}</Text>}\n                </Checkbox>\n              );\n            })}\n        </Stack>\n      </CheckboxGroup>\n    </FormControl>\n  );\n}\n", "import { FocusEvent } from 'react';\nimport { FormControl, FormLabel, Radio, RadioGroup, Stack } from '@chakra-ui/react';\nimport {\n  ariaDescribedByIds,\n  enumOptionsIndexForValue,\n  enumOptionsValueForIndex,\n  labelValue,\n  optionId,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from '@rjsf/utils';\nimport { getChakra } from '../utils';\n\nexport default function RadioWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>({\n  id,\n  options,\n  value,\n  required,\n  disabled,\n  readonly,\n  label,\n  hideLabel,\n  onChange,\n  onBlur,\n  onFocus,\n  uiSchema,\n}: WidgetProps<T, S, F>) {\n  const { enumOptions, enumDisabled, emptyValue } = options;\n  const chakraProps = getChakra({ uiSchema });\n\n  const _onChange = (nextValue: any) => onChange(enumOptionsValueForIndex<S>(nextValue, enumOptions, emptyValue));\n  const _onBlur = ({ target: { value } }: FocusEvent<HTMLInputElement>) =>\n    onBlur(id, enumOptionsValueForIndex<S>(value, enumOptions, emptyValue));\n  const _onFocus = ({ target: { value } }: FocusEvent<HTMLInputElement>) =>\n    onFocus(id, enumOptionsValueForIndex<S>(value, enumOptions, emptyValue));\n\n  const row = options ? options.inline : false;\n  const selectedIndex = (enumOptionsIndexForValue<S>(value, enumOptions) as string) ?? null;\n\n  return (\n    <FormControl mb={1} {...chakraProps} isDisabled={disabled || readonly} isRequired={required} isReadOnly={readonly}>\n      {labelValue(\n        <FormLabel htmlFor={id} id={`${id}-label`}>\n          {label}\n        </FormLabel>,\n        hideLabel || !label\n      )}\n      <RadioGroup\n        onChange={_onChange}\n        onBlur={_onBlur}\n        onFocus={_onFocus}\n        value={selectedIndex}\n        name={id}\n        aria-describedby={ariaDescribedByIds<T>(id)}\n      >\n        <Stack direction={row ? 'row' : 'column'}>\n          {Array.isArray(enumOptions) &&\n            enumOptions.map((option, index) => {\n              const itemDisabled = Array.isArray(enumDisabled) && enumDisabled.indexOf(option.value) !== -1;\n\n              return (\n                <Radio\n                  value={String(index)}\n                  key={index}\n                  id={optionId(id, index)}\n                  disabled={disabled || itemDisabled || readonly}\n                >\n                  {option.label}\n                </Radio>\n              );\n            })}\n        </Stack>\n      </RadioGroup>\n    </FormControl>\n  );\n}\n", "import { FocusEvent } from 'react';\nimport { FormControl, FormLabel, Slider, SliderFilledTrack, SliderThumb, SliderTrack } from '@chakra-ui/react';\nimport {\n  ariaDescribedByIds,\n  FormContextType,\n  labelValue,\n  rangeSpec,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from '@rjsf/utils';\nimport { getChakra } from '../utils';\n\nexport default function RangeWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>({\n  value,\n  readonly,\n  disabled,\n  onBlur,\n  onFocus,\n  options,\n  schema,\n  uiSchema,\n  onChange,\n  label,\n  hideLabel,\n  id,\n}: WidgetProps<T, S, F>) {\n  const chakraProps = getChakra({ uiSchema });\n\n  const sliderWidgetProps = { value, label, id, ...rangeSpec<S>(schema) };\n\n  const _onChange = (value: undefined | number) => onChange(value === undefined ? options.emptyValue : value);\n  const _onBlur = ({ target }: FocusEvent<HTMLInputElement>) => onBlur(id, target && target.value);\n  const _onFocus = ({ target }: FocusEvent<HTMLInputElement>) => onFocus(id, target && target.value);\n\n  return (\n    <FormControl mb={1} {...chakraProps}>\n      {labelValue(<FormLabel htmlFor={id}>{label}</FormLabel>, hideLabel || !label)}\n      <Slider\n        {...sliderWidgetProps}\n        id={id}\n        name={id}\n        isDisabled={disabled || readonly}\n        onChange={_onChange}\n        onBlur={_onBlur}\n        onFocus={_onFocus}\n        aria-describedby={ariaDescribedByIds<T>(id)}\n      >\n        <SliderTrack>\n          <SliderFilledTrack />\n        </SliderTrack>\n        <SliderThumb />\n      </Slider>\n    </FormControl>\n  );\n}\n", "import { FocusEvent, useMemo } from 'react';\nimport { FormControl, FormLabel } from '@chakra-ui/react';\nimport {\n  ariaDescribedByIds,\n  EnumOptionsType,\n  enumOptionsIndexForValue,\n  enumOptionsValueForIndex,\n  labelValue,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from '@rjsf/utils';\nimport { getChakra } from '../utils';\nimport { OptionsOrGroups, Select } from 'chakra-react-select';\n\nexport default function SelectWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: WidgetProps<T, S, F>\n) {\n  const {\n    id,\n    options,\n    label,\n    hideLabel,\n    placeholder,\n    multiple,\n    required,\n    disabled,\n    readonly,\n    value,\n    autofocus,\n    onChange,\n    onBlur,\n    onFocus,\n    rawErrors = [],\n    uiSchema,\n    schema,\n  } = props;\n  const { enumOptions, enumDisabled, emptyValue } = options;\n  const chakraProps = getChakra({ uiSchema });\n\n  const _onMultiChange = (e: any) => {\n    return onChange(\n      enumOptionsValueForIndex<S>(\n        e.map((v: { value: any }) => {\n          return v.value;\n        }),\n        enumOptions,\n        emptyValue\n      )\n    );\n  };\n\n  const _onChange = (e: any) => {\n    return onChange(enumOptionsValueForIndex<S>(e.value, enumOptions, emptyValue));\n  };\n\n  const _onBlur = ({ target }: FocusEvent<HTMLInputElement>) =>\n    onBlur(id, enumOptionsValueForIndex<S>(target && target.value, enumOptions, emptyValue));\n\n  const _onFocus = ({ target }: FocusEvent<HTMLInputElement>) =>\n    onFocus(id, enumOptionsValueForIndex<S>(target && target.value, enumOptions, emptyValue));\n\n  const showPlaceholderOption = !multiple && schema.default === undefined;\n  const { valueLabelMap, displayEnumOptions } = useMemo((): {\n    valueLabelMap: Record<string | number, string>;\n    displayEnumOptions: OptionsOrGroups<any, any>;\n  } => {\n    const valueLabelMap: Record<string | number, string> = {};\n    let displayEnumOptions: OptionsOrGroups<any, any> = [];\n    if (Array.isArray(enumOptions)) {\n      displayEnumOptions = enumOptions.map((option: EnumOptionsType<S>, index: number) => {\n        const { value, label } = option;\n        valueLabelMap[index] = label || String(value);\n        return {\n          label,\n          value: String(index),\n          isDisabled: Array.isArray(enumDisabled) && enumDisabled.indexOf(value) !== -1,\n        };\n      });\n      if (showPlaceholderOption) {\n        (displayEnumOptions as any[]).unshift({ value: '', label: placeholder || '' });\n      }\n    }\n    return { valueLabelMap: valueLabelMap, displayEnumOptions: displayEnumOptions };\n  }, [enumDisabled, enumOptions, placeholder, showPlaceholderOption]);\n\n  const isMultiple = typeof multiple !== 'undefined' && multiple !== false && Boolean(enumOptions);\n  const selectedIndex = enumOptionsIndexForValue<S>(value, enumOptions, isMultiple);\n  const formValue: any = isMultiple\n    ? ((selectedIndex as string[]) || []).map((i: string) => {\n        return {\n          label: valueLabelMap[i],\n          value: i,\n        };\n      })\n    : {\n        label: valueLabelMap[selectedIndex as string] || '',\n        selectedIndex,\n      };\n\n  return (\n    <FormControl\n      mb={1}\n      {...chakraProps}\n      isDisabled={disabled || readonly}\n      isRequired={required}\n      isReadOnly={readonly}\n      isInvalid={rawErrors && rawErrors.length > 0}\n    >\n      {labelValue(\n        <FormLabel htmlFor={id} id={`${id}-label`}>\n          {label}\n        </FormLabel>,\n        hideLabel || !label\n      )}\n      <Select\n        inputId={id}\n        name={id}\n        isMulti={isMultiple}\n        options={displayEnumOptions}\n        placeholder={placeholder}\n        closeMenuOnSelect={!isMultiple}\n        onBlur={_onBlur}\n        onChange={isMultiple ? _onMultiChange : _onChange}\n        onFocus={_onFocus}\n        autoFocus={autofocus}\n        value={formValue}\n        aria-describedby={ariaDescribedByIds<T>(id)}\n      />\n    </FormControl>\n  );\n}\n", "import { ChangeEvent, FocusEvent } from 'react';\nimport { FormControl, FormLabel, Textarea } from '@chakra-ui/react';\nimport {\n  ariaDescribedByIds,\n  labelValue,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from '@rjsf/utils';\nimport { getChakra } from '../utils';\n\nexport default function TextareaWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>({\n  id,\n  placeholder,\n  value,\n  label,\n  hideLabel,\n  disabled,\n  autofocus,\n  readonly,\n  onBlur,\n  onFocus,\n  onChange,\n  options,\n  uiSchema,\n  required,\n  rawErrors,\n}: WidgetProps<T, S, F>) {\n  const chakraProps = getChakra({ uiSchema });\n\n  const _onChange = ({ target: { value } }: ChangeEvent<HTMLTextAreaElement>) =>\n    onChange(value === '' ? options.emptyValue : value);\n  const _onBlur = ({ target }: FocusEvent<HTMLTextAreaElement>) => onBlur(id, target && target.value);\n  const _onFocus = ({ target }: FocusEvent<HTMLTextAreaElement>) => onFocus(id, target && target.value);\n\n  return (\n    <FormControl\n      mb={1}\n      {...chakraProps}\n      isDisabled={disabled || readonly}\n      isRequired={required}\n      isReadOnly={readonly}\n      isInvalid={rawErrors && rawErrors.length > 0}\n    >\n      {labelValue(<FormLabel htmlFor={id}>{label}</FormLabel>, hideLabel || !label)}\n      <Textarea\n        id={id}\n        name={id}\n        value={value ?? ''}\n        placeholder={placeholder}\n        autoFocus={autofocus}\n        onChange={_onChange}\n        onBlur={_onBlur}\n        onFocus={_onFocus}\n        rows={options.rows}\n        aria-describedby={ariaDescribedByIds<T>(id)}\n      />\n    </FormControl>\n  );\n}\n", "import { FocusEvent } from 'react';\nimport {\n  NumberInput,\n  NumberDecrementStepper,\n  NumberIncrementStepper,\n  NumberInputField,\n  NumberInputStepper,\n  FormControl,\n  FormLabel,\n} from '@chakra-ui/react';\nimport {\n  ariaDescribedByIds,\n  labelValue,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from '@rjsf/utils';\nimport { getChakra } from '../utils';\n\nexport default function UpDownWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: WidgetProps<T, S, F>\n) {\n  const { id, uiSchema, readonly, disabled, label, hideLabel, value, onChange, onBlur, onFocus, rawErrors, required } =\n    props;\n\n  const chakraProps = getChakra({ uiSchema });\n\n  const _onChange = (value: string | number) => onChange(value);\n  const _onBlur = ({ target }: FocusEvent<HTMLInputElement | any>) => onBlur(id, target && target.value);\n  const _onFocus = ({ target }: FocusEvent<HTMLInputElement | any>) => onFocus(id, target && target.value);\n\n  return (\n    <FormControl\n      mb={1}\n      {...chakraProps}\n      isDisabled={disabled || readonly}\n      isRequired={required}\n      isReadOnly={readonly}\n      isInvalid={rawErrors && rawErrors.length > 0}\n    >\n      {labelValue(<FormLabel htmlFor={id}>{label}</FormLabel>, hideLabel || !label)}\n      <NumberInput\n        value={value ?? ''}\n        onChange={_onChange}\n        onBlur={_onBlur}\n        onFocus={_onFocus}\n        aria-describedby={ariaDescribedByIds<T>(id)}\n      >\n        <NumberInputField id={id} name={id} />\n        <NumberInputStepper>\n          <NumberIncrementStepper />\n          <NumberDecrementStepper />\n        </NumberInputStepper>\n      </NumberInput>\n    </FormControl>\n  );\n}\n", "import AltDateTimeWidget from '../AltDateTimeWidget/AltDateTimeWidget';\nimport AltDateWidget from '../AltDateWidget/AltDateWidget';\nimport CheckboxWidget from '../CheckboxWidget/CheckboxWidget';\nimport CheckboxesWidget from '../CheckboxesWidget/CheckboxesWidget';\nimport RadioWidget from '../RadioWidget/RadioWidget';\nimport RangeWidget from '../RangeWidget/RangeWidget';\nimport SelectWidget from '../SelectWidget/SelectWidget';\nimport TextareaWidget from '../TextareaWidget/TextareaWidget';\nimport UpDownWidget from '../UpDownWidget/UpDownWidget';\nimport { FormContextType, RegistryWidgetsType, RJSFSchema, StrictRJSFSchema } from '@rjsf/utils';\n\nexport function generateWidgets<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(): RegistryWidgetsType<T, S, F> {\n  return {\n    AltDateTimeWidget,\n    AltDateWidget,\n    CheckboxWidget,\n    CheckboxesWidget,\n    RadioWidget,\n    RangeWidget,\n    SelectWidget,\n    TextareaWidget,\n    UpDownWidget,\n  };\n}\n\nexport default generateWidgets();\n", "import { ThemeProps } from '@rjsf/core';\n\nimport { generateTemplates } from '../Templates';\nimport { generateWidgets } from '../Widgets';\nimport { FormContextType, RJSFSchema, StrictRJSFSchema } from '@rjsf/utils';\n\nexport function generateTheme<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(): ThemeProps<T, S, F> {\n  return {\n    templates: generateTemplates<T, S, F>(),\n    widgets: generateWidgets<T, S, F>(),\n  };\n}\n\nexport default generateTheme();\n", "import { CacheProvider } from '@emotion/react';\nimport createCache from '@emotion/cache';\nimport weakMemoize from '@emotion/weak-memoize';\nimport { ChakraProvider } from '@chakra-ui/react';\nimport CSSReset from './CssReset';\n\n/**\n * __createChakraFrameProvider is used to ensure that <Global> emotion components\n * can be rendered within an iframe without changing the styles of the parent page.\n * Required for using Chakra UI in the playground.\n *\n * We have to define ChakraFrameProvider in this library, as opposed to the playground,\n * in order to avoid conflicting versions of emotion, which breaks the styling.\n *\n * NOTE: This is an internal component only used by @rjsf/playground (no\n * backwards compatibility guarantees!)\n *\n * From: https://codesandbox.io/s/p98y9o7jz0?file=/src/frame-provider.js:0-650\n * Also see: https://github.com/emotion-js/emotion/issues/760#issuecomment-404353706\n */\n\nconst memoizedCreateCacheWithContainer = weakMemoize((container: HTMLElement) => {\n  const newCache = createCache({ container, key: 'rjsf' });\n  return newCache;\n});\n\nexport const __createChakraFrameProvider =\n  (props: any) =>\n  ({ document }: any) => {\n    return (\n      <div style={{ margin: 2 }}>\n        <CacheProvider value={memoizedCreateCacheWithContainer(document.head)}>\n          <ChakraProvider resetCSS={false}>\n            <CSSReset />\n            {props.children}\n          </ChakraProvider>\n        </CacheProvider>\n      </div>\n    );\n  };\n", "import { Global } from '@emotion/react';\n\n/**\n * \n * The reason we need this is for ChakraProvider styling in Playground. \n * The User Developer would be responsible for styling with ChakraProvider in their app.\n * \n * Exact duplicate of `@chakra-ui/react`'s `CSSReset` component. Except for the following:\n * \n  ```css\n    input {\n      border-width: revert;\n      border-color: revert;\n      border-style: revert;\n    }\n    .array-item > hr {\n      margin-top: 16px;\n      margin-bottom: 16px;\n    }\n  ```\n\n  It is located at the bottom of the styles string.\n */\nexport const CSSReset = () => (\n  <Global\n    styles={`\n      html {\n        line-height: 1.5;\n        -webkit-text-size-adjust: 100%;\n        font-family: system-ui, sans-serif;\n        -webkit-font-smoothing: antialiased;\n        text-rendering: optimizeLegibility;\n        -moz-osx-font-smoothing: grayscale;\n        touch-action: manipulation;\n      }\n      body {\n        position: relative;\n        min-height: 100%;\n        font-feature-settings: 'kern';\n      }\n      *,\n      *::before,\n      *::after {\n        border-width: 0;\n        border-style: solid;\n        box-sizing: border-box;\n      }\n      main {\n        display: block;\n      }\n      hr {\n        border-top-width: 1px;\n        box-sizing: content-box;\n        height: 0;\n        overflow: visible;\n      }\n      pre,\n      code,\n      kbd,\n      samp {\n        font-family: SFMono-Regular,  Menlo, Monaco, Consolas, monospace;\n        font-size: 1em;\n      }\n      a {\n        background-color: transparent;\n        color: inherit;\n        text-decoration: inherit;\n      }\n      abbr[title] {\n        border-bottom: none;\n        text-decoration: underline;\n        -webkit-text-decoration: underline dotted;\n        text-decoration: underline dotted;\n      }\n      b,\n      strong {\n        font-weight: bold;\n      }\n      small {\n        font-size: 80%;\n      }\n      sub,\n      sup {\n        font-size: 75%;\n        line-height: 0;\n        position: relative;\n        vertical-align: baseline;\n      }\n      sub {\n        bottom: -0.25em;\n      }\n      sup {\n        top: -0.5em;\n      }\n      img {\n        border-style: none;\n      }\n      button,\n      input,\n      optgroup,\n      select,\n      textarea {\n        font-family: inherit;\n        font-size: 100%;\n        line-height: 1.15;\n        margin: 0;\n      }\n      button,\n      input {\n        overflow: visible;\n      }\n      button,\n      select {\n        text-transform: none;\n      }\n      button::-moz-focus-inner,\n      [type=\"button\"]::-moz-focus-inner,\n      [type=\"reset\"]::-moz-focus-inner,\n      [type=\"submit\"]::-moz-focus-inner {\n        border-style: none;\n        padding: 0;\n      }\n      fieldset {\n        padding: 0.35em 0.75em 0.625em;\n      }\n      legend {\n        box-sizing: border-box;\n        color: inherit;\n        display: table;\n        max-width: 100%;\n        padding: 0;\n        white-space: normal;\n      }\n      progress {\n        vertical-align: baseline;\n      }\n      textarea {\n        overflow: auto;\n      }\n      [type=\"checkbox\"],\n      [type=\"radio\"] {\n        box-sizing: border-box;\n        padding: 0;\n      }\n      [type=\"number\"]::-webkit-inner-spin-button,\n      [type=\"number\"]::-webkit-outer-spin-button {\n        -webkit-appearance: none !important;\n      }\n      input[type=\"number\"] {\n        -moz-appearance: textfield;\n      }\n      [type=\"search\"] {\n        -webkit-appearance: textfield;\n        outline-offset: -2px;\n      }\n      [type=\"search\"]::-webkit-search-decoration {\n        -webkit-appearance: none !important;\n      }\n      ::-webkit-file-upload-button {\n        -webkit-appearance: button;\n        font: inherit;\n      }\n      details {\n        display: block;\n      }\n      summary {\n        display: list-item;\n      }\n      template {\n        display: none;\n      }\n      [hidden] {\n        display: none !important;\n      }\n      body,\n      blockquote,\n      dl,\n      dd,\n      h1,\n      h2,\n      h3,\n      h4,\n      h5,\n      h6,\n      hr,\n      figure,\n      p,\n      pre {\n        margin: 0;\n      }\n      button {\n        background: transparent;\n        padding: 0;\n      }\n      fieldset {\n        margin: 0;\n        padding: 0;\n      }\n      ol,\n      ul {\n        margin: 0;\n        padding: 0;\n      }\n      textarea {\n        resize: vertical;\n      }\n      button,\n      [role=\"button\"] {\n        cursor: pointer;\n      }\n      button::-moz-focus-inner {\n        border: 0 !important;\n      }\n      table {\n        border-collapse: collapse;\n      }\n      h1,\n      h2,\n      h3,\n      h4,\n      h5,\n      h6 {\n        font-size: inherit;\n        font-weight: inherit;\n      }\n      button,\n      input,\n      optgroup,\n      select,\n      textarea {\n        padding: 0;\n        line-height: inherit;\n        color: inherit;\n      }\n      img,\n      svg,\n      video,\n      canvas,\n      audio,\n      iframe,\n      embed,\n      object {\n        display: block;\n      }\n      img,\n      video {\n        max-width: 100%;\n        height: auto;\n      }\n      [data-js-focus-visible] :focus:not([data-focus-visible-added]) {\n        outline: none;\n        box-shadow: none;\n      }\n      select::-ms-expand {\n        display: none;\n      }\n      input {\n        border-width: revert;\n        border-color: revert;\n        border-style: revert;\n      }\n      .array-item > hr {\n        margin-top: 16px;\n        margin-bottom: 16px;\n      }\n    `}\n  />\n);\n\nexport default CSSReset;\n", "import Form from './Form';\n\nexport { default as Form, generateForm } from './Form';\nexport { default as Templates, generateTemplates } from './Templates';\nexport { default as Theme, generateTheme } from './Theme';\nexport { default as Widgets, generateWidgets } from './Widgets';\nexport { __createChakraFrameProvider } from './ChakraFrameProvider';\n\nexport type { ChakraUiSchema as UiSchema } from './utils';\n\nexport default Form;\n"],
  "mappings": "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",
  "names": ["jsx", "CopyButton", "MoveDownButton", "MoveUpButton", "RemoveButton", "Box", "jsx", "jsxs", "ArrayFieldItemTemplate", "AddButton", "jsx", "jsxs", "value", "jsx", "TranslatableString", "jsx", "jsxs", "jsx", "TranslatableString", "jsx", "TranslatableString", "List", "ListItem", "jsx", "jsx", "getTemplate", "getUiOptions", "Text", "FormControl", "jsx", "jsxs", "WrapIfAdditionalTemplate", "Grid", "GridItem", "getTemplate", "getUiOptions", "Fragment", "jsx", "jsxs", "AddButton", "Box", "Button", "jsx", "Box", "jsx", "jsxs", "TranslatableString", "FormControl", "FormLabel", "Grid", "GridItem", "Input", "jsx", "jsxs", "RemoveButton", "ariaDescribedByIds", "TranslatableString", "Box", "Button", "jsx", "jsxs", "SelectWidget", "jsx", "AltDateWidget", "FormControl", "Text", "ariaDescribedByIds", "descriptionId", "getTemplate", "labelValue", "jsx", "jsxs", "getTemplate", "FormControl", "descriptionId", "ariaDescribedByIds", "labelValue", "Text", "Checkbox", "FormLabel", "FormControl", "Text", "ariaDescribedByIds", "labelValue", "jsx", "jsxs", "FormControl", "labelValue", "FormLabel", "ariaDescribedByIds", "Checkbox", "Text", "FormControl", "FormLabel", "Stack", "ariaDescribedByIds", "enumOptionsIndexForValue", "enumOptionsValueForIndex", "labelValue", "optionId", "jsx", "jsxs", "enumOptionsValueForIndex", "value", "enumOptionsIndexForValue", "FormControl", "labelValue", "FormLabel", "ariaDescribedByIds", "Stack", "optionId", "FormControl", "FormLabel", "ariaDescribedByIds", "labelValue", "jsx", "jsxs", "value", "FormControl", "labelValue", "FormLabel", "ariaDescribedByIds", "useMemo", "FormControl", "FormLabel", "ariaDescribedByIds", "enumOptionsIndexForValue", "enumOptionsValueForIndex", "labelValue", "jsx", "jsxs", "enumOptionsValueForIndex", "useMemo", "valueLabelMap", "displayEnumOptions", "value", "label", "enumOptionsIndexForValue", "FormControl", "labelValue", "FormLabel", "ariaDescribedByIds", "FormControl", "FormLabel", "ariaDescribedByIds", "labelValue", "jsx", "jsxs", "value", "FormControl", "labelValue", "FormLabel", "ariaDescribedByIds", "FormControl", "FormLabel", "ariaDescribedByIds", "labelValue", "jsx", "jsxs", "value", "FormControl", "labelValue", "FormLabel", "ariaDescribedByIds", "jsx", "jsx", "jsxs"]
}
