import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { FormControl, FormLabel, Input } from '@chakra-ui/react';
import { ariaDescribedByIds, examplesId, labelValue, getInputProps, } from '@rjsf/utils';
import { getChakra } from '../utils';
export default function BaseInputTemplate(props) {
    const { id, type, value, label, hideLabel, schema, uiSchema, onChange, onChangeOverride, onBlur, onFocus, options, required, readonly, rawErrors, autofocus, placeholder, disabled, } = props;
    const inputProps = getInputProps(schema, type, options);
    const chakraProps = getChakra({ uiSchema });
    const _onChange = ({ target: { value } }) => onChange(value === '' ? options.emptyValue : value);
    const _onBlur = ({ target }) => onBlur(id, target && target.value);
    const _onFocus = ({ target }) => onFocus(id, target && target.value);
    return (_jsxs(FormControl, { mb: 1, ...chakraProps, isDisabled: disabled || readonly, isRequired: required, isReadOnly: readonly, isInvalid: rawErrors && rawErrors.length > 0, children: [labelValue(_jsx(FormLabel, { htmlFor: id, id: `${id}-label`, children: label }), hideLabel || !label), _jsx(Input, { id: id, name: id, value: value || value === 0 ? value : '', onChange: onChangeOverride || _onChange, onBlur: _onBlur, onFocus: _onFocus, autoFocus: autofocus, placeholder: placeholder, ...inputProps, list: schema.examples ? examplesId(id) : undefined, "aria-describedby": ariaDescribedByIds(id, !!schema.examples) }), Array.isArray(schema.examples) ? (_jsx("datalist", { id: examplesId(id), children: schema.examples
                    .concat(schema.default && !schema.examples.includes(schema.default) ? [schema.default] : [])
                    .map((example) => {
                    return _jsx("option", { value: example }, example);
                }) })) : null] }));
}
//# sourceMappingURL=BaseInputTemplate.js.map