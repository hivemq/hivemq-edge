import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { ADDITIONAL_PROPERTY_FLAG, TranslatableString, } from '@rjsf/utils';
import { FormControl, FormLabel, Grid, GridItem, Input } from '@chakra-ui/react';
export default function WrapIfAdditionalTemplate(props) {
    const { children, classNames, style, disabled, id, label, onDropPropertyClick, onKeyChange, readonly, registry, required, schema, uiSchema, } = props;
    const { templates, translateString } = registry;
    // Button templates are not overridden in the uiSchema
    const { RemoveButton } = templates.ButtonTemplates;
    const keyLabel = translateString(TranslatableString.KeyLabel, [label]);
    const additional = ADDITIONAL_PROPERTY_FLAG in schema;
    if (!additional) {
        return (_jsx("div", { className: classNames, style: style, children: children }));
    }
    const handleBlur = ({ target }) => onKeyChange(target.value);
    return (_jsxs(Grid, { className: classNames, style: style, alignItems: 'center', gap: 2, children: [_jsx(GridItem, { children: _jsxs(FormControl, { isRequired: required, children: [_jsx(FormLabel, { htmlFor: `${id}-key`, id: `${id}-key-label`, children: keyLabel }), _jsx(Input, { defaultValue: label, disabled: disabled || readonly, id: `${id}-key`, name: `${id}-key`, onBlur: !readonly ? handleBlur : undefined, type: 'text', mb: 1 })] }) }), _jsx(GridItem, { children: children }), _jsx(GridItem, { children: _jsx(RemoveButton, { disabled: disabled || readonly, onClick: onDropPropertyClick(label), uiSchema: uiSchema, registry: registry }) })] }, `${id}-key`));
}
//# sourceMappingURL=WrapIfAdditionalTemplate.js.map