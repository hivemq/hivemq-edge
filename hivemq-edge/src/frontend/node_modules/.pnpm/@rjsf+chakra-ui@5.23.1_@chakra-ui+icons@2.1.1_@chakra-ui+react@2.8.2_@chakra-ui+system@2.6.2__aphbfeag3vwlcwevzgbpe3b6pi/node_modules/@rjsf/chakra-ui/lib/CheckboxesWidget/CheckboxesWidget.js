import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { CheckboxGroup, Checkbox, FormLabel, FormControl, Text, Stack } from '@chakra-ui/react';
import { ariaDescribedByIds, enumOptionsIndexForValue, enumOptionsIsSelected, enumOptionsValueForIndex, labelValue, optionId, } from '@rjsf/utils';
import { getChakra } from '../utils';
export default function CheckboxesWidget(props) {
    const { id, disabled, options, value, readonly, onChange, onBlur, onFocus, required, label, hideLabel, uiSchema, rawErrors = [], } = props;
    const { enumOptions, enumDisabled, emptyValue } = options;
    const chakraProps = getChakra({ uiSchema });
    const checkboxesValues = Array.isArray(value) ? value : [value];
    const _onBlur = ({ target }) => onBlur(id, enumOptionsValueForIndex(target && target.value, enumOptions, emptyValue));
    const _onFocus = ({ target }) => onFocus(id, enumOptionsValueForIndex(target && target.value, enumOptions, emptyValue));
    const row = options ? options.inline : false;
    const selectedIndexes = enumOptionsIndexForValue(value, enumOptions, true);
    return (_jsxs(FormControl, { mb: 1, ...chakraProps, isDisabled: disabled || readonly, isRequired: required, isReadOnly: readonly, isInvalid: rawErrors && rawErrors.length > 0, children: [labelValue(_jsx(FormLabel, { htmlFor: id, id: `${id}-label`, children: label }), hideLabel || !label), _jsx(CheckboxGroup, { onChange: (option) => onChange(enumOptionsValueForIndex(option, enumOptions, emptyValue)), defaultValue: selectedIndexes, "aria-describedby": ariaDescribedByIds(id), children: _jsx(Stack, { direction: row ? 'row' : 'column', children: Array.isArray(enumOptions) &&
                        enumOptions.map((option, index) => {
                            const checked = enumOptionsIsSelected(option.value, checkboxesValues);
                            const itemDisabled = Array.isArray(enumDisabled) && enumDisabled.indexOf(option.value) !== -1;
                            return (_jsx(Checkbox, { id: optionId(id, index), name: id, value: String(index), isChecked: checked, isDisabled: disabled || itemDisabled || readonly, onBlur: _onBlur, onFocus: _onFocus, children: option.label && _jsx(Text, { children: option.label }) }, index));
                        }) }) })] }));
}
//# sourceMappingURL=CheckboxesWidget.js.map