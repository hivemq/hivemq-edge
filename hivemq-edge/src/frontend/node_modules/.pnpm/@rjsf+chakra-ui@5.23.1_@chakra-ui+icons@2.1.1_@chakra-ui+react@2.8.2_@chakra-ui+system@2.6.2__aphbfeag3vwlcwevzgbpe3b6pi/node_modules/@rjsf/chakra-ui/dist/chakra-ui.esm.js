// src/Form/Form.tsx
import { withTheme } from "@rjsf/core";

// src/AddButton/AddButton.tsx
import { TranslatableString } from "@rjsf/utils";
import { Button } from "@chakra-ui/react";
import { AddIcon } from "@chakra-ui/icons";
import { jsx } from "react/jsx-runtime";
function AddButton({
  uiSchema,
  registry,
  ...props
}) {
  const { translateString } = registry;
  return /* @__PURE__ */ jsx(Button, { leftIcon: /* @__PURE__ */ jsx(AddIcon, {}), ...props, children: translateString(TranslatableString.AddItemButton) });
}

// src/ArrayFieldItemTemplate/ArrayFieldItemTemplate.tsx
import { useMemo } from "react";
import { Box, ButtonGroup, HStack } from "@chakra-ui/react";
import { jsx as jsx2, jsxs } from "react/jsx-runtime";
function ArrayFieldItemTemplate(props) {
  const {
    children,
    disabled,
    hasToolbar,
    hasCopy,
    hasMoveDown,
    hasMoveUp,
    hasRemove,
    index,
    onCopyIndexClick,
    onDropIndexClick,
    onReorderClick,
    readonly,
    uiSchema,
    registry
  } = props;
  const { CopyButton: CopyButton2, MoveDownButton: MoveDownButton2, MoveUpButton: MoveUpButton2, RemoveButton: RemoveButton2 } = registry.templates.ButtonTemplates;
  const onCopyClick = useMemo(() => onCopyIndexClick(index), [index, onCopyIndexClick]);
  const onRemoveClick = useMemo(() => onDropIndexClick(index), [index, onDropIndexClick]);
  const onArrowUpClick = useMemo(() => onReorderClick(index, index - 1), [index, onReorderClick]);
  const onArrowDownClick = useMemo(() => onReorderClick(index, index + 1), [index, onReorderClick]);
  return /* @__PURE__ */ jsxs(HStack, { alignItems: "flex-end", py: 1, children: [
    /* @__PURE__ */ jsx2(Box, { w: "100%", children }),
    hasToolbar && /* @__PURE__ */ jsx2(Box, { children: /* @__PURE__ */ jsxs(ButtonGroup, { isAttached: true, mb: 1, children: [
      (hasMoveUp || hasMoveDown) && /* @__PURE__ */ jsx2(
        MoveUpButton2,
        {
          disabled: disabled || readonly || !hasMoveUp,
          onClick: onArrowUpClick,
          uiSchema,
          registry
        }
      ),
      (hasMoveUp || hasMoveDown) && /* @__PURE__ */ jsx2(
        MoveDownButton2,
        {
          disabled: disabled || readonly || !hasMoveDown,
          onClick: onArrowDownClick,
          uiSchema,
          registry
        }
      ),
      hasCopy && /* @__PURE__ */ jsx2(
        CopyButton2,
        {
          disabled: disabled || readonly,
          onClick: onCopyClick,
          uiSchema,
          registry
        }
      ),
      hasRemove && /* @__PURE__ */ jsx2(
        RemoveButton2,
        {
          disabled: disabled || readonly,
          onClick: onRemoveClick,
          uiSchema,
          registry
        }
      )
    ] }) })
  ] });
}

// src/ArrayFieldTemplate/ArrayFieldTemplate.tsx
import { Box as Box2, Grid, GridItem } from "@chakra-ui/react";
import {
  getTemplate,
  getUiOptions
} from "@rjsf/utils";
import { jsx as jsx3, jsxs as jsxs2 } from "react/jsx-runtime";
function ArrayFieldTemplate(props) {
  const { canAdd, disabled, idSchema, uiSchema, items, onAddClick, readonly, registry, required, schema, title } = props;
  const uiOptions = getUiOptions(uiSchema);
  const ArrayFieldDescriptionTemplate = getTemplate(
    "ArrayFieldDescriptionTemplate",
    registry,
    uiOptions
  );
  const ArrayFieldItemTemplate2 = getTemplate(
    "ArrayFieldItemTemplate",
    registry,
    uiOptions
  );
  const ArrayFieldTitleTemplate = getTemplate(
    "ArrayFieldTitleTemplate",
    registry,
    uiOptions
  );
  const {
    ButtonTemplates: { AddButton: AddButton2 }
  } = registry.templates;
  return /* @__PURE__ */ jsxs2(Box2, { children: [
    /* @__PURE__ */ jsx3(
      ArrayFieldTitleTemplate,
      {
        idSchema,
        title: uiOptions.title || title,
        schema,
        uiSchema,
        required,
        registry
      }
    ),
    /* @__PURE__ */ jsx3(
      ArrayFieldDescriptionTemplate,
      {
        idSchema,
        description: uiOptions.description || schema.description,
        schema,
        uiSchema,
        registry
      }
    ),
    /* @__PURE__ */ jsxs2(Grid, { children: [
      /* @__PURE__ */ jsx3(GridItem, { children: items.length > 0 && items.map(({ key, ...itemProps }) => /* @__PURE__ */ jsx3(ArrayFieldItemTemplate2, { ...itemProps }, key)) }),
      canAdd && /* @__PURE__ */ jsx3(GridItem, { justifySelf: "flex-end", children: /* @__PURE__ */ jsx3(Box2, { mt: 2, children: /* @__PURE__ */ jsx3(
        AddButton2,
        {
          className: "array-item-add",
          onClick: onAddClick,
          disabled: disabled || readonly,
          uiSchema,
          registry
        }
      ) }) })
    ] }, `array-item-list-${idSchema.$id}`)
  ] });
}

// src/BaseInputTemplate/BaseInputTemplate.tsx
import { FormControl, FormLabel, Input } from "@chakra-ui/react";
import {
  ariaDescribedByIds,
  examplesId,
  labelValue,
  getInputProps
} from "@rjsf/utils";

// src/utils.ts
import { shouldForwardProp } from "@chakra-ui/react";
function getChakra({ uiSchema = {} }) {
  const chakraProps = uiSchema["ui:options"] && uiSchema["ui:options"].chakra || {};
  Object.keys(chakraProps).forEach((key) => {
    if (shouldForwardProp(key)) {
      delete chakraProps[key];
    }
  });
  return chakraProps;
}

// src/BaseInputTemplate/BaseInputTemplate.tsx
import { jsx as jsx4, jsxs as jsxs3 } from "react/jsx-runtime";
function BaseInputTemplate(props) {
  const {
    id,
    type,
    value,
    label,
    hideLabel,
    schema,
    uiSchema,
    onChange,
    onChangeOverride,
    onBlur,
    onFocus,
    options,
    required,
    readonly,
    rawErrors,
    autofocus,
    placeholder,
    disabled
  } = props;
  const inputProps = getInputProps(schema, type, options);
  const chakraProps = getChakra({ uiSchema });
  const _onChange = ({ target: { value: value2 } }) => onChange(value2 === "" ? options.emptyValue : value2);
  const _onBlur = ({ target }) => onBlur(id, target && target.value);
  const _onFocus = ({ target }) => onFocus(id, target && target.value);
  return /* @__PURE__ */ jsxs3(
    FormControl,
    {
      mb: 1,
      ...chakraProps,
      isDisabled: disabled || readonly,
      isRequired: required,
      isReadOnly: readonly,
      isInvalid: rawErrors && rawErrors.length > 0,
      children: [
        labelValue(
          /* @__PURE__ */ jsx4(FormLabel, { htmlFor: id, id: `${id}-label`, children: label }),
          hideLabel || !label
        ),
        /* @__PURE__ */ jsx4(
          Input,
          {
            id,
            name: id,
            value: value || value === 0 ? value : "",
            onChange: onChangeOverride || _onChange,
            onBlur: _onBlur,
            onFocus: _onFocus,
            autoFocus: autofocus,
            placeholder,
            ...inputProps,
            list: schema.examples ? examplesId(id) : void 0,
            "aria-describedby": ariaDescribedByIds(id, !!schema.examples)
          }
        ),
        Array.isArray(schema.examples) ? /* @__PURE__ */ jsx4("datalist", { id: examplesId(id), children: schema.examples.concat(schema.default && !schema.examples.includes(schema.default) ? [schema.default] : []).map((example) => {
          return /* @__PURE__ */ jsx4("option", { value: example }, example);
        }) }) : null
      ]
    }
  );
}

// src/DescriptionField/DescriptionField.tsx
import { Text } from "@chakra-ui/react";
import { Fragment, jsx as jsx5 } from "react/jsx-runtime";
function DescriptionField({ description, id }) {
  if (!description) {
    return null;
  }
  if (typeof description === "string") {
    return /* @__PURE__ */ jsx5(Text, { as: "sup", fontSize: "md", id, children: description });
  }
  return /* @__PURE__ */ jsx5(Fragment, { children: description });
}

// src/ErrorList/ErrorList.tsx
import { TranslatableString as TranslatableString2 } from "@rjsf/utils";
import { List, ListIcon, ListItem, Alert, AlertTitle } from "@chakra-ui/react";
import { WarningIcon } from "@chakra-ui/icons";
import { jsx as jsx6, jsxs as jsxs4 } from "react/jsx-runtime";
function ErrorList({
  errors,
  registry
}) {
  const { translateString } = registry;
  return /* @__PURE__ */ jsxs4(Alert, { flexDirection: "column", alignItems: "flex-start", gap: 3, status: "error", children: [
    /* @__PURE__ */ jsx6(AlertTitle, { children: translateString(TranslatableString2.ErrorsLabel) }),
    /* @__PURE__ */ jsx6(List, { children: errors.map((error, i) => /* @__PURE__ */ jsxs4(ListItem, { children: [
      /* @__PURE__ */ jsx6(ListIcon, { as: WarningIcon, color: "red.500" }),
      error.stack
    ] }, i)) })
  ] });
}

// src/IconButton/ChakraIconButton.tsx
import { memo } from "react";
import { IconButton } from "@chakra-ui/react";
import { jsx as jsx7 } from "react/jsx-runtime";
function ChakraIconButton(props) {
  const { icon, iconType, uiSchema, registry, ...otherProps } = props;
  return /* @__PURE__ */ jsx7(IconButton, { "aria-label": props.title, ...otherProps, icon });
}
ChakraIconButton.displayName = "ChakraIconButton";
var ChakraIconButton_default = memo(ChakraIconButton);

// src/IconButton/IconButton.tsx
import { TranslatableString as TranslatableString3 } from "@rjsf/utils";
import { ArrowUpIcon, ArrowDownIcon, CopyIcon, DeleteIcon } from "@chakra-ui/icons";
import { jsx as jsx8 } from "react/jsx-runtime";
function CopyButton(props) {
  const {
    registry: { translateString }
  } = props;
  return /* @__PURE__ */ jsx8(ChakraIconButton_default, { title: translateString(TranslatableString3.CopyButton), ...props, icon: /* @__PURE__ */ jsx8(CopyIcon, {}) });
}
function MoveDownButton(props) {
  const {
    registry: { translateString }
  } = props;
  return /* @__PURE__ */ jsx8(
    ChakraIconButton_default,
    {
      title: translateString(TranslatableString3.MoveDownButton),
      ...props,
      icon: /* @__PURE__ */ jsx8(ArrowDownIcon, {})
    }
  );
}
function MoveUpButton(props) {
  const {
    registry: { translateString }
  } = props;
  return /* @__PURE__ */ jsx8(
    ChakraIconButton_default,
    {
      title: translateString(TranslatableString3.MoveUpButton),
      ...props,
      icon: /* @__PURE__ */ jsx8(ArrowUpIcon, {})
    }
  );
}
function RemoveButton(props) {
  const {
    registry: { translateString }
  } = props;
  return /* @__PURE__ */ jsx8(
    ChakraIconButton_default,
    {
      title: translateString(TranslatableString3.RemoveButton),
      ...props,
      icon: /* @__PURE__ */ jsx8(DeleteIcon, {})
    }
  );
}

// src/FieldErrorTemplate/FieldErrorTemplate.tsx
import { errorId } from "@rjsf/utils";
import { FormErrorMessage, List as List2, ListItem as ListItem2 } from "@chakra-ui/react";
import { jsx as jsx9 } from "react/jsx-runtime";
function FieldErrorTemplate(props) {
  const { errors = [], idSchema } = props;
  if (errors.length === 0) {
    return null;
  }
  const id = errorId(idSchema);
  return /* @__PURE__ */ jsx9(List2, { children: errors.map((error, i) => {
    return /* @__PURE__ */ jsx9(ListItem2, { children: /* @__PURE__ */ jsx9(FormErrorMessage, { id, children: error }) }, i);
  }) });
}

// src/FieldHelpTemplate/FieldHelpTemplate.tsx
import { helpId } from "@rjsf/utils";
import { FormHelperText } from "@chakra-ui/react";
import { jsx as jsx10 } from "react/jsx-runtime";
function FieldHelpTemplate(props) {
  const { idSchema, help } = props;
  if (!help) {
    return null;
  }
  const id = helpId(idSchema);
  return /* @__PURE__ */ jsx10(FormHelperText, { id, children: help });
}

// src/FieldTemplate/FieldTemplate.tsx
import {
  getTemplate as getTemplate2,
  getUiOptions as getUiOptions2
} from "@rjsf/utils";
import { Text as Text2, FormControl as FormControl2 } from "@chakra-ui/react";
import { jsx as jsx11, jsxs as jsxs5 } from "react/jsx-runtime";
function FieldTemplate(props) {
  const {
    id,
    children,
    classNames,
    style,
    disabled,
    displayLabel,
    hidden,
    label,
    onDropPropertyClick,
    onKeyChange,
    readonly,
    registry,
    required,
    rawErrors = [],
    errors,
    help,
    description,
    rawDescription,
    schema,
    uiSchema
  } = props;
  const uiOptions = getUiOptions2(uiSchema);
  const WrapIfAdditionalTemplate2 = getTemplate2(
    "WrapIfAdditionalTemplate",
    registry,
    uiOptions
  );
  if (hidden) {
    return /* @__PURE__ */ jsx11("div", { style: { display: "none" }, children });
  }
  return /* @__PURE__ */ jsx11(
    WrapIfAdditionalTemplate2,
    {
      classNames,
      style,
      disabled,
      id,
      label,
      onDropPropertyClick,
      onKeyChange,
      readonly,
      required,
      schema,
      uiSchema,
      registry,
      children: /* @__PURE__ */ jsxs5(FormControl2, { isRequired: required, isInvalid: rawErrors && rawErrors.length > 0, children: [
        children,
        displayLabel && rawDescription ? /* @__PURE__ */ jsx11(Text2, { mt: 2, children: description }) : null,
        errors,
        help
      ] })
    }
  );
}

// src/ObjectFieldTemplate/ObjectFieldTemplate.tsx
import { Grid as Grid2, GridItem as GridItem2 } from "@chakra-ui/react";
import {
  canExpand,
  descriptionId,
  getTemplate as getTemplate3,
  getUiOptions as getUiOptions3,
  titleId
} from "@rjsf/utils";
import { Fragment as Fragment2, jsx as jsx12, jsxs as jsxs6 } from "react/jsx-runtime";
function ObjectFieldTemplate(props) {
  const {
    description,
    title,
    properties,
    required,
    disabled,
    readonly,
    uiSchema,
    idSchema,
    schema,
    formData,
    onAddClick,
    registry
  } = props;
  const uiOptions = getUiOptions3(uiSchema);
  const TitleFieldTemplate = getTemplate3("TitleFieldTemplate", registry, uiOptions);
  const DescriptionFieldTemplate = getTemplate3(
    "DescriptionFieldTemplate",
    registry,
    uiOptions
  );
  const {
    ButtonTemplates: { AddButton: AddButton2 }
  } = registry.templates;
  return /* @__PURE__ */ jsxs6(Fragment2, { children: [
    title && /* @__PURE__ */ jsx12(
      TitleFieldTemplate,
      {
        id: titleId(idSchema),
        title,
        required,
        schema,
        uiSchema,
        registry
      }
    ),
    description && /* @__PURE__ */ jsx12(
      DescriptionFieldTemplate,
      {
        id: descriptionId(idSchema),
        description,
        schema,
        uiSchema,
        registry
      }
    ),
    /* @__PURE__ */ jsxs6(Grid2, { gap: description ? 2 : 6, mb: 4, children: [
      properties.map(
        (element, index) => element.hidden ? element.content : /* @__PURE__ */ jsx12(GridItem2, { children: element.content }, `${idSchema.$id}-${element.name}-${index}`)
      ),
      canExpand(schema, uiSchema, formData) && /* @__PURE__ */ jsx12(GridItem2, { justifySelf: "flex-end", children: /* @__PURE__ */ jsx12(
        AddButton2,
        {
          className: "object-property-expand",
          onClick: onAddClick(schema),
          disabled: disabled || readonly,
          uiSchema,
          registry
        }
      ) })
    ] })
  ] });
}

// src/SubmitButton/SubmitButton.tsx
import { Box as Box3, Button as Button2 } from "@chakra-ui/react";
import { getSubmitButtonOptions } from "@rjsf/utils";
import { jsx as jsx13 } from "react/jsx-runtime";
function SubmitButton({ uiSchema }) {
  const { submitText, norender, props: submitButtonProps } = getSubmitButtonOptions(uiSchema);
  if (norender) {
    return null;
  }
  return /* @__PURE__ */ jsx13(Box3, { marginTop: 3, children: /* @__PURE__ */ jsx13(Button2, { type: "submit", variant: "solid", ...submitButtonProps, children: submitText }) });
}

// src/TitleField/TitleField.tsx
import { Box as Box4, Divider, Heading } from "@chakra-ui/react";
import { jsx as jsx14, jsxs as jsxs7 } from "react/jsx-runtime";
function TitleField({
  id,
  title
}) {
  return /* @__PURE__ */ jsxs7(Box4, { id, mt: 1, mb: 4, children: [
    /* @__PURE__ */ jsx14(Heading, { as: "h5", children: title }),
    /* @__PURE__ */ jsx14(Divider, {})
  ] });
}

// src/WrapIfAdditionalTemplate/WrapIfAdditionalTemplate.tsx
import {
  ADDITIONAL_PROPERTY_FLAG,
  TranslatableString as TranslatableString4
} from "@rjsf/utils";
import { FormControl as FormControl3, FormLabel as FormLabel2, Grid as Grid3, GridItem as GridItem3, Input as Input2 } from "@chakra-ui/react";
import { jsx as jsx15, jsxs as jsxs8 } from "react/jsx-runtime";
function WrapIfAdditionalTemplate(props) {
  const {
    children,
    classNames,
    style,
    disabled,
    id,
    label,
    onDropPropertyClick,
    onKeyChange,
    readonly,
    registry,
    required,
    schema,
    uiSchema
  } = props;
  const { templates, translateString } = registry;
  const { RemoveButton: RemoveButton2 } = templates.ButtonTemplates;
  const keyLabel = translateString(TranslatableString4.KeyLabel, [label]);
  const additional = ADDITIONAL_PROPERTY_FLAG in schema;
  if (!additional) {
    return /* @__PURE__ */ jsx15("div", { className: classNames, style, children });
  }
  const handleBlur = ({ target }) => onKeyChange(target.value);
  return /* @__PURE__ */ jsxs8(Grid3, { className: classNames, style, alignItems: "center", gap: 2, children: [
    /* @__PURE__ */ jsx15(GridItem3, { children: /* @__PURE__ */ jsxs8(FormControl3, { isRequired: required, children: [
      /* @__PURE__ */ jsx15(FormLabel2, { htmlFor: `${id}-key`, id: `${id}-key-label`, children: keyLabel }),
      /* @__PURE__ */ jsx15(
        Input2,
        {
          defaultValue: label,
          disabled: disabled || readonly,
          id: `${id}-key`,
          name: `${id}-key`,
          onBlur: !readonly ? handleBlur : void 0,
          type: "text",
          mb: 1
        }
      )
    ] }) }),
    /* @__PURE__ */ jsx15(GridItem3, { children }),
    /* @__PURE__ */ jsx15(GridItem3, { children: /* @__PURE__ */ jsx15(
      RemoveButton2,
      {
        disabled: disabled || readonly,
        onClick: onDropPropertyClick(label),
        uiSchema,
        registry
      }
    ) })
  ] }, `${id}-key`);
}

// src/Templates/Templates.ts
function generateTemplates() {
  return {
    ArrayFieldItemTemplate,
    ArrayFieldTemplate,
    BaseInputTemplate,
    ButtonTemplates: {
      CopyButton,
      AddButton,
      MoveDownButton,
      MoveUpButton,
      RemoveButton,
      SubmitButton
    },
    DescriptionFieldTemplate: DescriptionField,
    ErrorListTemplate: ErrorList,
    FieldErrorTemplate,
    FieldHelpTemplate,
    FieldTemplate,
    ObjectFieldTemplate,
    TitleFieldTemplate: TitleField,
    WrapIfAdditionalTemplate
  };
}
var Templates_default = generateTemplates();

// src/AltDateWidget/AltDateWidget.tsx
import { useEffect, useState } from "react";
import {
  ariaDescribedByIds as ariaDescribedByIds2,
  dateRangeOptions,
  getDateElementProps,
  parseDateString,
  toDateString,
  TranslatableString as TranslatableString5
} from "@rjsf/utils";
import { Box as Box5, Button as Button3 } from "@chakra-ui/react";
import { jsx as jsx16, jsxs as jsxs9 } from "react/jsx-runtime";
function DateElement(props) {
  const { SelectWidget: SelectWidget2 } = props.registry.widgets;
  const value = props.value ? props.value : void 0;
  return /* @__PURE__ */ jsx16(
    SelectWidget2,
    {
      ...props,
      label: "",
      className: "form-control",
      onChange: (elemValue) => props.select(props.type, elemValue),
      options: {
        enumOptions: dateRangeOptions(props.range[0], props.range[1])
      },
      placeholder: props.type,
      schema: { type: "integer" },
      value,
      "aria-describedby": ariaDescribedByIds2(props.name)
    }
  );
}
var readyForChange = (state) => {
  return Object.keys(state).every((key) => typeof state[key] !== "undefined" && state[key] !== -1);
};
function AltDateWidget(props) {
  const { autofocus, disabled, id, onBlur, onChange, onFocus, options, readonly, registry, showTime, value } = props;
  const { translateString } = registry;
  const [state, setState] = useState(parseDateString(value, showTime));
  useEffect(() => {
    setState(parseDateString(value, showTime));
  }, [showTime, value]);
  const handleChange = (property, nextValue) => {
    const nextState = {
      ...state,
      [property]: typeof nextValue === "undefined" ? -1 : nextValue
    };
    if (readyForChange(nextState)) {
      onChange(toDateString(nextState, showTime));
    } else {
      setState(nextState);
    }
  };
  const handleNow = (event) => {
    event.preventDefault();
    if (disabled || readonly) {
      return;
    }
    const nextState = parseDateString((/* @__PURE__ */ new Date()).toJSON(), showTime);
    onChange(toDateString(nextState, showTime));
  };
  const handleClear = (event) => {
    event.preventDefault();
    if (disabled || readonly) {
      return;
    }
    onChange(void 0);
  };
  return /* @__PURE__ */ jsxs9(Box5, { children: [
    /* @__PURE__ */ jsx16(Box5, { display: "flex", flexWrap: "wrap", alignItems: "center", children: getDateElementProps(
      state,
      showTime,
      options.yearsRange,
      options.format
    ).map((elemProps, i) => {
      const elemId = id + "_" + elemProps.type;
      return /* @__PURE__ */ jsx16(Box5, { mr: "2", mb: "2", children: /* @__PURE__ */ jsx16(
        DateElement,
        {
          ...props,
          ...elemProps,
          autofocus: autofocus && i === 0,
          disabled,
          id: elemId,
          name: id,
          onBlur,
          onFocus,
          readonly,
          registry,
          select: handleChange,
          value: elemProps.value < 0 ? "" : elemProps.value
        }
      ) }, elemId);
    }) }),
    /* @__PURE__ */ jsxs9(Box5, { display: "flex", children: [
      !options.hideNowButton && /* @__PURE__ */ jsx16(Button3, { onClick: (e) => handleNow(e), mr: "2", children: translateString(TranslatableString5.NowLabel) }),
      !options.hideClearButton && /* @__PURE__ */ jsx16(Button3, { onClick: (e) => handleClear(e), children: translateString(TranslatableString5.ClearLabel) })
    ] })
  ] });
}
AltDateWidget.defaultProps = {
  autofocus: false,
  disabled: false,
  readonly: false,
  showTime: false,
  options: {
    yearsRange: [1900, (/* @__PURE__ */ new Date()).getFullYear() + 2]
  }
};
var AltDateWidget_default = AltDateWidget;

// src/AltDateTimeWidget/AltDateTimeWidget.tsx
import { jsx as jsx17 } from "react/jsx-runtime";
function AltDateTimeWidget(props) {
  const { AltDateWidget: AltDateWidget2 } = props.registry.widgets;
  return /* @__PURE__ */ jsx17(AltDateWidget2, { ...props, showTime: true });
}
AltDateTimeWidget.defaultProps = {
  ...AltDateWidget_default.defaultProps,
  showTime: true
};
var AltDateTimeWidget_default = AltDateTimeWidget;

// src/CheckboxWidget/CheckboxWidget.tsx
import { Checkbox, FormControl as FormControl4, Text as Text3 } from "@chakra-ui/react";
import {
  ariaDescribedByIds as ariaDescribedByIds3,
  descriptionId as descriptionId2,
  getTemplate as getTemplate4,
  labelValue as labelValue2,
  schemaRequiresTrueValue
} from "@rjsf/utils";
import { jsx as jsx18, jsxs as jsxs10 } from "react/jsx-runtime";
function CheckboxWidget(props) {
  const {
    id,
    value,
    disabled,
    readonly,
    onChange,
    onBlur,
    onFocus,
    label,
    hideLabel,
    registry,
    options,
    uiSchema,
    schema
  } = props;
  const chakraProps = getChakra({ uiSchema });
  const required = schemaRequiresTrueValue(schema);
  const DescriptionFieldTemplate = getTemplate4(
    "DescriptionFieldTemplate",
    registry,
    options
  );
  const description = options.description || schema.description;
  const _onChange = ({ target: { checked } }) => onChange(checked);
  const _onBlur = ({ target }) => onBlur(id, target && target.value);
  const _onFocus = ({ target }) => onFocus(id, target && target.value);
  return /* @__PURE__ */ jsxs10(FormControl4, { mb: 1, ...chakraProps, isRequired: required, children: [
    !hideLabel && !!description && /* @__PURE__ */ jsx18(
      DescriptionFieldTemplate,
      {
        id: descriptionId2(id),
        description,
        schema,
        uiSchema,
        registry
      }
    ),
    /* @__PURE__ */ jsx18(
      Checkbox,
      {
        id,
        name: id,
        isChecked: typeof value === "undefined" ? false : value,
        isDisabled: disabled || readonly,
        onChange: _onChange,
        onBlur: _onBlur,
        onFocus: _onFocus,
        "aria-describedby": ariaDescribedByIds3(id),
        children: labelValue2(/* @__PURE__ */ jsx18(Text3, { children: label }), hideLabel || !label)
      }
    )
  ] });
}

// src/CheckboxesWidget/CheckboxesWidget.tsx
import { CheckboxGroup, Checkbox as Checkbox2, FormLabel as FormLabel3, FormControl as FormControl5, Text as Text4, Stack } from "@chakra-ui/react";
import {
  ariaDescribedByIds as ariaDescribedByIds4,
  enumOptionsIndexForValue,
  enumOptionsIsSelected,
  enumOptionsValueForIndex,
  labelValue as labelValue3,
  optionId
} from "@rjsf/utils";
import { jsx as jsx19, jsxs as jsxs11 } from "react/jsx-runtime";
function CheckboxesWidget(props) {
  const {
    id,
    disabled,
    options,
    value,
    readonly,
    onChange,
    onBlur,
    onFocus,
    required,
    label,
    hideLabel,
    uiSchema,
    rawErrors = []
  } = props;
  const { enumOptions, enumDisabled, emptyValue } = options;
  const chakraProps = getChakra({ uiSchema });
  const checkboxesValues = Array.isArray(value) ? value : [value];
  const _onBlur = ({ target }) => onBlur(id, enumOptionsValueForIndex(target && target.value, enumOptions, emptyValue));
  const _onFocus = ({ target }) => onFocus(id, enumOptionsValueForIndex(target && target.value, enumOptions, emptyValue));
  const row = options ? options.inline : false;
  const selectedIndexes = enumOptionsIndexForValue(value, enumOptions, true);
  return /* @__PURE__ */ jsxs11(
    FormControl5,
    {
      mb: 1,
      ...chakraProps,
      isDisabled: disabled || readonly,
      isRequired: required,
      isReadOnly: readonly,
      isInvalid: rawErrors && rawErrors.length > 0,
      children: [
        labelValue3(
          /* @__PURE__ */ jsx19(FormLabel3, { htmlFor: id, id: `${id}-label`, children: label }),
          hideLabel || !label
        ),
        /* @__PURE__ */ jsx19(
          CheckboxGroup,
          {
            onChange: (option) => onChange(enumOptionsValueForIndex(option, enumOptions, emptyValue)),
            defaultValue: selectedIndexes,
            "aria-describedby": ariaDescribedByIds4(id),
            children: /* @__PURE__ */ jsx19(Stack, { direction: row ? "row" : "column", children: Array.isArray(enumOptions) && enumOptions.map((option, index) => {
              const checked = enumOptionsIsSelected(option.value, checkboxesValues);
              const itemDisabled = Array.isArray(enumDisabled) && enumDisabled.indexOf(option.value) !== -1;
              return /* @__PURE__ */ jsx19(
                Checkbox2,
                {
                  id: optionId(id, index),
                  name: id,
                  value: String(index),
                  isChecked: checked,
                  isDisabled: disabled || itemDisabled || readonly,
                  onBlur: _onBlur,
                  onFocus: _onFocus,
                  children: option.label && /* @__PURE__ */ jsx19(Text4, { children: option.label })
                },
                index
              );
            }) })
          }
        )
      ]
    }
  );
}

// src/RadioWidget/RadioWidget.tsx
import { FormControl as FormControl6, FormLabel as FormLabel4, Radio, RadioGroup, Stack as Stack2 } from "@chakra-ui/react";
import {
  ariaDescribedByIds as ariaDescribedByIds5,
  enumOptionsIndexForValue as enumOptionsIndexForValue2,
  enumOptionsValueForIndex as enumOptionsValueForIndex2,
  labelValue as labelValue4,
  optionId as optionId2
} from "@rjsf/utils";
import { jsx as jsx20, jsxs as jsxs12 } from "react/jsx-runtime";
function RadioWidget({
  id,
  options,
  value,
  required,
  disabled,
  readonly,
  label,
  hideLabel,
  onChange,
  onBlur,
  onFocus,
  uiSchema
}) {
  const { enumOptions, enumDisabled, emptyValue } = options;
  const chakraProps = getChakra({ uiSchema });
  const _onChange = (nextValue) => onChange(enumOptionsValueForIndex2(nextValue, enumOptions, emptyValue));
  const _onBlur = ({ target: { value: value2 } }) => onBlur(id, enumOptionsValueForIndex2(value2, enumOptions, emptyValue));
  const _onFocus = ({ target: { value: value2 } }) => onFocus(id, enumOptionsValueForIndex2(value2, enumOptions, emptyValue));
  const row = options ? options.inline : false;
  const selectedIndex = enumOptionsIndexForValue2(value, enumOptions) ?? null;
  return /* @__PURE__ */ jsxs12(FormControl6, { mb: 1, ...chakraProps, isDisabled: disabled || readonly, isRequired: required, isReadOnly: readonly, children: [
    labelValue4(
      /* @__PURE__ */ jsx20(FormLabel4, { htmlFor: id, id: `${id}-label`, children: label }),
      hideLabel || !label
    ),
    /* @__PURE__ */ jsx20(
      RadioGroup,
      {
        onChange: _onChange,
        onBlur: _onBlur,
        onFocus: _onFocus,
        value: selectedIndex,
        name: id,
        "aria-describedby": ariaDescribedByIds5(id),
        children: /* @__PURE__ */ jsx20(Stack2, { direction: row ? "row" : "column", children: Array.isArray(enumOptions) && enumOptions.map((option, index) => {
          const itemDisabled = Array.isArray(enumDisabled) && enumDisabled.indexOf(option.value) !== -1;
          return /* @__PURE__ */ jsx20(
            Radio,
            {
              value: String(index),
              id: optionId2(id, index),
              disabled: disabled || itemDisabled || readonly,
              children: option.label
            },
            index
          );
        }) })
      }
    )
  ] });
}

// src/RangeWidget/RangeWidget.tsx
import { FormControl as FormControl7, FormLabel as FormLabel5, Slider, SliderFilledTrack, SliderThumb, SliderTrack } from "@chakra-ui/react";
import {
  ariaDescribedByIds as ariaDescribedByIds6,
  labelValue as labelValue5,
  rangeSpec
} from "@rjsf/utils";
import { jsx as jsx21, jsxs as jsxs13 } from "react/jsx-runtime";
function RangeWidget({
  value,
  readonly,
  disabled,
  onBlur,
  onFocus,
  options,
  schema,
  uiSchema,
  onChange,
  label,
  hideLabel,
  id
}) {
  const chakraProps = getChakra({ uiSchema });
  const sliderWidgetProps = { value, label, id, ...rangeSpec(schema) };
  const _onChange = (value2) => onChange(value2 === void 0 ? options.emptyValue : value2);
  const _onBlur = ({ target }) => onBlur(id, target && target.value);
  const _onFocus = ({ target }) => onFocus(id, target && target.value);
  return /* @__PURE__ */ jsxs13(FormControl7, { mb: 1, ...chakraProps, children: [
    labelValue5(/* @__PURE__ */ jsx21(FormLabel5, { htmlFor: id, children: label }), hideLabel || !label),
    /* @__PURE__ */ jsxs13(
      Slider,
      {
        ...sliderWidgetProps,
        id,
        name: id,
        isDisabled: disabled || readonly,
        onChange: _onChange,
        onBlur: _onBlur,
        onFocus: _onFocus,
        "aria-describedby": ariaDescribedByIds6(id),
        children: [
          /* @__PURE__ */ jsx21(SliderTrack, { children: /* @__PURE__ */ jsx21(SliderFilledTrack, {}) }),
          /* @__PURE__ */ jsx21(SliderThumb, {})
        ]
      }
    )
  ] });
}

// src/SelectWidget/SelectWidget.tsx
import { useMemo as useMemo2 } from "react";
import { FormControl as FormControl8, FormLabel as FormLabel6 } from "@chakra-ui/react";
import {
  ariaDescribedByIds as ariaDescribedByIds7,
  enumOptionsIndexForValue as enumOptionsIndexForValue3,
  enumOptionsValueForIndex as enumOptionsValueForIndex3,
  labelValue as labelValue6
} from "@rjsf/utils";
import { Select } from "chakra-react-select";
import { jsx as jsx22, jsxs as jsxs14 } from "react/jsx-runtime";
function SelectWidget(props) {
  const {
    id,
    options,
    label,
    hideLabel,
    placeholder,
    multiple,
    required,
    disabled,
    readonly,
    value,
    autofocus,
    onChange,
    onBlur,
    onFocus,
    rawErrors = [],
    uiSchema,
    schema
  } = props;
  const { enumOptions, enumDisabled, emptyValue } = options;
  const chakraProps = getChakra({ uiSchema });
  const _onMultiChange = (e) => {
    return onChange(
      enumOptionsValueForIndex3(
        e.map((v) => {
          return v.value;
        }),
        enumOptions,
        emptyValue
      )
    );
  };
  const _onChange = (e) => {
    return onChange(enumOptionsValueForIndex3(e.value, enumOptions, emptyValue));
  };
  const _onBlur = ({ target }) => onBlur(id, enumOptionsValueForIndex3(target && target.value, enumOptions, emptyValue));
  const _onFocus = ({ target }) => onFocus(id, enumOptionsValueForIndex3(target && target.value, enumOptions, emptyValue));
  const showPlaceholderOption = !multiple && schema.default === void 0;
  const { valueLabelMap, displayEnumOptions } = useMemo2(() => {
    const valueLabelMap2 = {};
    let displayEnumOptions2 = [];
    if (Array.isArray(enumOptions)) {
      displayEnumOptions2 = enumOptions.map((option, index) => {
        const { value: value2, label: label2 } = option;
        valueLabelMap2[index] = label2 || String(value2);
        return {
          label: label2,
          value: String(index),
          isDisabled: Array.isArray(enumDisabled) && enumDisabled.indexOf(value2) !== -1
        };
      });
      if (showPlaceholderOption) {
        displayEnumOptions2.unshift({ value: "", label: placeholder || "" });
      }
    }
    return { valueLabelMap: valueLabelMap2, displayEnumOptions: displayEnumOptions2 };
  }, [enumDisabled, enumOptions, placeholder, showPlaceholderOption]);
  const isMultiple = typeof multiple !== "undefined" && multiple !== false && Boolean(enumOptions);
  const selectedIndex = enumOptionsIndexForValue3(value, enumOptions, isMultiple);
  const formValue = isMultiple ? (selectedIndex || []).map((i) => {
    return {
      label: valueLabelMap[i],
      value: i
    };
  }) : {
    label: valueLabelMap[selectedIndex] || "",
    selectedIndex
  };
  return /* @__PURE__ */ jsxs14(
    FormControl8,
    {
      mb: 1,
      ...chakraProps,
      isDisabled: disabled || readonly,
      isRequired: required,
      isReadOnly: readonly,
      isInvalid: rawErrors && rawErrors.length > 0,
      children: [
        labelValue6(
          /* @__PURE__ */ jsx22(FormLabel6, { htmlFor: id, id: `${id}-label`, children: label }),
          hideLabel || !label
        ),
        /* @__PURE__ */ jsx22(
          Select,
          {
            inputId: id,
            name: id,
            isMulti: isMultiple,
            options: displayEnumOptions,
            placeholder,
            closeMenuOnSelect: !isMultiple,
            onBlur: _onBlur,
            onChange: isMultiple ? _onMultiChange : _onChange,
            onFocus: _onFocus,
            autoFocus: autofocus,
            value: formValue,
            "aria-describedby": ariaDescribedByIds7(id)
          }
        )
      ]
    }
  );
}

// src/TextareaWidget/TextareaWidget.tsx
import { FormControl as FormControl9, FormLabel as FormLabel7, Textarea } from "@chakra-ui/react";
import {
  ariaDescribedByIds as ariaDescribedByIds8,
  labelValue as labelValue7
} from "@rjsf/utils";
import { jsx as jsx23, jsxs as jsxs15 } from "react/jsx-runtime";
function TextareaWidget({
  id,
  placeholder,
  value,
  label,
  hideLabel,
  disabled,
  autofocus,
  readonly,
  onBlur,
  onFocus,
  onChange,
  options,
  uiSchema,
  required,
  rawErrors
}) {
  const chakraProps = getChakra({ uiSchema });
  const _onChange = ({ target: { value: value2 } }) => onChange(value2 === "" ? options.emptyValue : value2);
  const _onBlur = ({ target }) => onBlur(id, target && target.value);
  const _onFocus = ({ target }) => onFocus(id, target && target.value);
  return /* @__PURE__ */ jsxs15(
    FormControl9,
    {
      mb: 1,
      ...chakraProps,
      isDisabled: disabled || readonly,
      isRequired: required,
      isReadOnly: readonly,
      isInvalid: rawErrors && rawErrors.length > 0,
      children: [
        labelValue7(/* @__PURE__ */ jsx23(FormLabel7, { htmlFor: id, children: label }), hideLabel || !label),
        /* @__PURE__ */ jsx23(
          Textarea,
          {
            id,
            name: id,
            value: value ?? "",
            placeholder,
            autoFocus: autofocus,
            onChange: _onChange,
            onBlur: _onBlur,
            onFocus: _onFocus,
            rows: options.rows,
            "aria-describedby": ariaDescribedByIds8(id)
          }
        )
      ]
    }
  );
}

// src/UpDownWidget/UpDownWidget.tsx
import {
  NumberInput,
  NumberDecrementStepper,
  NumberIncrementStepper,
  NumberInputField,
  NumberInputStepper,
  FormControl as FormControl10,
  FormLabel as FormLabel8
} from "@chakra-ui/react";
import {
  ariaDescribedByIds as ariaDescribedByIds9,
  labelValue as labelValue8
} from "@rjsf/utils";
import { jsx as jsx24, jsxs as jsxs16 } from "react/jsx-runtime";
function UpDownWidget(props) {
  const { id, uiSchema, readonly, disabled, label, hideLabel, value, onChange, onBlur, onFocus, rawErrors, required } = props;
  const chakraProps = getChakra({ uiSchema });
  const _onChange = (value2) => onChange(value2);
  const _onBlur = ({ target }) => onBlur(id, target && target.value);
  const _onFocus = ({ target }) => onFocus(id, target && target.value);
  return /* @__PURE__ */ jsxs16(
    FormControl10,
    {
      mb: 1,
      ...chakraProps,
      isDisabled: disabled || readonly,
      isRequired: required,
      isReadOnly: readonly,
      isInvalid: rawErrors && rawErrors.length > 0,
      children: [
        labelValue8(/* @__PURE__ */ jsx24(FormLabel8, { htmlFor: id, children: label }), hideLabel || !label),
        /* @__PURE__ */ jsxs16(
          NumberInput,
          {
            value: value ?? "",
            onChange: _onChange,
            onBlur: _onBlur,
            onFocus: _onFocus,
            "aria-describedby": ariaDescribedByIds9(id),
            children: [
              /* @__PURE__ */ jsx24(NumberInputField, { id, name: id }),
              /* @__PURE__ */ jsxs16(NumberInputStepper, { children: [
                /* @__PURE__ */ jsx24(NumberIncrementStepper, {}),
                /* @__PURE__ */ jsx24(NumberDecrementStepper, {})
              ] })
            ]
          }
        )
      ]
    }
  );
}

// src/Widgets/Widgets.ts
function generateWidgets() {
  return {
    AltDateTimeWidget: AltDateTimeWidget_default,
    AltDateWidget: AltDateWidget_default,
    CheckboxWidget,
    CheckboxesWidget,
    RadioWidget,
    RangeWidget,
    SelectWidget,
    TextareaWidget,
    UpDownWidget
  };
}
var Widgets_default = generateWidgets();

// src/Theme/Theme.tsx
function generateTheme() {
  return {
    templates: generateTemplates(),
    widgets: generateWidgets()
  };
}
var Theme_default = generateTheme();

// src/Form/Form.tsx
function generateForm() {
  return withTheme(generateTheme());
}
var Form_default = generateForm();

// src/ChakraFrameProvider.tsx
import { CacheProvider } from "@emotion/react";
import createCache from "@emotion/cache";
import weakMemoize from "@emotion/weak-memoize";
import { ChakraProvider } from "@chakra-ui/react";

// src/CssReset.tsx
import { Global } from "@emotion/react";
import { jsx as jsx25 } from "react/jsx-runtime";
var CSSReset = () => /* @__PURE__ */ jsx25(
  Global,
  {
    styles: `
      html {
        line-height: 1.5;
        -webkit-text-size-adjust: 100%;
        font-family: system-ui, sans-serif;
        -webkit-font-smoothing: antialiased;
        text-rendering: optimizeLegibility;
        -moz-osx-font-smoothing: grayscale;
        touch-action: manipulation;
      }
      body {
        position: relative;
        min-height: 100%;
        font-feature-settings: 'kern';
      }
      *,
      *::before,
      *::after {
        border-width: 0;
        border-style: solid;
        box-sizing: border-box;
      }
      main {
        display: block;
      }
      hr {
        border-top-width: 1px;
        box-sizing: content-box;
        height: 0;
        overflow: visible;
      }
      pre,
      code,
      kbd,
      samp {
        font-family: SFMono-Regular,  Menlo, Monaco, Consolas, monospace;
        font-size: 1em;
      }
      a {
        background-color: transparent;
        color: inherit;
        text-decoration: inherit;
      }
      abbr[title] {
        border-bottom: none;
        text-decoration: underline;
        -webkit-text-decoration: underline dotted;
        text-decoration: underline dotted;
      }
      b,
      strong {
        font-weight: bold;
      }
      small {
        font-size: 80%;
      }
      sub,
      sup {
        font-size: 75%;
        line-height: 0;
        position: relative;
        vertical-align: baseline;
      }
      sub {
        bottom: -0.25em;
      }
      sup {
        top: -0.5em;
      }
      img {
        border-style: none;
      }
      button,
      input,
      optgroup,
      select,
      textarea {
        font-family: inherit;
        font-size: 100%;
        line-height: 1.15;
        margin: 0;
      }
      button,
      input {
        overflow: visible;
      }
      button,
      select {
        text-transform: none;
      }
      button::-moz-focus-inner,
      [type="button"]::-moz-focus-inner,
      [type="reset"]::-moz-focus-inner,
      [type="submit"]::-moz-focus-inner {
        border-style: none;
        padding: 0;
      }
      fieldset {
        padding: 0.35em 0.75em 0.625em;
      }
      legend {
        box-sizing: border-box;
        color: inherit;
        display: table;
        max-width: 100%;
        padding: 0;
        white-space: normal;
      }
      progress {
        vertical-align: baseline;
      }
      textarea {
        overflow: auto;
      }
      [type="checkbox"],
      [type="radio"] {
        box-sizing: border-box;
        padding: 0;
      }
      [type="number"]::-webkit-inner-spin-button,
      [type="number"]::-webkit-outer-spin-button {
        -webkit-appearance: none !important;
      }
      input[type="number"] {
        -moz-appearance: textfield;
      }
      [type="search"] {
        -webkit-appearance: textfield;
        outline-offset: -2px;
      }
      [type="search"]::-webkit-search-decoration {
        -webkit-appearance: none !important;
      }
      ::-webkit-file-upload-button {
        -webkit-appearance: button;
        font: inherit;
      }
      details {
        display: block;
      }
      summary {
        display: list-item;
      }
      template {
        display: none;
      }
      [hidden] {
        display: none !important;
      }
      body,
      blockquote,
      dl,
      dd,
      h1,
      h2,
      h3,
      h4,
      h5,
      h6,
      hr,
      figure,
      p,
      pre {
        margin: 0;
      }
      button {
        background: transparent;
        padding: 0;
      }
      fieldset {
        margin: 0;
        padding: 0;
      }
      ol,
      ul {
        margin: 0;
        padding: 0;
      }
      textarea {
        resize: vertical;
      }
      button,
      [role="button"] {
        cursor: pointer;
      }
      button::-moz-focus-inner {
        border: 0 !important;
      }
      table {
        border-collapse: collapse;
      }
      h1,
      h2,
      h3,
      h4,
      h5,
      h6 {
        font-size: inherit;
        font-weight: inherit;
      }
      button,
      input,
      optgroup,
      select,
      textarea {
        padding: 0;
        line-height: inherit;
        color: inherit;
      }
      img,
      svg,
      video,
      canvas,
      audio,
      iframe,
      embed,
      object {
        display: block;
      }
      img,
      video {
        max-width: 100%;
        height: auto;
      }
      [data-js-focus-visible] :focus:not([data-focus-visible-added]) {
        outline: none;
        box-shadow: none;
      }
      select::-ms-expand {
        display: none;
      }
      input {
        border-width: revert;
        border-color: revert;
        border-style: revert;
      }
      .array-item > hr {
        margin-top: 16px;
        margin-bottom: 16px;
      }
    `
  }
);
var CssReset_default = CSSReset;

// src/ChakraFrameProvider.tsx
import { jsx as jsx26, jsxs as jsxs17 } from "react/jsx-runtime";
var memoizedCreateCacheWithContainer = weakMemoize((container) => {
  const newCache = createCache({ container, key: "rjsf" });
  return newCache;
});
var __createChakraFrameProvider = (props) => ({ document }) => {
  return /* @__PURE__ */ jsx26("div", { style: { margin: 2 }, children: /* @__PURE__ */ jsx26(CacheProvider, { value: memoizedCreateCacheWithContainer(document.head), children: /* @__PURE__ */ jsxs17(ChakraProvider, { resetCSS: false, children: [
    /* @__PURE__ */ jsx26(CssReset_default, {}),
    props.children
  ] }) }) });
};

// src/index.ts
var src_default = Form_default;
export {
  Form_default as Form,
  Templates_default as Templates,
  Theme_default as Theme,
  Widgets_default as Widgets,
  __createChakraFrameProvider,
  src_default as default,
  generateForm,
  generateTemplates,
  generateTheme,
  generateWidgets
};
//# sourceMappingURL=chakra-ui.esm.js.map
