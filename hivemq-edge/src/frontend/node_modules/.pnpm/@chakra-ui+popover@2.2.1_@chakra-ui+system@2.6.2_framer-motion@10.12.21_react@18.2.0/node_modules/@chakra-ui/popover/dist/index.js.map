{"version":3,"sources":["../src/index.ts","../src/popover.tsx","../src/popover-context.ts","../src/use-popover.ts","../src/popover-anchor.tsx","../src/popover-arrow.tsx","../src/popover-body.tsx","../src/popover-close-button.tsx","../src/popover-content.tsx","../src/popover-transition.tsx","../src/popover-footer.tsx","../src/popover-header.tsx","../src/popover-trigger.tsx"],"sourcesContent":["export { Popover } from \"./popover\"\nexport type { PopoverProps } from \"./popover\"\nexport {\n  usePopover,\n  type UsePopoverProps,\n  type UsePopoverReturn,\n} from \"./use-popover\"\nexport { PopoverAnchor } from \"./popover-anchor\"\nexport { PopoverArrow } from \"./popover-arrow\"\nexport type { PopoverArrowProps } from \"./popover-arrow\"\nexport { PopoverBody } from \"./popover-body\"\nexport type { PopoverBodyProps } from \"./popover-body\"\nexport {\n  PopoverCloseButton,\n  type PopoverCloseButtonProps,\n} from \"./popover-close-button\"\nexport { PopoverContent } from \"./popover-content\"\nexport type { PopoverContentProps } from \"./popover-content\"\nexport { PopoverFooter } from \"./popover-footer\"\nexport type { PopoverFooterProps } from \"./popover-footer\"\nexport { PopoverHeader } from \"./popover-header\"\nexport type { PopoverHeaderProps } from \"./popover-header\"\nexport { PopoverTrigger } from \"./popover-trigger\"\nexport { usePopoverStyles, usePopoverContext } from \"./popover-context\"\n","import { MaybeRenderProp } from \"@chakra-ui/react-types\"\nimport {\n  omitThemingProps,\n  ThemingProps,\n  useMultiStyleConfig,\n  useTheme,\n} from \"@chakra-ui/system\"\nimport { runIfFn } from \"@chakra-ui/shared-utils\"\nimport { PopoverProvider, PopoverStylesProvider } from \"./popover-context\"\nimport { usePopover, UsePopoverProps } from \"./use-popover\"\n\nexport interface PopoverProps extends UsePopoverProps, ThemingProps<\"Popover\"> {\n  /**\n   * The content of the popover. It is usually the `PopoverTrigger`,\n   * and `PopoverContent`\n   */\n  children?: MaybeRenderProp<{\n    isOpen: boolean\n    onClose: () => void\n    forceUpdate: (() => void) | undefined\n  }>\n}\n\n/**\n * Popover is used to bring attention to specific user interface elements,\n * typically to suggest an action or to guide users through a new experience.\n *\n * @see Docs https://chakra-ui.com/docs/components/popover\n */\nexport function Popover(props: PopoverProps) {\n  const styles = useMultiStyleConfig(\"Popover\", props)\n\n  const { children, ...rest } = omitThemingProps(props)\n  const theme = useTheme()\n  const context = usePopover({ ...rest, direction: theme.direction })\n\n  return (\n    <PopoverProvider value={context}>\n      <PopoverStylesProvider value={styles}>\n        {runIfFn(children, {\n          isOpen: context.isOpen,\n          onClose: context.onClose,\n          forceUpdate: context.forceUpdate,\n        })}\n      </PopoverStylesProvider>\n    </PopoverProvider>\n  )\n}\n\nPopover.displayName = \"Popover\"\n","import { createContext } from \"@chakra-ui/react-context\"\nimport { SystemStyleObject } from \"@chakra-ui/system\"\nimport { UsePopoverReturn } from \"./use-popover\"\n\nexport const [PopoverProvider, usePopoverContext] =\n  createContext<UsePopoverReturn>({\n    name: \"PopoverContext\",\n    errorMessage:\n      \"usePopoverContext: `context` is undefined. Seems you forgot to wrap all popover components within `<Popover />`\",\n  })\n\nexport const [PopoverStylesProvider, usePopoverStyles] = createContext<\n  Record<string, SystemStyleObject>\n>({\n  name: `PopoverStylesContext`,\n  errorMessage: `usePopoverStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<Popover />\" `,\n})\n","import { useAnimationState } from \"@chakra-ui/react-use-animation-state\"\nimport { useFocusOnPointerDown } from \"@chakra-ui/react-use-focus-on-pointer-down\"\nimport {\n  useFocusOnHide,\n  useFocusOnShow,\n} from \"@chakra-ui/react-use-focus-effect\"\nimport { useDisclosure } from \"@chakra-ui/react-use-disclosure\"\nimport { popperCSSVars, usePopper, UsePopperProps } from \"@chakra-ui/popper\"\nimport { DOMAttributes, PropGetter } from \"@chakra-ui/react-types\"\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\"\nimport { callAllHandlers } from \"@chakra-ui/shared-utils\"\nimport { lazyDisclosure, LazyMode } from \"@chakra-ui/lazy-utils\"\nimport { useCallback, useEffect, useId, useRef, useState } from \"react\"\n\nconst TRIGGER = {\n  click: \"click\",\n  hover: \"hover\",\n} as const\n\nexport interface UsePopoverProps extends Omit<UsePopperProps, \"enabled\"> {\n  /**\n   * The html `id` attribute of the popover.\n   * If not provided, we generate a unique id.\n   *\n   * This `id` is also used to auto-generate the `aria-labelledby`\n   * and `aria-describedby` attributes that points to the `PopoverHeader` and `PopoverBody`\n   */\n  id?: string\n  /**\n   * If `true`, the popover will be opened in controlled mode.\n   */\n  isOpen?: boolean\n  /**\n   * If `true`, the popover will be initially opened.\n   */\n  defaultIsOpen?: boolean\n  /**\n   * The `ref` of the element that should receive focus when the popover opens.\n   */\n  initialFocusRef?: React.RefObject<{ focus(): void }>\n  /**\n   * If `true`, focus will be returned to the element that triggers the popover\n   * when it closes\n   * @default true\n   */\n  returnFocusOnClose?: boolean\n  /**\n   * If `true`, focus will be transferred to the first interactive element\n   * when the popover opens\n   * @default true\n   */\n  autoFocus?: boolean\n  /**\n   * If `true`, the popover will close when you blur out it by\n   * clicking outside or tabbing out\n   * @default true\n   */\n  closeOnBlur?: boolean\n  /**\n   * If `true`, the popover will close when you hit the `Esc` key\n   * @default true\n   */\n  closeOnEsc?: boolean\n  /**\n   * Callback fired when the popover opens\n   */\n  onOpen?: () => void\n  /**\n   * Callback fired when the popover closes\n   */\n  onClose?: () => void\n  /**\n   * The size of the popover arrow\n   */\n  arrowSize?: number\n  /**\n   * The `box-shadow` of the popover arrow\n   */\n  arrowShadowColor?: string\n  /**\n   * The interaction that triggers the popover.\n   *\n   * `hover` - means the popover will open when you hover with mouse or\n   * focus with keyboard on the popover trigger\n   *\n   * `click` - means the popover will open on click or\n   * press `Enter` to `Space` on keyboard\n   *\n   * @default \"click\"\n   */\n  trigger?: keyof typeof TRIGGER\n  /**\n   * Delay in milliseconds before the popover opens after a trigger event.\n   * Only works when `trigger=\"hover\"`\n   *\n   * @default 200\n   */\n  openDelay?: number\n  /**\n   * Delay in milliseconds before the popover closes after a trigger event.\n   * Only works when `trigger=\"hover\"`\n   *\n   * @default 200\n   */\n  closeDelay?: number\n  /**\n   * Performance ðŸš€:\n   * If `true`, the PopoverContent rendering will be deferred\n   * until the popover is open.\n   */\n  isLazy?: boolean\n  /**\n   * Performance ðŸš€:\n   * The lazy behavior of popover's content when not visible.\n   * Only works when `isLazy={true}`\n   *\n   * - \"unmount\": The popover's content is always unmounted when not open.\n   * - \"keepMounted\": The popover's content initially unmounted,\n   * but stays mounted when popover is open.\n   *\n   * @default \"unmount\"\n   */\n  lazyBehavior?: LazyMode\n  /**\n   * If `true`, the popover will be positioned when it mounts\n   * (even if it's not open)\n   *\n   * Note ðŸš¨: We don't recommend using this in a popover/menu intensive UI or page\n   * as it might affect scrolling performance.\n   */\n  computePositionOnMount?: boolean\n}\n\n/**\n * @internal\n */\nexport function usePopover(props: UsePopoverProps = {}) {\n  const {\n    closeOnBlur = true,\n    closeOnEsc = true,\n    initialFocusRef,\n    id,\n    returnFocusOnClose = true,\n    autoFocus = true,\n    arrowSize,\n    arrowShadowColor,\n    trigger = TRIGGER.click,\n    openDelay = 200,\n    closeDelay = 200,\n    isLazy,\n    lazyBehavior = \"unmount\",\n    computePositionOnMount,\n    ...popperProps\n  } = props\n\n  const { isOpen, onClose, onOpen, onToggle } = useDisclosure(props)\n\n  const anchorRef = useRef<HTMLElement>(null)\n  const triggerRef = useRef<HTMLElement>(null)\n  const popoverRef = useRef<HTMLElement>(null)\n\n  const isHoveringRef = useRef(false)\n\n  const hasBeenOpened = useRef(false)\n  if (isOpen) {\n    hasBeenOpened.current = true\n  }\n\n  const [hasHeader, setHasHeader] = useState(false)\n  const [hasBody, setHasBody] = useState(false)\n\n  const uuid = useId()\n  const uid = id ?? uuid\n  const [triggerId, popoverId, headerId, bodyId] = [\n    \"popover-trigger\",\n    \"popover-content\",\n    \"popover-header\",\n    \"popover-body\",\n  ].map((id) => `${id}-${uid}`)\n\n  const {\n    referenceRef,\n    getArrowProps,\n    getPopperProps,\n    getArrowInnerProps,\n    forceUpdate,\n  } = usePopper({\n    ...popperProps,\n    enabled: isOpen || !!computePositionOnMount,\n  })\n\n  const animated = useAnimationState({ isOpen, ref: popoverRef })\n\n  useFocusOnPointerDown({\n    enabled: isOpen,\n    ref: triggerRef,\n  })\n\n  useFocusOnHide(popoverRef, {\n    focusRef: triggerRef,\n    visible: isOpen,\n    shouldFocus: returnFocusOnClose && trigger === TRIGGER.click,\n  })\n\n  useFocusOnShow(popoverRef, {\n    focusRef: initialFocusRef,\n    visible: isOpen,\n    shouldFocus: autoFocus && trigger === TRIGGER.click,\n  })\n\n  const shouldRenderChildren = lazyDisclosure({\n    wasSelected: hasBeenOpened.current,\n    enabled: isLazy,\n    mode: lazyBehavior,\n    isSelected: animated.present,\n  })\n\n  const getPopoverProps: PropGetter = useCallback(\n    (props = {}, _ref = null) => {\n      const popoverProps: DOMAttributes = {\n        ...props,\n        style: {\n          ...props.style,\n          transformOrigin: popperCSSVars.transformOrigin.varRef,\n          [popperCSSVars.arrowSize.var]: arrowSize\n            ? `${arrowSize}px`\n            : undefined,\n          [popperCSSVars.arrowShadowColor.var]: arrowShadowColor,\n        },\n        ref: mergeRefs(popoverRef, _ref),\n        children: shouldRenderChildren ? props.children : null,\n        id: popoverId,\n        tabIndex: -1,\n        role: \"dialog\",\n        onKeyDown: callAllHandlers(props.onKeyDown, (event) => {\n          if (closeOnEsc && event.key === \"Escape\") {\n            onClose()\n          }\n        }),\n        onBlur: callAllHandlers(props.onBlur, (event) => {\n          const relatedTarget = getRelatedTarget(event)\n          const targetIsPopover = contains(popoverRef.current, relatedTarget)\n          const targetIsTrigger = contains(triggerRef.current, relatedTarget)\n\n          const isValidBlur = !targetIsPopover && !targetIsTrigger\n\n          if (isOpen && closeOnBlur && isValidBlur) {\n            onClose()\n          }\n        }),\n        \"aria-labelledby\": hasHeader ? headerId : undefined,\n        \"aria-describedby\": hasBody ? bodyId : undefined,\n      }\n\n      if (trigger === TRIGGER.hover) {\n        popoverProps.role = \"tooltip\"\n        popoverProps.onMouseEnter = callAllHandlers(props.onMouseEnter, () => {\n          isHoveringRef.current = true\n        })\n        popoverProps.onMouseLeave = callAllHandlers(\n          props.onMouseLeave,\n          (event) => {\n            // https://stackoverflow.com/questions/46831247/select-triggers-mouseleave-event-on-parent-element-in-mozilla-firefox\n            if (event.nativeEvent.relatedTarget === null) {\n              return\n            }\n            isHoveringRef.current = false\n            setTimeout(() => onClose(), closeDelay)\n          },\n        )\n      }\n\n      return popoverProps\n    },\n    [\n      shouldRenderChildren,\n      popoverId,\n      hasHeader,\n      headerId,\n      hasBody,\n      bodyId,\n      trigger,\n      closeOnEsc,\n      onClose,\n      isOpen,\n      closeOnBlur,\n      closeDelay,\n      arrowShadowColor,\n      arrowSize,\n    ],\n  )\n\n  const getPopoverPositionerProps: PropGetter = useCallback(\n    (props = {}, forwardedRef = null) =>\n      getPopperProps(\n        {\n          ...props,\n          style: {\n            visibility: isOpen ? \"visible\" : \"hidden\",\n            ...props.style,\n          },\n        },\n        forwardedRef,\n      ),\n    [isOpen, getPopperProps],\n  )\n\n  const getAnchorProps: PropGetter = useCallback(\n    (props, _ref = null) => {\n      return {\n        ...props,\n        // If anchor is rendered, it is used as reference.\n        ref: mergeRefs(_ref, anchorRef, referenceRef),\n      }\n    },\n    [anchorRef, referenceRef],\n  )\n\n  const openTimeout = useRef<number>()\n  const closeTimeout = useRef<number>()\n\n  const maybeReferenceRef = useCallback(\n    (node: Element) => {\n      // Don't override referenceRef in case the PopoverAnchor is rendered.\n      if (anchorRef.current == null) {\n        referenceRef(node)\n      }\n    },\n    [referenceRef],\n  )\n\n  const getTriggerProps: PropGetter = useCallback(\n    (props = {}, _ref = null) => {\n      const triggerProps: DOMAttributes = {\n        ...props,\n        ref: mergeRefs(triggerRef, _ref, maybeReferenceRef),\n        id: triggerId,\n        \"aria-haspopup\": \"dialog\",\n        \"aria-expanded\": isOpen,\n        \"aria-controls\": popoverId,\n      }\n\n      if (trigger === TRIGGER.click) {\n        triggerProps.onClick = callAllHandlers(props.onClick, onToggle)\n      }\n\n      if (trigger === TRIGGER.hover) {\n        /**\n         * Any content that shows on pointer hover should also show on keyboard focus.\n         * Consider focus and blur to be the `hover` for keyboard users.\n         *\n         * @see https://www.w3.org/WAI/WCAG21/Understanding/content-on-hover-or-focus.html\n         */\n        triggerProps.onFocus = callAllHandlers(props.onFocus, () => {\n          // If openTimeout.current does not exist, the user is using keyboard focus (not mouse hover/click)\n          if (openTimeout.current === undefined) {\n            onOpen()\n          }\n        })\n        triggerProps.onBlur = callAllHandlers(props.onBlur, (event) => {\n          const relatedTarget = getRelatedTarget(event)\n          const isValidBlur = !contains(popoverRef.current, relatedTarget)\n\n          if (isOpen && closeOnBlur && isValidBlur) {\n            onClose()\n          }\n        })\n\n        /**\n         * Any content that shows on hover or focus must be dismissible.\n         * This case pressing `Escape` will dismiss the popover\n         */\n        triggerProps.onKeyDown = callAllHandlers(props.onKeyDown, (event) => {\n          if (event.key === \"Escape\") {\n            onClose()\n          }\n        })\n\n        triggerProps.onMouseEnter = callAllHandlers(props.onMouseEnter, () => {\n          isHoveringRef.current = true\n          openTimeout.current = window.setTimeout(() => onOpen(), openDelay)\n        })\n\n        triggerProps.onMouseLeave = callAllHandlers(props.onMouseLeave, () => {\n          isHoveringRef.current = false\n\n          if (openTimeout.current) {\n            clearTimeout(openTimeout.current)\n            openTimeout.current = undefined\n          }\n\n          closeTimeout.current = window.setTimeout(() => {\n            if (isHoveringRef.current === false) {\n              onClose()\n            }\n          }, closeDelay)\n        })\n      }\n\n      return triggerProps\n    },\n    [\n      triggerId,\n      isOpen,\n      popoverId,\n      trigger,\n      maybeReferenceRef,\n      onToggle,\n      onOpen,\n      closeOnBlur,\n      onClose,\n      openDelay,\n      closeDelay,\n    ],\n  )\n\n  useEffect(() => {\n    return () => {\n      if (openTimeout.current) {\n        clearTimeout(openTimeout.current)\n      }\n      if (closeTimeout.current) {\n        clearTimeout(closeTimeout.current)\n      }\n    }\n  }, [])\n\n  const getHeaderProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ...props,\n      id: headerId,\n      ref: mergeRefs(ref, (node: HTMLElement | null) => {\n        setHasHeader(!!node)\n      }),\n    }),\n    [headerId],\n  )\n\n  const getBodyProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ...props,\n      id: bodyId,\n      ref: mergeRefs(ref, (node) => {\n        setHasBody(!!node)\n      }),\n    }),\n    [bodyId],\n  )\n\n  return {\n    forceUpdate,\n    isOpen,\n    onAnimationComplete: animated.onComplete,\n    onClose,\n    getAnchorProps,\n    getArrowProps,\n    getArrowInnerProps,\n    getPopoverPositionerProps,\n    getPopoverProps,\n    getTriggerProps,\n    getHeaderProps,\n    getBodyProps,\n  }\n}\n\nexport type UsePopoverReturn = ReturnType<typeof usePopover>\n\nfunction contains(parent: HTMLElement | null, child: HTMLElement | null) {\n  return parent === child || parent?.contains(child)\n}\n\nfunction getRelatedTarget(event: React.FocusEvent) {\n  const activeEl = event.currentTarget.ownerDocument.activeElement\n  return (event.relatedTarget ?? activeEl) as HTMLElement | null\n}\n","import { Children, cloneElement } from \"react\"\nimport { usePopoverContext } from \"./popover-context\"\n\n/**\n * PopoverAnchor is element that is used as the positioning reference\n * for the popover.\n */\n\nexport function PopoverAnchor(props: React.PropsWithChildren<{}>) {\n  // enforce a single child\n  const child: any = Children.only(props.children)\n  const { getAnchorProps } = usePopoverContext()\n\n  return cloneElement(child, getAnchorProps(child.props, child.ref))\n}\n\nPopoverAnchor.displayName = \"PopoverAnchor\"\n","import { chakra, HTMLChakraProps, SystemProps } from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { usePopoverContext, usePopoverStyles } from \"./popover-context\"\n\nexport interface PopoverArrowProps extends HTMLChakraProps<\"div\"> {\n  /**\n   * The color of the arrow's shadow\n   */\n  shadowColor?: SystemProps[\"color\"]\n}\n\nconst resolveVar = (scale: string, value: unknown) =>\n  value ? `${scale}.${value}, ${value}` : undefined\n\nexport function PopoverArrow(props: PopoverArrowProps) {\n  const { bg, bgColor, backgroundColor, shadow, boxShadow, shadowColor } = props\n  const { getArrowProps, getArrowInnerProps } = usePopoverContext()\n  const styles = usePopoverStyles()\n  const arrowBg = bg ?? bgColor ?? backgroundColor\n  const arrowShadow = shadow ?? boxShadow\n  return (\n    <chakra.div\n      {...getArrowProps()}\n      className=\"chakra-popover__arrow-positioner\"\n    >\n      <chakra.div\n        className={cx(\"chakra-popover__arrow\", props.className)}\n        {...getArrowInnerProps(props)}\n        __css={{\n          \"--popper-arrow-shadow-color\": resolveVar(\"colors\", shadowColor),\n          \"--popper-arrow-bg\": resolveVar(\"colors\", arrowBg),\n          \"--popper-arrow-shadow\": resolveVar(\"shadows\", arrowShadow),\n          ...styles.arrow,\n        }}\n      />\n    </chakra.div>\n  )\n}\n\nPopoverArrow.displayName = \"PopoverArrow\"\n","import { chakra, forwardRef, HTMLChakraProps } from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { usePopoverContext, usePopoverStyles } from \"./popover-context\"\n\nexport interface PopoverBodyProps extends HTMLChakraProps<\"div\"> {}\n/**\n * PopoverBody is the main content area for the popover. Should contain\n * at least one interactive element.\n */\n\nexport const PopoverBody = forwardRef<PopoverBodyProps, \"div\">(\n  function PopoverBody(props, ref) {\n    const { getBodyProps } = usePopoverContext()\n\n    const styles = usePopoverStyles()\n\n    return (\n      <chakra.div\n        {...getBodyProps(props, ref)}\n        className={cx(\"chakra-popover__body\", props.className)}\n        __css={styles.body}\n      />\n    )\n  },\n)\n\nPopoverBody.displayName = \"PopoverBody\"\n","import { CloseButton, CloseButtonProps } from \"@chakra-ui/close-button\"\nimport { forwardRef } from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { usePopoverContext, usePopoverStyles } from \"./popover-context\"\n\nexport type PopoverCloseButtonProps = CloseButtonProps\n\nexport const PopoverCloseButton = forwardRef<CloseButtonProps, \"button\">(\n  function PopoverCloseButton(props, ref) {\n    const { onClose } = usePopoverContext()\n    const styles = usePopoverStyles()\n    return (\n      <CloseButton\n        size=\"sm\"\n        onClick={onClose}\n        className={cx(\"chakra-popover__close-btn\", props.className)}\n        __css={styles.closeButton}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\n\nPopoverCloseButton.displayName = \"PopoverCloseButton\"\n","import { callAll, cx } from \"@chakra-ui/shared-utils\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  SystemStyleObject,\n} from \"@chakra-ui/system\"\nimport { HTMLMotionProps } from \"framer-motion\"\nimport { usePopoverContext, usePopoverStyles } from \"./popover-context\"\nimport { PopoverTransition, PopoverTransitionProps } from \"./popover-transition\"\n\nexport interface PopoverContentProps extends PopoverTransitionProps {\n  rootProps?: HTMLChakraProps<\"div\">\n  motionProps?: HTMLMotionProps<\"section\">\n}\n\nexport const PopoverContent = forwardRef<PopoverContentProps, \"section\">(\n  function PopoverContent(props, ref) {\n    const { rootProps, motionProps, ...contentProps } = props\n\n    const { getPopoverProps, getPopoverPositionerProps, onAnimationComplete } =\n      usePopoverContext()\n\n    const styles = usePopoverStyles()\n    const contentStyles: SystemStyleObject = {\n      position: \"relative\",\n      display: \"flex\",\n      flexDirection: \"column\",\n      ...styles.content,\n    }\n\n    return (\n      <chakra.div\n        {...getPopoverPositionerProps(rootProps)}\n        __css={styles.popper}\n        className=\"chakra-popover__popper\"\n      >\n        <PopoverTransition\n          {...motionProps}\n          {...getPopoverProps(contentProps, ref)}\n          onAnimationComplete={callAll(\n            onAnimationComplete,\n            contentProps.onAnimationComplete,\n          )}\n          className={cx(\"chakra-popover__content\", props.className)}\n          __css={contentStyles}\n        />\n      </chakra.div>\n    )\n  },\n)\n\nPopoverContent.displayName = \"PopoverContent\"\n","import { chakra, HTMLChakraProps, forwardRef } from \"@chakra-ui/system\"\nimport { HTMLMotionProps, motion, Variant } from \"framer-motion\"\nimport React from \"react\"\nimport { usePopoverContext } from \"./popover-context\"\n\ntype HTMLMotionChakraProps<T extends keyof React.ReactHTML> = Omit<\n  HTMLChakraProps<T>,\n  keyof HTMLMotionProps<T>\n> &\n  Omit<\n    HTMLMotionProps<T>,\n    | \"style\"\n    | \"onDrag\"\n    | \"onDragEnd\"\n    | \"onDragStart\"\n    | \"onAnimationStart\"\n    | \"variants\"\n    | \"transition\"\n    | \"children\"\n  > & {\n    variants?: MotionVariants\n  }\n\ntype MotionVariants = Partial<Record<\"enter\" | \"exit\", Variant>>\n\nfunction mergeVariants(variants?: MotionVariants): any {\n  if (!variants) return\n  return {\n    enter: {\n      ...variants.enter,\n      visibility: \"visible\",\n    },\n    exit: {\n      ...variants.exit,\n      transitionEnd: {\n        visibility: \"hidden\",\n      },\n    },\n  }\n}\n\nconst scaleFade: MotionVariants = {\n  exit: {\n    opacity: 0,\n    scale: 0.95,\n    transition: {\n      duration: 0.1,\n      ease: [0.4, 0, 1, 1],\n    },\n  },\n  enter: {\n    scale: 1,\n    opacity: 1,\n    transition: {\n      duration: 0.15,\n      ease: [0, 0, 0.2, 1],\n    },\n  },\n}\n\nconst MotionSection = chakra(motion.section)\n\nexport interface PopoverTransitionProps\n  extends HTMLMotionChakraProps<\"section\"> {}\n\nexport const PopoverTransition = forwardRef(function PopoverTransition(\n  props: PopoverTransitionProps,\n  ref: React.Ref<any>,\n) {\n  const { variants = scaleFade, ...rest } = props\n  const { isOpen } = usePopoverContext()\n  return (\n    <MotionSection\n      ref={ref}\n      variants={mergeVariants(variants)}\n      initial={false}\n      animate={isOpen ? \"enter\" : \"exit\"}\n      {...rest}\n    />\n  )\n})\n\nPopoverTransition.displayName = \"PopoverTransition\"\n","import { chakra, HTMLChakraProps } from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { usePopoverStyles } from \"./popover-context\"\n\nexport interface PopoverFooterProps extends HTMLChakraProps<\"footer\"> {}\n\nexport function PopoverFooter(props: PopoverFooterProps) {\n  const styles = usePopoverStyles()\n  return (\n    <chakra.footer\n      {...props}\n      className={cx(\"chakra-popover__footer\", props.className)}\n      __css={styles.footer}\n    />\n  )\n}\n\nPopoverFooter.displayName = \"PopoverFooter\"\n","import { chakra, forwardRef, HTMLChakraProps } from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { usePopoverContext, usePopoverStyles } from \"./popover-context\"\n\nexport interface PopoverHeaderProps extends HTMLChakraProps<\"header\"> {}\n/**\n * PopoverHeader is the accessible header or label\n * for the popover's content, and it is first announced by screenreaders.\n */\n\nexport const PopoverHeader = forwardRef<PopoverHeaderProps, \"header\">(\n  function PopoverHeader(props, ref) {\n    const { getHeaderProps } = usePopoverContext()\n\n    const styles = usePopoverStyles()\n\n    return (\n      <chakra.header\n        {...getHeaderProps(props, ref)}\n        className={cx(\"chakra-popover__header\", props.className)}\n        __css={styles.header}\n      />\n    )\n  },\n)\n\nPopoverHeader.displayName = \"PopoverHeader\"\n","import { Children, cloneElement } from \"react\"\nimport { usePopoverContext } from \"./popover-context\"\n\n/**\n * PopoverTrigger opens the popover's content. It must be an interactive element\n * such as `button` or `a`.\n */\n\nexport function PopoverTrigger(props: { children: React.ReactNode }) {\n  // enforce a single child\n  const child: any = Children.only(props.children)\n  const { getTriggerProps } = usePopoverContext()\n  return cloneElement(child, getTriggerProps(child.props, child.ref))\n}\n\nPopoverTrigger.displayName = \"PopoverTrigger\"\n"],"mappings":"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","names":["import_shared_utils","id","props","import_react","import_system","import_shared_utils","import_jsx_runtime","import_system","import_shared_utils","import_jsx_runtime","PopoverBody","import_system","import_shared_utils","import_jsx_runtime","PopoverCloseButton","import_shared_utils","import_system","import_system","import_jsx_runtime","PopoverTransition","import_jsx_runtime","PopoverContent","import_system","import_shared_utils","import_jsx_runtime","import_system","import_shared_utils","import_jsx_runtime","PopoverHeader","import_react"]}