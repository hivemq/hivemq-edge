{"version":3,"sources":["../src/popover-content.tsx","../src/popover-context.ts","../src/popover-transition.tsx"],"sourcesContent":["import { callAll, cx } from \"@chakra-ui/shared-utils\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  SystemStyleObject,\n} from \"@chakra-ui/system\"\nimport { HTMLMotionProps } from \"framer-motion\"\nimport { usePopoverContext, usePopoverStyles } from \"./popover-context\"\nimport { PopoverTransition, PopoverTransitionProps } from \"./popover-transition\"\n\nexport interface PopoverContentProps extends PopoverTransitionProps {\n  rootProps?: HTMLChakraProps<\"div\">\n  motionProps?: HTMLMotionProps<\"section\">\n}\n\nexport const PopoverContent = forwardRef<PopoverContentProps, \"section\">(\n  function PopoverContent(props, ref) {\n    const { rootProps, motionProps, ...contentProps } = props\n\n    const { getPopoverProps, getPopoverPositionerProps, onAnimationComplete } =\n      usePopoverContext()\n\n    const styles = usePopoverStyles()\n    const contentStyles: SystemStyleObject = {\n      position: \"relative\",\n      display: \"flex\",\n      flexDirection: \"column\",\n      ...styles.content,\n    }\n\n    return (\n      <chakra.div\n        {...getPopoverPositionerProps(rootProps)}\n        __css={styles.popper}\n        className=\"chakra-popover__popper\"\n      >\n        <PopoverTransition\n          {...motionProps}\n          {...getPopoverProps(contentProps, ref)}\n          onAnimationComplete={callAll(\n            onAnimationComplete,\n            contentProps.onAnimationComplete,\n          )}\n          className={cx(\"chakra-popover__content\", props.className)}\n          __css={contentStyles}\n        />\n      </chakra.div>\n    )\n  },\n)\n\nPopoverContent.displayName = \"PopoverContent\"\n","import { createContext } from \"@chakra-ui/react-context\"\nimport { SystemStyleObject } from \"@chakra-ui/system\"\nimport { UsePopoverReturn } from \"./use-popover\"\n\nexport const [PopoverProvider, usePopoverContext] =\n  createContext<UsePopoverReturn>({\n    name: \"PopoverContext\",\n    errorMessage:\n      \"usePopoverContext: `context` is undefined. Seems you forgot to wrap all popover components within `<Popover />`\",\n  })\n\nexport const [PopoverStylesProvider, usePopoverStyles] = createContext<\n  Record<string, SystemStyleObject>\n>({\n  name: `PopoverStylesContext`,\n  errorMessage: `usePopoverStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<Popover />\" `,\n})\n","import { chakra, HTMLChakraProps, forwardRef } from \"@chakra-ui/system\"\nimport { HTMLMotionProps, motion, Variant } from \"framer-motion\"\nimport React from \"react\"\nimport { usePopoverContext } from \"./popover-context\"\n\ntype HTMLMotionChakraProps<T extends keyof React.ReactHTML> = Omit<\n  HTMLChakraProps<T>,\n  keyof HTMLMotionProps<T>\n> &\n  Omit<\n    HTMLMotionProps<T>,\n    | \"style\"\n    | \"onDrag\"\n    | \"onDragEnd\"\n    | \"onDragStart\"\n    | \"onAnimationStart\"\n    | \"variants\"\n    | \"transition\"\n    | \"children\"\n  > & {\n    variants?: MotionVariants\n  }\n\ntype MotionVariants = Partial<Record<\"enter\" | \"exit\", Variant>>\n\nfunction mergeVariants(variants?: MotionVariants): any {\n  if (!variants) return\n  return {\n    enter: {\n      ...variants.enter,\n      visibility: \"visible\",\n    },\n    exit: {\n      ...variants.exit,\n      transitionEnd: {\n        visibility: \"hidden\",\n      },\n    },\n  }\n}\n\nconst scaleFade: MotionVariants = {\n  exit: {\n    opacity: 0,\n    scale: 0.95,\n    transition: {\n      duration: 0.1,\n      ease: [0.4, 0, 1, 1],\n    },\n  },\n  enter: {\n    scale: 1,\n    opacity: 1,\n    transition: {\n      duration: 0.15,\n      ease: [0, 0, 0.2, 1],\n    },\n  },\n}\n\nconst MotionSection = chakra(motion.section)\n\nexport interface PopoverTransitionProps\n  extends HTMLMotionChakraProps<\"section\"> {}\n\nexport const PopoverTransition = forwardRef(function PopoverTransition(\n  props: PopoverTransitionProps,\n  ref: React.Ref<any>,\n) {\n  const { variants = scaleFade, ...rest } = props\n  const { isOpen } = usePopoverContext()\n  return (\n    <MotionSection\n      ref={ref}\n      variants={mergeVariants(variants)}\n      initial={false}\n      animate={isOpen ? \"enter\" : \"exit\"}\n      {...rest}\n    />\n  )\n})\n\nPopoverTransition.displayName = \"PopoverTransition\"\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAA4B;AAC5B,IAAAA,iBAKO;;;ACNP,2BAA8B;AAIvB,IAAM,CAAC,iBAAiB,iBAAiB,QAC9C,oCAAgC;AAAA,EAC9B,MAAM;AAAA,EACN,cACE;AACJ,CAAC;AAEI,IAAM,CAAC,uBAAuB,gBAAgB,QAAI,oCAEvD;AAAA,EACA,MAAM;AAAA,EACN,cAAc;AAChB,CAAC;;;AChBD,oBAAoD;AACpD,2BAAiD;AAuE7C;AA/CJ,SAAS,cAAc,UAAgC;AACrD,MAAI,CAAC;AAAU;AACf,SAAO;AAAA,IACL,OAAO;AAAA,MACL,GAAG,SAAS;AAAA,MACZ,YAAY;AAAA,IACd;AAAA,IACA,MAAM;AAAA,MACJ,GAAG,SAAS;AAAA,MACZ,eAAe;AAAA,QACb,YAAY;AAAA,MACd;AAAA,IACF;AAAA,EACF;AACF;AAEA,IAAM,YAA4B;AAAA,EAChC,MAAM;AAAA,IACJ,SAAS;AAAA,IACT,OAAO;AAAA,IACP,YAAY;AAAA,MACV,UAAU;AAAA,MACV,MAAM,CAAC,KAAK,GAAG,GAAG,CAAC;AAAA,IACrB;AAAA,EACF;AAAA,EACA,OAAO;AAAA,IACL,OAAO;AAAA,IACP,SAAS;AAAA,IACT,YAAY;AAAA,MACV,UAAU;AAAA,MACV,MAAM,CAAC,GAAG,GAAG,KAAK,CAAC;AAAA,IACrB;AAAA,EACF;AACF;AAEA,IAAM,oBAAgB,sBAAO,4BAAO,OAAO;AAKpC,IAAM,wBAAoB,0BAAW,SAASC,mBACnD,OACA,KACA;AACA,QAAM,EAAE,WAAW,WAAW,GAAG,KAAK,IAAI;AAC1C,QAAM,EAAE,OAAO,IAAI,kBAAkB;AACrC,SACE;AAAA,IAAC;AAAA;AAAA,MACC;AAAA,MACA,UAAU,cAAc,QAAQ;AAAA,MAChC,SAAS;AAAA,MACT,SAAS,SAAS,UAAU;AAAA,MAC3B,GAAG;AAAA;AAAA,EACN;AAEJ,CAAC;AAED,kBAAkB,cAAc;;;AF7CxB,IAAAC,sBAAA;AArBD,IAAM,qBAAiB;AAAA,EAC5B,SAASC,gBAAe,OAAO,KAAK;AAClC,UAAM,EAAE,WAAW,aAAa,GAAG,aAAa,IAAI;AAEpD,UAAM,EAAE,iBAAiB,2BAA2B,oBAAoB,IACtE,kBAAkB;AAEpB,UAAM,SAAS,iBAAiB;AAChC,UAAM,gBAAmC;AAAA,MACvC,UAAU;AAAA,MACV,SAAS;AAAA,MACT,eAAe;AAAA,MACf,GAAG,OAAO;AAAA,IACZ;AAEA,WACE;AAAA,MAAC,sBAAO;AAAA,MAAP;AAAA,QACE,GAAG,0BAA0B,SAAS;AAAA,QACvC,OAAO,OAAO;AAAA,QACd,WAAU;AAAA,QAEV;AAAA,UAAC;AAAA;AAAA,YACE,GAAG;AAAA,YACH,GAAG,gBAAgB,cAAc,GAAG;AAAA,YACrC,yBAAqB;AAAA,cACnB;AAAA,cACA,aAAa;AAAA,YACf;AAAA,YACA,eAAW,wBAAG,2BAA2B,MAAM,SAAS;AAAA,YACxD,OAAO;AAAA;AAAA,QACT;AAAA;AAAA,IACF;AAAA,EAEJ;AACF;AAEA,eAAe,cAAc;","names":["import_system","PopoverTransition","import_jsx_runtime","PopoverContent"]}