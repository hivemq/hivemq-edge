{"version":3,"sources":["../src/radio-group.tsx","../src/use-radio-group.ts"],"sourcesContent":["import {\n  chakra,\n  forwardRef,\n  ThemingProps,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { createContext } from \"@chakra-ui/react-context\"\nimport {\n  useRadioGroup,\n  UseRadioGroupProps,\n  UseRadioGroupReturn,\n} from \"./use-radio-group\"\nimport { useMemo } from \"react\"\n\nexport interface RadioGroupContext\n  extends Pick<\n      UseRadioGroupReturn,\n      \"onChange\" | \"value\" | \"name\" | \"isDisabled\" | \"isFocusable\"\n    >,\n    Omit<ThemingProps<\"Radio\">, \"orientation\"> {}\n\nconst [RadioGroupProvider, useRadioGroupContext] =\n  createContext<RadioGroupContext>({\n    name: \"RadioGroupContext\",\n    strict: false,\n  })\n\nexport { useRadioGroupContext }\n\ntype Omitted =\n  | \"onChange\"\n  | \"value\"\n  | \"defaultValue\"\n  | \"defaultChecked\"\n  | \"children\"\nexport interface RadioGroupProps\n  extends UseRadioGroupProps,\n    Omit<HTMLChakraProps<\"div\">, Omitted>,\n    Omit<ThemingProps<\"Radio\">, \"orientation\"> {\n  children: React.ReactNode\n}\n\n/**\n * Used for multiple radios which are bound in one group,\n * and it indicates which option is selected.\n *\n * @see Docs https://chakra-ui.com/radio\n */\nexport const RadioGroup = forwardRef<RadioGroupProps, \"div\">((props, ref) => {\n  const {\n    colorScheme,\n    size,\n    variant,\n    children,\n    className,\n    isDisabled,\n    isFocusable,\n    ...rest\n  } = props\n\n  const { value, onChange, getRootProps, name, htmlProps } = useRadioGroup(rest)\n\n  const group = useMemo(\n    () => ({\n      name,\n      size,\n      onChange,\n      colorScheme,\n      value,\n      variant,\n      isDisabled,\n      isFocusable,\n    }),\n    [\n      name,\n      size,\n      onChange,\n      colorScheme,\n      value,\n      variant,\n      isDisabled,\n      isFocusable,\n    ],\n  )\n\n  return (\n    <RadioGroupProvider value={group}>\n      <chakra.div\n        {...getRootProps(htmlProps as any, ref)}\n        className={cx(\"chakra-radio-group\", className)}\n      >\n        {children}\n      </chakra.div>\n    </RadioGroupProvider>\n  )\n})\n\nRadioGroup.displayName = \"RadioGroup\"\n","import { isObject } from \"@chakra-ui/shared-utils\"\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\"\nimport { useCallback, useRef, useState, useId } from \"react\"\nimport { InputDOMAttributes, PropGetter } from \"@chakra-ui/react-types\"\n\ntype EventOrValue = React.ChangeEvent<HTMLInputElement> | string | number\n\nfunction isInputEvent(value: any): value is { target: HTMLInputElement } {\n  return value && isObject(value) && isObject(value.target)\n}\n\nexport interface UseRadioGroupProps {\n  /**\n   * The value of the radio to be `checked`\n   * (in controlled mode)\n   */\n  value?: string\n  /**\n   * The value of the radio to be `checked`\n   * initially (in uncontrolled mode)\n   */\n  defaultValue?: string\n  /**\n   * Function called once a radio is checked\n   * @param nextValue the value of the checked radio\n   */\n  onChange?(nextValue: string): void\n  /**\n   * If `true`, all wrapped radio inputs will be disabled\n   *\n   * @default false\n   */\n  isDisabled?: boolean\n\n  /**\n   * If `true` and `isDisabled` is true, all wrapped radio inputs will remain\n   * focusable but not interactive.\n   *\n   * @default false\n   */\n  isFocusable?: boolean\n  /**\n   * The `name` attribute forwarded to each `radio` element\n   */\n  name?: string\n  /**\n   * If `true`, input elements will receive\n   * `checked` attribute instead of `isChecked`.\n   *\n   * This assumes, you're using native radio inputs\n   *\n   * @default false\n   */\n  isNative?: boolean\n}\n\n/**\n * `useRadioGroup` is a custom hook that provides all the state management logic for a group of radios.\n *\n * @see Docs https://chakra-ui.com/docs/hooks/use-radio-group\n */\nexport function useRadioGroup(props: UseRadioGroupProps = {}) {\n  const {\n    onChange: onChangeProp,\n    value: valueProp,\n    defaultValue,\n    name: nameProp,\n    isDisabled,\n    isFocusable,\n    isNative,\n    ...htmlProps\n  } = props\n\n  const [valueState, setValue] = useState<string | number>(defaultValue || \"\")\n  const isControlled = typeof valueProp !== \"undefined\"\n  const value = isControlled ? valueProp : valueState\n\n  const ref = useRef<any>(null)\n\n  const focus = useCallback(() => {\n    const rootNode = ref.current\n    if (!rootNode) return\n\n    let query = `input:not(:disabled):checked`\n\n    const firstEnabledAndCheckedInput = rootNode.querySelector(\n      query,\n    ) as HTMLElement\n\n    if (firstEnabledAndCheckedInput) {\n      firstEnabledAndCheckedInput.focus()\n      return\n    }\n\n    query = `input:not(:disabled)`\n\n    const firstEnabledInput = rootNode.querySelector(query) as HTMLElement\n    firstEnabledInput?.focus()\n  }, [])\n\n  /**\n   * All radio options must use the same name\n   */\n  const uuid = useId()\n  const fallbackName = `radio-${uuid}`\n  const name = nameProp || fallbackName\n\n  const onChange = useCallback(\n    (eventOrValue: EventOrValue) => {\n      const nextValue = isInputEvent(eventOrValue)\n        ? eventOrValue.target.value\n        : eventOrValue\n\n      if (!isControlled) {\n        setValue(nextValue)\n      }\n\n      onChangeProp?.(String(nextValue))\n    },\n    [onChangeProp, isControlled],\n  )\n\n  const getRootProps: PropGetter = useCallback(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ref: mergeRefs(forwardedRef, ref),\n      role: \"radiogroup\",\n    }),\n    [],\n  )\n\n  const getRadioProps: PropGetter<\n    InputDOMAttributes & { isChecked?: boolean },\n    InputDOMAttributes\n  > = useCallback(\n    (props = {}, ref = null) => {\n      const checkedKey = isNative ? \"checked\" : \"isChecked\"\n      return {\n        ...props,\n        ref,\n        name,\n        [checkedKey]: value != null ? props.value === value : undefined,\n        onChange(event) {\n          onChange(event as any)\n        },\n        \"data-radiogroup\": true,\n      }\n    },\n    [isNative, name, onChange, value],\n  )\n\n  return {\n    getRootProps,\n    getRadioProps,\n    name,\n    ref,\n    focus,\n    setValue,\n    value,\n    onChange,\n    isDisabled,\n    isFocusable,\n    htmlProps,\n  }\n}\n\nexport type UseRadioGroupReturn = ReturnType<typeof useRadioGroup>\n"],"mappings":"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","names":["import_shared_utils","props","ref","import_react"]}