{"version":3,"sources":["../src/chakra-provider.tsx"],"sourcesContent":["import {\n  ChakraProvider as BaseChakraProvider,\n  ChakraProviderProps as BaseChakraProviderProps,\n} from \"@chakra-ui/provider\"\nimport { theme as defaultTheme, baseTheme, Theme } from \"@chakra-ui/theme\"\nimport {\n  ToastProvider,\n  ToastProviderProps,\n  ToastOptionProvider,\n} from \"@chakra-ui/toast\"\nimport { Dict } from \"@chakra-ui/utils\"\n\nexport interface ChakraProviderProps extends BaseChakraProviderProps {\n  /**\n   * Provide defaults for `useToast()` usages for `ChakraProvider`s children\n   */\n  toastOptions?: ToastProviderProps\n}\n\nconst createChakraProvider = (\n  providerTheme: Theme | (Omit<Theme, \"components\"> & { components: Dict }),\n) => {\n  return function ChakraProvider({\n    children,\n    theme = providerTheme,\n    toastOptions,\n    ...restProps\n  }: ChakraProviderProps) {\n    return (\n      <BaseChakraProvider theme={theme} {...restProps}>\n        <ToastOptionProvider value={toastOptions?.defaultOptions}>\n          {children}\n        </ToastOptionProvider>\n        <ToastProvider {...toastOptions} />\n      </BaseChakraProvider>\n    )\n  }\n}\n\nexport const ChakraProvider = createChakraProvider(defaultTheme)\nexport const ChakraBaseProvider = createChakraProvider(baseTheme)\n"],"mappings":";;;AAAA;AAAA,EACE,kBAAkB;AAAA,OAEb;AACP,SAAS,SAAS,cAAc,iBAAwB;AACxD;AAAA,EACE;AAAA,EAEA;AAAA,OACK;AAoBD,SACE,KADF;AAVN,IAAM,uBAAuB,CAC3B,kBACG;AACH,SAAO,SAASA,gBAAe;AAAA,IAC7B;AAAA,IACA,QAAQ;AAAA,IACR;AAAA,IACA,GAAG;AAAA,EACL,GAAwB;AACtB,WACE,qBAAC,sBAAmB,OAAe,GAAG,WACpC;AAAA,0BAAC,uBAAoB,OAAO,6CAAc,gBACvC,UACH;AAAA,MACA,oBAAC,iBAAe,GAAG,cAAc;AAAA,OACnC;AAAA,EAEJ;AACF;AAEO,IAAM,iBAAiB,qBAAqB,YAAY;AACxD,IAAM,qBAAqB,qBAAqB,SAAS;","names":["ChakraProvider"]}