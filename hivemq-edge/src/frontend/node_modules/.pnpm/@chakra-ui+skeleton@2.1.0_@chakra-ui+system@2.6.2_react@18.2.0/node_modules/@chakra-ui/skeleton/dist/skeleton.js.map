{"version":3,"sources":["../src/skeleton.tsx","../src/use-is-first-render.ts"],"sourcesContent":["import { usePrevious } from \"@chakra-ui/react-use-previous\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport {\n  chakra,\n  cssVar,\n  forwardRef,\n  HTMLChakraProps,\n  keyframes,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n  useToken,\n} from \"@chakra-ui/system\"\nimport { useIsFirstRender } from \"./use-is-first-render\"\n\nexport interface SkeletonOptions {\n  /**\n   * The color at the animation start\n   */\n  startColor?: string\n  /**\n   * The color at the animation end\n   */\n  endColor?: string\n  /**\n   * If `true`, it'll render its children with a nice fade transition\n   *\n   * @default false\n   */\n  isLoaded?: boolean\n  /**\n   * The animation speed in seconds\n   *\n   * @default 0.8\n   */\n  speed?: number\n  /**\n   * The fadeIn duration in seconds. Requires `isLoaded` toggled to `true` in order to see the transition.\n   *\n   * @default 0.4\n   */\n  fadeDuration?: number\n  /**\n   * If `true`, the skeleton will take the width of it's children\n   * @default false\n   */\n  fitContent?: boolean\n}\n\nconst StyledSkeleton = chakra(\"div\", {\n  baseStyle: {\n    boxShadow: \"none\",\n    backgroundClip: \"padding-box\",\n    cursor: \"default\",\n    color: \"transparent\",\n    pointerEvents: \"none\",\n    userSelect: \"none\",\n    \"&::before, &::after, *\": {\n      visibility: \"hidden\",\n    },\n  },\n})\n\nconst $startColor = cssVar(\"skeleton-start-color\")\nconst $endColor = cssVar(\"skeleton-end-color\")\n\nexport type ISkeleton = SkeletonOptions\n\nexport interface SkeletonProps\n  extends HTMLChakraProps<\"div\">,\n    SkeletonOptions,\n    ThemingProps<\"Skeleton\"> {}\n\nconst fade = keyframes({\n  from: { opacity: 0 },\n  to: { opacity: 1 },\n})\n\nconst bgFade = keyframes({\n  from: {\n    borderColor: $startColor.reference,\n    background: $startColor.reference,\n  },\n  to: {\n    borderColor: $endColor.reference,\n    background: $endColor.reference,\n  },\n})\n\n/**\n * `Skeleton` is used to display the loading state of some component.\n *\n * @see Docs https://chakra-ui.com/docs/components/skeleton\n */\nexport const Skeleton = forwardRef<SkeletonProps, \"div\">((props, ref) => {\n  const skeletonProps: SkeletonProps = {\n    ...props,\n    fadeDuration:\n      typeof props.fadeDuration === \"number\" ? props.fadeDuration : 0.4,\n    speed: typeof props.speed === \"number\" ? props.speed : 0.8,\n  }\n  const styles = useStyleConfig(\"Skeleton\", skeletonProps)\n  const isFirstRender = useIsFirstRender()\n\n  const {\n    startColor = \"\",\n    endColor = \"\",\n    isLoaded,\n    fadeDuration,\n    speed,\n    className,\n    fitContent,\n    ...rest\n  } = omitThemingProps(skeletonProps)\n\n  const [startColorVar, endColorVar] = useToken(\"colors\", [\n    startColor,\n    endColor,\n  ])\n\n  const wasPreviouslyLoaded = usePrevious(isLoaded)\n\n  const _className = cx(\"chakra-skeleton\", className)\n\n  const cssVarStyles = {\n    ...(startColorVar && { [$startColor.variable]: startColorVar }),\n    ...(endColorVar && { [$endColor.variable]: endColorVar }),\n  }\n\n  if (isLoaded) {\n    const animation =\n      isFirstRender || wasPreviouslyLoaded ? \"none\" : `${fade} ${fadeDuration}s`\n\n    return (\n      <chakra.div\n        ref={ref}\n        className={_className}\n        __css={{ animation }}\n        {...rest}\n      />\n    )\n  }\n\n  return (\n    <StyledSkeleton\n      ref={ref}\n      className={_className}\n      {...rest}\n      __css={{\n        width: fitContent ? \"fit-content\" : undefined,\n        ...styles,\n        ...cssVarStyles,\n        _dark: { ...(styles as any)[\"_dark\"], ...cssVarStyles },\n        animation: `${speed}s linear infinite alternate ${bgFade}`,\n      }}\n    />\n  )\n})\n\nSkeleton.displayName = \"Skeleton\"\n","import { useEffect, useRef } from \"react\"\n\nexport function useIsFirstRender() {\n  const isFirstRender = useRef(true)\n\n  useEffect(() => {\n    isFirstRender.current = false\n  }, [])\n\n  return isFirstRender.current\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCAA4B;AAC5B,0BAAmB;AACnB,oBAUO;;;ACZP,mBAAkC;AAE3B,SAAS,mBAAmB;AACjC,QAAM,oBAAgB,qBAAO,IAAI;AAEjC,8BAAU,MAAM;AACd,kBAAc,UAAU;AAAA,EAC1B,GAAG,CAAC,CAAC;AAEL,SAAO,cAAc;AACvB;;;AD4HM;AArFN,IAAM,qBAAiB,sBAAO,OAAO;AAAA,EACnC,WAAW;AAAA,IACT,WAAW;AAAA,IACX,gBAAgB;AAAA,IAChB,QAAQ;AAAA,IACR,OAAO;AAAA,IACP,eAAe;AAAA,IACf,YAAY;AAAA,IACZ,0BAA0B;AAAA,MACxB,YAAY;AAAA,IACd;AAAA,EACF;AACF,CAAC;AAED,IAAM,kBAAc,sBAAO,sBAAsB;AACjD,IAAM,gBAAY,sBAAO,oBAAoB;AAS7C,IAAM,WAAO,yBAAU;AAAA,EACrB,MAAM,EAAE,SAAS,EAAE;AAAA,EACnB,IAAI,EAAE,SAAS,EAAE;AACnB,CAAC;AAED,IAAM,aAAS,yBAAU;AAAA,EACvB,MAAM;AAAA,IACJ,aAAa,YAAY;AAAA,IACzB,YAAY,YAAY;AAAA,EAC1B;AAAA,EACA,IAAI;AAAA,IACF,aAAa,UAAU;AAAA,IACvB,YAAY,UAAU;AAAA,EACxB;AACF,CAAC;AAOM,IAAM,eAAW,0BAAiC,CAAC,OAAO,QAAQ;AACvE,QAAM,gBAA+B;AAAA,IACnC,GAAG;AAAA,IACH,cACE,OAAO,MAAM,iBAAiB,WAAW,MAAM,eAAe;AAAA,IAChE,OAAO,OAAO,MAAM,UAAU,WAAW,MAAM,QAAQ;AAAA,EACzD;AACA,QAAM,aAAS,8BAAe,YAAY,aAAa;AACvD,QAAM,gBAAgB,iBAAiB;AAEvC,QAAM;AAAA,IACJ,aAAa;AAAA,IACb,WAAW;AAAA,IACX;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,GAAG;AAAA,EACL,QAAI,gCAAiB,aAAa;AAElC,QAAM,CAAC,eAAe,WAAW,QAAI,wBAAS,UAAU;AAAA,IACtD;AAAA,IACA;AAAA,EACF,CAAC;AAED,QAAM,0BAAsB,uCAAY,QAAQ;AAEhD,QAAM,iBAAa,wBAAG,mBAAmB,SAAS;AAElD,QAAM,eAAe;AAAA,IACnB,GAAI,iBAAiB,EAAE,CAAC,YAAY,QAAQ,GAAG,cAAc;AAAA,IAC7D,GAAI,eAAe,EAAE,CAAC,UAAU,QAAQ,GAAG,YAAY;AAAA,EACzD;AAEA,MAAI,UAAU;AACZ,UAAM,YACJ,iBAAiB,sBAAsB,SAAS,GAAG,QAAQ;AAE7D,WACE;AAAA,MAAC,qBAAO;AAAA,MAAP;AAAA,QACC;AAAA,QACA,WAAW;AAAA,QACX,OAAO,EAAE,UAAU;AAAA,QAClB,GAAG;AAAA;AAAA,IACN;AAAA,EAEJ;AAEA,SACE;AAAA,IAAC;AAAA;AAAA,MACC;AAAA,MACA,WAAW;AAAA,MACV,GAAG;AAAA,MACJ,OAAO;AAAA,QACL,OAAO,aAAa,gBAAgB;AAAA,QACpC,GAAG;AAAA,QACH,GAAG;AAAA,QACH,OAAO,EAAE,GAAI,OAAe,OAAO,GAAG,GAAG,aAAa;AAAA,QACtD,WAAW,GAAG,oCAAoC;AAAA,MACpD;AAAA;AAAA,EACF;AAEJ,CAAC;AAED,SAAS,cAAc;","names":[]}