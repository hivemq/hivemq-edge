{"version":3,"sources":["../src/index.ts","../src/skeleton.tsx","../src/use-is-first-render.ts","../src/skeleton-text.tsx","../src/skeleton-circle.tsx"],"sourcesContent":["export { Skeleton } from \"./skeleton\"\nexport type { SkeletonOptions, SkeletonProps } from \"./skeleton\"\nexport { SkeletonText } from \"./skeleton-text\"\nexport type { SkeletonTextProps } from \"./skeleton-text\"\nexport { SkeletonCircle } from \"./skeleton-circle\"\n","import { usePrevious } from \"@chakra-ui/react-use-previous\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport {\n  chakra,\n  cssVar,\n  forwardRef,\n  HTMLChakraProps,\n  keyframes,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n  useToken,\n} from \"@chakra-ui/system\"\nimport { useIsFirstRender } from \"./use-is-first-render\"\n\nexport interface SkeletonOptions {\n  /**\n   * The color at the animation start\n   */\n  startColor?: string\n  /**\n   * The color at the animation end\n   */\n  endColor?: string\n  /**\n   * If `true`, it'll render its children with a nice fade transition\n   *\n   * @default false\n   */\n  isLoaded?: boolean\n  /**\n   * The animation speed in seconds\n   *\n   * @default 0.8\n   */\n  speed?: number\n  /**\n   * The fadeIn duration in seconds. Requires `isLoaded` toggled to `true` in order to see the transition.\n   *\n   * @default 0.4\n   */\n  fadeDuration?: number\n  /**\n   * If `true`, the skeleton will take the width of it's children\n   * @default false\n   */\n  fitContent?: boolean\n}\n\nconst StyledSkeleton = chakra(\"div\", {\n  baseStyle: {\n    boxShadow: \"none\",\n    backgroundClip: \"padding-box\",\n    cursor: \"default\",\n    color: \"transparent\",\n    pointerEvents: \"none\",\n    userSelect: \"none\",\n    \"&::before, &::after, *\": {\n      visibility: \"hidden\",\n    },\n  },\n})\n\nconst $startColor = cssVar(\"skeleton-start-color\")\nconst $endColor = cssVar(\"skeleton-end-color\")\n\nexport type ISkeleton = SkeletonOptions\n\nexport interface SkeletonProps\n  extends HTMLChakraProps<\"div\">,\n    SkeletonOptions,\n    ThemingProps<\"Skeleton\"> {}\n\nconst fade = keyframes({\n  from: { opacity: 0 },\n  to: { opacity: 1 },\n})\n\nconst bgFade = keyframes({\n  from: {\n    borderColor: $startColor.reference,\n    background: $startColor.reference,\n  },\n  to: {\n    borderColor: $endColor.reference,\n    background: $endColor.reference,\n  },\n})\n\n/**\n * `Skeleton` is used to display the loading state of some component.\n *\n * @see Docs https://chakra-ui.com/docs/components/skeleton\n */\nexport const Skeleton = forwardRef<SkeletonProps, \"div\">((props, ref) => {\n  const skeletonProps: SkeletonProps = {\n    ...props,\n    fadeDuration:\n      typeof props.fadeDuration === \"number\" ? props.fadeDuration : 0.4,\n    speed: typeof props.speed === \"number\" ? props.speed : 0.8,\n  }\n  const styles = useStyleConfig(\"Skeleton\", skeletonProps)\n  const isFirstRender = useIsFirstRender()\n\n  const {\n    startColor = \"\",\n    endColor = \"\",\n    isLoaded,\n    fadeDuration,\n    speed,\n    className,\n    fitContent,\n    ...rest\n  } = omitThemingProps(skeletonProps)\n\n  const [startColorVar, endColorVar] = useToken(\"colors\", [\n    startColor,\n    endColor,\n  ])\n\n  const wasPreviouslyLoaded = usePrevious(isLoaded)\n\n  const _className = cx(\"chakra-skeleton\", className)\n\n  const cssVarStyles = {\n    ...(startColorVar && { [$startColor.variable]: startColorVar }),\n    ...(endColorVar && { [$endColor.variable]: endColorVar }),\n  }\n\n  if (isLoaded) {\n    const animation =\n      isFirstRender || wasPreviouslyLoaded ? \"none\" : `${fade} ${fadeDuration}s`\n\n    return (\n      <chakra.div\n        ref={ref}\n        className={_className}\n        __css={{ animation }}\n        {...rest}\n      />\n    )\n  }\n\n  return (\n    <StyledSkeleton\n      ref={ref}\n      className={_className}\n      {...rest}\n      __css={{\n        width: fitContent ? \"fit-content\" : undefined,\n        ...styles,\n        ...cssVarStyles,\n        _dark: { ...(styles as any)[\"_dark\"], ...cssVarStyles },\n        animation: `${speed}s linear infinite alternate ${bgFade}`,\n      }}\n    />\n  )\n})\n\nSkeleton.displayName = \"Skeleton\"\n","import { useEffect, useRef } from \"react\"\n\nexport function useIsFirstRender() {\n  const isFirstRender = useRef(true)\n\n  useEffect(() => {\n    isFirstRender.current = false\n  }, [])\n\n  return isFirstRender.current\n}\n","import { useBreakpointValue } from \"@chakra-ui/media-query\"\nimport { chakra } from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { SkeletonProps, Skeleton } from \"./skeleton\"\n\nfunction range(count: number) {\n  return Array(count)\n    .fill(1)\n    .map((_, index) => index + 1)\n}\n\nexport interface SkeletonTextProps extends SkeletonProps {\n  spacing?: SkeletonProps[\"margin\"]\n  skeletonHeight?: SkeletonProps[\"height\"]\n  startColor?: SkeletonProps[\"startColor\"]\n  endColor?: SkeletonProps[\"endColor\"]\n  isLoaded?: SkeletonProps[\"isLoaded\"]\n}\nconst defaultNoOfLines = 3\n/**\n * `SkeletonText` is used to display the loading state in the form of text.\n *\n * @see Docs https://chakra-ui.com/docs/components/skeleton\n */\n\nexport const SkeletonText: React.FC<SkeletonTextProps> = (props) => {\n  const {\n    noOfLines = defaultNoOfLines,\n    spacing = \"0.5rem\",\n    skeletonHeight = \"0.5rem\",\n    className,\n    startColor,\n    endColor,\n    isLoaded,\n    fadeDuration,\n    speed,\n    variant,\n    size,\n    colorScheme,\n    children,\n    ...rest\n  } = props\n\n  const noOfLinesValue =\n    useBreakpointValue(\n      typeof noOfLines === \"number\" ? [noOfLines] : noOfLines,\n    ) || defaultNoOfLines\n  const numbers = range(noOfLinesValue)\n\n  const getWidth = (index: number) => {\n    if (noOfLinesValue > 1) {\n      return index === numbers.length ? \"80%\" : \"100%\"\n    }\n    return \"100%\"\n  }\n\n  const _className = cx(\"chakra-skeleton__group\", className)\n\n  return (\n    <chakra.div className={_className} {...rest}>\n      {numbers.map((number, index) => {\n        if (isLoaded && index > 0) {\n          // skip other lines\n          return null\n        }\n\n        const sizeProps = isLoaded\n          ? null\n          : {\n              mb: number === numbers.length ? \"0\" : spacing,\n              width: getWidth(number),\n              height: skeletonHeight,\n            }\n\n        return (\n          <Skeleton\n            key={numbers.length.toString() + number}\n            startColor={startColor}\n            endColor={endColor}\n            isLoaded={isLoaded}\n            fadeDuration={fadeDuration}\n            speed={speed}\n            variant={variant}\n            size={size}\n            colorScheme={colorScheme}\n            {...sizeProps}\n          >\n            {\n              // allows animating the children\n              index === 0 ? children : undefined\n            }\n          </Skeleton>\n        )\n      })}\n    </chakra.div>\n  )\n}\n\nSkeletonText.displayName = \"SkeletonText\"\n","import { SkeletonProps, Skeleton } from \"./skeleton\"\n\n/**\n * `SkeletonCircle` is used to display the loading state in the form of a circular avatar.\n *\n * @see Docs https://chakra-ui.com/docs/components/skeleton\n */\n\nexport const SkeletonCircle: React.FC<SkeletonProps> = ({\n  size = \"2rem\",\n  ...rest\n}) => <Skeleton borderRadius=\"full\" boxSize={size} {...rest} />\n\nSkeletonCircle.displayName = \"SkeletonCircle\"\n"],"mappings":"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","names":["import_system","import_shared_utils","import_jsx_runtime","import_jsx_runtime"]}