{"version":3,"sources":["../src/step-indicator.tsx","../src/step-context.tsx","../src/step-icon.tsx","../src/icons.tsx","../src/step-number.tsx","../src/step-status.tsx"],"sourcesContent":["import { cx } from \"@chakra-ui/shared-utils\"\nimport { HTMLChakraProps, chakra } from \"@chakra-ui/system\"\nimport { useStepContext, useStepperStyles } from \"./step-context\"\nimport { StepIcon } from \"./step-icon\"\nimport { StepNumber } from \"./step-number\"\nimport { StepStatus } from \"./step-status\"\n\nexport interface StepIndicatorProps extends HTMLChakraProps<\"div\"> {}\n\nexport function StepIndicator(props: StepIndicatorProps) {\n  const { status } = useStepContext()\n  const styles = useStepperStyles()\n  return (\n    <chakra.div\n      data-status={status}\n      {...props}\n      __css={styles.indicator}\n      className={cx(\"chakra-step__indicator\", props.className)}\n    />\n  )\n}\n\nexport function StepIndicatorContent() {\n  return (\n    <StepStatus\n      complete={<StepIcon />}\n      incomplete={<StepNumber />}\n      active={<StepNumber />}\n    />\n  )\n}\n","import { createContext } from \"@chakra-ui/react-context\"\nimport { createStylesContext } from \"@chakra-ui/system\"\n\nexport type StepStatusType = \"active\" | \"complete\" | \"incomplete\"\n\nexport type Orientation = \"horizontal\" | \"vertical\"\n\nexport interface StepContext {\n  /**\n   * The status of the step\n   * @type \"active\" | \"complete\" | \"incomplete\"\n   */\n  status: StepStatusType\n  /**\n   * The total number of steps\n   */\n  count: number\n  /**\n   * The index of the step\n   */\n  index: number\n  /**\n   * The orientation of the stepper\n   */\n  orientation: Orientation\n  /**\n   * Whether the step is the last step\n   */\n  isLast: boolean\n  /**\n   * Whether the step is the first step\n   */\n  isFirst: boolean\n  /**\n   * Whether to show or not the last separator while in vertical orientation\n   */\n  showLastSeparator?: boolean\n}\n\nexport const [StepContextProvider, useStepContext] = createContext<StepContext>(\n  { name: \"StepContext\" },\n)\n\nexport const [StepperStylesProvider, useStepperStyles] =\n  createStylesContext(\"Stepper\")\n","import { Icon, IconProps } from \"@chakra-ui/icon\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { CheckIcon } from \"./icons\"\nimport { useStepContext, useStepperStyles } from \"./step-context\"\n\nexport function StepIcon(props: IconProps) {\n  const { status } = useStepContext()\n  const styles = useStepperStyles()\n  const icon = status === \"complete\" ? CheckIcon : undefined\n  return (\n    <Icon\n      as={icon}\n      __css={styles.icon}\n      {...props}\n      className={cx(\"chakra-step__icon\", props.className)}\n    />\n  )\n}\n","import { ComponentProps } from \"react\"\n\nexport function CheckIcon(props: ComponentProps<\"svg\">) {\n  return (\n    <svg\n      stroke=\"currentColor\"\n      fill=\"currentColor\"\n      strokeWidth=\"0\"\n      viewBox=\"0 0 20 20\"\n      aria-hidden=\"true\"\n      height=\"1em\"\n      width=\"1em\"\n      {...props}\n    >\n      <path\n        fillRule=\"evenodd\"\n        d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\"\n        clipRule=\"evenodd\"\n      />\n    </svg>\n  )\n}\n","import { cx } from \"@chakra-ui/shared-utils\"\nimport { chakra, forwardRef } from \"@chakra-ui/system\"\nimport { useStepContext, useStepperStyles } from \"./step-context\"\n\nexport const StepNumber = forwardRef<{}, \"div\">(function StepNumber(\n  props,\n  ref,\n) {\n  const { children, ...restProps } = props\n  const { status, index } = useStepContext()\n  const styles = useStepperStyles()\n  return (\n    <chakra.div\n      ref={ref}\n      data-status={status}\n      __css={styles.number}\n      {...restProps}\n      className={cx(\"chakra-step__number\", props.className)}\n    >\n      {children || index + 1}\n    </chakra.div>\n  )\n})\n","import { runIfFn } from \"@chakra-ui/shared-utils\"\nimport { StepContext, StepStatusType, useStepContext } from \"./step-context\"\n\ntype MaybeRenderProp =\n  | React.ReactNode\n  | ((props: StepContext) => React.ReactNode)\n\nexport interface StepStatusProps\n  extends Partial<Record<StepStatusType, MaybeRenderProp>> {}\n\nexport function StepStatus(props: StepStatusProps) {\n  const { complete, incomplete, active } = props\n  const context = useStepContext()\n\n  let render: React.ReactNode | null = null\n\n  switch (context.status) {\n    case \"complete\":\n      render = runIfFn(complete, context)\n      break\n    case \"incomplete\":\n      render = runIfFn(incomplete, context)\n      break\n    case \"active\":\n      render = runIfFn(active, context)\n      break\n  }\n\n  return render ? <>{render}</> : null\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAAA,uBAAmB;AACnB,IAAAC,iBAAwC;;;ACDxC,2BAA8B;AAC9B,oBAAoC;AAsC7B,IAAM,CAAC,qBAAqB,cAAc,QAAI;AAAA,EACnD,EAAE,MAAM,cAAc;AACxB;AAEO,IAAM,CAAC,uBAAuB,gBAAgB,QACnD,mCAAoB,SAAS;;;AC5C/B,kBAAgC;AAChC,0BAAmB;;;ACab;AAZC,SAAS,UAAU,OAA8B;AACtD,SACE;AAAA,IAAC;AAAA;AAAA,MACC,QAAO;AAAA,MACP,MAAK;AAAA,MACL,aAAY;AAAA,MACZ,SAAQ;AAAA,MACR,eAAY;AAAA,MACZ,QAAO;AAAA,MACP,OAAM;AAAA,MACL,GAAG;AAAA,MAEJ;AAAA,QAAC;AAAA;AAAA,UACC,UAAS;AAAA,UACT,GAAE;AAAA,UACF,UAAS;AAAA;AAAA,MACX;AAAA;AAAA,EACF;AAEJ;;;ADXI,IAAAC,sBAAA;AALG,SAAS,SAAS,OAAkB;AACzC,QAAM,EAAE,OAAO,IAAI,eAAe;AAClC,QAAM,SAAS,iBAAiB;AAChC,QAAM,OAAO,WAAW,aAAa,YAAY;AACjD,SACE;AAAA,IAAC;AAAA;AAAA,MACC,IAAI;AAAA,MACJ,OAAO,OAAO;AAAA,MACb,GAAG;AAAA,MACJ,eAAW,wBAAG,qBAAqB,MAAM,SAAS;AAAA;AAAA,EACpD;AAEJ;;;AEjBA,IAAAC,uBAAmB;AACnB,IAAAC,iBAAmC;AAW/B,IAAAC,sBAAA;AARG,IAAM,iBAAa,2BAAsB,SAASC,YACvD,OACA,KACA;AACA,QAAM,EAAE,UAAU,GAAG,UAAU,IAAI;AACnC,QAAM,EAAE,QAAQ,MAAM,IAAI,eAAe;AACzC,QAAM,SAAS,iBAAiB;AAChC,SACE;AAAA,IAAC,sBAAO;AAAA,IAAP;AAAA,MACC;AAAA,MACA,eAAa;AAAA,MACb,OAAO,OAAO;AAAA,MACb,GAAG;AAAA,MACJ,eAAW,yBAAG,uBAAuB,MAAM,SAAS;AAAA,MAEnD,sBAAY,QAAQ;AAAA;AAAA,EACvB;AAEJ,CAAC;;;ACtBD,IAAAC,uBAAwB;AA4BN,IAAAC,sBAAA;AAlBX,SAAS,WAAW,OAAwB;AACjD,QAAM,EAAE,UAAU,YAAY,OAAO,IAAI;AACzC,QAAM,UAAU,eAAe;AAE/B,MAAI,SAAiC;AAErC,UAAQ,QAAQ,QAAQ;AAAA,IACtB,KAAK;AACH,mBAAS,8BAAQ,UAAU,OAAO;AAClC;AAAA,IACF,KAAK;AACH,mBAAS,8BAAQ,YAAY,OAAO;AACpC;AAAA,IACF,KAAK;AACH,mBAAS,8BAAQ,QAAQ,OAAO;AAChC;AAAA,EACJ;AAEA,SAAO,SAAS,6EAAG,kBAAO,IAAM;AAClC;;;ALhBI,IAAAC,sBAAA;AAJG,SAAS,cAAc,OAA2B;AACvD,QAAM,EAAE,OAAO,IAAI,eAAe;AAClC,QAAM,SAAS,iBAAiB;AAChC,SACE;AAAA,IAAC,sBAAO;AAAA,IAAP;AAAA,MACC,eAAa;AAAA,MACZ,GAAG;AAAA,MACJ,OAAO,OAAO;AAAA,MACd,eAAW,yBAAG,0BAA0B,MAAM,SAAS;AAAA;AAAA,EACzD;AAEJ;AAEO,SAAS,uBAAuB;AACrC,SACE;AAAA,IAAC;AAAA;AAAA,MACC,UAAU,6CAAC,YAAS;AAAA,MACpB,YAAY,6CAAC,cAAW;AAAA,MACxB,QAAQ,6CAAC,cAAW;AAAA;AAAA,EACtB;AAEJ;","names":["import_shared_utils","import_system","import_jsx_runtime","import_shared_utils","import_system","import_jsx_runtime","StepNumber","import_shared_utils","import_jsx_runtime","import_jsx_runtime"]}