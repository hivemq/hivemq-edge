{"version":3,"file":"exhaustive-deps.utils.js","sources":["../../../../src/rules/exhaustive-deps/exhaustive-deps.utils.ts"],"sourcesContent":["import { AST_NODE_TYPES } from '@typescript-eslint/utils'\nimport { ASTUtils } from '../../utils/ast-utils'\nimport type { TSESLint, TSESTree } from '@typescript-eslint/utils'\n\nexport const ExhaustiveDepsUtils = {\n  isRelevantReference(params: {\n    sourceCode: Readonly<TSESLint.SourceCode>\n    reference: TSESLint.Scope.Reference\n    scopeManager: TSESLint.Scope.ScopeManager\n    node: TSESTree.Node\n  }) {\n    const { sourceCode, reference, scopeManager, node } = params\n    const component = ASTUtils.getFunctionAncestor(sourceCode, node)\n\n    if (component === undefined) {\n      return false\n    }\n\n    if (\n      !ASTUtils.isDeclaredInNode({\n        scopeManager,\n        reference,\n        functionNode: component,\n      })\n    ) {\n      return false\n    }\n\n    return (\n      reference.identifier.name !== 'undefined' &&\n      reference.identifier.parent.type !== AST_NODE_TYPES.NewExpression &&\n      !ExhaustiveDepsUtils.isInstanceOfKind(reference.identifier.parent)\n    )\n  },\n  isInstanceOfKind(node: TSESTree.Node) {\n    return (\n      node.type === AST_NODE_TYPES.BinaryExpression &&\n      node.operator === 'instanceof'\n    )\n  },\n}\n"],"names":[],"mappings":";;AAIO,MAAM,sBAAsB;AAAA,EACjC,oBAAoB,QAKjB;AACD,UAAM,EAAE,YAAY,WAAW,cAAc,KAAS,IAAA;AACtD,UAAM,YAAY,SAAS,oBAAoB,YAAY,IAAI;AAE/D,QAAI,cAAc,QAAW;AACpB,aAAA;AAAA,IAAA;AAIP,QAAA,CAAC,SAAS,iBAAiB;AAAA,MACzB;AAAA,MACA;AAAA,MACA,cAAc;AAAA,IAAA,CACf,GACD;AACO,aAAA;AAAA,IAAA;AAGT,WACE,UAAU,WAAW,SAAS,eAC9B,UAAU,WAAW,OAAO,SAAS,eAAe,iBACpD,CAAC,oBAAoB,iBAAiB,UAAU,WAAW,MAAM;AAAA,EAErE;AAAA,EACA,iBAAiB,MAAqB;AACpC,WACE,KAAK,SAAS,eAAe,oBAC7B,KAAK,aAAa;AAAA,EAAA;AAGxB;"}