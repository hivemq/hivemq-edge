{"version":3,"file":"no-rest-destructuring.rule.js","sources":["../../../../src/rules/no-rest-destructuring/no-rest-destructuring.rule.ts"],"sourcesContent":["import { AST_NODE_TYPES, ESLintUtils } from '@typescript-eslint/utils'\nimport { getDocsUrl } from '../../utils/get-docs-url'\nimport { ASTUtils } from '../../utils/ast-utils'\nimport { detectTanstackQueryImports } from '../../utils/detect-react-query-imports'\nimport { NoRestDestructuringUtils } from './no-rest-destructuring.utils'\nimport type { ExtraRuleDocs } from '../../types'\n\nexport const name = 'no-rest-destructuring'\n\nconst queryHooks = [\n  'useQuery',\n  'useQueries',\n  'useInfiniteQuery',\n  'useSuspenseQuery',\n  'useSuspenseQueries',\n  'useSuspenseInfiniteQuery',\n]\n\nconst createRule = ESLintUtils.RuleCreator<ExtraRuleDocs>(getDocsUrl)\n\nexport const rule = createRule({\n  name,\n  meta: {\n    type: 'problem',\n    docs: {\n      description: 'Disallows rest destructuring in queries',\n      recommended: 'warn',\n    },\n    messages: {\n      objectRestDestructure: `Object rest destructuring on a query will observe all changes to the query, leading to excessive re-renders.`,\n    },\n    schema: [],\n  },\n  defaultOptions: [],\n\n  create: detectTanstackQueryImports((context, _, helpers) => {\n    return {\n      CallExpression: (node) => {\n        if (\n          !ASTUtils.isIdentifierWithOneOfNames(node.callee, queryHooks) ||\n          !helpers.isTanstackQueryImport(node.callee) ||\n          node.parent.type !== AST_NODE_TYPES.VariableDeclarator\n        ) {\n          return\n        }\n\n        const returnValue = node.parent.id\n        if (\n          node.callee.name !== 'useQueries' &&\n          node.callee.name !== 'useSuspenseQueries'\n        ) {\n          if (NoRestDestructuringUtils.isObjectRestDestructuring(returnValue)) {\n            context.report({\n              node: node.parent,\n              messageId: 'objectRestDestructure',\n            })\n          }\n          return\n        }\n\n        if (returnValue.type !== AST_NODE_TYPES.ArrayPattern) {\n          return\n        }\n        returnValue.elements.forEach((queryResult) => {\n          if (queryResult === null) {\n            return\n          }\n          if (NoRestDestructuringUtils.isObjectRestDestructuring(queryResult)) {\n            context.report({\n              node: queryResult,\n              messageId: 'objectRestDestructure',\n            })\n          }\n        })\n      },\n    }\n  }),\n})\n"],"names":[],"mappings":";;;;;AAOO,MAAM,OAAO;AAEpB,MAAM,aAAa;AAAA,EACjB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF;AAEA,MAAM,aAAa,YAAY,YAA2B,UAAU;AAE7D,MAAM,OAAO,WAAW;AAAA,EAC7B;AAAA,EACA,MAAM;AAAA,IACJ,MAAM;AAAA,IACN,MAAM;AAAA,MACJ,aAAa;AAAA,MACb,aAAa;AAAA,IACf;AAAA,IACA,UAAU;AAAA,MACR,uBAAuB;AAAA,IACzB;AAAA,IACA,QAAQ,CAAA;AAAA,EACV;AAAA,EACA,gBAAgB,CAAC;AAAA,EAEjB,QAAQ,2BAA2B,CAAC,SAAS,GAAG,YAAY;AACnD,WAAA;AAAA,MACL,gBAAgB,CAAC,SAAS;AACxB,YACE,CAAC,SAAS,2BAA2B,KAAK,QAAQ,UAAU,KAC5D,CAAC,QAAQ,sBAAsB,KAAK,MAAM,KAC1C,KAAK,OAAO,SAAS,eAAe,oBACpC;AACA;AAAA,QAAA;AAGI,cAAA,cAAc,KAAK,OAAO;AAChC,YACE,KAAK,OAAO,SAAS,gBACrB,KAAK,OAAO,SAAS,sBACrB;AACI,cAAA,yBAAyB,0BAA0B,WAAW,GAAG;AACnE,oBAAQ,OAAO;AAAA,cACb,MAAM,KAAK;AAAA,cACX,WAAW;AAAA,YAAA,CACZ;AAAA,UAAA;AAEH;AAAA,QAAA;AAGE,YAAA,YAAY,SAAS,eAAe,cAAc;AACpD;AAAA,QAAA;AAEU,oBAAA,SAAS,QAAQ,CAAC,gBAAgB;AAC5C,cAAI,gBAAgB,MAAM;AACxB;AAAA,UAAA;AAEE,cAAA,yBAAyB,0BAA0B,WAAW,GAAG;AACnE,oBAAQ,OAAO;AAAA,cACb,MAAM;AAAA,cACN,WAAW;AAAA,YAAA,CACZ;AAAA,UAAA;AAAA,QACH,CACD;AAAA,MAAA;AAAA,IAEL;AAAA,EACD,CAAA;AACH,CAAC;"}