"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
function sortDataByOrder(data, orderRules, key) {
  const getSubsetIndex = (item, subsets) => {
    var _a;
    for (let i = 0; i < subsets.length; i++) {
      if ((_a = subsets[i]) == null ? void 0 : _a.includes(item)) {
        return i;
      }
    }
    return null;
  };
  const orderSets = orderRules.reduce(
    (sets, [A, B]) => [...sets, A, B],
    []
  );
  const inOrderArray = data.filter(
    (item) => getSubsetIndex(item[key], orderSets) !== null
  );
  let wasResorted = false;
  const sortedArray = inOrderArray.sort((a, b) => {
    const aKey = a[key], bKey = b[key];
    const aSubsetIndex = getSubsetIndex(aKey, orderSets);
    const bSubsetIndex = getSubsetIndex(bKey, orderSets);
    if (aSubsetIndex !== null && bSubsetIndex !== null && aSubsetIndex !== bSubsetIndex) {
      return aSubsetIndex - bSubsetIndex;
    }
    return 0;
  });
  const inOrderIterator = sortedArray.values();
  const result = data.map((item) => {
    if (getSubsetIndex(item[key], orderSets) !== null) {
      const sortedItem = inOrderIterator.next().value;
      if (sortedItem[key] !== item[key]) {
        wasResorted = true;
      }
      return sortedItem;
    }
    return item;
  });
  if (!wasResorted) {
    return null;
  }
  return result;
}
exports.sortDataByOrder = sortDataByOrder;
//# sourceMappingURL=infinite-query-property-order.utils.cjs.map
