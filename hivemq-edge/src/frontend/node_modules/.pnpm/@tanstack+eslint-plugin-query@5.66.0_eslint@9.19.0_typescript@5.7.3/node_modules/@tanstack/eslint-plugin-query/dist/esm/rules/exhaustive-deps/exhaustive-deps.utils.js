import { AST_NODE_TYPES } from "@typescript-eslint/utils";
import { ASTUtils } from "../../utils/ast-utils.js";
const ExhaustiveDepsUtils = {
  isRelevantReference(params) {
    const { sourceCode, reference, scopeManager, node } = params;
    const component = ASTUtils.getFunctionAncestor(sourceCode, node);
    if (component === void 0) {
      return false;
    }
    if (!ASTUtils.isDeclaredInNode({
      scopeManager,
      reference,
      functionNode: component
    })) {
      return false;
    }
    return reference.identifier.name !== "undefined" && reference.identifier.parent.type !== AST_NODE_TYPES.NewExpression && !ExhaustiveDepsUtils.isInstanceOfKind(reference.identifier.parent);
  },
  isInstanceOfKind(node) {
    return node.type === AST_NODE_TYPES.BinaryExpression && node.operator === "instanceof";
  }
};
export {
  ExhaustiveDepsUtils
};
//# sourceMappingURL=exhaustive-deps.utils.js.map
