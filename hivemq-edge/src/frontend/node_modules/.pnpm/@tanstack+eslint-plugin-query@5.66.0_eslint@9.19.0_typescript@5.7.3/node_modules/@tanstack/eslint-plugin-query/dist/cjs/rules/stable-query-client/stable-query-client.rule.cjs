"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const utils = require("@typescript-eslint/utils");
const astUtils = require("../../utils/ast-utils.cjs");
const getDocsUrl = require("../../utils/get-docs-url.cjs");
const detectReactQueryImports = require("../../utils/detect-react-query-imports.cjs");
const name = "stable-query-client";
const createRule = utils.ESLintUtils.RuleCreator(getDocsUrl.getDocsUrl);
const rule = createRule({
  name,
  meta: {
    type: "problem",
    docs: {
      description: "Makes sure that QueryClient is stable",
      recommended: "error"
    },
    messages: {
      unstable: [
        "QueryClient is not stable. It should be either extracted from the component or wrapped in React.useState.",
        "See https://tkdodo.eu/blog/react-query-fa-qs#2-the-queryclient-is-not-stable"
      ].join("\n"),
      fixTo: "Fix to {{result}}"
    },
    hasSuggestions: true,
    fixable: "code",
    schema: []
  },
  defaultOptions: [],
  create: detectReactQueryImports.detectTanstackQueryImports((context, _, helpers) => {
    return {
      NewExpression: (node) => {
        if (node.callee.type !== utils.AST_NODE_TYPES.Identifier || node.callee.name !== "QueryClient" || node.parent.type !== utils.AST_NODE_TYPES.VariableDeclarator || !helpers.isSpecificTanstackQueryImport(
          node.callee,
          "@tanstack/react-query"
        )) {
          return;
        }
        const fnAncestor = astUtils.ASTUtils.getFunctionAncestor(
          context.sourceCode,
          node
        );
        const isReactServerComponent = (fnAncestor == null ? void 0 : fnAncestor.async) === true;
        if (!astUtils.ASTUtils.isValidReactComponentOrHookName(fnAncestor == null ? void 0 : fnAncestor.id) || isReactServerComponent) {
          return;
        }
        context.report({
          node: node.parent,
          messageId: "unstable",
          fix: (() => {
            const { parent } = node;
            if (parent.id.type !== utils.AST_NODE_TYPES.Identifier) {
              return;
            }
            const sourceCode = context.sourceCode ?? context.getSourceCode();
            const nodeText = sourceCode.getText(node);
            const variableName = parent.id.name;
            return (fixer) => {
              return fixer.replaceTextRange(
                [parent.range[0], parent.range[1]],
                `[${variableName}] = React.useState(() => ${nodeText})`
              );
            };
          })()
        });
      }
    };
  })
});
exports.name = name;
exports.rule = rule;
//# sourceMappingURL=stable-query-client.rule.cjs.map
