"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const utils = require("@typescript-eslint/utils");
const getDocsUrl = require("../../utils/get-docs-url.cjs");
const astUtils = require("../../utils/ast-utils.cjs");
const detectReactQueryImports = require("../../utils/detect-react-query-imports.cjs");
const noRestDestructuring_utils = require("./no-rest-destructuring.utils.cjs");
const name = "no-rest-destructuring";
const queryHooks = [
  "useQuery",
  "useQueries",
  "useInfiniteQuery",
  "useSuspenseQuery",
  "useSuspenseQueries",
  "useSuspenseInfiniteQuery"
];
const createRule = utils.ESLintUtils.RuleCreator(getDocsUrl.getDocsUrl);
const rule = createRule({
  name,
  meta: {
    type: "problem",
    docs: {
      description: "Disallows rest destructuring in queries",
      recommended: "warn"
    },
    messages: {
      objectRestDestructure: `Object rest destructuring on a query will observe all changes to the query, leading to excessive re-renders.`
    },
    schema: []
  },
  defaultOptions: [],
  create: detectReactQueryImports.detectTanstackQueryImports((context, _, helpers) => {
    return {
      CallExpression: (node) => {
        if (!astUtils.ASTUtils.isIdentifierWithOneOfNames(node.callee, queryHooks) || !helpers.isTanstackQueryImport(node.callee) || node.parent.type !== utils.AST_NODE_TYPES.VariableDeclarator) {
          return;
        }
        const returnValue = node.parent.id;
        if (node.callee.name !== "useQueries" && node.callee.name !== "useSuspenseQueries") {
          if (noRestDestructuring_utils.NoRestDestructuringUtils.isObjectRestDestructuring(returnValue)) {
            context.report({
              node: node.parent,
              messageId: "objectRestDestructure"
            });
          }
          return;
        }
        if (returnValue.type !== utils.AST_NODE_TYPES.ArrayPattern) {
          return;
        }
        returnValue.elements.forEach((queryResult) => {
          if (queryResult === null) {
            return;
          }
          if (noRestDestructuring_utils.NoRestDestructuringUtils.isObjectRestDestructuring(queryResult)) {
            context.report({
              node: queryResult,
              messageId: "objectRestDestructure"
            });
          }
        });
      }
    };
  })
});
exports.name = name;
exports.rule = rule;
//# sourceMappingURL=no-rest-destructuring.rule.cjs.map
