{"version":3,"sources":["../src/index.ts","../src/editable.tsx","../src/editable-context.ts","../src/use-editable.ts","../src/editable-input.tsx","../src/shared.ts","../src/editable-preview.tsx","../src/editable-textarea.tsx","../src/use-editable-controls.tsx","../src/use-editable-state.tsx"],"sourcesContent":["export { Editable } from \"./editable\"\nexport type { EditableProps } from \"./editable\"\nexport { useEditableStyles } from \"./editable-context\"\nexport { useEditableContext } from \"./editable-context\"\nexport { EditableInput } from \"./editable-input\"\nexport type { EditableInputProps } from \"./editable-input\"\nexport { EditablePreview } from \"./editable-preview\"\nexport type { EditablePreviewProps } from \"./editable-preview\"\nexport { EditableTextarea } from \"./editable-textarea\"\nexport type { EditableTextareaProps } from \"./editable-textarea\"\nexport { useEditable } from \"./use-editable\"\nexport type { UseEditableProps, UseEditableReturn } from \"./use-editable\"\nexport { useEditableControls } from \"./use-editable-controls\"\nexport { useEditableState } from \"./use-editable-state\"\n","import { cx, runIfFn } from \"@chakra-ui/shared-utils\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  ThemingProps,\n  useMultiStyleConfig,\n} from \"@chakra-ui/system\"\nimport { EditableProvider, EditableStylesProvider } from \"./editable-context\"\nimport {\n  useEditable,\n  UseEditableProps,\n  UseEditableReturn,\n} from \"./use-editable\"\n\ntype RenderProps = Pick<\n  UseEditableReturn,\n  \"isEditing\" | \"onSubmit\" | \"onCancel\" | \"onEdit\"\n>\n\ntype MaybeRenderProp<P> = React.ReactNode | ((props: P) => React.ReactNode)\n\ninterface BaseEditableProps\n  extends Omit<\n    HTMLChakraProps<\"div\">,\n    \"onChange\" | \"value\" | \"defaultValue\" | \"onSubmit\" | \"onBlur\"\n  > {}\n\nexport interface EditableProps\n  extends UseEditableProps,\n    Omit<BaseEditableProps, \"children\">,\n    ThemingProps<\"Editable\"> {\n  children?: MaybeRenderProp<RenderProps>\n}\n\n/**\n * Editable\n *\n * The wrapper that provides context and logic for all editable\n * components. It renders a `div`\n *\n * @see Docs https://chakra-ui.com/docs/components/editable\n */\nexport const Editable = forwardRef<EditableProps, \"div\">(function Editable(\n  props,\n  ref,\n) {\n  const styles = useMultiStyleConfig(\"Editable\", props)\n\n  const ownProps = omitThemingProps(props)\n  const { htmlProps, ...context } = useEditable(ownProps)\n\n  const { isEditing, onSubmit, onCancel, onEdit } = context\n\n  const _className = cx(\"chakra-editable\", props.className)\n\n  const children = runIfFn(props.children, {\n    isEditing,\n    onSubmit,\n    onCancel,\n    onEdit,\n  })\n\n  return (\n    <EditableProvider value={context}>\n      <EditableStylesProvider value={styles}>\n        <chakra.div\n          ref={ref}\n          {...(htmlProps as HTMLChakraProps<\"div\">)}\n          className={_className}\n        >\n          {children}\n        </chakra.div>\n      </EditableStylesProvider>\n    </EditableProvider>\n  )\n})\n\nEditable.displayName = \"Editable\"\n","import { createContext } from \"@chakra-ui/react-context\"\nimport { SystemStyleObject } from \"@chakra-ui/system\"\nimport { UseEditableReturn } from \"./use-editable\"\n\nexport const [EditableStylesProvider, useEditableStyles] = createContext<\n  Record<string, SystemStyleObject>\n>({\n  name: `EditableStylesContext`,\n  errorMessage: `useEditableStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<Editable />\" `,\n})\n\nexport type EditableContext = Omit<UseEditableReturn, \"htmlProps\">\n\nexport const [EditableProvider, useEditableContext] =\n  createContext<EditableContext>({\n    name: \"EditableContext\",\n    errorMessage:\n      \"useEditableContext: context is undefined. Seems you forgot to wrap the editable components in `<Editable />`\",\n  })\n","import { useFocusOnPointerDown } from \"@chakra-ui/react-use-focus-on-pointer-down\"\nimport { useSafeLayoutEffect } from \"@chakra-ui/react-use-safe-layout-effect\"\nimport { useUpdateEffect } from \"@chakra-ui/react-use-update-effect\"\nimport { useControllableState } from \"@chakra-ui/react-use-controllable-state\"\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\"\nimport { useCallbackRef } from \"@chakra-ui/react-use-callback-ref\"\nimport { ariaAttr, callAllHandlers } from \"@chakra-ui/shared-utils\"\nimport { PropGetter } from \"@chakra-ui/react-types\"\nimport { useCallback, useEffect, useRef, useState, RefObject } from \"react\"\n\ninterface FocusableElement {\n  focus(options?: FocusOptions): void\n}\n\nexport interface UseEditableProps {\n  /**\n   * The value of the Editable in both edit & preview mode\n   */\n  value?: string\n  /**\n   * The initial value of the Editable in both edit & preview mode\n   */\n  defaultValue?: string\n  /**\n   * If `true`, the Editable will be disabled.\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, the Editable will start with edit mode by default.\n   */\n  startWithEditView?: boolean\n  /**\n   * If `true`, the read only view, has a `tabIndex` set to `0`\n   * so it can receive focus via the keyboard or click.\n   * @default true\n   */\n  isPreviewFocusable?: boolean\n  /**\n   * If `true`, it'll update the value onBlur and turn off the edit mode.\n   * @default true\n   */\n  submitOnBlur?: boolean\n  /**\n   * Callback invoked when user changes input.\n   */\n  onChange?: (nextValue: string) => void\n  /**\n   * Callback invoked when user cancels input with the `Esc` key.\n   * It provides the last confirmed value as argument.\n   */\n  onCancel?: (previousValue: string) => void\n  /**\n   * Callback invoked when user confirms value with `enter` key or by blurring input.\n   */\n  onSubmit?: (nextValue: string) => void\n  /**\n   * Callback invoked once the user enters edit mode.\n   */\n  onEdit?: () => void\n  /**\n   * Callback invoked when the user either submits or cancels.\n   * It provides the last confirmed value as argument.\n   */\n  onBlur?: (nextValue: string) => void\n  /**\n   * If `true`, the input's text will be highlighted on focus.\n   * @default true\n   */\n  selectAllOnFocus?: boolean\n  /**\n   * The placeholder text when the value is empty.\n   */\n  placeholder?: string\n  /**\n   * The `ref` of element to receive focus when the modal closes.\n   */\n  finalFocusRef?: RefObject<FocusableElement>\n}\n\nfunction contains(parent: HTMLElement | null, child: HTMLElement) {\n  if (!parent) return false\n  return parent === child || parent.contains(child)\n}\n\n/**\n * React hook for managing the inline renaming of some text.\n *\n * @see Docs https://chakra-ui.com/editable\n */\nexport function useEditable(props: UseEditableProps = {}) {\n  const {\n    onChange: onChangeProp,\n    onCancel: onCancelProp,\n    onSubmit: onSubmitProp,\n    onBlur: onBlurProp,\n    value: valueProp,\n    isDisabled,\n    defaultValue,\n    startWithEditView,\n    isPreviewFocusable = true,\n    submitOnBlur = true,\n    selectAllOnFocus = true,\n    placeholder,\n    onEdit: onEditCallback,\n    finalFocusRef,\n    ...htmlProps\n  } = props\n\n  const onEditProp = useCallbackRef(onEditCallback)\n\n  const defaultIsEditing = Boolean(startWithEditView && !isDisabled)\n\n  const [isEditing, setIsEditing] = useState(defaultIsEditing)\n\n  const [value, setValue] = useControllableState({\n    defaultValue: defaultValue || \"\",\n    value: valueProp,\n    onChange: onChangeProp,\n  })\n\n  /**\n   * Keep track of the previous value, so if users\n   * presses `cancel`, we can revert to it.\n   */\n  const [prevValue, setPrevValue] = useState(value)\n\n  /**\n   * Ref to help focus the input in edit mode\n   */\n  const inputRef = useRef<HTMLInputElement | HTMLTextAreaElement>(null)\n  const previewRef = useRef<any>(null)\n\n  const editButtonRef = useRef<HTMLButtonElement>(null)\n  const cancelButtonRef = useRef<HTMLElement>(null)\n  const submitButtonRef = useRef<HTMLElement>(null)\n\n  useFocusOnPointerDown({\n    ref: inputRef,\n    enabled: isEditing,\n    elements: [cancelButtonRef, submitButtonRef],\n  })\n\n  const isInteractive = !isEditing && !isDisabled\n\n  useSafeLayoutEffect(() => {\n    if (isEditing) {\n      inputRef.current?.focus()\n      if (selectAllOnFocus) inputRef.current?.select()\n    }\n  }, [])\n\n  useUpdateEffect(() => {\n    if (!isEditing) {\n      if (finalFocusRef) {\n        finalFocusRef.current?.focus()\n      } else {\n        editButtonRef.current?.focus()\n      }\n      return\n    }\n\n    inputRef.current?.focus()\n\n    if (selectAllOnFocus) {\n      inputRef.current?.select()\n    }\n\n    onEditProp?.()\n  }, [isEditing, onEditProp, selectAllOnFocus])\n\n  const onEdit = useCallback(() => {\n    if (isInteractive) {\n      setIsEditing(true)\n    }\n  }, [isInteractive])\n\n  const onUpdatePrevValue = useCallback(() => {\n    setPrevValue(value)\n  }, [value])\n\n  const onCancel = useCallback(() => {\n    setIsEditing(false)\n    setValue(prevValue)\n    onCancelProp?.(prevValue)\n    onBlurProp?.(prevValue)\n  }, [onCancelProp, onBlurProp, setValue, prevValue])\n\n  const onSubmit = useCallback(() => {\n    setIsEditing(false)\n    setPrevValue(value)\n    onSubmitProp?.(value)\n    onBlurProp?.(prevValue)\n  }, [value, onSubmitProp, onBlurProp, prevValue])\n\n  useEffect(() => {\n    if (isEditing) return\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=559561\n    const inputEl = inputRef.current\n    if (inputEl?.ownerDocument.activeElement === inputEl) {\n      inputEl?.blur()\n    }\n  }, [isEditing])\n\n  const onChange = useCallback(\n    (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n      setValue(event.currentTarget.value)\n    },\n    [setValue],\n  )\n\n  const onKeyDown = useCallback(\n    (event: React.KeyboardEvent) => {\n      const eventKey = event.key\n\n      const keyMap: Record<string, React.KeyboardEventHandler> = {\n        Escape: onCancel,\n        Enter: (event) => {\n          if (!event.shiftKey && !event.metaKey) {\n            onSubmit()\n          }\n        },\n      }\n\n      const action = keyMap[eventKey]\n\n      if (action) {\n        event.preventDefault()\n        action(event)\n      }\n    },\n    [onCancel, onSubmit],\n  )\n\n  const onKeyDownWithoutSubmit = useCallback(\n    (event: React.KeyboardEvent) => {\n      const eventKey = event.key\n\n      const keyMap: Record<string, React.KeyboardEventHandler> = {\n        Escape: onCancel,\n      }\n\n      const action = keyMap[eventKey]\n\n      if (action) {\n        event.preventDefault()\n        action(event)\n      }\n    },\n    [onCancel],\n  )\n\n  const isValueEmpty = value.length === 0\n\n  const onBlur = useCallback(\n    (event: React.FocusEvent) => {\n      if (!isEditing) return\n      const doc = event.currentTarget.ownerDocument\n      const relatedTarget = (event.relatedTarget ??\n        doc.activeElement) as HTMLElement\n      const targetIsCancel = contains(cancelButtonRef.current, relatedTarget)\n      const targetIsSubmit = contains(submitButtonRef.current, relatedTarget)\n      const isValidBlur = !targetIsCancel && !targetIsSubmit\n\n      if (isValidBlur) {\n        if (submitOnBlur) {\n          onSubmit()\n        } else {\n          onCancel()\n        }\n      }\n    },\n    [submitOnBlur, onSubmit, onCancel, isEditing],\n  )\n\n  const getPreviewProps: PropGetter = useCallback(\n    (props = {}, ref = null) => {\n      const tabIndex = isInteractive && isPreviewFocusable ? 0 : undefined\n      return {\n        ...props,\n        ref: mergeRefs(ref, previewRef),\n        children: isValueEmpty ? placeholder : value,\n        hidden: isEditing,\n        \"aria-disabled\": ariaAttr(isDisabled),\n        tabIndex,\n        onFocus: callAllHandlers(props.onFocus, onEdit, onUpdatePrevValue),\n      }\n    },\n    [\n      isDisabled,\n      isEditing,\n      isInteractive,\n      isPreviewFocusable,\n      isValueEmpty,\n      onEdit,\n      onUpdatePrevValue,\n      placeholder,\n      value,\n    ],\n  )\n\n  const getInputProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ...props,\n      hidden: !isEditing,\n      placeholder,\n      ref: mergeRefs(ref, inputRef),\n      disabled: isDisabled,\n      \"aria-disabled\": ariaAttr(isDisabled),\n      value,\n      onBlur: callAllHandlers(props.onBlur, onBlur),\n      onChange: callAllHandlers(props.onChange, onChange),\n      onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n      onFocus: callAllHandlers(props.onFocus, onUpdatePrevValue),\n    }),\n    [\n      isDisabled,\n      isEditing,\n      onBlur,\n      onChange,\n      onKeyDown,\n      onUpdatePrevValue,\n      placeholder,\n      value,\n    ],\n  )\n\n  const getTextareaProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ...props,\n      hidden: !isEditing,\n      placeholder,\n      ref: mergeRefs(ref, inputRef),\n      disabled: isDisabled,\n      \"aria-disabled\": ariaAttr(isDisabled),\n      value,\n      onBlur: callAllHandlers(props.onBlur, onBlur),\n      onChange: callAllHandlers(props.onChange, onChange),\n      onKeyDown: callAllHandlers(props.onKeyDown, onKeyDownWithoutSubmit),\n      onFocus: callAllHandlers(props.onFocus, onUpdatePrevValue),\n    }),\n    [\n      isDisabled,\n      isEditing,\n      onBlur,\n      onChange,\n      onKeyDownWithoutSubmit,\n      onUpdatePrevValue,\n      placeholder,\n      value,\n    ],\n  )\n\n  const getEditButtonProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      \"aria-label\": \"Edit\",\n      ...props,\n      type: \"button\",\n      onClick: callAllHandlers(props.onClick, onEdit),\n      ref: mergeRefs(ref, editButtonRef),\n      disabled: isDisabled,\n    }),\n    [onEdit, isDisabled],\n  )\n\n  const getSubmitButtonProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ...props,\n      \"aria-label\": \"Submit\",\n      ref: mergeRefs(submitButtonRef, ref),\n      type: \"button\",\n      onClick: callAllHandlers(props.onClick, onSubmit),\n      disabled: isDisabled,\n    }),\n    [onSubmit, isDisabled],\n  )\n\n  const getCancelButtonProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      \"aria-label\": \"Cancel\",\n      id: \"cancel\",\n      ...props,\n      ref: mergeRefs(cancelButtonRef, ref),\n      type: \"button\",\n      onClick: callAllHandlers(props.onClick, onCancel),\n      disabled: isDisabled,\n    }),\n    [onCancel, isDisabled],\n  )\n\n  return {\n    isEditing,\n    isDisabled,\n    isValueEmpty,\n    value,\n    onEdit,\n    onCancel,\n    onSubmit,\n    getPreviewProps,\n    getInputProps,\n    getTextareaProps,\n    getEditButtonProps,\n    getSubmitButtonProps,\n    getCancelButtonProps,\n    htmlProps,\n  }\n}\n\nexport type UseEditableReturn = ReturnType<typeof useEditable>\n","import { chakra, forwardRef, HTMLChakraProps } from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { useEditableContext, useEditableStyles } from \"./editable-context\"\nimport { commonStyles } from \"./shared\"\n\nexport interface EditableInputProps extends HTMLChakraProps<\"input\"> {}\n/**\n * EditableInput\n *\n * The input used in the `edit` mode\n */\n\nexport const EditableInput = forwardRef<EditableInputProps, \"input\">(\n  function EditableInput(props, ref) {\n    const { getInputProps } = useEditableContext()\n    const styles = useEditableStyles()\n\n    const inputProps = getInputProps(props, ref)\n    const _className = cx(\"chakra-editable__input\", props.className)\n\n    return (\n      <chakra.input\n        {...inputProps}\n        __css={{\n          outline: 0,\n          ...commonStyles,\n          ...styles.input,\n        }}\n        className={_className}\n      />\n    )\n  },\n)\nEditableInput.displayName = \"EditableInput\"\n","import { SystemStyleObject } from \"@chakra-ui/system\"\n\nexport const commonStyles: SystemStyleObject = {\n  fontSize: \"inherit\",\n  fontWeight: \"inherit\",\n  textAlign: \"inherit\",\n  bg: \"transparent\",\n}\n","import { chakra, forwardRef, HTMLChakraProps } from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { useEditableContext, useEditableStyles } from \"./editable-context\"\nimport { commonStyles } from \"./shared\"\n\nexport interface EditablePreviewProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * EditablePreview\n *\n * The `span` used to display the final value, in the `preview` mode\n */\nexport const EditablePreview = forwardRef<EditablePreviewProps, \"span\">(\n  function EditablePreview(props, ref) {\n    const { getPreviewProps } = useEditableContext()\n    const styles = useEditableStyles()\n\n    const previewProps = getPreviewProps(props, ref) as HTMLChakraProps<\"span\">\n    const _className = cx(\"chakra-editable__preview\", props.className)\n\n    return (\n      <chakra.span\n        {...previewProps}\n        __css={{\n          cursor: \"text\",\n          display: \"inline-block\",\n          ...commonStyles,\n          ...styles.preview,\n        }}\n        className={_className}\n      />\n    )\n  },\n)\nEditablePreview.displayName = \"EditablePreview\"\n","import { chakra, forwardRef, HTMLChakraProps } from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { useEditableContext, useEditableStyles } from \"./editable-context\"\nimport { commonStyles } from \"./shared\"\n\nexport interface EditableTextareaProps extends HTMLChakraProps<\"textarea\"> {}\n\n/**\n * EditableTextarea\n *\n * The textarea used in the `edit` mode\n */\n\nexport const EditableTextarea = forwardRef<EditableTextareaProps, \"textarea\">(\n  function EditableTextarea(props, ref) {\n    const { getTextareaProps } = useEditableContext()\n    const styles = useEditableStyles()\n\n    const textareaProps = getTextareaProps(props, ref)\n    const _className = cx(\"chakra-editable__textarea\", props.className)\n\n    return (\n      <chakra.textarea\n        {...textareaProps}\n        __css={{\n          outline: 0,\n          ...commonStyles,\n          ...styles.textarea,\n        }}\n        className={_className}\n      />\n    )\n  },\n)\nEditableTextarea.displayName = \"EditableTextarea\"\n","import { useEditableContext } from \"./editable-context\"\n\n/**\n * React hook use to create controls for the editable component\n */\n\nexport function useEditableControls() {\n  const {\n    isEditing,\n    getEditButtonProps,\n    getCancelButtonProps,\n    getSubmitButtonProps,\n  } = useEditableContext()\n\n  return {\n    isEditing,\n    getEditButtonProps,\n    getCancelButtonProps,\n    getSubmitButtonProps,\n  }\n}\n","import { useEditableContext } from \"./editable-context\"\n\n/**\n * React hook use to gain access to the editable state and actions.\n */\n\nexport function useEditableState() {\n  const { isEditing, onSubmit, onCancel, onEdit, isDisabled } =\n    useEditableContext()\n\n  return {\n    isEditing,\n    onSubmit,\n    onCancel,\n    onEdit,\n    isDisabled,\n  }\n}\n"],"mappings":"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","names":["import_shared_utils","event","props","Editable","import_system","import_shared_utils","import_jsx_runtime","EditableInput","import_system","import_shared_utils","import_jsx_runtime","EditablePreview","import_system","import_shared_utils","import_jsx_runtime","EditableTextarea"]}