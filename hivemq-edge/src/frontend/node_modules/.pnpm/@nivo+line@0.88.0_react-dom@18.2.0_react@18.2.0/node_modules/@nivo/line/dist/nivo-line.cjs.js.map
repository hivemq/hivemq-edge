{"version":3,"file":"nivo-line.cjs.js","sources":["../src/PointTooltip.js","../src/SliceTooltip.js","../src/props.js","../src/hooks.js","../src/Areas.js","../src/LinesItem.js","../src/Lines.js","../src/SlicesItem.js","../src/Slices.js","../src/Points.js","../src/Mesh.js","../src/Line.js","../src/LineCanvas.js","../src/ResponsiveLineCanvas.js","../src/ResponsiveLine.js"],"sourcesContent":["import { memo } from 'react'\nimport { BasicTooltip } from '@nivo/tooltip'\n\nconst LinePointTooltip = ({ point }) => {\n    return (\n        <BasicTooltip\n            id={\n                <span>\n                    x: <strong>{point.data.xFormatted}</strong>, y:{' '}\n                    <strong>{point.data.yFormatted}</strong>\n                </span>\n            }\n            enableChip={true}\n            color={point.serieColor}\n        />\n    )\n}\n\nexport default memo(LinePointTooltip)\n","import { memo } from 'react'\nimport { useTheme } from '@nivo/core'\nimport { Chip, TableTooltip } from '@nivo/tooltip'\n\nconst SliceTooltip = ({ slice, axis }) => {\n    const theme = useTheme()\n    const otherAxis = axis === 'x' ? 'y' : 'x'\n\n    return (\n        <TableTooltip\n            rows={slice.points.map(point => [\n                <Chip key=\"chip\" color={point.serieColor} style={theme.tooltip.chip} />,\n                point.serieId,\n                <span key=\"value\" style={theme.tooltip.tableCellValue}>\n                    {point.data[`${otherAxis}Formatted`]}\n                </span>,\n            ])}\n        />\n    )\n}\n\nexport default memo(SliceTooltip)\n","import PointTooltip from './PointTooltip'\nimport SliceTooltip from './SliceTooltip'\n\nconst commonDefaultProps = {\n    curve: 'linear',\n\n    xScale: {\n        type: 'point',\n    },\n    yScale: {\n        type: 'linear',\n        min: 0,\n        max: 'auto',\n    },\n\n    layers: [\n        'grid',\n        'markers',\n        'axes',\n        'areas',\n        'crosshair',\n        'lines',\n        'points',\n        'slices',\n        'mesh',\n        'legends',\n    ],\n    axisBottom: {},\n    axisLeft: {},\n    enableGridX: true,\n    enableGridY: true,\n\n    enablePoints: true,\n    pointSize: 6,\n    pointColor: { from: 'color' },\n    pointBorderWidth: 0,\n    pointBorderColor: { theme: 'background' },\n    enablePointLabel: false,\n    pointLabel: 'yFormatted',\n\n    colors: { scheme: 'nivo' },\n    enableArea: false,\n    areaBaselineValue: 0,\n    areaOpacity: 0.2,\n    areaBlendMode: 'normal',\n    lineWidth: 2,\n\n    legends: [],\n\n    isInteractive: true,\n    tooltip: PointTooltip,\n    enableSlices: false,\n    debugSlices: false,\n    sliceTooltip: SliceTooltip,\n    debugMesh: false,\n    enableCrosshair: true,\n    crosshairType: 'bottom-left',\n}\n\nexport const LineDefaultProps = {\n    ...commonDefaultProps,\n    enablePointLabel: false,\n    useMesh: false,\n    enableTouchCrosshair: false,\n    animate: true,\n    motionConfig: 'gentle',\n    defs: [],\n    fill: [],\n    role: 'img',\n    initialHiddenIds: [],\n}\n\nexport const LineCanvasDefaultProps = {\n    ...commonDefaultProps,\n    pixelRatio: typeof window !== 'undefined' ? window.devicePixelRatio || 1 : 1,\n}\n","import { useCallback, useMemo, useState } from 'react'\nimport { area, line } from 'd3-shape'\nimport { curveFromProp, useTheme, useValueFormatter } from '@nivo/core'\nimport { useOrdinalColorScale, useInheritedColor } from '@nivo/colors'\nimport { computeXYScalesForSeries } from '@nivo/scales'\nimport uniqueId from 'lodash/uniqueId'\nimport { LineDefaultProps } from './props'\n\nexport const useLineGenerator = ({ curve }) => {\n    return useMemo(\n        () =>\n            line()\n                .defined(d => d.x !== null && d.y !== null)\n                .x(d => d.x)\n                .y(d => d.y)\n                .curve(curveFromProp(curve)),\n        [curve]\n    )\n}\n\nexport const useAreaGenerator = ({ curve, yScale, areaBaselineValue }) => {\n    return useMemo(() => {\n        return area()\n            .defined(d => d.x !== null && d.y !== null)\n            .x(d => d.x)\n            .y1(d => d.y)\n            .curve(curveFromProp(curve))\n            .y0(yScale(areaBaselineValue))\n    }, [curve, yScale, areaBaselineValue])\n}\n\nconst usePoints = ({ series, getPointColor, getPointBorderColor, formatX, formatY }) => {\n    return useMemo(() => {\n        return series.reduce((acc, serie) => {\n            return [\n                ...acc,\n                ...serie.data\n                    .filter(datum => datum.position.x !== null && datum.position.y !== null)\n                    .map((datum, i) => {\n                        const point = {\n                            id: `${serie.id}.${i}`,\n                            index: acc.length + i,\n                            serieId: serie.id,\n                            serieColor: serie.color,\n                            x: datum.position.x,\n                            y: datum.position.y,\n                        }\n                        point.color = getPointColor(serie)\n                        point.borderColor = getPointBorderColor(point)\n                        point.data = {\n                            ...datum.data,\n                            xFormatted: formatX(datum.data.x),\n                            yFormatted: formatY(datum.data.y),\n                        }\n\n                        return point\n                    }),\n            ]\n        }, [])\n    }, [series, getPointColor, getPointBorderColor, formatX, formatY])\n}\n\nexport const useSlices = ({ componentId, enableSlices, points, width, height }) => {\n    return useMemo(() => {\n        if (enableSlices === false) return []\n\n        if (enableSlices === 'x') {\n            const map = new Map()\n            points.forEach(point => {\n                if (point.data.x === null || point.data.y === null) return\n                if (!map.has(point.x)) map.set(point.x, [point])\n                else map.get(point.x).push(point)\n            })\n            return Array.from(map.entries())\n                .sort((a, b) => a[0] - b[0])\n                .map(([x, slicePoints], i, slices) => {\n                    const prevSlice = slices[i - 1]\n                    const nextSlice = slices[i + 1]\n\n                    let x0\n                    if (!prevSlice) x0 = x\n                    else x0 = x - (x - prevSlice[0]) / 2\n\n                    let sliceWidth\n                    if (!nextSlice) sliceWidth = width - x0\n                    else sliceWidth = x - x0 + (nextSlice[0] - x) / 2\n\n                    return {\n                        id: `slice:${componentId}:${x}`,\n                        x0,\n                        x,\n                        y0: 0,\n                        y: 0,\n                        width: sliceWidth,\n                        height,\n                        points: slicePoints.reverse(),\n                    }\n                })\n        } else if (enableSlices === 'y') {\n            const map = new Map()\n            points.forEach(point => {\n                if (point.data.x === null || point.data.y === null) return\n                if (!map.has(point.y)) map.set(point.y, [point])\n                else map.get(point.y).push(point)\n            })\n            return Array.from(map.entries())\n                .sort((a, b) => a[0] - b[0])\n                .map(([y, slicePoints], i, slices) => {\n                    const prevSlice = slices[i - 1]\n                    const nextSlice = slices[i + 1]\n\n                    let y0\n                    if (!prevSlice) y0 = y\n                    else y0 = y - (y - prevSlice[0]) / 2\n\n                    let sliceHeight\n                    if (!nextSlice) sliceHeight = height - y0\n                    else sliceHeight = y - y0 + (nextSlice[0] - y) / 2\n\n                    return {\n                        id: y,\n                        x0: 0,\n                        x: 0,\n                        y0,\n                        y,\n                        width,\n                        height: sliceHeight,\n                        points: slicePoints.reverse(),\n                    }\n                })\n        }\n    }, [componentId, enableSlices, height, points, width])\n}\n\nexport const LINE_UNIQUE_ID_PREFIX = 'line'\n\nexport const useLine = ({\n    data,\n    xScale: xScaleSpec = LineDefaultProps.xScale,\n    xFormat,\n    yScale: yScaleSpec = LineDefaultProps.yScale,\n    yFormat,\n    width,\n    height,\n    colors = LineDefaultProps.colors,\n    curve = LineDefaultProps.curve,\n    areaBaselineValue = LineDefaultProps.areaBaselineValue,\n    pointColor = LineDefaultProps.pointColor,\n    pointBorderColor = LineDefaultProps.pointBorderColor,\n    enableSlices = LineDefaultProps.enableSlicesTooltip,\n    initialHiddenIds = LineDefaultProps.initialHiddenIds,\n}) => {\n    const [componentId] = useState(uniqueId(LINE_UNIQUE_ID_PREFIX))\n    const formatX = useValueFormatter(xFormat)\n    const formatY = useValueFormatter(yFormat)\n    const getColor = useOrdinalColorScale(colors, 'id')\n    const theme = useTheme()\n    const getPointColor = useInheritedColor(pointColor, theme)\n    const getPointBorderColor = useInheritedColor(pointBorderColor, theme)\n    const [hiddenIds, setHiddenIds] = useState(initialHiddenIds ?? [])\n\n    const {\n        xScale,\n        yScale,\n        series: rawSeries,\n    } = useMemo(\n        () =>\n            computeXYScalesForSeries(\n                data.filter(item => hiddenIds.indexOf(item.id) === -1),\n                xScaleSpec,\n                yScaleSpec,\n                width,\n                height\n            ),\n        [data, hiddenIds, xScaleSpec, yScaleSpec, width, height]\n    )\n\n    const { legendData, series } = useMemo(() => {\n        const dataWithColor = data.map(line => ({\n            id: line.id,\n            label: line.id,\n            color: getColor(line),\n        }))\n        const series = dataWithColor\n            .map(datum => ({\n                ...rawSeries.find(serie => serie.id === datum.id),\n                color: datum.color,\n            }))\n            .filter(item => Boolean(item.id))\n        const legendData = dataWithColor\n            .map(item => ({ ...item, hidden: !series.find(serie => serie.id === item.id) }))\n            .reverse()\n\n        return { legendData, series }\n    }, [data, rawSeries, getColor])\n\n    const toggleSerie = useCallback(id => {\n        setHiddenIds(state =>\n            state.indexOf(id) > -1 ? state.filter(item => item !== id) : [...state, id]\n        )\n    }, [])\n\n    const points = usePoints({\n        series,\n        getPointColor,\n        getPointBorderColor,\n        formatX,\n        formatY,\n    })\n\n    const slices = useSlices({\n        componentId,\n        enableSlices,\n        points,\n        width,\n        height,\n    })\n\n    const lineGenerator = useLineGenerator({ curve })\n    const areaGenerator = useAreaGenerator({\n        curve,\n        yScale,\n        areaBaselineValue,\n    })\n\n    return {\n        legendData,\n        toggleSerie,\n        lineGenerator,\n        areaGenerator,\n        getColor,\n        series,\n        xScale,\n        yScale,\n        slices,\n        points,\n    }\n}\n","import { memo } from 'react'\nimport { useSpring, animated } from '@react-spring/web'\nimport { useAnimatedPath, useMotionConfig } from '@nivo/core'\n\nconst AreaPath = ({ areaBlendMode, areaOpacity, color, fill, path }) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedPath = useAnimatedPath(path)\n    const animatedProps = useSpring({\n        color,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <animated.path\n            d={animatedPath}\n            fill={fill ? fill : animatedProps.color}\n            fillOpacity={areaOpacity}\n            strokeWidth={0}\n            style={{\n                mixBlendMode: areaBlendMode,\n            }}\n        />\n    )\n}\n\nconst Areas = ({ areaGenerator, areaOpacity, areaBlendMode, lines }) => {\n    const computedLines = lines.slice(0).reverse()\n\n    return (\n        <g>\n            {computedLines.map(line => (\n                <AreaPath\n                    key={line.id}\n                    path={areaGenerator(line.data.map(d => d.position))}\n                    {...{ areaOpacity, areaBlendMode, ...line }}\n                />\n            ))}\n        </g>\n    )\n}\n\nexport default memo(Areas)\n","import { memo, useMemo } from 'react'\nimport { animated } from '@react-spring/web'\nimport { useAnimatedPath } from '@nivo/core'\n\nconst LinesItem = ({ lineGenerator, points, color, thickness }) => {\n    const path = useMemo(() => lineGenerator(points), [lineGenerator, points])\n    const animatedPath = useAnimatedPath(path)\n\n    return <animated.path d={animatedPath} fill=\"none\" strokeWidth={thickness} stroke={color} />\n}\n\nexport default memo(LinesItem)\n","import { memo } from 'react'\nimport LinesItem from './LinesItem'\n\nconst Lines = ({ lines, lineGenerator, lineWidth }) => {\n    return lines\n        .slice(0)\n        .reverse()\n        .map(({ id, data, color }) => (\n            <LinesItem\n                key={id}\n                id={id}\n                points={data.map(d => d.position)}\n                lineGenerator={lineGenerator}\n                color={color}\n                thickness={lineWidth}\n            />\n        ))\n}\n\nexport default memo(Lines)\n","import { createElement, memo, useCallback } from 'react'\nimport { useTooltip } from '@nivo/tooltip'\n\nconst SlicesItem = ({\n    slice,\n    slices,\n    axis,\n    debug,\n    tooltip,\n    isCurrent,\n    setCurrent,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    onTouchStart,\n    onTouchMove,\n    onTouchEnd,\n}) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseEnter = useCallback(\n        event => {\n            showTooltipFromEvent(createElement(tooltip, { slice, axis }), event, 'right')\n            setCurrent(slice)\n            onMouseEnter && onMouseEnter(slice, event)\n        },\n        [showTooltipFromEvent, tooltip, slice, axis, setCurrent, onMouseEnter]\n    )\n\n    const handleMouseMove = useCallback(\n        event => {\n            showTooltipFromEvent(createElement(tooltip, { slice, axis }), event, 'right')\n            onMouseMove && onMouseMove(slice, event)\n        },\n        [showTooltipFromEvent, tooltip, slice, axis, onMouseMove]\n    )\n\n    const handleMouseLeave = useCallback(\n        event => {\n            hideTooltip()\n            setCurrent(null)\n            onMouseLeave && onMouseLeave(slice, event)\n        },\n        [hideTooltip, setCurrent, onMouseLeave, slice]\n    )\n\n    const handleClick = useCallback(\n        event => {\n            onClick && onClick(slice, event)\n        },\n        [slice, onClick]\n    )\n\n    const handeOnTouchStart = useCallback(\n        event => {\n            showTooltipFromEvent(createElement(tooltip, { slice, axis }), event, 'right')\n            setCurrent(slice)\n            onTouchStart && onTouchStart(slice, event)\n        },\n        [axis, onTouchStart, setCurrent, showTooltipFromEvent, slice, tooltip]\n    )\n\n    const handeOnTouchMove = useCallback(\n        event => {\n            // This event will be locked to the element that was touched originally\n            // We find the element that is currently being \"hovered over\" by getting the element at the touch point\n            const touchPoint = event.touches[0]\n            const touchingElement = document.elementFromPoint(\n                touchPoint.clientX,\n                touchPoint.clientY\n            )\n            // Is this a nivo ref?\n            const touchingSliceId = touchingElement?.getAttribute('data-ref')\n            if (touchingSliceId) {\n                // Is this a slice for this graph?\n                const slice = slices.find(slice => slice.id === touchingSliceId)\n                if (slice) {\n                    showTooltipFromEvent(createElement(tooltip, { slice, axis }), event, 'right')\n                    setCurrent(slice)\n                }\n            }\n\n            // Note here, this will pass the original slice, not the one we found\n            // But this can be found with document.elementFromPoint()\n            onTouchMove && onTouchMove(slice, event)\n        },\n        [axis, onTouchMove, setCurrent, showTooltipFromEvent, slice, slices, tooltip]\n    )\n\n    const handleOnTouchEnd = useCallback(\n        event => {\n            hideTooltip()\n            setCurrent(null)\n            onTouchEnd && onTouchEnd(slice, event)\n        },\n        [hideTooltip, setCurrent, onTouchEnd, slice]\n    )\n\n    return (\n        <rect\n            x={slice.x0}\n            y={slice.y0}\n            width={slice.width}\n            height={slice.height}\n            stroke=\"red\"\n            strokeWidth={debug ? 1 : 0}\n            strokeOpacity={0.75}\n            fill=\"red\"\n            fillOpacity={isCurrent && debug ? 0.35 : 0}\n            onMouseEnter={handleMouseEnter}\n            onMouseMove={handleMouseMove}\n            onMouseLeave={handleMouseLeave}\n            onClick={handleClick}\n            onTouchStart={handeOnTouchStart}\n            onTouchMove={handeOnTouchMove}\n            onTouchEnd={handleOnTouchEnd}\n            data-ref={slice.id}\n        />\n    )\n}\n\nexport default memo(SlicesItem)\n","import { memo } from 'react'\nimport SlicesItem from './SlicesItem'\n\nconst Slices = ({\n    slices,\n    axis,\n    debug,\n    height,\n    tooltip,\n    current,\n    setCurrent,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    onTouchStart,\n    onTouchMove,\n    onTouchEnd,\n}) => {\n    return slices.map(slice => (\n        <SlicesItem\n            key={slice.id}\n            slice={slice}\n            slices={slices}\n            axis={axis}\n            debug={debug}\n            height={height}\n            tooltip={tooltip}\n            setCurrent={setCurrent}\n            isCurrent={current !== null && current.id === slice.id}\n            onMouseEnter={onMouseEnter}\n            onMouseMove={onMouseMove}\n            onMouseLeave={onMouseLeave}\n            onClick={onClick}\n            onTouchStart={onTouchStart}\n            onTouchMove={onTouchMove}\n            onTouchEnd={onTouchEnd}\n        />\n    ))\n}\n\nexport default memo(Slices)\n","import { memo } from 'react'\nimport { getLabelGenerator, DotsItem, useTheme } from '@nivo/core'\n\nconst Points = ({ points, symbol, size, borderWidth, enableLabel, label, labelYOffset }) => {\n    const theme = useTheme()\n    const getLabel = getLabelGenerator(label)\n\n    /**\n     * We reverse the `points` array so that points from the lower lines in stacked lines\n     * graph are drawn on top. See https://github.com/plouc/nivo/issues/1051.\n     */\n    const mappedPoints = points\n        .slice(0)\n        .reverse()\n        .map(point => {\n            const mappedPoint = {\n                id: point.id,\n                x: point.x,\n                y: point.y,\n                datum: point.data,\n                fill: point.color,\n                stroke: point.borderColor,\n                label: enableLabel ? getLabel(point) : null,\n            }\n\n            return mappedPoint\n        })\n\n    return (\n        <g>\n            {mappedPoints.map(point => (\n                <DotsItem\n                    key={point.id}\n                    x={point.x}\n                    y={point.y}\n                    datum={point.datum}\n                    symbol={symbol}\n                    size={size}\n                    color={point.fill}\n                    borderWidth={borderWidth}\n                    borderColor={point.stroke}\n                    label={point.label}\n                    labelYOffset={labelYOffset}\n                    theme={theme}\n                />\n            ))}\n        </g>\n    )\n}\n\nexport default memo(Points)\n","import { createElement, memo, useCallback } from 'react'\nimport { useTooltip } from '@nivo/tooltip'\nimport { Mesh as BaseMesh } from '@nivo/voronoi'\n\nconst Mesh = ({\n    points,\n    width,\n    height,\n    margin,\n    setCurrent,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    onTouchStart,\n    onTouchMove,\n    onTouchEnd,\n    tooltip,\n    debug,\n    enableTouchCrosshair,\n}) => {\n    const { showTooltipAt, hideTooltip } = useTooltip()\n\n    const handleMouseEnter = useCallback(\n        (point, event) => {\n            showTooltipAt(\n                createElement(tooltip, { point }),\n                [point.x + margin.left, point.y + margin.top],\n                'top'\n            )\n            onMouseEnter && onMouseEnter(point, event)\n        },\n        [showTooltipAt, tooltip, onMouseEnter, margin]\n    )\n\n    const handleMouseMove = useCallback(\n        (point, event) => {\n            showTooltipAt(\n                createElement(tooltip, { point }),\n                [point.x + margin.left, point.y + margin.top],\n                'top'\n            )\n            onMouseMove && onMouseMove(point, event)\n        },\n        [showTooltipAt, tooltip, margin.left, margin.top, onMouseMove]\n    )\n\n    const handleMouseLeave = useCallback(\n        (point, event) => {\n            hideTooltip()\n            onMouseLeave && onMouseLeave(point, event)\n        },\n        [hideTooltip, onMouseLeave]\n    )\n\n    const handleClick = useCallback(\n        (point, event) => {\n            onClick && onClick(point, event)\n        },\n        [onClick]\n    )\n\n    const handleTouchStart = useCallback(\n        (point, event) => {\n            showTooltipAt(\n                createElement(tooltip, { point }),\n                [point.x + margin.left, point.y + margin.top],\n                'top'\n            )\n            onTouchStart && onTouchStart(point, event)\n        },\n        [margin.left, margin.top, onTouchStart, showTooltipAt, tooltip]\n    )\n\n    const handleTouchMove = useCallback(\n        (point, event) => {\n            showTooltipAt(\n                createElement(tooltip, { point }),\n                [point.x + margin.left, point.y + margin.top],\n                'top'\n            )\n            onTouchMove && onTouchMove(point, event)\n        },\n        [margin.left, margin.top, onTouchMove, showTooltipAt, tooltip]\n    )\n\n    const handleTouchEnd = useCallback(\n        (point, event) => {\n            hideTooltip()\n            onTouchEnd && onTouchEnd(point, event)\n        },\n        [onTouchEnd, hideTooltip]\n    )\n\n    return (\n        <BaseMesh\n            nodes={points}\n            width={width}\n            height={height}\n            setCurrent={setCurrent}\n            onMouseEnter={handleMouseEnter}\n            onMouseMove={handleMouseMove}\n            onMouseLeave={handleMouseLeave}\n            onClick={handleClick}\n            onTouchStart={handleTouchStart}\n            onTouchMove={handleTouchMove}\n            onTouchEnd={handleTouchEnd}\n            enableTouchCrosshair={enableTouchCrosshair}\n            debug={debug}\n        />\n    )\n}\n\nexport default memo(Mesh)\n","import { Fragment, useState } from 'react'\nimport {\n    bindDefs,\n    withContainer,\n    useDimensions,\n    useTheme,\n    SvgWrapper,\n    CartesianMarkers,\n} from '@nivo/core'\nimport { useInheritedColor } from '@nivo/colors'\nimport { Axes, Grid } from '@nivo/axes'\nimport { BoxLegendSvg } from '@nivo/legends'\nimport { Crosshair } from '@nivo/tooltip'\nimport { useLine } from './hooks'\nimport Areas from './Areas'\nimport Lines from './Lines'\nimport Slices from './Slices'\nimport Points from './Points'\nimport Mesh from './Mesh'\nimport PointTooltip from './PointTooltip'\nimport SliceTooltip from './SliceTooltip'\n\nconst Line = props => {\n    const {\n        data,\n        xScale: xScaleSpec = { type: 'point' },\n        xFormat,\n        yScale: yScaleSpec = {\n            type: 'linear',\n            min: 0,\n            max: 'auto',\n        },\n        yFormat,\n        layers = [\n            'grid',\n            'markers',\n            'axes',\n            'areas',\n            'crosshair',\n            'lines',\n            'points',\n            'slices',\n            'mesh',\n            'legends',\n        ],\n        curve = 'linear',\n        areaBaselineValue = 0,\n\n        colors = { scheme: 'nivo' },\n\n        margin: partialMargin,\n        width,\n        height,\n\n        axisTop,\n        axisRight,\n        axisBottom = {},\n        axisLeft = {},\n        enableGridX = true,\n        enableGridY = true,\n        gridXValues,\n        gridYValues,\n\n        lineWidth = 2,\n        enableArea = false,\n        areaOpacity = 0.2,\n        areaBlendMode = 'normal',\n\n        enablePoints = true,\n        pointSymbol,\n        pointSize = 6,\n        pointColor = { from: 'color' },\n        pointBorderWidth = 0,\n        pointBorderColor = { theme: 'background' },\n        enablePointLabel = false,\n        pointLabel = 'data.yFormatted',\n        pointLabelYOffset,\n\n        defs = [],\n        fill = [],\n\n        markers,\n\n        legends = [],\n\n        isInteractive = true,\n\n        useMesh = false,\n        debugMesh = false,\n\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n        onClick,\n        onTouchStart,\n        onTouchMove,\n        onTouchEnd,\n\n        tooltip = PointTooltip,\n\n        enableSlices = false,\n        debugSlices = false,\n        sliceTooltip = SliceTooltip,\n\n        enableCrosshair = true,\n        crosshairType = 'bottom-left',\n        enableTouchCrosshair = false,\n\n        role = 'img',\n        initialHiddenIds = [],\n    } = props\n\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const {\n        legendData,\n        toggleSerie,\n        lineGenerator,\n        areaGenerator,\n        series,\n        xScale,\n        yScale,\n        slices,\n        points,\n    } = useLine({\n        data,\n        xScale: xScaleSpec,\n        xFormat,\n        yScale: yScaleSpec,\n        yFormat,\n        width: innerWidth,\n        height: innerHeight,\n        colors,\n        curve,\n        areaBaselineValue,\n        pointColor,\n        pointBorderColor,\n        enableSlices,\n        initialHiddenIds,\n    })\n\n    const theme = useTheme()\n    const getPointColor = useInheritedColor(pointColor, theme)\n    const getPointBorderColor = useInheritedColor(pointBorderColor, theme)\n\n    const [currentPoint, setCurrentPoint] = useState(null)\n    const [currentSlice, setCurrentSlice] = useState(null)\n\n    const layerById = {\n        grid: (\n            <Grid\n                key=\"grid\"\n                theme={theme}\n                width={innerWidth}\n                height={innerHeight}\n                xScale={enableGridX ? xScale : null}\n                yScale={enableGridY ? yScale : null}\n                xValues={gridXValues}\n                yValues={gridYValues}\n            />\n        ),\n        markers: (\n            <CartesianMarkers\n                key=\"markers\"\n                markers={markers}\n                width={innerWidth}\n                height={innerHeight}\n                xScale={xScale}\n                yScale={yScale}\n                theme={theme}\n            />\n        ),\n        axes: (\n            <Axes\n                key=\"axes\"\n                xScale={xScale}\n                yScale={yScale}\n                width={innerWidth}\n                height={innerHeight}\n                theme={theme}\n                top={axisTop}\n                right={axisRight}\n                bottom={axisBottom}\n                left={axisLeft}\n            />\n        ),\n        areas: null,\n        lines: (\n            <Lines key=\"lines\" lines={series} lineGenerator={lineGenerator} lineWidth={lineWidth} />\n        ),\n        slices: null,\n        points: null,\n        crosshair: null,\n        mesh: null,\n        legends: legends.map((legend, i) => (\n            <BoxLegendSvg\n                key={`legend.${i}`}\n                {...legend}\n                containerWidth={innerWidth}\n                containerHeight={innerHeight}\n                data={legend.data || legendData}\n                theme={theme}\n                toggleSerie={legend.toggleSerie ? toggleSerie : undefined}\n            />\n        )),\n    }\n\n    const boundDefs = bindDefs(defs, series, fill)\n\n    if (enableArea) {\n        layerById.areas = (\n            <Areas\n                key=\"areas\"\n                areaGenerator={areaGenerator}\n                areaOpacity={areaOpacity}\n                areaBlendMode={areaBlendMode}\n                lines={series}\n            />\n        )\n    }\n\n    if (isInteractive && enableSlices !== false) {\n        layerById.slices = (\n            <Slices\n                key=\"slices\"\n                slices={slices}\n                axis={enableSlices}\n                debug={debugSlices}\n                height={innerHeight}\n                tooltip={sliceTooltip}\n                current={currentSlice}\n                setCurrent={setCurrentSlice}\n                onMouseEnter={onMouseEnter}\n                onMouseMove={onMouseMove}\n                onMouseLeave={onMouseLeave}\n                onClick={onClick}\n                onTouchStart={onTouchStart}\n                onTouchMove={onTouchMove}\n                onTouchEnd={onTouchEnd}\n            />\n        )\n    }\n\n    if (enablePoints) {\n        layerById.points = (\n            <Points\n                key=\"points\"\n                points={points}\n                symbol={pointSymbol}\n                size={pointSize}\n                color={getPointColor}\n                borderWidth={pointBorderWidth}\n                borderColor={getPointBorderColor}\n                enableLabel={enablePointLabel}\n                label={pointLabel}\n                labelYOffset={pointLabelYOffset}\n            />\n        )\n    }\n\n    if (isInteractive && enableCrosshair) {\n        if (currentPoint !== null) {\n            layerById.crosshair = (\n                <Crosshair\n                    key=\"crosshair\"\n                    width={innerWidth}\n                    height={innerHeight}\n                    x={currentPoint.x}\n                    y={currentPoint.y}\n                    type={crosshairType}\n                />\n            )\n        }\n        if (currentSlice !== null) {\n            layerById.crosshair = (\n                <Crosshair\n                    key=\"crosshair\"\n                    width={innerWidth}\n                    height={innerHeight}\n                    x={currentSlice.x}\n                    y={currentSlice.y}\n                    type={enableSlices}\n                />\n            )\n        }\n    }\n\n    if (isInteractive && useMesh && enableSlices === false) {\n        layerById.mesh = (\n            <Mesh\n                key=\"mesh\"\n                points={points}\n                width={innerWidth}\n                height={innerHeight}\n                margin={margin}\n                current={currentPoint}\n                setCurrent={setCurrentPoint}\n                onMouseEnter={onMouseEnter}\n                onMouseMove={onMouseMove}\n                onMouseLeave={onMouseLeave}\n                onClick={onClick}\n                onTouchStart={onTouchStart}\n                onTouchMove={onTouchMove}\n                onTouchEnd={onTouchEnd}\n                tooltip={tooltip}\n                enableTouchCrosshair={enableTouchCrosshair}\n                debug={debugMesh}\n            />\n        )\n    }\n\n    return (\n        <SvgWrapper\n            defs={boundDefs}\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            role={role}\n        >\n            {layers.map((layer, i) => {\n                if (typeof layer === 'function') {\n                    return (\n                        <Fragment key={i}>\n                            {layer({\n                                ...props,\n                                innerWidth,\n                                innerHeight,\n                                series,\n                                slices,\n                                points,\n                                xScale,\n                                yScale,\n                                lineGenerator,\n                                areaGenerator,\n                                currentPoint,\n                                setCurrentPoint,\n                                currentSlice,\n                                setCurrentSlice,\n                            })}\n                        </Fragment>\n                    )\n                }\n\n                return layerById[layer]\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport default withContainer(Line)\n","import { createElement, useRef, useEffect, useState, useCallback, forwardRef } from 'react'\nimport {\n    withContainer,\n    useDimensions,\n    useTheme,\n    getRelativeCursor,\n    isCursorInRect,\n} from '@nivo/core'\nimport { renderAxesToCanvas, renderGridLinesToCanvas } from '@nivo/axes'\nimport { renderLegendToCanvas } from '@nivo/legends'\nimport { useTooltip } from '@nivo/tooltip'\nimport { useVoronoiMesh, renderVoronoiToCanvas, renderVoronoiCellToCanvas } from '@nivo/voronoi'\nimport { useLine } from './hooks'\nimport PointTooltip from './PointTooltip'\n\nconst LineCanvas = props => {\n    const canvasEl = useRef(null)\n    const {\n        width,\n        height,\n        margin: partialMargin,\n        pixelRatio = typeof window !== 'undefined' ? window.devicePixelRatio || 1 : 1,\n\n        data,\n        xScale: xScaleSpec = { type: 'point' },\n        xFormat,\n        yScale: yScaleSpec = {\n            type: 'linear',\n            min: 0,\n            max: 'auto',\n        },\n        yFormat,\n        curve = 'linear',\n\n        layers = [\n            'grid',\n            'markers',\n            'axes',\n            'areas',\n            'crosshair',\n            'lines',\n            'points',\n            'slices',\n            'mesh',\n            'legends',\n        ],\n\n        colors = { scheme: 'nivo' },\n        lineWidth = 2,\n\n        enableArea = false,\n        areaBaselineValue = 0,\n        areaOpacity = 0.2,\n\n        enablePoints = true,\n        pointSize = 6,\n        pointColor = { from: 'color' },\n        pointBorderWidth = 0,\n        pointBorderColor = { theme: 'background' },\n\n        enableGridX = true,\n        gridXValues,\n        enableGridY = true,\n        gridYValues,\n        axisTop,\n        axisRight,\n        axisBottom = {},\n        axisLeft = {},\n\n        legends = [],\n\n        isInteractive = true,\n        debugMesh = false,\n        //onMouseEnter,\n        //onMouseMove,\n        onMouseLeave,\n        onClick,\n        tooltip = PointTooltip,\n        canvasRef,\n    } = props\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n    const theme = useTheme()\n    const [currentPoint, setCurrentPoint] = useState(null)\n\n    const { lineGenerator, areaGenerator, series, xScale, yScale, points } = useLine({\n        data,\n        xScale: xScaleSpec,\n        xFormat,\n        yScale: yScaleSpec,\n        yFormat,\n        width: innerWidth,\n        height: innerHeight,\n        colors,\n        curve,\n        areaBaselineValue,\n        pointColor,\n        pointBorderColor,\n    })\n\n    const { delaunay, voronoi } = useVoronoiMesh({\n        points,\n        width: innerWidth,\n        height: innerHeight,\n        debug: debugMesh,\n    })\n\n    useEffect(() => {\n        if (canvasRef) {\n            canvasRef.current = canvasEl.current\n        }\n\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        const ctx = canvasEl.current.getContext('2d')\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n        ctx.translate(margin.left, margin.top)\n\n        layers.forEach(layer => {\n            if (typeof layer === 'function') {\n                layer({\n                    ctx,\n                    innerWidth,\n                    innerHeight,\n                    series,\n                    points,\n                    xScale,\n                    yScale,\n                    lineWidth,\n                    lineGenerator,\n                    areaGenerator,\n                    currentPoint,\n                    setCurrentPoint,\n                })\n            }\n\n            if (layer === 'grid' && theme.grid.line.strokeWidth > 0) {\n                ctx.lineWidth = theme.grid.line.strokeWidth\n                ctx.strokeStyle = theme.grid.line.stroke\n\n                enableGridX &&\n                    renderGridLinesToCanvas(ctx, {\n                        width: innerWidth,\n                        height: innerHeight,\n                        scale: xScale,\n                        axis: 'x',\n                        values: gridXValues,\n                    })\n\n                enableGridY &&\n                    renderGridLinesToCanvas(ctx, {\n                        width: innerWidth,\n                        height: innerHeight,\n                        scale: yScale,\n                        axis: 'y',\n                        values: gridYValues,\n                    })\n            }\n\n            if (layer === 'axes') {\n                renderAxesToCanvas(ctx, {\n                    xScale,\n                    yScale,\n                    width: innerWidth,\n                    height: innerHeight,\n                    top: axisTop,\n                    right: axisRight,\n                    bottom: axisBottom,\n                    left: axisLeft,\n                    theme,\n                })\n            }\n\n            if (layer === 'areas' && enableArea === true) {\n                ctx.save()\n                ctx.globalAlpha = areaOpacity\n\n                areaGenerator.context(ctx)\n                for (let i = series.length - 1; i >= 0; i--) {\n                    ctx.fillStyle = series[i].color\n                    ctx.beginPath()\n                    areaGenerator(series[i].data.map(d => d.position))\n                    ctx.fill()\n                }\n\n                ctx.restore()\n            }\n\n            if (layer === 'lines') {\n                lineGenerator.context(ctx)\n                series.forEach(serie => {\n                    ctx.strokeStyle = serie.color\n                    ctx.lineWidth = lineWidth\n                    ctx.beginPath()\n                    lineGenerator(serie.data.map(d => d.position))\n                    ctx.stroke()\n                })\n            }\n\n            if (layer === 'points' && enablePoints === true && pointSize > 0) {\n                points.forEach(point => {\n                    ctx.fillStyle = point.color\n                    ctx.beginPath()\n                    ctx.arc(point.x, point.y, pointSize / 2, 0, 2 * Math.PI)\n                    ctx.fill()\n\n                    if (pointBorderWidth > 0) {\n                        ctx.strokeStyle = point.borderColor\n                        ctx.lineWidth = pointBorderWidth\n                        ctx.stroke()\n                    }\n                })\n            }\n\n            if (layer === 'mesh' && debugMesh === true) {\n                renderVoronoiToCanvas(ctx, voronoi)\n                if (currentPoint) {\n                    renderVoronoiCellToCanvas(ctx, voronoi, currentPoint.index)\n                }\n            }\n\n            if (layer === 'legends') {\n                const legendData = series\n                    .map(serie => ({\n                        id: serie.id,\n                        label: serie.id,\n                        color: serie.color,\n                    }))\n                    .reverse()\n\n                legends.forEach(legend => {\n                    renderLegendToCanvas(ctx, {\n                        ...legend,\n                        data: legend.data || legendData,\n                        containerWidth: innerWidth,\n                        containerHeight: innerHeight,\n                        theme,\n                    })\n                })\n            }\n        })\n    }, [\n        canvasEl,\n        outerWidth,\n        outerHeight,\n        layers,\n        theme,\n        lineGenerator,\n        series,\n        xScale,\n        yScale,\n        enableGridX,\n        gridXValues,\n        enableGridY,\n        gridYValues,\n        axisTop,\n        axisRight,\n        axisBottom,\n        axisLeft,\n        legends,\n        points,\n        enablePoints,\n        pointSize,\n        currentPoint,\n    ])\n\n    const getPointFromMouseEvent = useCallback(\n        event => {\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            if (!isCursorInRect(margin.left, margin.top, innerWidth, innerHeight, x, y)) return null\n\n            const pointIndex = delaunay.find(x - margin.left, y - margin.top)\n            return points[pointIndex]\n        },\n        [canvasEl, margin, innerWidth, innerHeight, delaunay]\n    )\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseHover = useCallback(\n        event => {\n            const point = getPointFromMouseEvent(event)\n            setCurrentPoint(point)\n\n            if (point) {\n                showTooltipFromEvent(createElement(tooltip, { point }), event)\n            } else {\n                hideTooltip()\n            }\n        },\n        [getPointFromMouseEvent, setCurrentPoint, showTooltipFromEvent, hideTooltip, tooltip]\n    )\n\n    const handleMouseLeave = useCallback(\n        event => {\n            hideTooltip()\n            setCurrentPoint(null)\n            currentPoint && onMouseLeave && onMouseLeave(currentPoint, event)\n        },\n        [hideTooltip, setCurrentPoint, onMouseLeave]\n    )\n\n    const handleClick = useCallback(\n        event => {\n            if (onClick) {\n                const point = getPointFromMouseEvent(event)\n                point && onClick(point, event)\n            }\n        },\n        [getPointFromMouseEvent, onClick]\n    )\n\n    return (\n        <canvas\n            ref={canvasEl}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n                cursor: isInteractive ? 'auto' : 'normal',\n            }}\n            onMouseEnter={isInteractive ? handleMouseHover : undefined}\n            onMouseMove={isInteractive ? handleMouseHover : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onClick={isInteractive ? handleClick : undefined}\n        />\n    )\n}\n\nconst LineCanvasWithContainer = withContainer(LineCanvas)\n\nexport default forwardRef((props, ref) => <LineCanvasWithContainer {...props} canvasRef={ref} />)\n","import { forwardRef } from 'react'\nimport { ResponsiveWrapper } from '@nivo/core'\nimport LineCanvas from './LineCanvas'\n\nconst ResponsiveLineCanvas = (props, ref) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <LineCanvas width={width} height={height} {...props} ref={ref} />}\n    </ResponsiveWrapper>\n)\n\nexport default forwardRef(ResponsiveLineCanvas)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport Line from './Line'\n\nconst ResponsiveLine = props => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <Line width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n\nexport default ResponsiveLine\n"],"names":["memo","_ref","point","_jsx","BasicTooltip","id","_jsxs","jsxs","children","jsx","data","xFormatted","yFormatted","enableChip","color","serieColor","slice","axis","theme","useTheme","otherAxis","TableTooltip","rows","points","map","Chip","style","tooltip","chip","serieId","tableCellValue","commonDefaultProps","curve","xScale","type","yScale","min","max","layers","axisBottom","axisLeft","enableGridX","enableGridY","enablePoints","pointSize","pointColor","from","pointBorderWidth","pointBorderColor","enablePointLabel","pointLabel","colors","scheme","enableArea","areaBaselineValue","areaOpacity","areaBlendMode","lineWidth","legends","isInteractive","PointTooltip","enableSlices","debugSlices","sliceTooltip","SliceTooltip","debugMesh","enableCrosshair","crosshairType","LineDefaultProps","_extends","useMesh","enableTouchCrosshair","animate","motionConfig","defs","fill","role","initialHiddenIds","LineCanvasDefaultProps","pixelRatio","window","devicePixelRatio","useLineGenerator","useMemo","line","defined","d","x","y","curveFromProp","useAreaGenerator","_ref2","area","y1","y0","useSlices","_ref4","componentId","width","height","Map","forEach","has","get","push","set","Array","entries","sort","a","b","_ref5","i","slices","x0","sliceWidth","slicePoints","prevSlice","nextSlice","reverse","_ref6","sliceHeight","LINE_UNIQUE_ID_PREFIX","useLine","_ref7","_ref7$xScale","xScaleSpec","xFormat","_ref7$yScale","yScaleSpec","yFormat","_ref7$colors","_ref7$curve","_ref7$areaBaselineVal","_ref7$pointColor","_ref7$pointBorderColo","_ref7$enableSlices","enableSlicesTooltip","_ref7$initialHiddenId","useState","uniqueId","formatX","useValueFormatter","formatY","getColor","useOrdinalColorScale","getPointColor","useInheritedColor","getPointBorderColor","_useState2","hiddenIds","setHiddenIds","_useMemo","computeXYScalesForSeries","filter","item","indexOf","rawSeries","series","_useMemo2","dataWithColor","label","datum","find","serie","Boolean","legendData","hidden","toggleSerie","useCallback","state","concat","_ref3","reduce","acc","position","index","length","borderColor","usePoints","lineGenerator","areaGenerator","AreaPath","path","_useMotionConfig","useMotionConfig","springConfig","config","animatedPath","useAnimatedPath","animatedProps","useSpring","immediate","animated","fillOpacity","strokeWidth","mixBlendMode","computedLines","lines","thickness","stroke","LinesItem","debug","isCurrent","setCurrent","onMouseEnter","onMouseMove","onMouseLeave","onClick","onTouchStart","onTouchMove","onTouchEnd","_useTooltip","useTooltip","showTooltipFromEvent","hideTooltip","handleMouseEnter","event","createElement","handleMouseMove","handleMouseLeave","handleClick","handeOnTouchStart","handeOnTouchMove","touchPoint","touches","touchingElement","document","elementFromPoint","clientX","clientY","touchingSliceId","getAttribute","handleOnTouchEnd","strokeOpacity","current","SlicesItem","symbol","size","borderWidth","enableLabel","labelYOffset","getLabel","getLabelGenerator","mappedPoints","DotsItem","margin","showTooltipAt","left","top","handleTouchStart","handleTouchMove","handleTouchEnd","BaseMesh","nodes","withContainer","props","_props$xScale","_props$yScale","_props$layers","_props$curve","_props$areaBaselineVa","_props$colors","partialMargin","axisTop","axisRight","_props$axisBottom","_props$axisLeft","_props$enableGridX","_props$enableGridY","gridXValues","gridYValues","_props$lineWidth","_props$enableArea","_props$areaOpacity","_props$areaBlendMode","_props$enablePoints","pointSymbol","_props$pointSize","_props$pointColor","_props$pointBorderWid","_props$pointBorderCol","_props$enablePointLab","_props$pointLabel","pointLabelYOffset","_props$defs","_props$fill","markers","_props$legends","_props$isInteractive","_props$useMesh","_props$debugMesh","_props$tooltip","_props$enableSlices","_props$debugSlices","_props$sliceTooltip","_props$enableCrosshai","_props$crosshairType","_props$enableTouchCro","_props$role","_props$initialHiddenI","_useDimensions","useDimensions","innerWidth","innerHeight","outerWidth","outerHeight","_useLine","_useState","currentPoint","setCurrentPoint","currentSlice","setCurrentSlice","layerById","grid","Grid","xValues","yValues","CartesianMarkers","axes","Axes","right","bottom","areas","Lines","crosshair","mesh","legend","BoxLegendSvg","containerWidth","containerHeight","undefined","boundDefs","bindDefs","Areas","Slices","Points","Crosshair","Mesh","SvgWrapper","layer","Fragment","LineCanvasWithContainer","canvasEl","useRef","_props$pixelRatio","canvasRef","_useVoronoiMesh","useVoronoiMesh","delaunay","voronoi","useEffect","ctx","getContext","scale","fillStyle","background","fillRect","translate","strokeStyle","renderGridLinesToCanvas","values","renderAxesToCanvas","save","globalAlpha","context","beginPath","restore","arc","Math","PI","renderVoronoiToCanvas","renderVoronoiCellToCanvas","renderLegendToCanvas","getPointFromMouseEvent","_getRelativeCursor","getRelativeCursor","isCursorInRect","pointIndex","handleMouseHover","ref","cursor","LineCanvas$1","forwardRef","ResponsiveWrapper","LineCanvas","Line"],"mappings":"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"}