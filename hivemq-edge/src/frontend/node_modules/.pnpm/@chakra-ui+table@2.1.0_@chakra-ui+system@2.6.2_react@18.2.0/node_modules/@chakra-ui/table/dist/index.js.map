{"version":3,"sources":["../src/index.ts","../src/table.tsx","../src/table-caption.tsx","../src/table-container.tsx","../src/tbody.tsx","../src/td.tsx","../src/tfooter.tsx","../src/th.tsx","../src/thead.tsx","../src/tr.tsx"],"sourcesContent":["export { Table, useTableStyles } from \"./table\"\nexport type { TableOptions, TableProps } from \"./table\"\nexport { TableCaption } from \"./table-caption\"\nexport type { TableCaptionProps } from \"./table-caption\"\nexport { TableContainer } from \"./table-container\"\nexport type { TableContainerProps } from \"./table-container\"\nexport { Tbody } from \"./tbody\"\nexport type { TableBodyProps } from \"./tbody\"\nexport { Td } from \"./td\"\nexport type { TableCellProps } from \"./td\"\nexport { Tfoot } from \"./tfooter\"\nexport type { TableFooterProps } from \"./tfooter\"\nexport { Th } from \"./th\"\nexport type { TableColumnHeaderProps } from \"./th\"\nexport { Thead } from \"./thead\"\nexport type { TableHeadProps } from \"./thead\"\nexport { Tr } from \"./tr\"\nexport type { TableRowProps } from \"./tr\"\n","import {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  ThemingProps,\n  useMultiStyleConfig,\n  SystemStyleObject,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { createContext } from \"@chakra-ui/react-context\"\n\nconst [TableStylesProvider, useTableStyles] = createContext<\n  Record<string, SystemStyleObject>\n>({\n  name: `TableStylesContext`,\n  errorMessage: `useTableStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<Table />\" `,\n})\n\nexport { useTableStyles }\n\nexport interface TableOptions {\n  layout?: SystemStyleObject[\"tableLayout\"]\n}\n\nexport interface TableProps\n  extends HTMLChakraProps<\"table\">,\n    TableOptions,\n    ThemingProps<\"Table\"> {}\n\n/**\n * The `Table` component is used to organize and display data efficiently. It renders a `<table>` element by default.\n *\n * @see Docs https://chakra-ui.com/docs/components/table\n * @see WAI-ARIA https://www.w3.org/WAI/ARIA/apg/patterns/table/\n */\nexport const Table = forwardRef<TableProps, \"table\">((props, ref) => {\n  const styles = useMultiStyleConfig(\"Table\", props)\n  const { className, layout, ...tableProps } = omitThemingProps(props)\n\n  return (\n    <TableStylesProvider value={styles}>\n      <chakra.table\n        ref={ref}\n        __css={{ tableLayout: layout, ...styles.table }}\n        className={cx(\"chakra-table\", className)}\n        {...tableProps}\n      />\n    </TableStylesProvider>\n  )\n})\n\nTable.displayName = \"Table\"\n","import { chakra, forwardRef, HTMLChakraProps } from \"@chakra-ui/system\"\nimport { useTableStyles } from \"./table\"\n\nexport interface TableCaptionProps extends HTMLChakraProps<\"caption\"> {\n  /**\n   * The placement of the table caption. This sets the `caption-side` CSS attribute.\n   * @default \"bottom\"\n   */\n  placement?: \"top\" | \"bottom\"\n}\n\nexport const TableCaption = forwardRef<TableCaptionProps, \"caption\">(\n  (props, ref) => {\n    const { placement = \"bottom\", ...rest } = props\n    const styles = useTableStyles()\n    return (\n      <chakra.caption\n        {...rest}\n        ref={ref}\n        __css={{\n          ...styles.caption,\n          captionSide: placement,\n        }}\n      />\n    )\n  },\n)\n\nTableCaption.displayName = \"TableCaption\"\n","import { chakra, forwardRef, HTMLChakraProps } from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\n\nexport interface TableContainerProps extends HTMLChakraProps<\"div\"> {}\n\nexport const TableContainer = forwardRef<TableContainerProps, \"div\">(\n  (props: HTMLChakraProps<\"div\">, ref) => {\n    const { overflow, overflowX, className, ...rest } = props\n    return (\n      <chakra.div\n        ref={ref}\n        className={cx(\"chakra-table__container\", className)}\n        {...rest}\n        __css={{\n          display: \"block\",\n          whiteSpace: \"nowrap\",\n          WebkitOverflowScrolling: \"touch\",\n          overflowX: overflow ?? overflowX ?? \"auto\",\n          overflowY: \"hidden\",\n          maxWidth: \"100%\",\n        }}\n      />\n    )\n  },\n)\n","import { chakra, forwardRef, HTMLChakraProps } from \"@chakra-ui/system\"\nimport { useTableStyles } from \"./table\"\n\nexport interface TableBodyProps extends HTMLChakraProps<\"tbody\"> {}\n\nexport const Tbody = forwardRef<TableBodyProps, \"tbody\">((props, ref) => {\n  const styles = useTableStyles()\n  return <chakra.tbody {...props} ref={ref} __css={styles.tbody} />\n})\n","import { chakra, forwardRef, HTMLChakraProps } from \"@chakra-ui/system\"\nimport { useTableStyles } from \"./table\"\n\nexport interface TableCellProps extends HTMLChakraProps<\"td\"> {\n  /**\n   * Aligns the cell content to the right\n   * @default false\n   */\n  isNumeric?: boolean\n}\nexport const Td = forwardRef<TableCellProps, \"td\">(\n  ({ isNumeric, ...rest }, ref) => {\n    const styles = useTableStyles()\n\n    return (\n      <chakra.td\n        {...rest}\n        ref={ref}\n        __css={styles.td}\n        data-is-numeric={isNumeric}\n      />\n    )\n  },\n)\n","import { chakra, forwardRef, HTMLChakraProps } from \"@chakra-ui/system\"\nimport { useTableStyles } from \"./table\"\n\nexport interface TableFooterProps extends HTMLChakraProps<\"tfoot\"> {}\n\nexport const Tfoot = forwardRef<TableFooterProps, \"tfoot\">((props, ref) => {\n  const styles = useTableStyles()\n  return <chakra.tfoot {...props} ref={ref} __css={styles.tfoot} />\n})\n","import { chakra, forwardRef, HTMLChakraProps } from \"@chakra-ui/system\"\nimport { useTableStyles } from \"./table\"\n\nexport interface TableColumnHeaderProps extends HTMLChakraProps<\"th\"> {\n  /**\n   * Aligns the cell content to the right\n   * @default false\n   */\n  isNumeric?: boolean\n}\nexport const Th = forwardRef<TableColumnHeaderProps, \"th\">(\n  ({ isNumeric, ...rest }, ref) => {\n    const styles = useTableStyles()\n    return (\n      <chakra.th\n        {...rest}\n        ref={ref}\n        __css={styles.th}\n        data-is-numeric={isNumeric}\n      />\n    )\n  },\n)\n","import { chakra, forwardRef, HTMLChakraProps } from \"@chakra-ui/system\"\nimport { useTableStyles } from \"./table\"\n\nexport interface TableHeadProps extends HTMLChakraProps<\"thead\"> {}\n\nexport const Thead = forwardRef<TableHeadProps, \"thead\">((props, ref) => {\n  const styles = useTableStyles()\n  return <chakra.thead {...props} ref={ref} __css={styles.thead} />\n})\n","import { chakra, forwardRef, HTMLChakraProps } from \"@chakra-ui/system\"\nimport { useTableStyles } from \"./table\"\n\nexport interface TableRowProps extends HTMLChakraProps<\"tr\"> {}\nexport const Tr = forwardRef<TableRowProps, \"tr\">((props, ref) => {\n  const styles = useTableStyles()\n\n  return <chakra.tr {...props} ref={ref} __css={styles.tr} />\n})\n"],"mappings":"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","names":["import_system","import_jsx_runtime","import_system","import_shared_utils","import_jsx_runtime","import_system","import_jsx_runtime","import_system","import_jsx_runtime","import_system","import_jsx_runtime","import_system","import_jsx_runtime","import_system","import_jsx_runtime","import_system","import_jsx_runtime"]}