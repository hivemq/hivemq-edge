import { JSONSchema7 } from 'json-schema'
import { QoS } from '@/api/schemas/definitions/QoS.json-schema.ts'

import i18n from '@/config/i18n.config.ts'

/**
 * TODO[NVL] Required as the schema generated by the codegen is of an older version of JSONSchema (v5) and not well structured ($ref missing)
 * @see $SouthboundMappingList
 * @see $SouthboundMapping
 * @see $QoS
 * @see $MqttUserProperty
 * @see $FieldMapping
 * @see $Metadata
 * @see $Instruction
 * @see $JsonNode
 */
/* istanbul ignore next -- @preserve */
export const southboundMappingListSchema: JSONSchema7 = {
  definitions: {
    QoS: QoS,
    Instruction: {
      description: i18n.t('definitions.Instruction.description', { ns: 'schemas' }),
      properties: {
        destination: {
          type: 'string',
          title: i18n.t('definitions.Instruction.destination.title', { ns: 'schemas' }),
          description: `The field in the output object where the data will be written to`,
        },
        source: {
          type: 'string',
          description: `The field in the input object where the data will be read from`,
        },
      },
      required: ['destination', 'source'],
    },
    Metadata: {
      description: `Metadata for the whole mapping`,
      properties: {
        destination: {
          type: 'string',
          format: 'data-url',
        },
        source: {
          type: 'string',
          format: 'data-url',
        },
      },
    },
    FieldMapping: {
      description: `Defines how incoming data should be transformed before being sent out.`,
      properties: {
        instructions: {
          type: 'array',
          title: i18n.t('definitions.FieldMapping.instructions.title', { ns: 'schemas' }),
          description: i18n.t('definitions.FieldMapping.instructions.description', { ns: 'schemas' }),
          items: {
            $ref: '#/definitions/Instruction',
          },
        },
        metadata: {
          $ref: '#/definitions/Metadata',
        },
      },
    },
    SouthboundMapping: {
      properties: {
        maxQoS: {
          $ref: '#/definitions/QoS',
        },
        tagName: {
          title: 'Destination Tag name',
          type: 'string',
          description: 'The tag for which values should be collected and sent out.',
          format: 'mqtt-tag',
        },
        topicFilter: {
          type: 'string',
          title: 'Source MQTT Topic Filter',
          description: 'The filter defining what topics we will receive messages from',
          format: 'mqtt-topic-filter',
        },
        fieldMapping: {
          $ref: '#/definitions/FieldMapping',
        },
      },

      required: ['topicFilter', 'tagName', 'maxQoS'],
    },
  },
  properties: {
    items: {
      type: 'array',
      items: {
        $ref: '#/definitions/SouthboundMapping',
      },
    },
  },
}
