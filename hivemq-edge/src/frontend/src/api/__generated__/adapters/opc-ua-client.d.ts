/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Password for basic authentication
 */
export type Password = string;
/**
 * Username for basic authentication
 */
export type Username = string;
/**
 * Unique identifier for this protocol adapter
 */
export type Identifier = string;
/**
 * Security policy to use for communication with the server.
 */
export type OPCUASecurityPolicy =
  | "NONE"
  | "BASIC128RSA15"
  | "BASIC256"
  | "BASIC256SHA256"
  | "AES128_SHA256_RSAOAEP"
  | "AES256_SHA256_RSAPSS";
/**
 * Time in seconds until a MQTT message expires
 */
export type MQTTMessageExpiryIntervalS = number;
/**
 * The MQTT topic to publish to
 */
export type DestinationMQTTTopic = string;
/**
 * identifier of the node on the OPC-UA server. Example: "ns=3;s=85/0:Temperature"
 */
export type SourceNodeID = string;
/**
 * Format of the MQTT payload
 */
export type PayloadMode = "STRING" | "JSON";
/**
 * OPC UA publishing interval in milliseconds for this subscription on the server
 */
export type OPCUAPublishingIntervalMs = number;
/**
 * MQTT quality of service level
 */
export type MQTTQoS = number;
/**
 * OPC UA queue size for this subscription on the server
 */
export type OPCUAServerQueueSize = number;
/**
 * Enables TLS encrypted connection
 */
export type EnableTLS = boolean;
/**
 * Password to open the keystore.
 */
export type KeystorePassword = string;
/**
 * Path on the local file system to the keystore.
 */
export type KeystorePath = string;
/**
 * Password to access the private key.
 */
export type PrivateKeyPassword = string;
/**
 * Password to open the truststore.
 */
export type TruststorePassword = string;
/**
 * Path on the local file system to the truststore.
 */
export type TruststorePath = string;
/**
 * URI of the OPC-UA server to connect to
 */
export type OPCUAServerURI = string;

export interface OpcUaClient {
  auth?: {
    basic?: BasicAuthentication;
    x509?: X509Authentication;
  };
  id: Identifier;
  security?: {
    policy?: OPCUASecurityPolicy;
  };
  subscriptions?: {
    "message-expiry-interval"?: MQTTMessageExpiryIntervalS;
    "mqtt-topic": DestinationMQTTTopic;
    node: SourceNodeID;
    "payload-mode"?: PayloadMode;
    "publishing-interval"?: OPCUAPublishingIntervalMs;
    qos?: MQTTQoS;
    "server-queue-size"?: OPCUAServerQueueSize;
  }[];
  tls?: {
    enabled?: EnableTLS;
    keystore?: Keystore;
    truststore?: Truststore;
  };
  uri: OPCUAServerURI;
}
/**
 * Username / password based authentication
 */
export interface BasicAuthentication {
  password?: Password;
  username?: Username;
}
/**
 * Authentication based on certificate / private key
 */
export interface X509Authentication {
  enabled?: boolean;
}
/**
 * Keystore that contains the client certificate including the chain. Required for X509 authentication.
 */
export interface Keystore {
  password?: KeystorePassword;
  path?: KeystorePath;
  "private-key-password"?: PrivateKeyPassword;
}
/**
 * Truststore wich contains the trusted server certificates or trusted intermediates.
 */
export interface Truststore {
  password?: TruststorePassword;
  path?: TruststorePath;
}
