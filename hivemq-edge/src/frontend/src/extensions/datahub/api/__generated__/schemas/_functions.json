{
  "anyOf": [
    {
      "title": "Serdes.deserialize",
      "description": "Deserializes a binary MQTT message payload into a data object based on the configured JSON or Protobuf Schema.",
      "type": "object",
      "required": ["schemaId", "schemaVersion"],
      "metaData": {
        "isTerminal": false,
        "isDataOnly": true,
        "hasArguments": true,
        "supportedEvents": []
      },
      "properties": {
        "schemaId": {
          "type": "string",
          "title": "schemaId",
          "description": "The identifier of the JSON or Protobuf Schema to be used for deserialization.",
          "metadata": {}
        },
        "schemaVersion": {
          "type": "string",
          "title": "schemaVersion",
          "description": "The version of the schema to be used for deserialization.",
          "metadata": {}
        }
      }
    },
    {
      "title": "Serdes.serialize",
      "description": "Serializes a data object into a binary MQTT message payload based on the configured JSON Schema. Protobuf Schemas are currently not supported for serialization.",
      "type": "object",
      "required": ["schemaId", "schemaVersion"],
      "metaData": {
        "isTerminal": false,
        "isDataOnly": true,
        "hasArguments": true,
        "supportedEvents": []
      },
      "properties": {
        "schemaId": {
          "type": "string",
          "title": "schemaId",
          "description": "The identifier of the JSON Schema to be used for serialization",
          "metadata": {}
        },
        "schemaVersion": {
          "type": "string",
          "title": "schemaVersion",
          "description": "The version of the schema to be used for serialization.",
          "metadata": {}
        }
      }
    },
    {
      "title": "System.log",
      "description": "Logs a message on the given level.",
      "type": "object",
      "required": ["level", "message"],
      "metaData": {
        "isTerminal": false,
        "isDataOnly": false,
        "hasArguments": true,
        "supportedEvents": [
          "Event.OnAny",
          "Mqtt.OnInboundConnect",
          "Mqtt.OnInboundPublish",
          "Mqtt.OnInboundSubscribe",
          "Mqtt.OnInboundDisconnect",
          "Connection.OnDisconnect"
        ]
      },
      "properties": {
        "level": {
          "type": "string",
          "title": "Log Level",
          "description": "Specifies the log level of the function.",
          "metadata": {}
        },
        "message": {
          "type": "string",
          "title": "Message",
          "description": "Adds a user-defined string that prints to the log file. For more information, see Example log message.",
          "metadata": {}
        }
      }
    },
    {
      "title": "Mqtt.UserProperties.add",
      "description": "Adds a user property to the MQTT message.",
      "type": "object",
      "required": ["name", "value"],
      "metaData": {
        "isTerminal": false,
        "isDataOnly": false,
        "hasArguments": true,
        "supportedEvents": [
          "Mqtt.OnInboundConnect",
          "Mqtt.OnInboundPublish",
          "Mqtt.OnInboundSubscribe",
          "Mqtt.OnInboundDisconnect"
        ]
      },
      "properties": {
        "name": {
          "type": "string",
          "title": "name",
          "description": "Specifies the name of the user property. Multiple user properties with the same name are allowed.",
          "metadata": {}
        },
        "value": {
          "type": "string",
          "title": "value",
          "description": "Specifies the value of the user property.",
          "metadata": {
            "interpolation_forbidden": true
          }
        }
      }
    },
    {
      "title": "Metrics.Counter.increment",
      "description": "Increments a metric of type counter, which can be accessed with monitoring.",
      "type": "object",
      "required": ["metricName", "incrementBy"],
      "metaData": {
        "isTerminal": false,
        "isDataOnly": false,
        "hasArguments": true,
        "supportedEvents": [
          "Event.OnAny",
          "Mqtt.OnInboundConnect",
          "Mqtt.OnInboundPublish",
          "Mqtt.OnInboundSubscribe",
          "Mqtt.OnInboundDisconnect",
          "Connection.OnDisconnect"
        ]
      },
      "properties": {
        "metricName": {
          "type": "string",
          "title": "metricName",
          "description": "Specifies the name of the metric to be incremented.",
          "metadata": {
            "interpolation_forbidden": true
          }
        },
        "incrementBy": {
          "type": "integer",
          "title": "incrementBy",
          "description": "Specifies the amount by which the counter should be incremented. Negative values are supported.",
          "metadata": {}
        }
      }
    },
    {
      "title": "Mqtt.drop",
      "description": "Drops the MQTT packet that is currently processed.",
      "type": "object",
      "required": [],
      "metaData": {
        "isTerminal": true,
        "isDataOnly": false,
        "hasArguments": true,
        "supportedEvents": ["Mqtt.OnInboundPublish", "Mqtt.OnInboundSubscribe"]
      },
      "properties": {
        "reasonString": {
          "type": "string",
          "title": "reasonString",
          "description": "Specifies the reason string that is returned to MQTT 5 clients.",
          "metadata": {}
        }
      }
    },
    {
      "title": "Delivery.redirectTo",
      "description": "Redirects an MQTT PUBLISH message to a specified topic.",
      "type": "object",
      "required": ["topic", "applyPolicies"],
      "metaData": {
        "isTerminal": true,
        "isDataOnly": true,
        "hasArguments": true,
        "supportedEvents": []
      },
      "properties": {
        "topic": {
          "type": "string",
          "title": "topic",
          "description": "The destination MQTT topic according to the MQTT specification.",
          "metadata": {}
        },
        "applyPolicies": {
          "type": "boolean",
          "title": "applyPolicies",
          "description": "Defines whether policies are executed after publishing to a different topic.",
          "metadata": {}
        }
      }
    },
    {
      "title": "Mqtt.disconnect",
      "description": "Disconnects the client.",
      "type": "object",
      "required": [],
      "metaData": {
        "isTerminal": true,
        "isDataOnly": false,
        "hasArguments": false,
        "supportedEvents": ["Mqtt.OnInboundConnect", "Mqtt.OnInboundPublish", "Mqtt.OnInboundSubscribe"]
      },
      "properties": {}
    }
  ]
}
