{"version":3,"mappings":"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","names":["DevicePropertyDrawer","lazy","__vitePreload","NodePropertyDrawer","LinkPropertyDrawer","GroupPropertyDrawer","EdgePropertyDrawer","NodePanelController","navigate","useNavigate","isOpen","onOpen","onClose","useDisclosure","nodes","useNodes","edges","useEdges","nodeId","useParams","selectedNode","e","NodeTypes","selectedEdge","selectedDevice","selectedLinkSource","link","EdgeTypes","selectedGroup","useEffect","handleClose","handleEditEntity","adapterNavigateState","ProtocolAdapterTabIndex","id","type","jsxs","Suspense","jsx","SuspenseFallback"],"ignoreList":[],"sources":["../../src/modules/Workspace/components/controls/NodePanelController.tsx"],"sourcesContent":["import type { FC } from 'react'\nimport { lazy, Suspense, useEffect } from 'react'\nimport { useNavigate, useParams } from 'react-router-dom'\nimport type { Node } from 'reactflow'\nimport { useEdges, useNodes } from 'reactflow'\nimport { useDisclosure } from '@chakra-ui/react'\n\nimport type { Adapter, Bridge } from '@/api/__generated__'\nimport { SuspenseFallback } from '@/components/SuspenseOutlet.tsx'\nimport type { AdapterNavigateState } from '@/modules/ProtocolAdapters/types.ts'\nimport { ProtocolAdapterTabIndex } from '@/modules/ProtocolAdapters/types.ts'\nimport type { DeviceMetadata, Group } from '@/modules/Workspace/types.ts'\nimport { EdgeTypes, NodeTypes } from '@/modules/Workspace/types.ts'\n\nconst DevicePropertyDrawer = lazy(() => import('../drawers/DevicePropertyDrawer.tsx'))\nconst NodePropertyDrawer = lazy(() => import('../drawers/NodePropertyDrawer.tsx'))\nconst LinkPropertyDrawer = lazy(() => import('../drawers/LinkPropertyDrawer.tsx'))\nconst GroupPropertyDrawer = lazy(() => import('../drawers/GroupPropertyDrawer.tsx'))\nconst EdgePropertyDrawer = lazy(() => import('../drawers/EdgePropertyDrawer.tsx'))\n\nconst NodePanelController: FC = () => {\n  const navigate = useNavigate()\n  const { isOpen, onOpen, onClose } = useDisclosure()\n\n  const nodes = useNodes()\n  const edges = useEdges()\n\n  const { nodeId } = useParams()\n\n  const selectedNode = nodes.find(\n    (e) => e.id === nodeId && (e.type === NodeTypes.BRIDGE_NODE || e.type === NodeTypes.ADAPTER_NODE)\n  ) as Node<Bridge | Adapter> | undefined\n\n  const selectedEdge = nodes.find((e) => e.id === nodeId && e.type === NodeTypes.EDGE_NODE)\n  const selectedDevice = nodes.find((e) => e.id === nodeId && e.type === NodeTypes.DEVICE_NODE) as\n    | Node<DeviceMetadata>\n    | undefined\n\n  const selectedLinkSource = nodes.find((e) => {\n    const link = edges.find((e) => e.id === nodeId && e.type === EdgeTypes.REPORT_EDGE)\n    if (!link) return undefined\n    return e.id === link.source // && (e.type === NodeTypes.BRIDGE_NODE || e.type === NodeTypes.ADAPTER_NODE)\n  }) as Node<Bridge | Adapter | Group> | undefined\n\n  const selectedGroup = nodes.find((e) => e.id === nodeId && e.type === NodeTypes.CLUSTER_NODE) as\n    | Node<Group>\n    | undefined\n\n  useEffect(() => {\n    if (!nodes.length) return\n    // if (!selectedNode || !nodeId) {\n    //   navigate('/workspace', { replace: true })\n    //   return\n    // }\n    onOpen()\n  }, [navigate, nodeId, nodes.length, onOpen, selectedNode])\n\n  const handleClose = () => {\n    onClose()\n    navigate('/workspace')\n  }\n\n  const handleEditEntity = () => {\n    if (selectedNode?.type === NodeTypes.ADAPTER_NODE) {\n      const adapterNavigateState: AdapterNavigateState = {\n        protocolAdapterTabIndex: ProtocolAdapterTabIndex.ADAPTERS,\n        protocolAdapterType: (selectedNode?.data as Adapter).type,\n        selectedActiveAdapter: { isNew: false, isOpen: false, adapterId: (selectedNode?.data as Adapter).id },\n      }\n      const { id, type } = selectedNode?.data as Adapter\n      navigate(`/protocol-adapters/edit/${type}/${id}`, {\n        state: adapterNavigateState,\n      })\n    } else if (selectedNode?.type === NodeTypes.BRIDGE_NODE) {\n      const { id } = selectedNode?.data as Bridge\n      navigate(`/mqtt-bridges/${id}`)\n    }\n  }\n\n  if (!nodeId) return null\n\n  return (\n    <Suspense fallback={<SuspenseFallback />}>\n      {selectedLinkSource && selectedLinkSource.type !== NodeTypes.CLUSTER_NODE && (\n        <LinkPropertyDrawer\n          nodeId={nodeId}\n          selectedNode={selectedLinkSource as Node<Bridge | Adapter>}\n          isOpen={isOpen}\n          onClose={handleClose}\n          onEditEntity={handleEditEntity}\n        />\n      )}\n      {selectedLinkSource && selectedLinkSource.type === NodeTypes.CLUSTER_NODE && (\n        <GroupPropertyDrawer\n          nodeId={nodeId}\n          nodes={nodes}\n          selectedNode={selectedLinkSource as Node<Group>}\n          isOpen={isOpen}\n          onClose={handleClose}\n          onEditEntity={handleEditEntity}\n        />\n      )}\n      {selectedEdge && (\n        <EdgePropertyDrawer\n          nodeId={nodeId}\n          selectedNode={selectedEdge}\n          isOpen={isOpen}\n          onClose={handleClose}\n          onEditEntity={handleEditEntity}\n        />\n      )}\n      {selectedNode && (\n        <NodePropertyDrawer\n          nodeId={nodeId}\n          selectedNode={selectedNode}\n          isOpen={isOpen}\n          onClose={handleClose}\n          onEditEntity={handleEditEntity}\n        />\n      )}\n      {selectedDevice && (\n        <DevicePropertyDrawer\n          nodeId={nodeId}\n          selectedNode={selectedDevice}\n          isOpen={isOpen}\n          onClose={handleClose}\n          onEditEntity={handleEditEntity}\n        />\n      )}\n      {selectedGroup && (\n        <GroupPropertyDrawer\n          showConfig\n          nodeId={nodeId}\n          nodes={nodes}\n          selectedNode={selectedGroup}\n          isOpen={isOpen}\n          onClose={handleClose}\n          onEditEntity={handleEditEntity}\n        />\n      )}\n    </Suspense>\n  )\n}\n\nexport default NodePanelController\n"],"file":"assets/NodePanelController-DYh7kSPx.js"}