import{p as Z}from"./chunk-BAOP5US2-B6it3goN.js";import{I as F}from"./chunk-RGXPSUNZ-TLZ7wQwX.js";import{_ as h,m as U,n as rr,s as er,g as tr,a as ar,b as nr,l as w,c as sr,u as or,A as cr,t as ir,j as B,B as dr,C as hr,D as lr,E as fr}from"./PropertyPanelController-B_GTknPx.js";import{p as $r}from"./gitGraph-YCYPL57B-Ejh1_COe.js";import{s as pr}from"./index-Dis5-5gm.js";import"./index-cMih3SEP.js";import"./index-iD7yky8Q.js";import"./types-CNm55BG_.js";import"./usePolicyGuards-DliXcvYq.js";import"./useDataHubDraftStore-BdIk6zJn.js";import"./index-UJo6opCj.js";import"./vanilla-Dd4Maacd.js";import"./middleware-DWkoLS6u.js";import"./index-BXWYaCHO.js";import"./without-BTTCd72_.js";import"./index-BTlOwmq4.js";import"./ArrayFieldTemplate-BvbIrrVp.js";import"./pick-DicWcAKr.js";import"./chunk-TRO7245M-Czmm3RtS.js";import"./chunk-JARCRF6W-CHhnzfpl.js";import"./chunk-ZPFGWTBB-27OtcFRz.js";import"./chunk-W7WUSNWJ-DJm2I2MC.js";import"./index-C23MLgnh.js";import"./chunk-RDF2AYID-BFNDpMsD.js";import"./creatable-select-CDfhMLkq.js";import"./use-chakra-select-props-D5NVA-bJ.js";import"./chunk-KC77MHL3-CpO6TSLY.js";import"./chunk-HB6KBUMZ-BnKuEGjs.js";import"./chunk-OCNORRQU-qVjYAyQ7.js";import"./index-DDmdO6wr.js";import"./select-Cl6Duh2E.js";import"./config.utils-FEQhkVx6.js";import"./toast-utils-BddXXXrS.js";import"./PaginatedTable-CpimMJK6.js";import"./datetime-B2_BsC7v.js";import"./chunk-KO6Q73AP-Bk5HKb-M.js";import"./chunk-VTV6N5LE-DWhDJEfB.js";import"./chunk-RPO2WXNL-BTibYaQa.js";import"./chunk-EL2VKIZQ-C-XtNqj-.js";import"./useListProtocolAdapters-B80RXV7q.js";import"./ArrayFieldItemTemplate-CQ7KDBCe.js";import"./color-Cs2FUV59.js";import"./useGetAllSchemas-BHgSFldN.js";import"./utils-Da84xa3e.js";import"./SchemaNode.utils-CqHD45U7.js";import"./index-C46KiF-i.js";import"./useGetAllDataPolicies-C_g1xUlx.js";import"./chunk-FHHZMTWR-BZ2wKB7t.js";import"./useGetAllBehaviorPolicies-C8fnxDpN.js";import"./step-BUvoxw0L.js";import"./bump-DxSIDwFB.js";/* empty css              */import"./_baseUniq-UwA5AnXX.js";import"./_basePickBy-BpWhf_0p.js";import"./clone-DWpQoFSB.js";(function(){try{var t=typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{},r=new t.Error().stack;r&&(t._sentryDebugIds=t._sentryDebugIds||{},t._sentryDebugIds[r]="7d0e22d5-80ef-4a5d-a68b-a80a73fa71f4",t._sentryDebugIdIdentifier="sentry-dbid-7d0e22d5-80ef-4a5d-a68b-a80a73fa71f4")}catch{}})();var u={NORMAL:0,REVERSE:1,HIGHLIGHT:2,MERGE:3,CHERRY_PICK:4},yr=lr.gitGraph,z=h(()=>dr({...yr,...hr().gitGraph}),"getConfig"),i=new F(()=>{const t=z(),r=t.mainBranchName,a=t.mainBranchOrder;return{mainBranchName:r,commits:new Map,head:null,branchConfig:new Map([[r,{name:r,order:a}]]),branches:new Map([[r,null]]),currBranch:r,direction:"LR",seq:0,options:{}}});function W(){return fr({length:7})}h(W,"getID");function K(t,r){const a=Object.create(null);return t.reduce((s,e)=>{const n=r(e);return a[n]||(a[n]=!0,s.push(e)),s},[])}h(K,"uniqBy");var gr=h(function(t){i.records.direction=t},"setDirection"),ur=h(function(t){w.debug("options str",t),t=t==null?void 0:t.trim(),t=t||"{}";try{i.records.options=JSON.parse(t)}catch(r){w.error("error while parsing gitGraph options",r.message)}},"setOptions"),xr=h(function(){return i.records.options},"getOptions"),mr=h(function(t){let r=t.msg,a=t.id;const s=t.type;let e=t.tags;w.info("commit",r,a,s,e),w.debug("Entering commit:",r,a,s,e);const n=z();a=B.sanitizeText(a,n),r=B.sanitizeText(r,n),e=e==null?void 0:e.map(o=>B.sanitizeText(o,n));const c={id:a||i.records.seq+"-"+W(),message:r,seq:i.records.seq++,type:s??u.NORMAL,tags:e??[],parents:i.records.head==null?[]:[i.records.head.id],branch:i.records.currBranch};i.records.head=c,w.info("main branch",n.mainBranchName),i.records.commits.set(c.id,c),i.records.branches.set(i.records.currBranch,c.id),w.debug("in pushCommit "+c.id)},"commit"),br=h(function(t){let r=t.name;const a=t.order;if(r=B.sanitizeText(r,z()),i.records.branches.has(r))throw new Error(`Trying to create an existing branch. (Help: Either use a new name if you want create a new branch or try using "checkout ${r}")`);i.records.branches.set(r,i.records.head!=null?i.records.head.id:null),i.records.branchConfig.set(r,{name:r,order:a}),N(r),w.debug("in createBranch")},"branch"),wr=h(t=>{let r=t.branch,a=t.id;const s=t.type,e=t.tags,n=z();r=B.sanitizeText(r,n),a&&(a=B.sanitizeText(a,n));const c=i.records.branches.get(i.records.currBranch),o=i.records.branches.get(r),f=c?i.records.commits.get(c):void 0,l=o?i.records.commits.get(o):void 0;if(f&&l&&f.branch===r)throw new Error(`Cannot merge branch '${r}' into itself.`);if(i.records.currBranch===r){const d=new Error('Incorrect usage of "merge". Cannot merge a branch to itself');throw d.hash={text:`merge ${r}`,token:`merge ${r}`,expected:["branch abc"]},d}if(f===void 0||!f){const d=new Error(`Incorrect usage of "merge". Current branch (${i.records.currBranch})has no commits`);throw d.hash={text:`merge ${r}`,token:`merge ${r}`,expected:["commit"]},d}if(!i.records.branches.has(r)){const d=new Error('Incorrect usage of "merge". Branch to be merged ('+r+") does not exist");throw d.hash={text:`merge ${r}`,token:`merge ${r}`,expected:[`branch ${r}`]},d}if(l===void 0||!l){const d=new Error('Incorrect usage of "merge". Branch to be merged ('+r+") has no commits");throw d.hash={text:`merge ${r}`,token:`merge ${r}`,expected:['"commit"']},d}if(f===l){const d=new Error('Incorrect usage of "merge". Both branches have same head');throw d.hash={text:`merge ${r}`,token:`merge ${r}`,expected:["branch abc"]},d}if(a&&i.records.commits.has(a)){const d=new Error('Incorrect usage of "merge". Commit with id:'+a+" already exists, use different custom Id");throw d.hash={text:`merge ${r} ${a} ${s} ${e==null?void 0:e.join(" ")}`,token:`merge ${r} ${a} ${s} ${e==null?void 0:e.join(" ")}`,expected:[`merge ${r} ${a}_UNIQUE ${s} ${e==null?void 0:e.join(" ")}`]},d}const $=o||"",p={id:a||`${i.records.seq}-${W()}`,message:`merged branch ${r} into ${i.records.currBranch}`,seq:i.records.seq++,parents:i.records.head==null?[]:[i.records.head.id,$],branch:i.records.currBranch,type:u.MERGE,customType:s,customId:!!a,tags:e??[]};i.records.head=p,i.records.commits.set(p.id,p),i.records.branches.set(i.records.currBranch,p.id),w.debug(i.records.branches),w.debug("in mergeBranch")},"merge"),Cr=h(function(t){let r=t.id,a=t.targetId,s=t.tags,e=t.parent;w.debug("Entering cherryPick:",r,a,s);const n=z();if(r=B.sanitizeText(r,n),a=B.sanitizeText(a,n),s=s==null?void 0:s.map(f=>B.sanitizeText(f,n)),e=B.sanitizeText(e,n),!r||!i.records.commits.has(r)){const f=new Error('Incorrect usage of "cherryPick". Source commit id should exist and provided');throw f.hash={text:`cherryPick ${r} ${a}`,token:`cherryPick ${r} ${a}`,expected:["cherry-pick abc"]},f}const c=i.records.commits.get(r);if(c===void 0||!c)throw new Error('Incorrect usage of "cherryPick". Source commit id should exist and provided');if(e&&!(Array.isArray(c.parents)&&c.parents.includes(e)))throw new Error("Invalid operation: The specified parent commit is not an immediate parent of the cherry-picked commit.");const o=c.branch;if(c.type===u.MERGE&&!e)throw new Error("Incorrect usage of cherry-pick: If the source commit is a merge commit, an immediate parent commit must be specified.");if(!a||!i.records.commits.has(a)){if(o===i.records.currBranch){const p=new Error('Incorrect usage of "cherryPick". Source commit is already on current branch');throw p.hash={text:`cherryPick ${r} ${a}`,token:`cherryPick ${r} ${a}`,expected:["cherry-pick abc"]},p}const f=i.records.branches.get(i.records.currBranch);if(f===void 0||!f){const p=new Error(`Incorrect usage of "cherry-pick". Current branch (${i.records.currBranch})has no commits`);throw p.hash={text:`cherryPick ${r} ${a}`,token:`cherryPick ${r} ${a}`,expected:["cherry-pick abc"]},p}const l=i.records.commits.get(f);if(l===void 0||!l){const p=new Error(`Incorrect usage of "cherry-pick". Current branch (${i.records.currBranch})has no commits`);throw p.hash={text:`cherryPick ${r} ${a}`,token:`cherryPick ${r} ${a}`,expected:["cherry-pick abc"]},p}const $={id:i.records.seq+"-"+W(),message:`cherry-picked ${c==null?void 0:c.message} into ${i.records.currBranch}`,seq:i.records.seq++,parents:i.records.head==null?[]:[i.records.head.id,c.id],branch:i.records.currBranch,type:u.CHERRY_PICK,tags:s?s.filter(Boolean):[`cherry-pick:${c.id}${c.type===u.MERGE?`|parent:${e}`:""}`]};i.records.head=$,i.records.commits.set($.id,$),i.records.branches.set(i.records.currBranch,$.id),w.debug(i.records.branches),w.debug("in cherryPick")}},"cherryPick"),N=h(function(t){if(t=B.sanitizeText(t,z()),i.records.branches.has(t)){i.records.currBranch=t;const r=i.records.branches.get(i.records.currBranch);r===void 0||!r?i.records.head=null:i.records.head=i.records.commits.get(r)??null}else{const r=new Error(`Trying to checkout branch which is not yet created. (Help try using "branch ${t}")`);throw r.hash={text:`checkout ${t}`,token:`checkout ${t}`,expected:[`branch ${t}`]},r}},"checkout");function S(t,r,a){const s=t.indexOf(r);s===-1?t.push(a):t.splice(s,1,a)}h(S,"upsert");function _(t){const r=t.reduce((e,n)=>e.seq>n.seq?e:n,t[0]);let a="";t.forEach(function(e){e===r?a+="	*":a+="	|"});const s=[a,r.id,r.seq];for(const e in i.records.branches)i.records.branches.get(e)===r.id&&s.push(e);if(w.debug(s.join(" ")),r.parents&&r.parents.length==2&&r.parents[0]&&r.parents[1]){const e=i.records.commits.get(r.parents[0]);S(t,r,e),r.parents[1]&&t.push(i.records.commits.get(r.parents[1]))}else{if(r.parents.length==0)return;if(r.parents[0]){const e=i.records.commits.get(r.parents[0]);S(t,r,e)}}t=K(t,e=>e.id),_(t)}h(_,"prettyPrintCommitHistory");var vr=h(function(){w.debug(i.records.commits);const t=V()[0];_([t])},"prettyPrint"),Er=h(function(){i.reset(),ir()},"clear"),Br=h(function(){return[...i.records.branchConfig.values()].map((r,a)=>r.order!==null&&r.order!==void 0?r:{...r,order:parseFloat(`0.${a}`)}).sort((r,a)=>(r.order??0)-(a.order??0)).map(({name:r})=>({name:r}))},"getBranchesAsObjArray"),kr=h(function(){return i.records.branches},"getBranches"),Lr=h(function(){return i.records.commits},"getCommits"),V=h(function(){const t=[...i.records.commits.values()];return t.forEach(function(r){w.debug(r.id)}),t.sort((r,a)=>r.seq-a.seq),t},"getCommitsArray"),Tr=h(function(){return i.records.currBranch},"getCurrentBranch"),Mr=h(function(){return i.records.direction},"getDirection"),Rr=h(function(){return i.records.head},"getHead"),X={commitType:u,getConfig:z,setDirection:gr,setOptions:ur,getOptions:xr,commit:mr,branch:br,merge:wr,cherryPick:Cr,checkout:N,prettyPrint:vr,clear:Er,getBranchesAsObjArray:Br,getBranches:kr,getCommits:Lr,getCommitsArray:V,getCurrentBranch:Tr,getDirection:Mr,getHead:Rr,setAccTitle:nr,getAccTitle:ar,getAccDescription:tr,setAccDescription:er,setDiagramTitle:rr,getDiagramTitle:U},Ir=h((t,r)=>{Z(t,r),t.dir&&r.setDirection(t.dir);for(const a of t.statements)qr(a,r)},"populate"),qr=h((t,r)=>{const s={Commit:h(e=>r.commit(Or(e)),"Commit"),Branch:h(e=>r.branch(zr(e)),"Branch"),Merge:h(e=>r.merge(Gr(e)),"Merge"),Checkout:h(e=>r.checkout(Hr(e)),"Checkout"),CherryPicking:h(e=>r.cherryPick(Pr(e)),"CherryPicking")}[t.$type];s?s(t):w.error(`Unknown statement type: ${t.$type}`)},"parseStatement"),Or=h(t=>({id:t.id,msg:t.message??"",type:t.type!==void 0?u[t.type]:u.NORMAL,tags:t.tags??void 0}),"parseCommit"),zr=h(t=>({name:t.name,order:t.order??0}),"parseBranch"),Gr=h(t=>({branch:t.branch,id:t.id??"",type:t.type!==void 0?u[t.type]:void 0,tags:t.tags??void 0}),"parseMerge"),Hr=h(t=>t.branch,"parseCheckout"),Pr=h(t=>{var a;return{id:t.id,targetId:"",tags:((a=t.tags)==null?void 0:a.length)===0?void 0:t.tags,parent:t.parent}},"parseCherryPicking"),Dr={parse:h(async t=>{const r=await $r("gitGraph",t);w.debug(r),Ir(r,X)},"parse")},j=sr(),m=j==null?void 0:j.gitGraph,R=10,I=40,k=4,L=2,O=8,v=new Map,E=new Map,P=30,G=new Map,D=[],M=0,g="LR",Wr=h(()=>{v.clear(),E.clear(),G.clear(),M=0,D=[],g="LR"},"clear"),J=h(t=>{const r=document.createElementNS("http://www.w3.org/2000/svg","text");return(typeof t=="string"?t.split(/\\n|\n|<br\s*\/?>/gi):t).forEach(s=>{const e=document.createElementNS("http://www.w3.org/2000/svg","tspan");e.setAttributeNS("http://www.w3.org/XML/1998/namespace","xml:space","preserve"),e.setAttribute("dy","1em"),e.setAttribute("x","0"),e.setAttribute("class","row"),e.textContent=s.trim(),r.appendChild(e)}),r},"drawText"),Q=h(t=>{let r,a,s;return g==="BT"?(a=h((e,n)=>e<=n,"comparisonFunc"),s=1/0):(a=h((e,n)=>e>=n,"comparisonFunc"),s=0),t.forEach(e=>{var c,o;const n=g==="TB"||g=="BT"?(c=E.get(e))==null?void 0:c.y:(o=E.get(e))==null?void 0:o.x;n!==void 0&&a(n,s)&&(r=e,s=n)}),r},"findClosestParent"),jr=h(t=>{let r="",a=1/0;return t.forEach(s=>{const e=E.get(s).y;e<=a&&(r=s,a=e)}),r||void 0},"findClosestParentBT"),Sr=h((t,r,a)=>{let s=a,e=a;const n=[];t.forEach(c=>{const o=r.get(c);if(!o)throw new Error(`Commit not found for key ${c}`);o.parents.length?(s=Ar(o),e=Math.max(s,e)):n.push(o),Yr(o,s)}),s=e,n.forEach(c=>{Kr(c,s,a)}),t.forEach(c=>{const o=r.get(c);if(o!=null&&o.parents.length){const f=jr(o.parents);s=E.get(f).y-I,s<=e&&(e=s);const l=v.get(o.branch).pos,$=s-R;E.set(o.id,{x:l,y:$})}})},"setParallelBTPos"),_r=h(t=>{var s;const r=Q(t.parents.filter(e=>e!==null));if(!r)throw new Error(`Closest parent not found for commit ${t.id}`);const a=(s=E.get(r))==null?void 0:s.y;if(a===void 0)throw new Error(`Closest parent position not found for commit ${t.id}`);return a},"findClosestParentPos"),Ar=h(t=>_r(t)+I,"calculateCommitPosition"),Yr=h((t,r)=>{const a=v.get(t.branch);if(!a)throw new Error(`Branch not found for commit ${t.id}`);const s=a.pos,e=r+R;return E.set(t.id,{x:s,y:e}),{x:s,y:e}},"setCommitPosition"),Kr=h((t,r,a)=>{const s=v.get(t.branch);if(!s)throw new Error(`Branch not found for commit ${t.id}`);const e=r+a,n=s.pos;E.set(t.id,{x:n,y:e})},"setRootPosition"),Nr=h((t,r,a,s,e,n)=>{if(n===u.HIGHLIGHT)t.append("rect").attr("x",a.x-10).attr("y",a.y-10).attr("width",20).attr("height",20).attr("class",`commit ${r.id} commit-highlight${e%O} ${s}-outer`),t.append("rect").attr("x",a.x-6).attr("y",a.y-6).attr("width",12).attr("height",12).attr("class",`commit ${r.id} commit${e%O} ${s}-inner`);else if(n===u.CHERRY_PICK)t.append("circle").attr("cx",a.x).attr("cy",a.y).attr("r",10).attr("class",`commit ${r.id} ${s}`),t.append("circle").attr("cx",a.x-3).attr("cy",a.y+2).attr("r",2.75).attr("fill","#fff").attr("class",`commit ${r.id} ${s}`),t.append("circle").attr("cx",a.x+3).attr("cy",a.y+2).attr("r",2.75).attr("fill","#fff").attr("class",`commit ${r.id} ${s}`),t.append("line").attr("x1",a.x+3).attr("y1",a.y+1).attr("x2",a.x).attr("y2",a.y-5).attr("stroke","#fff").attr("class",`commit ${r.id} ${s}`),t.append("line").attr("x1",a.x-3).attr("y1",a.y+1).attr("x2",a.x).attr("y2",a.y-5).attr("stroke","#fff").attr("class",`commit ${r.id} ${s}`);else{const c=t.append("circle");if(c.attr("cx",a.x),c.attr("cy",a.y),c.attr("r",r.type===u.MERGE?9:10),c.attr("class",`commit ${r.id} commit${e%O}`),n===u.MERGE){const o=t.append("circle");o.attr("cx",a.x),o.attr("cy",a.y),o.attr("r",6),o.attr("class",`commit ${s} ${r.id} commit${e%O}`)}n===u.REVERSE&&t.append("path").attr("d",`M ${a.x-5},${a.y-5}L${a.x+5},${a.y+5}M${a.x-5},${a.y+5}L${a.x+5},${a.y-5}`).attr("class",`commit ${s} ${r.id} commit${e%O}`)}},"drawCommitBullet"),Vr=h((t,r,a,s)=>{var e;if(r.type!==u.CHERRY_PICK&&(r.customId&&r.type===u.MERGE||r.type!==u.MERGE)&&(m!=null&&m.showCommitLabel)){const n=t.append("g"),c=n.insert("rect").attr("class","commit-label-bkg"),o=n.append("text").attr("x",s).attr("y",a.y+25).attr("class","commit-label").text(r.id),f=(e=o.node())==null?void 0:e.getBBox();if(f&&(c.attr("x",a.posWithOffset-f.width/2-L).attr("y",a.y+13.5).attr("width",f.width+2*L).attr("height",f.height+2*L),g==="TB"||g==="BT"?(c.attr("x",a.x-(f.width+4*k+5)).attr("y",a.y-12),o.attr("x",a.x-(f.width+4*k)).attr("y",a.y+f.height-12)):o.attr("x",a.posWithOffset-f.width/2),m.rotateCommitLabel))if(g==="TB"||g==="BT")o.attr("transform","rotate(-45, "+a.x+", "+a.y+")"),c.attr("transform","rotate(-45, "+a.x+", "+a.y+")");else{const l=-7.5-(f.width+10)/25*9.5,$=10+f.width/25*8.5;n.attr("transform","translate("+l+", "+$+") rotate(-45, "+s+", "+a.y+")")}}},"drawCommitLabel"),Xr=h((t,r,a,s)=>{var e;if(r.tags.length>0){let n=0,c=0,o=0;const f=[];for(const l of r.tags.reverse()){const $=t.insert("polygon"),p=t.append("circle"),d=t.append("text").attr("y",a.y-16-n).attr("class","tag-label").text(l),y=(e=d.node())==null?void 0:e.getBBox();if(!y)throw new Error("Tag bbox not found");c=Math.max(c,y.width),o=Math.max(o,y.height),d.attr("x",a.posWithOffset-y.width/2),f.push({tag:d,hole:p,rect:$,yOffset:n}),n+=20}for(const{tag:l,hole:$,rect:p,yOffset:d}of f){const y=o/2,x=a.y-19.2-d;if(p.attr("class","tag-label-bkg").attr("points",`
      ${s-c/2-k/2},${x+L}  
      ${s-c/2-k/2},${x-L}
      ${a.posWithOffset-c/2-k},${x-y-L}
      ${a.posWithOffset+c/2+k},${x-y-L}
      ${a.posWithOffset+c/2+k},${x+y+L}
      ${a.posWithOffset-c/2-k},${x+y+L}`),$.attr("cy",x).attr("cx",s-c/2+k/2).attr("r",1.5).attr("class","tag-hole"),g==="TB"||g==="BT"){const b=s+d;p.attr("class","tag-label-bkg").attr("points",`
        ${a.x},${b+2}
        ${a.x},${b-2}
        ${a.x+R},${b-y-2}
        ${a.x+R+c+4},${b-y-2}
        ${a.x+R+c+4},${b+y+2}
        ${a.x+R},${b+y+2}`).attr("transform","translate(12,12) rotate(45, "+a.x+","+s+")"),$.attr("cx",a.x+k/2).attr("cy",b).attr("transform","translate(12,12) rotate(45, "+a.x+","+s+")"),l.attr("x",a.x+5).attr("y",b+3).attr("transform","translate(14,14) rotate(45, "+a.x+","+s+")")}}}},"drawCommitTags"),Jr=h(t=>{switch(t.customType??t.type){case u.NORMAL:return"commit-normal";case u.REVERSE:return"commit-reverse";case u.HIGHLIGHT:return"commit-highlight";case u.MERGE:return"commit-merge";case u.CHERRY_PICK:return"commit-cherry-pick";default:return"commit-normal"}},"getCommitClassType"),Qr=h((t,r,a,s)=>{const e={x:0,y:0};if(t.parents.length>0){const n=Q(t.parents);if(n){const c=s.get(n)??e;return r==="TB"?c.y+I:r==="BT"?(s.get(t.id)??e).y-I:c.x+I}}else return r==="TB"?P:r==="BT"?(s.get(t.id)??e).y-I:0;return 0},"calculatePosition"),Zr=h((t,r,a)=>{var c,o;const s=g==="BT"&&a?r:r+R,e=g==="TB"||g==="BT"?s:(c=v.get(t.branch))==null?void 0:c.pos,n=g==="TB"||g==="BT"?(o=v.get(t.branch))==null?void 0:o.pos:s;if(n===void 0||e===void 0)throw new Error(`Position were undefined for commit ${t.id}`);return{x:n,y:e,posWithOffset:s}},"getCommitPosition"),Y=h((t,r,a)=>{if(!m)throw new Error("GitGraph config not found");const s=t.append("g").attr("class","commit-bullets"),e=t.append("g").attr("class","commit-labels");let n=g==="TB"||g==="BT"?P:0;const c=[...r.keys()],o=(m==null?void 0:m.parallelCommits)??!1,f=h(($,p)=>{var x,b;const d=(x=r.get($))==null?void 0:x.seq,y=(b=r.get(p))==null?void 0:b.seq;return d!==void 0&&y!==void 0?d-y:0},"sortKeys");let l=c.sort(f);g==="BT"&&(o&&Sr(l,r,n),l=l.reverse()),l.forEach($=>{var y;const p=r.get($);if(!p)throw new Error(`Commit not found for key ${$}`);o&&(n=Qr(p,g,n,E));const d=Zr(p,n,o);if(a){const x=Jr(p),b=p.customType??p.type,q=((y=v.get(p.branch))==null?void 0:y.index)??0;Nr(s,p,d,x,q,b),Vr(e,p,d,n),Xr(e,p,d,n)}g==="TB"||g==="BT"?E.set(p.id,{x:d.x,y:d.posWithOffset}):E.set(p.id,{x:d.posWithOffset,y:d.y}),n=g==="BT"&&o?n+I:n+I+R,n>M&&(M=n)})},"drawCommits"),Fr=h((t,r,a,s,e)=>{const c=(g==="TB"||g==="BT"?a.x<s.x:a.y<s.y)?r.branch:t.branch,o=h(l=>l.branch===c,"isOnBranchToGetCurve"),f=h(l=>l.seq>t.seq&&l.seq<r.seq,"isBetweenCommits");return[...e.values()].some(l=>f(l)&&o(l))},"shouldRerouteArrow"),H=h((t,r,a=0)=>{const s=t+Math.abs(t-r)/2;if(a>5)return s;if(D.every(c=>Math.abs(c-s)>=10))return D.push(s),s;const n=Math.abs(t-r);return H(t,r-n/5,a+1)},"findLane"),Ur=h((t,r,a,s)=>{var y,x,b,q,A;const e=E.get(r.id),n=E.get(a.id);if(e===void 0||n===void 0)throw new Error(`Commit positions not found for commits ${r.id} and ${a.id}`);const c=Fr(r,a,e,n,s);let o="",f="",l=0,$=0,p=(y=v.get(a.branch))==null?void 0:y.index;a.type===u.MERGE&&r.id!==a.parents[0]&&(p=(x=v.get(r.branch))==null?void 0:x.index);let d;if(c){o="A 10 10, 0, 0, 0,",f="A 10 10, 0, 0, 1,",l=10,$=10;const T=e.y<n.y?H(e.y,n.y):H(n.y,e.y),C=e.x<n.x?H(e.x,n.x):H(n.x,e.x);g==="TB"?e.x<n.x?d=`M ${e.x} ${e.y} L ${C-l} ${e.y} ${f} ${C} ${e.y+$} L ${C} ${n.y-l} ${o} ${C+$} ${n.y} L ${n.x} ${n.y}`:(p=(b=v.get(r.branch))==null?void 0:b.index,d=`M ${e.x} ${e.y} L ${C+l} ${e.y} ${o} ${C} ${e.y+$} L ${C} ${n.y-l} ${f} ${C-$} ${n.y} L ${n.x} ${n.y}`):g==="BT"?e.x<n.x?d=`M ${e.x} ${e.y} L ${C-l} ${e.y} ${o} ${C} ${e.y-$} L ${C} ${n.y+l} ${f} ${C+$} ${n.y} L ${n.x} ${n.y}`:(p=(q=v.get(r.branch))==null?void 0:q.index,d=`M ${e.x} ${e.y} L ${C+l} ${e.y} ${f} ${C} ${e.y-$} L ${C} ${n.y+l} ${o} ${C-$} ${n.y} L ${n.x} ${n.y}`):e.y<n.y?d=`M ${e.x} ${e.y} L ${e.x} ${T-l} ${o} ${e.x+$} ${T} L ${n.x-l} ${T} ${f} ${n.x} ${T+$} L ${n.x} ${n.y}`:(p=(A=v.get(r.branch))==null?void 0:A.index,d=`M ${e.x} ${e.y} L ${e.x} ${T+l} ${f} ${e.x+$} ${T} L ${n.x-l} ${T} ${o} ${n.x} ${T-$} L ${n.x} ${n.y}`)}else o="A 20 20, 0, 0, 0,",f="A 20 20, 0, 0, 1,",l=20,$=20,g==="TB"?(e.x<n.x&&(a.type===u.MERGE&&r.id!==a.parents[0]?d=`M ${e.x} ${e.y} L ${e.x} ${n.y-l} ${o} ${e.x+$} ${n.y} L ${n.x} ${n.y}`:d=`M ${e.x} ${e.y} L ${n.x-l} ${e.y} ${f} ${n.x} ${e.y+$} L ${n.x} ${n.y}`),e.x>n.x&&(o="A 20 20, 0, 0, 0,",f="A 20 20, 0, 0, 1,",l=20,$=20,a.type===u.MERGE&&r.id!==a.parents[0]?d=`M ${e.x} ${e.y} L ${e.x} ${n.y-l} ${f} ${e.x-$} ${n.y} L ${n.x} ${n.y}`:d=`M ${e.x} ${e.y} L ${n.x+l} ${e.y} ${o} ${n.x} ${e.y+$} L ${n.x} ${n.y}`),e.x===n.x&&(d=`M ${e.x} ${e.y} L ${n.x} ${n.y}`)):g==="BT"?(e.x<n.x&&(a.type===u.MERGE&&r.id!==a.parents[0]?d=`M ${e.x} ${e.y} L ${e.x} ${n.y+l} ${f} ${e.x+$} ${n.y} L ${n.x} ${n.y}`:d=`M ${e.x} ${e.y} L ${n.x-l} ${e.y} ${o} ${n.x} ${e.y-$} L ${n.x} ${n.y}`),e.x>n.x&&(o="A 20 20, 0, 0, 0,",f="A 20 20, 0, 0, 1,",l=20,$=20,a.type===u.MERGE&&r.id!==a.parents[0]?d=`M ${e.x} ${e.y} L ${e.x} ${n.y+l} ${o} ${e.x-$} ${n.y} L ${n.x} ${n.y}`:d=`M ${e.x} ${e.y} L ${n.x-l} ${e.y} ${o} ${n.x} ${e.y-$} L ${n.x} ${n.y}`),e.x===n.x&&(d=`M ${e.x} ${e.y} L ${n.x} ${n.y}`)):(e.y<n.y&&(a.type===u.MERGE&&r.id!==a.parents[0]?d=`M ${e.x} ${e.y} L ${n.x-l} ${e.y} ${f} ${n.x} ${e.y+$} L ${n.x} ${n.y}`:d=`M ${e.x} ${e.y} L ${e.x} ${n.y-l} ${o} ${e.x+$} ${n.y} L ${n.x} ${n.y}`),e.y>n.y&&(a.type===u.MERGE&&r.id!==a.parents[0]?d=`M ${e.x} ${e.y} L ${n.x-l} ${e.y} ${o} ${n.x} ${e.y-$} L ${n.x} ${n.y}`:d=`M ${e.x} ${e.y} L ${e.x} ${n.y+l} ${f} ${e.x+$} ${n.y} L ${n.x} ${n.y}`),e.y===n.y&&(d=`M ${e.x} ${e.y} L ${n.x} ${n.y}`));if(d===void 0)throw new Error("Line definition not found");t.append("path").attr("d",d).attr("class","arrow arrow"+p%O)},"drawArrow"),re=h((t,r)=>{const a=t.append("g").attr("class","commit-arrows");[...r.keys()].forEach(s=>{const e=r.get(s);e.parents&&e.parents.length>0&&e.parents.forEach(n=>{Ur(a,r.get(n),e,r)})})},"drawArrows"),ee=h((t,r)=>{const a=t.append("g");r.forEach((s,e)=>{var x;const n=e%O,c=(x=v.get(s.name))==null?void 0:x.pos;if(c===void 0)throw new Error(`Position not found for branch ${s.name}`);const o=a.append("line");o.attr("x1",0),o.attr("y1",c),o.attr("x2",M),o.attr("y2",c),o.attr("class","branch branch"+n),g==="TB"?(o.attr("y1",P),o.attr("x1",c),o.attr("y2",M),o.attr("x2",c)):g==="BT"&&(o.attr("y1",M),o.attr("x1",c),o.attr("y2",P),o.attr("x2",c)),D.push(c);const f=s.name,l=J(f),$=a.insert("rect"),d=a.insert("g").attr("class","branchLabel").insert("g").attr("class","label branch-label"+n);d.node().appendChild(l);const y=l.getBBox();$.attr("class","branchLabelBkg label"+n).attr("rx",4).attr("ry",4).attr("x",-y.width-4-((m==null?void 0:m.rotateCommitLabel)===!0?30:0)).attr("y",-y.height/2+8).attr("width",y.width+18).attr("height",y.height+4),d.attr("transform","translate("+(-y.width-14-((m==null?void 0:m.rotateCommitLabel)===!0?30:0))+", "+(c-y.height/2-1)+")"),g==="TB"?($.attr("x",c-y.width/2-10).attr("y",0),d.attr("transform","translate("+(c-y.width/2-5)+", 0)")):g==="BT"?($.attr("x",c-y.width/2-10).attr("y",M),d.attr("transform","translate("+(c-y.width/2-5)+", "+M+")")):$.attr("transform","translate(-19, "+(c-y.height/2)+")")})},"drawBranches"),te=h(function(t,r,a,s,e){return v.set(t,{pos:r,index:a}),r+=50+(e?40:0)+(g==="TB"||g==="BT"?s.width/2:0),r},"setBranchPosition"),ae=h(function(t,r,a,s){if(Wr(),w.debug("in gitgraph renderer",t+`
`,"id:",r,a),!m)throw new Error("GitGraph config not found");const e=m.rotateCommitLabel??!1,n=s.db;G=n.getCommits();const c=n.getBranchesAsObjArray();g=n.getDirection();const o=pr(`[id="${r}"]`);let f=0;c.forEach((l,$)=>{var q;const p=J(l.name),d=o.append("g"),y=d.insert("g").attr("class","branchLabel"),x=y.insert("g").attr("class","label branch-label");(q=x.node())==null||q.appendChild(p);const b=p.getBBox();f=te(l.name,f,$,b,e),x.remove(),y.remove(),d.remove()}),Y(o,G,!1),m.showBranches&&ee(o,c),re(o,G),Y(o,G,!0),or.insertTitle(o,"gitTitleText",m.titleTopMargin??0,n.getDiagramTitle()),cr(void 0,o,m.diagramPadding,m.useMaxWidth)},"draw"),ne={draw:ae},se=h(t=>`
  .commit-id,
  .commit-msg,
  .branch-label {
    fill: lightgrey;
    color: lightgrey;
    font-family: 'trebuchet ms', verdana, arial, sans-serif;
    font-family: var(--mermaid-font-family);
  }
  ${[0,1,2,3,4,5,6,7].map(r=>`
        .branch-label${r} { fill: ${t["gitBranchLabel"+r]}; }
        .commit${r} { stroke: ${t["git"+r]}; fill: ${t["git"+r]}; }
        .commit-highlight${r} { stroke: ${t["gitInv"+r]}; fill: ${t["gitInv"+r]}; }
        .label${r}  { fill: ${t["git"+r]}; }
        .arrow${r} { stroke: ${t["git"+r]}; }
        `).join(`
`)}

  .branch {
    stroke-width: 1;
    stroke: ${t.lineColor};
    stroke-dasharray: 2;
  }
  .commit-label { font-size: ${t.commitLabelFontSize}; fill: ${t.commitLabelColor};}
  .commit-label-bkg { font-size: ${t.commitLabelFontSize}; fill: ${t.commitLabelBackground}; opacity: 0.5; }
  .tag-label { font-size: ${t.tagLabelFontSize}; fill: ${t.tagLabelColor};}
  .tag-label-bkg { fill: ${t.tagLabelBackground}; stroke: ${t.tagLabelBorder}; }
  .tag-hole { fill: ${t.textColor}; }

  .commit-merge {
    stroke: ${t.primaryColor};
    fill: ${t.primaryColor};
  }
  .commit-reverse {
    stroke: ${t.primaryColor};
    fill: ${t.primaryColor};
    stroke-width: 3;
  }
  .commit-highlight-outer {
  }
  .commit-highlight-inner {
    stroke: ${t.primaryColor};
    fill: ${t.primaryColor};
  }

  .arrow { stroke-width: 8; stroke-linecap: round; fill: none}
  .gitTitleText {
    text-anchor: middle;
    font-size: 18px;
    fill: ${t.textColor};
  }
`,"getStyles"),oe=se,it={parser:Dr,db:X,renderer:ne,styles:oe};export{it as diagram};
//# sourceMappingURL=gitGraphDiagram-5C7YHVU6-BogREvQJ.js.map
