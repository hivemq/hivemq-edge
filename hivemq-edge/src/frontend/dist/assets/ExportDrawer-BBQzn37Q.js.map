{"version":3,"file":"ExportDrawer-BBQzn37Q.js","sources":["../../src/modules/ProtocolAdapters/utils/export.utils.ts","../../src/modules/ProtocolAdapters/components/drawers/ExportDrawer.tsx"],"sourcesContent":["import * as XLSX from 'xlsx'\nimport type { RJSFSchema } from '@rjsf/utils'\nimport type { Adapter, JsonNode, ProtocolAdapter } from '@/api/__generated__'\nimport {\n  getPropertiesFromPath,\n  getTopicPaths,\n  getValuesFromPath,\n  TOPIC_PATH_ITEMS_TOKEN,\n} from '@/modules/Workspace/utils/topics-utils.ts'\nimport { AdapterExportError, ExportFormat } from '@/modules/ProtocolAdapters/types.ts'\nimport { acceptMimeTypes } from '@/components/rjsf/BatchModeMappings/utils/config.utils.ts'\nimport { downloadJSON, downloadTimeStamp } from '@datahub/utils/download.utils.ts'\nimport validator from '@rjsf/validator-ajv8'\n\n// XLSX has a limit in sheet name length\nconst MAX_SHEET_NAME_CHARS = 31\n\n// TODO[NVL] a better name generator ?\nexport const formatSheetName = (name: string) => name.substring(0, MAX_SHEET_NAME_CHARS)\n\nexport const adapterExportFormats: ExportFormat[] = [\n  {\n    value: ExportFormat.Type.CONFIGURATION,\n    formats: ['.json'],\n    downloader: (name, _ext, source, _protocol, callback) => {\n      downloadJSON<JsonNode>(name, source)\n      callback?.()\n    },\n  },\n  {\n    value: ExportFormat.Type.MAPPINGS,\n    formats: Object.values(acceptMimeTypes).flat(),\n    isDisabled: (protocol?: ProtocolAdapter) => {\n      if (!protocol) return true\n      const paths = getTopicPaths(protocol.configSchema || {})\n      return !paths.some((path) => path.includes(`.${TOPIC_PATH_ITEMS_TOKEN}.`))\n    },\n    downloader: (name, ext, source, protocol, callback) => {\n      downloadTableData(`${name}-${downloadTimeStamp()}${ext}`, source, protocol)\n      callback?.()\n    },\n  },\n]\n\nexport const downloadTableData = (name: string, adapter: Adapter, protocol: ProtocolAdapter) => {\n  // Get the list of \"mqtt topic\" xPaths from the protocol\n  const paths = getTopicPaths(protocol.configSchema || {})\n\n  // Only get the first of the mapping arrays (we are ignoring many other sources of mappins)\n  const mappingPath = paths.find((path) => path.includes(`.${TOPIC_PATH_ITEMS_TOKEN}.`))\n  if (!mappingPath) throw new AdapterExportError('protocolAdapter.export.error.noMapping')\n\n  // Extract the path to the containing array property\n  // TODO This is wrong: the \"mappings\" could be nested or the mqtt topic itself nested\n  //  (e.g. root.mappings.*.nested.*.destination or root.remote.*.mappings.destination)\n  const mappingRoot = mappingPath.split(`.${TOPIC_PATH_ITEMS_TOKEN}.`).shift()\n  if (!mappingRoot) throw new AdapterExportError('protocolAdapter.export.error.noMapping')\n\n  // Get the JSON Schema of the item of the containing array property\n  const mappingSchema = getPropertiesFromPath(mappingPath, protocol.configSchema)\n\n  if (!mappingSchema) throw new AdapterExportError('protocolAdapter.export.error.noSchema')\n\n  // Get the data from the active adapter\n  // TODO This is still wrong: no guarantees it's an array\n  let rows = getValuesFromPath(mappingRoot, adapter.config || {}) as RJSFSchema[] | undefined\n\n  if (!rows?.length) {\n    // if empty, build a dummy row\n    // TODO This is wrong: cells should be matching the types\n    const entries = Object.keys(mappingSchema).map((property) => [property, ''])\n    rows = [Object.fromEntries(entries)]\n  } else {\n    // Validate the extracted data to the extracted  schema\n    const validate = validator.ajv.compile({\n      type: 'array',\n      // TODO This is wrong: required is missing. The extraction of the item's JSONSchema is not working. Get definitions!\n      items: { properties: mappingSchema },\n    })\n    const isValid = validate(rows)\n    if (!isValid) throw new AdapterExportError('protocolAdapter.export.error.notValid')\n  }\n\n  // generate worksheet and workbook\n  const worksheet = XLSX.utils.json_to_sheet(rows)\n  const workbook = XLSX.utils.book_new()\n  XLSX.utils.book_append_sheet(workbook, worksheet, formatSheetName(mappingRoot))\n\n  // calculate column width\n  const colSizes = rows.reduce<number[]>((acc, currentRow) => {\n    return Object.values(currentRow).map((cellContent, index) => {\n      return Math.max(10, cellContent.toString().length, acc[index] || 0)\n    })\n  }, [])\n  worksheet['!cols'] = colSizes.map((width) => ({ wch: width }))\n\n  // TODO[NVL] With xlsx output, we should be able to define type and enums for the columns!\n\n  // create the output file, type based on extension\n  XLSX.writeFile(workbook, name, { compression: true })\n}\n","import type { FC } from 'react'\nimport { useEffect, useState } from 'react'\nimport { useNavigate, useParams } from 'react-router-dom'\nimport { useTranslation } from 'react-i18next'\nimport type { SubmitHandler } from 'react-hook-form'\nimport { Controller, useForm } from 'react-hook-form'\nimport { Select } from 'chakra-react-select'\n\nimport type { AlertStatus } from '@chakra-ui/react'\nimport {\n  chakra as Chakra,\n  Button,\n  Drawer,\n  DrawerBody,\n  DrawerCloseButton,\n  DrawerContent,\n  DrawerFooter,\n  DrawerHeader,\n  DrawerOverlay,\n  Flex,\n  FormControl,\n  FormHelperText,\n  FormLabel,\n  HStack,\n  Image,\n  Radio,\n  RadioGroup,\n  Text,\n  useDisclosure,\n  VStack,\n  useToast,\n} from '@chakra-ui/react'\nimport type { ExportFormatDisplay } from '@/modules/ProtocolAdapters/types.ts'\nimport { AdapterExportError, ExportFormat, ProtocolAdapterTabIndex } from '@/modules/ProtocolAdapters/types.ts'\nimport useGetAdapterInfo from '@/modules/ProtocolAdapters/hooks/useGetAdapterInfo.ts'\nimport { adapterExportFormats } from '@/modules/ProtocolAdapters/utils/export.utils.ts'\nimport { DEFAULT_TOAST_OPTION } from '@/hooks/useEdgeToast/toast-utils.ts'\n\ninterface SelectedExportFormat {\n  content: ExportFormat.Type\n  format: string\n}\n\ninterface MIMETypeOptions {\n  value: string\n  label: string\n  description: string\n}\n\nconst ExportDrawer: FC = () => {\n  const { t } = useTranslation()\n  const { isOpen, onOpen, onClose } = useDisclosure()\n  const toast = useToast()\n  const { adapterId } = useParams()\n  const navigate = useNavigate()\n  const { protocol, adapter } = useGetAdapterInfo(adapterId)\n  const { name, logoUrl } = protocol || {}\n  const [formatOptions, setFormatOptions] = useState<MIMETypeOptions[]>([])\n  const form = useForm<SelectedExportFormat>({\n    mode: 'all',\n    criteriaMode: 'all',\n    defaultValues: { content: ExportFormat.Type.CONFIGURATION },\n  })\n  const watchFormatChange = form.watch('content')\n\n  useEffect(() => {\n    if (adapterId) {\n      onOpen()\n    }\n  }, [adapterId, onOpen])\n\n  useEffect(() => {\n    const format = adapterExportFormats.find((exportFormat) => exportFormat.value === watchFormatChange)\n    if (format) {\n      const mimeOptions =\n        format.formats?.map<MIMETypeOptions>((format) => ({ label: format, value: format, description: '' })) || []\n      setFormatOptions(mimeOptions)\n      if (mimeOptions.length) form.setValue('format', mimeOptions[0].value)\n    }\n  }, [form, watchFormatChange])\n\n  const handleInstanceClose = () => {\n    onClose()\n    navigate('/protocol-adapters', { state: { protocolAdapterTabIndex: ProtocolAdapterTabIndex.PROTOCOLS } })\n  }\n\n  const handleEditorOnSubmit: SubmitHandler<SelectedExportFormat> = (data) => {\n    const downloader = adapterExportFormats.find((exportFormat) => exportFormat.value === data.content)\n    if (downloader && adapter && protocol) {\n      try {\n        downloader.downloader?.(adapter.id, data.format, adapter, protocol)\n        const status: AlertStatus = 'success'\n        toast({\n          ...DEFAULT_TOAST_OPTION,\n          status,\n          title: t('protocolAdapter.export.download.status', { context: status, name: adapter.id }),\n        })\n      } catch (error) {\n        let message\n        if (error instanceof AdapterExportError) message = t(error.message)\n        else if (error instanceof Error) message = error.message\n        else message = String(error)\n        const status: AlertStatus = 'error'\n        toast({\n          ...DEFAULT_TOAST_OPTION,\n          status,\n          title: t('protocolAdapter.export.download.status', { context: status, name: adapter.id }),\n          description: message,\n        })\n      }\n    }\n    // handleInstanceClose()\n  }\n\n  const listFormats = adapterExportFormats.map<ExportFormatDisplay>((exports) => {\n    return {\n      ...exports,\n      label: t('protocolAdapter.export.formats.label', { context: exports.value }),\n      description: t('protocolAdapter.export.formats.description', { context: exports.value }),\n    }\n  })\n\n  return (\n    <Drawer\n      variant=\"hivemq\"\n      closeOnOverlayClick={false}\n      size=\"md\"\n      isOpen={isOpen}\n      placement=\"right\"\n      onClose={handleInstanceClose}\n    >\n      <DrawerOverlay />\n      <DrawerContent aria-label={t('protocolAdapter.export.header')}>\n        <DrawerCloseButton />\n        <DrawerHeader borderBottomWidth=\"1px\">\n          <Text data-testid=\"adapter-export-title\">{t('protocolAdapter.export.header')}</Text>\n          <HStack>\n            <Image boxSize=\"30px\" objectFit=\"scale-down\" src={logoUrl} aria-label={name} />\n            <Text data-testid=\"adapter-export-type\" fontSize=\"md\" fontWeight=\"500\">\n              {name}\n            </Text>\n          </HStack>\n        </DrawerHeader>\n        <DrawerBody>\n          <Chakra.form\n            id=\"adapter-export-form\"\n            onSubmit={form.handleSubmit(handleEditorOnSubmit)}\n            style={{ display: 'flex', flexDirection: 'column', gap: '18px' }}\n          >\n            <FormControl variant=\"hivemq\">\n              <FormLabel as=\"legend\" htmlFor=\"field-content\" data-testid=\"field-content-label\">\n                {t('protocolAdapter.export.form.content.label')}\n              </FormLabel>\n              <Controller\n                name=\"content\"\n                control={form.control}\n                render={({ field: { value, ...rest } }) => (\n                  <RadioGroup {...rest} value={value.toString()} id=\"field-content\" data-testid=\"field-content-options\">\n                    <VStack alignItems=\"flex-start\" gap={6}>\n                      {listFormats.map((format) => {\n                        const isDisabled = format.isDisabled?.(protocol)\n                        return (\n                          <FormControl as=\"div\" key={format.value} w=\"-webkit-fill-available\" isDisabled={isDisabled}>\n                            <Radio value={format.value}>\n                              <Text>{format.label} </Text>\n                              <FormHelperText as=\"p\">{format.description}</FormHelperText>\n                              {isDisabled && (\n                                <FormHelperText as=\"p\">\n                                  {t('protocolAdapter.export.formats.notAvailable')}\n                                </FormHelperText>\n                              )}\n                            </Radio>\n                          </FormControl>\n                        )\n                      })}\n                    </VStack>\n                  </RadioGroup>\n                )}\n              />\n            </FormControl>\n\n            <FormControl variant=\"hivemq\">\n              <FormLabel as=\"legend\" htmlFor=\"field-format\" data-testid=\"field-format-label\">\n                {t('protocolAdapter.export.form.format.label')}\n              </FormLabel>\n              <Controller\n                name=\"format\"\n                control={form.control}\n                rules={{ required: t('protocolAdapter.export.form.format.aria-label') }}\n                render={({ field: { value, onChange, ...rest } }) => {\n                  return (\n                    <Select<MIMETypeOptions>\n                      {...rest}\n                      id=\"field-format\"\n                      isDisabled={formatOptions.length === 1}\n                      instanceId=\"field-format.toto\"\n                      aria-label={t('protocolAdapter.export.form.format.aria-label')}\n                      onChange={(e) => onChange(e?.value)}\n                      value={{ label: value, value, description: '' }}\n                      options={formatOptions}\n                    />\n                  )\n                }}\n              ></Controller>\n            </FormControl>\n          </Chakra.form>\n        </DrawerBody>\n        <DrawerFooter borderTopWidth=\"1px\">\n          <Flex flexGrow={1} justifyContent=\"flex-end\">\n            <Button variant=\"primary\" isDisabled={!form.formState.isValid} type=\"submit\" form=\"adapter-export-form\">\n              {t('protocolAdapter.export.action.export')}\n            </Button>\n          </Flex>\n        </DrawerFooter>\n      </DrawerContent>\n    </Drawer>\n  )\n}\n\nexport default ExportDrawer\n"],"names":["MAX_SHEET_NAME_CHARS","formatSheetName","name","adapterExportFormats","ExportFormat","_ext","source","_protocol","callback","downloadJSON","acceptMimeTypes","protocol","getTopicPaths","path","TOPIC_PATH_ITEMS_TOKEN","ext","downloadTableData","downloadTimeStamp","adapter","mappingPath","AdapterExportError","mappingRoot","mappingSchema","getPropertiesFromPath","rows","getValuesFromPath","validator","entries","property","worksheet","XLSX.utils","workbook","colSizes","acc","currentRow","cellContent","index","width","XLSX.writeFile","ExportDrawer","useTranslation","isOpen","onOpen","onClose","useDisclosure","toast","useToast","adapterId","useParams","navigate","useNavigate","useGetAdapterInfo","logoUrl","formatOptions","setFormatOptions","useState","form","useForm","watchFormatChange","useEffect","format","exportFormat","mimeOptions","_a","handleInstanceClose","ProtocolAdapterTabIndex","handleEditorOnSubmit","data","downloader","status","DEFAULT_TOAST_OPTION","error","message","listFormats","exports","jsxs","Drawer","jsx","DrawerOverlay","DrawerContent","DrawerCloseButton","DrawerHeader","Text","HStack","Image","DrawerBody","Chakra","FormControl","FormLabel","Controller","value","rest","RadioGroup","VStack","isDisabled","Radio","FormHelperText","onChange","Select","e","DrawerFooter","Flex","Button"],"mappings":"m3CAeA,MAAMA,GAAuB,GAGhBC,GAAmBC,GAAiBA,EAAK,UAAU,EAAGF,EAAoB,EAE1EG,EAAuC,CAClD,CACE,MAAOC,EAAa,KAAK,cACzB,QAAS,CAAC,OAAO,EACjB,WAAY,CAACF,EAAMG,EAAMC,EAAQC,EAAWC,IAAa,CACvDC,GAAuBP,EAAMI,CAAM,EACxBE,GAAA,MAAAA,GAAA,CAEf,EACA,CACE,MAAOJ,EAAa,KAAK,SACzB,QAAS,OAAO,OAAOM,EAAe,EAAE,KAAK,EAC7C,WAAaC,GACNA,EAEE,CADOC,EAAcD,EAAS,cAAgB,CAAA,CAAE,EACzC,KAAME,GAASA,EAAK,SAAS,IAAIC,CAAsB,GAAG,CAAC,EAFnD,GAIxB,WAAY,CAACZ,EAAMa,EAAKT,EAAQK,EAAUH,IAAa,CACnCQ,GAAA,GAAGd,CAAI,IAAIe,IAAmB,GAAGF,CAAG,GAAIT,EAAQK,CAAQ,EAC/DH,GAAA,MAAAA,GAAA,CACb,CAEJ,EAEaQ,GAAoB,CAACd,EAAcgB,EAAkBP,IAA8B,CAKxF,MAAAQ,EAHQP,EAAcD,EAAS,cAAgB,CAAA,CAAE,EAG7B,KAAME,GAASA,EAAK,SAAS,IAAIC,CAAsB,GAAG,CAAC,EACrF,GAAI,CAACK,EAAmB,MAAA,IAAIC,EAAmB,wCAAwC,EAKvF,MAAMC,EAAcF,EAAY,MAAM,IAAIL,CAAsB,GAAG,EAAE,MAAM,EAC3E,GAAI,CAACO,EAAmB,MAAA,IAAID,EAAmB,wCAAwC,EAGvF,MAAME,EAAgBC,GAAsBJ,EAAaR,EAAS,YAAY,EAE9E,GAAI,CAACW,EAAqB,MAAA,IAAIF,EAAmB,uCAAuC,EAIxF,IAAII,EAAOC,GAAkBJ,EAAaH,EAAQ,QAAU,CAAA,CAAE,EAE1D,GAACM,GAAA,MAAAA,EAAM,QAaT,GAAI,CANaE,GAAU,IAAI,QAAQ,CACrC,KAAM,QAEN,MAAO,CAAE,WAAYJ,CAAc,CAAA,CACpC,EACwBE,CAAI,EACT,MAAA,IAAIJ,EAAmB,uCAAuC,MAbjE,CAGX,MAAAO,EAAU,OAAO,KAAKL,CAAa,EAAE,IAAKM,GAAa,CAACA,EAAU,EAAE,CAAC,EAC3EJ,EAAO,CAAC,OAAO,YAAYG,CAAO,CAAC,CAAA,CAarC,MAAME,EAAYC,EAAW,cAAcN,CAAI,EACzCO,EAAWD,EAAW,SAAS,EACrCA,EAAW,kBAAkBC,EAAUF,EAAW5B,GAAgBoB,CAAW,CAAC,EAG9E,MAAMW,EAAWR,EAAK,OAAiB,CAACS,EAAKC,IACpC,OAAO,OAAOA,CAAU,EAAE,IAAI,CAACC,EAAaC,IAC1C,KAAK,IAAI,GAAID,EAAY,WAAW,OAAQF,EAAIG,CAAK,GAAK,CAAC,CACnE,EACA,EAAE,EACKP,EAAA,OAAO,EAAIG,EAAS,IAAKK,IAAW,CAAE,IAAKA,CAAA,EAAQ,EAK7DC,GAAeP,EAAU7B,EAAM,CAAE,YAAa,GAAM,CACtD,ECnDMqC,GAAmB,IAAM,CACvB,KAAA,CAAE,CAAE,EAAIC,EAAe,EACvB,CAAE,OAAAC,EAAQ,OAAAC,EAAQ,QAAAC,CAAA,EAAYC,EAAc,EAC5CC,EAAQC,EAAS,EACjB,CAAE,UAAAC,CAAU,EAAIC,EAAU,EAC1BC,EAAWC,EAAY,EACvB,CAAE,SAAAvC,EAAU,QAAAO,GAAYiC,GAAkBJ,CAAS,EACnD,CAAE,KAAA7C,EAAM,QAAAkD,CAAQ,EAAIzC,GAAY,CAAC,EACjC,CAAC0C,EAAeC,CAAgB,EAAIC,EAAAA,SAA4B,CAAA,CAAE,EAClEC,EAAOC,EAA8B,CACzC,KAAM,MACN,aAAc,MACd,cAAe,CAAE,QAASrD,EAAa,KAAK,aAAc,CAAA,CAC3D,EACKsD,EAAoBF,EAAK,MAAM,SAAS,EAE9CG,EAAAA,UAAU,IAAM,CACVZ,GACKL,EAAA,CACT,EACC,CAACK,EAAWL,CAAM,CAAC,EAEtBiB,EAAAA,UAAU,IAAM,OACd,MAAMC,EAASzD,EAAqB,KAAM0D,GAAiBA,EAAa,QAAUH,CAAiB,EACnG,GAAIE,EAAQ,CACV,MAAME,IACJC,EAAAH,EAAO,UAAP,YAAAG,EAAgB,IAAsBH,IAAY,CAAE,MAAOA,EAAQ,MAAOA,EAAQ,YAAa,EAAG,MAAO,CAAC,EAC5GN,EAAiBQ,CAAW,EACxBA,EAAY,QAAaN,EAAA,SAAS,SAAUM,EAAY,CAAC,EAAE,KAAK,CAAA,CACtE,EACC,CAACN,EAAME,CAAiB,CAAC,EAE5B,MAAMM,EAAsB,IAAM,CACxBrB,EAAA,EACCM,EAAA,qBAAsB,CAAE,MAAO,CAAE,wBAAyBgB,GAAwB,SAAA,EAAa,CAC1G,EAEMC,EAA6DC,GAAS,OACpE,MAAAC,EAAajE,EAAqB,KAAM0D,GAAiBA,EAAa,QAAUM,EAAK,OAAO,EAC9F,GAAAC,GAAclD,GAAWP,EACvB,GAAA,EACFoD,EAAAK,EAAW,aAAX,MAAAL,EAAA,KAAAK,EAAwBlD,EAAQ,GAAIiD,EAAK,OAAQjD,EAASP,GAC1D,MAAM0D,EAAsB,UACtBxB,EAAA,CACJ,GAAGyB,EACH,OAAAD,EACA,MAAO,EAAE,yCAA0C,CAAE,QAASA,EAAQ,KAAMnD,EAAQ,EAAI,CAAA,CAAA,CACzF,QACMqD,EAAO,CACV,IAAAC,EACAD,aAAiBnD,EAA8BoD,EAAA,EAAED,EAAM,OAAO,EACzDA,aAAiB,MAAOC,EAAUD,EAAM,QAC5CC,EAAU,OAAOD,CAAK,EAC3B,MAAMF,EAAsB,QACtBxB,EAAA,CACJ,GAAGyB,EACH,OAAAD,EACA,MAAO,EAAE,yCAA0C,CAAE,QAASA,EAAQ,KAAMnD,EAAQ,GAAI,EACxF,YAAasD,CAAA,CACd,CAAA,CAIP,EAEMC,EAActE,EAAqB,IAA0BuE,IAC1D,CACL,GAAGA,EACH,MAAO,EAAE,uCAAwC,CAAE,QAASA,EAAQ,MAAO,EAC3E,YAAa,EAAE,6CAA8C,CAAE,QAASA,EAAQ,KAAO,CAAA,CACzF,EACD,EAGC,OAAAC,EAAA,KAACC,EAAA,CACC,QAAQ,SACR,oBAAqB,GACrB,KAAK,KACL,OAAAnC,EACA,UAAU,QACV,QAASuB,EAET,SAAA,CAAAa,EAAA,IAACC,EAAc,EAAA,EACdH,EAAA,KAAAI,EAAA,CAAc,aAAY,EAAE,+BAA+B,EAC1D,SAAA,CAAAF,EAAA,IAACG,EAAkB,EAAA,EACnBL,EAAAA,KAACM,EAAa,CAAA,kBAAkB,MAC9B,SAAA,CAAAJ,MAACK,EAAK,CAAA,cAAY,uBAAwB,SAAA,EAAE,+BAA+B,EAAE,SAC5EC,EACC,CAAA,SAAA,CAACN,EAAAA,IAAAO,EAAA,CAAM,QAAQ,OAAO,UAAU,aAAa,IAAKhC,EAAS,aAAYlD,CAAM,CAAA,EAC7E2E,EAAAA,IAACK,GAAK,cAAY,sBAAsB,SAAS,KAAK,WAAW,MAC9D,SACHhF,CAAA,CAAA,CAAA,CACF,CAAA,CAAA,EACF,QACCmF,EACC,CAAA,SAAAV,EAAA,KAACW,EAAO,KAAP,CACC,GAAG,sBACH,SAAU9B,EAAK,aAAaU,CAAoB,EAChD,MAAO,CAAE,QAAS,OAAQ,cAAe,SAAU,IAAK,MAAO,EAE/D,SAAA,CAACS,EAAAA,KAAAY,EAAA,CAAY,QAAQ,SACnB,SAAA,CAACV,EAAAA,IAAAW,EAAA,CAAU,GAAG,SAAS,QAAQ,gBAAgB,cAAY,sBACxD,SAAE,EAAA,2CAA2C,CAChD,CAAA,EACAX,EAAA,IAACY,EAAA,CACC,KAAK,UACL,QAASjC,EAAK,QACd,OAAQ,CAAC,CAAE,MAAO,CAAE,MAAAkC,EAAO,GAAGC,CAAA,CAAO,IAClCd,EAAA,IAAAe,GAAA,CAAY,GAAGD,EAAM,MAAOD,EAAM,SAAA,EAAY,GAAG,gBAAgB,cAAY,wBAC5E,SAACb,EAAAA,IAAAgB,EAAA,CAAO,WAAW,aAAa,IAAK,EAClC,SAAYpB,EAAA,IAAKb,GAAW,OACrB,MAAAkC,GAAa/B,EAAAH,EAAO,aAAP,YAAAG,EAAA,KAAAH,EAAoBjD,GAErC,OAAAkE,EAAAA,IAACU,EAAY,CAAA,GAAG,MAAyB,EAAE,yBAAyB,WAAAO,EAClE,SAACnB,EAAAA,KAAAoB,GAAA,CAAM,MAAOnC,EAAO,MACnB,SAAA,CAAAe,OAACO,EAAM,CAAA,SAAA,CAAOtB,EAAA,MAAM,GAAA,EAAC,EACpBiB,EAAA,IAAAmB,EAAA,CAAe,GAAG,IAAK,WAAO,YAAY,EAC1CF,GACEjB,EAAAA,IAAAmB,EAAA,CAAe,GAAG,IAChB,SAAA,EAAE,6CAA6C,CAClD,CAAA,CAAA,EAEJ,CAAA,EATyBpC,EAAO,KAUlC,CAEH,CAAA,CACH,CAAA,CACF,CAAA,CAAA,CAAA,CAEJ,EACF,EAEAe,EAAAA,KAACY,EAAY,CAAA,QAAQ,SACnB,SAAA,CAACV,EAAAA,IAAAW,EAAA,CAAU,GAAG,SAAS,QAAQ,eAAe,cAAY,qBACvD,SAAE,EAAA,0CAA0C,CAC/C,CAAA,EACAX,EAAA,IAACY,EAAA,CACC,KAAK,SACL,QAASjC,EAAK,QACd,MAAO,CAAE,SAAU,EAAE,+CAA+C,CAAE,EACtE,OAAQ,CAAC,CAAE,MAAO,CAAE,MAAAkC,EAAO,SAAAO,EAAU,GAAGN,CAAK,KAEzCd,EAAA,IAACqB,GAAA,CACE,GAAGP,EACJ,GAAG,eACH,WAAYtC,EAAc,SAAW,EACrC,WAAW,oBACX,aAAY,EAAE,+CAA+C,EAC7D,SAAW8C,GAAMF,EAASE,GAAA,YAAAA,EAAG,KAAK,EAClC,MAAO,CAAE,MAAOT,EAAO,MAAAA,EAAO,YAAa,EAAG,EAC9C,QAASrC,CAAA,CACX,CAEJ,CAAA,CACD,CACH,CAAA,CAAA,CAAA,CAAA,EAEJ,EACAwB,EAAA,IAACuB,GAAa,CAAA,eAAe,MAC3B,SAAAvB,EAAAA,IAACwB,GAAK,CAAA,SAAU,EAAG,eAAe,WAChC,SAAAxB,EAAA,IAACyB,GAAO,CAAA,QAAQ,UAAU,WAAY,CAAC9C,EAAK,UAAU,QAAS,KAAK,SAAS,KAAK,sBAC/E,SAAE,EAAA,sCAAsC,CAC3C,CAAA,CAAA,CACF,CACF,CAAA,CAAA,CACF,CAAA,CAAA,CAAA,CACF,CAEJ"}