{"version":3,"file":"AdapterMappingManager-tVGhwqkq.js","sources":["../../src/modules/Mappings/components/MappingForm.tsx","../../src/api/hooks/useProtocolAdapters/useUpdateNorthboundMappings.ts","../../src/api/schemas/definitions/MqttUserProperty.json-schema.ts","../../src/api/schemas/definitions/QoS.json-schema.ts","../../src/api/schemas/northbound.json-schema.ts","../../src/components/rjsf/Widgets/EntitySelectWidget.tsx","../../src/api/schemas/northbound.ui-schema.ts","../../src/modules/Mappings/hooks/useNorthboundMappingManager.ts","../../src/api/hooks/useProtocolAdapters/useUpdateSouthboundMappings.ts","../../src/api/schemas/southbound.json-schema.ts","../../src/api/schemas/southbound.ui-schema.ts","../../src/modules/Mappings/hooks/useSouthboundMappingManager.ts","../../src/modules/Mappings/AdapterMappingManager.tsx"],"sourcesContent":["import { type FC, useCallback, useState } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport type { CustomValidator, FormContextType, RJSFSchema } from '@rjsf/utils'\nimport type { IChangeEvent } from '@rjsf/core'\n\nimport type { FlatJSONSchema7 } from '@/components/rjsf/MqttTransformation/utils/json-schema.utils.ts'\nimport ErrorMessage from '@/components/ErrorMessage.tsx'\nimport ChakraRJSForm from '@/components/rjsf/Form/ChakraRJSForm.tsx'\nimport type { MappingManagerType } from '@/modules/Mappings/types.ts'\nimport { MappingType } from '@/modules/Mappings/types.ts'\nimport type { MappingContext } from '@/modules/ProtocolAdapters/types.ts'\nimport { customMappingValidate } from '@/modules/ProtocolAdapters/utils/validation-utils.ts'\n\ninterface MappingFormProps {\n  adapterId: string\n  adapterType?: string\n  onSubmit: () => void\n  useManager: (adapterId: string) => MappingManagerType\n  type: MappingType\n  showNativeWidgets?: boolean\n}\n\nconst MappingForm: FC<MappingFormProps> = ({\n  adapterId,\n  adapterType,\n  useManager,\n  type,\n  showNativeWidgets = false,\n  onSubmit,\n}) => {\n  const { t } = useTranslation()\n  const { context, onUpdateCollection } = useManager(adapterId)\n  const validationSchemas = useState<FlatJSONSchema7[]>()\n\n  const onFormSubmit = useCallback(\n    (data: IChangeEvent<unknown>) => {\n      const promise = onUpdateCollection(data.formData)\n      promise?.then(onSubmit)\n    },\n    [onSubmit, onUpdateCollection]\n  )\n\n  if (!context.schema) return <ErrorMessage message={t('protocolAdapter.export.error.noSchema')} />\n\n  const contextExt: MappingContext = {\n    isEditAdapter: true,\n    isDiscoverable: false,\n    adapterType: adapterType,\n    adapterId: adapterId,\n    validationSchemas,\n  }\n\n  return (\n    <ChakraRJSForm\n      showNativeWidgets={showNativeWidgets}\n      id=\"adapter-mapping-form\"\n      schema={context.schema}\n      uiSchema={context.uiSchema}\n      formData={context.formData}\n      formContext={contextExt}\n      onSubmit={onFormSubmit}\n      customValidate={\n        type === MappingType.SOUTHBOUND && adapterType\n          ? (customMappingValidate(adapterType) as CustomValidator<unknown, RJSFSchema, FormContextType>)\n          : undefined\n      }\n    />\n  )\n}\n\nexport default MappingForm\n","import { useMutation, useQueryClient } from '@tanstack/react-query'\nimport type { ApiError } from '../../__generated__'\nimport { type NorthboundMappingList } from '../../__generated__'\nimport { useHttpClient } from '@/api/hooks/useHttpClient/useHttpClient.ts'\nimport { QUERY_KEYS } from '@/api/utils.ts'\n\ninterface UpdateNorthboundMappingsProps {\n  adapterId: string\n  requestBody: NorthboundMappingList\n}\n\nexport const useUpdateNorthboundMappings = () => {\n  const appClient = useHttpClient()\n  const queryClient = useQueryClient()\n\n  const updateProtocolAdapter = ({ adapterId, requestBody }: UpdateNorthboundMappingsProps) => {\n    return appClient.protocolAdapters.updateAdapterNorthboundMappings(adapterId, requestBody)\n  }\n\n  return useMutation<unknown, ApiError, UpdateNorthboundMappingsProps>({\n    mutationFn: updateProtocolAdapter,\n    onSuccess: (_data, variables) => {\n      queryClient.invalidateQueries({\n        queryKey: [QUERY_KEYS.ADAPTERS, variables.adapterId, QUERY_KEYS.NORTHBOUND_MAPPINGS],\n      })\n    },\n  })\n}\n","import type { RJSFSchema } from '@rjsf/utils'\n\n/* istanbul ignore next -- @preserve */\nexport const MqttUserProperty: RJSFSchema = {\n  title: 'MQTT User Properties',\n  description: 'Arbitrary properties to associate with the mapping',\n  maxItems: 10,\n  type: 'array',\n  items: {\n    type: 'object',\n    properties: {\n      name: {\n        type: 'string',\n        title: 'Name',\n        description: 'Name of the associated property',\n      },\n      value: {\n        type: 'string',\n        title: 'Value',\n        description: 'Value of the associated property',\n      },\n    },\n    required: ['name', 'value'],\n    maxItems: 10,\n  },\n}\n","import type { RJSFSchema } from '@rjsf/utils'\nimport { MOCK_MAX_QOS } from '@/__test-utils__/adapters/mqtt.ts'\nimport { QoS as QoSEnum } from '@/api/__generated__'\n\n/* istanbul ignore next -- @preserve */\nexport const QoS: RJSFSchema = {\n  type: 'string',\n  title: 'MQTT QoS',\n  description: 'MQTT Quality of Service level',\n  enum: [QoSEnum.AT_MOST_ONCE, QoSEnum.AT_LEAST_ONCE, QoSEnum.EXACTLY_ONCE],\n  default: MOCK_MAX_QOS,\n}\n","import type { JSONSchema7 } from 'json-schema'\nimport { MqttUserProperty } from '@/api/schemas/definitions/MqttUserProperty.json-schema.ts'\nimport { QoS } from '@/api/schemas/definitions/QoS.json-schema.ts'\n\n/**\n * TODO[NVL] Required as the schema generated by the codegen is of an older version of JSONSchema (v5) and not well structured ($ref missing)\n * @see $NorthboundMappingList\n * @see $NorthboundMapping\n * @see $MqttUserProperty\n * @see $QoS\n */\n/* istanbul ignore next -- @preserve */\nexport const northboundMappingListSchema: JSONSchema7 = {\n  definitions: {\n    QoS: QoS,\n    MqttUserProperty: MqttUserProperty,\n    NorthboundMapping: {\n      properties: {\n        includeTagNames: {\n          type: 'boolean',\n          title: 'Include Tag Names In Publish?',\n          description: 'Include the names of the tags in the resulting MQTT publish',\n          default: false,\n        },\n        includeTimestamp: {\n          type: 'boolean',\n          title: 'Include Sample Timestamp In Publish?',\n          description: 'Include the unix timestamp of the sample time in the resulting MQTT message',\n          default: true,\n        },\n        messageExpiryInterval: {\n          type: 'number',\n          description: `The message expiry interval.`,\n          format: 'int64',\n        },\n        maxQoS: {\n          $ref: '#/definitions/QoS',\n        },\n        tagName: {\n          title: 'Source Tag name',\n          type: 'string',\n          description: 'The tag for which values should be collected and sent out.',\n          format: 'mqtt-tag',\n        },\n        topic: {\n          type: 'string',\n          title: 'Destination MQTT Topic',\n          description: 'The topic to publish data on',\n          format: 'mqtt-topic',\n        },\n        userProperties: {\n          $ref: '#/definitions/MqttUserProperty',\n        },\n      },\n      required: ['topic', 'tagName', 'maxQoS'],\n    },\n  },\n  properties: {\n    items: {\n      type: 'array',\n      items: {\n        $ref: '#/definitions/NorthboundMapping',\n      },\n    },\n  },\n}\n","import { Fragment, useMemo } from 'react'\nimport type { WidgetProps } from '@rjsf/utils'\nimport { getUiOptions } from '@rjsf/utils'\nimport { FormControl, FormLabel } from '@chakra-ui/react'\nimport type { RJSFSchema } from '@rjsf/utils/src/types.ts'\n\nimport { CustomFormat } from '@/api/types/json-schema.ts'\nimport { SelectTag, SelectTopic, SelectTopicFilter } from '@/components/MQTT/EntityCreatableSelect.tsx'\nimport type { MappingContext } from '@/modules/ProtocolAdapters/types.ts'\n\nexport const registerEntitySelectWidget =\n  (type: CustomFormat) => (props: WidgetProps<WidgetProps<unknown, RJSFSchema, MappingContext>>) => {\n    const { chakraProps, label, id, disabled, readonly, onChange, required, rawErrors, value } = props\n    const { multiple, create } = getUiOptions(props.uiSchema)\n    const { adapterId } = props.formContext\n\n    const Select = useMemo(() => {\n      if (type === CustomFormat.MQTT_TAG) return SelectTag\n      if (type === CustomFormat.MQTT_TOPIC) return SelectTopic\n      if (type === CustomFormat.MQTT_TOPIC_FILTER) return SelectTopicFilter\n      return Fragment\n    }, [])\n\n    return (\n      <FormControl\n        isDisabled={disabled || readonly}\n        isRequired={required}\n        {...chakraProps}\n        mb={1}\n        isInvalid={rawErrors && rawErrors.length > 0}\n      >\n        <FormLabel htmlFor={id}>{label}</FormLabel>\n        <Select\n          adapterId={adapterId as string}\n          isMulti={Boolean(multiple)}\n          isCreatable={Boolean(create)}\n          id={id}\n          value={value}\n          onChange={onChange}\n        />\n      </FormControl>\n    )\n  }\n","import type { UiSchema } from '@rjsf/utils'\nimport { registerEntitySelectWidget } from '@/components/rjsf/Widgets/EntitySelectWidget.tsx'\nimport { CustomFormat } from '@/api/types/json-schema.ts'\n\n/* istanbul ignore next -- @preserve */\nexport const northboundMappingListUISchema: UiSchema = {\n  'ui:submitButtonOptions': {\n    norender: true,\n  },\n\n  items: {\n    'ui:title': 'List of northbound mappings',\n    'ui:description': 'The list of all the mappings delivering messages from this adapter onto the Edge',\n    items: {\n      'ui:order': ['tagName', 'topic', '*'],\n      'ui:collapsable': {\n        titleKey: 'tagName',\n        name: 'Mapping',\n      },\n      tagName: {\n        'ui:widget': registerEntitySelectWidget(CustomFormat.MQTT_TAG),\n      },\n      topic: {\n        'ui:widget': registerEntitySelectWidget(CustomFormat.MQTT_TOPIC),\n        'ui:options': {\n          create: true,\n        },\n      },\n      'ui:addButton': 'Add a mapping',\n      userProperties: {\n        items: {\n          'ui:addButton': 'Add a user property',\n        },\n      },\n      maxQoS: {\n        'ui:enumNames': ['At most once (QoS 0)', 'At least once (QoS 1)', 'Exactly once (QoS 2)'],\n      },\n    },\n  },\n}\n","import { useTranslation } from 'react-i18next'\nimport { useToast } from '@chakra-ui/react'\n\nimport { type NorthboundMappingList } from '@/api/__generated__'\nimport { useListNorthboundMappings } from '@/api/hooks/useProtocolAdapters/useListNorthboundMappings.ts'\nimport { useUpdateNorthboundMappings } from '@/api/hooks/useProtocolAdapters/useUpdateNorthboundMappings.ts'\n\nimport { northboundMappingListSchema } from '@/api/schemas/northbound.json-schema.ts'\nimport { northboundMappingListUISchema } from '@/api/schemas/northbound.ui-schema.ts'\nimport { DEFAULT_TOAST_OPTION } from '@/hooks/useEdgeToast/toast-utils.ts'\nimport type { ManagerContextType, MappingManagerType } from '@/modules/Mappings/types.ts'\n\nexport const useNorthboundMappingManager = (adapterId: string): MappingManagerType<NorthboundMappingList> => {\n  const { t } = useTranslation()\n  const toast = useToast({\n    duration: DEFAULT_TOAST_OPTION.duration,\n    isClosable: DEFAULT_TOAST_OPTION.isClosable,\n  })\n  const { data, isError, isLoading, error } = useListNorthboundMappings(adapterId)\n\n  const updateCollectionMutator = useUpdateNorthboundMappings()\n\n  const formatToast = (operation: string) => ({\n    success: {\n      title: t(`protocolAdapter.mapping.toast.${operation}.title`),\n      description: t(`protocolAdapter.mapping.toast.${operation}.description`, { context: 'success' }),\n    },\n    error: {\n      title: t(`protocolAdapter.mapping.toast.${operation}.title`),\n      description: t(`protocolAdapter.mapping.toast.${operation}.description`, { context: 'error' }),\n    },\n    loading: {\n      title: t(`protocolAdapter.mapping.toast.${operation}.title`),\n      description: t('protocolAdapter.mapping.toast.description', { context: 'loading' }),\n    },\n  })\n\n  const onUpdateCollection = (tags: NorthboundMappingList) => {\n    if (!adapterId) return undefined\n    const promise = updateCollectionMutator.mutateAsync({ adapterId: adapterId, requestBody: tags })\n    toast.promise(promise, formatToast('updateCollection'))\n    return promise\n  }\n\n  const context: ManagerContextType<NorthboundMappingList> = {\n    schema: northboundMappingListSchema,\n    uiSchema: northboundMappingListUISchema,\n    formData: data,\n  }\n\n  return {\n    // The context of the operations\n    context,\n    // The CRUD operations\n    data: data,\n    onUpdateCollection,\n    onClose: () => toast.closeAll(),\n    // The state (as in ReactQuery)\n    isLoading: isLoading,\n    isError: isError,\n    error: error,\n    isPending: updateCollectionMutator.isPending,\n  }\n}\n","import { useMutation, useQueryClient } from '@tanstack/react-query'\nimport type { ApiError } from '../../__generated__'\nimport { type SouthboundMappingList } from '../../__generated__'\nimport { useHttpClient } from '@/api/hooks/useHttpClient/useHttpClient.ts'\nimport { QUERY_KEYS } from '@/api/utils.ts'\n\ninterface UpdateSouthboundMappingsProps {\n  adapterId: string\n  requestBody: SouthboundMappingList\n}\n\nexport const useUpdateSouthboundMappings = () => {\n  const appClient = useHttpClient()\n  const queryClient = useQueryClient()\n\n  const updateProtocolAdapter = ({ adapterId, requestBody }: UpdateSouthboundMappingsProps) => {\n    return appClient.protocolAdapters.updateAdapterSouthboundMappings(adapterId, requestBody)\n  }\n\n  return useMutation<unknown, ApiError, UpdateSouthboundMappingsProps>({\n    mutationFn: updateProtocolAdapter,\n    onSuccess: (_data, variables) => {\n      queryClient.invalidateQueries({\n        queryKey: [QUERY_KEYS.ADAPTERS, variables.adapterId, QUERY_KEYS.SOUTHBOUND_MAPPINGS],\n      })\n    },\n  })\n}\n","import type { JSONSchema7 } from 'json-schema'\nimport { QoS } from '@/api/schemas/definitions/QoS.json-schema.ts'\n\nimport i18n from '@/config/i18n.config.ts'\n\n/**\n * TODO[NVL] Required as the schema generated by the codegen is of an older version of JSONSchema (v5) and not well structured ($ref missing)\n * @see $SouthboundMappingList\n * @see $SouthboundMapping\n * @see $QoS\n * @see $MqttUserProperty\n * @see $FieldMapping\n * @see $Metadata\n * @see $Instruction\n * @see $JsonNode\n */\n/* istanbul ignore next -- @preserve */\nexport const southboundMappingListSchema: JSONSchema7 = {\n  definitions: {\n    QoS: QoS,\n    Instruction: {\n      description: i18n.t('definitions.Instruction.description', { ns: 'schemas' }),\n      properties: {\n        destination: {\n          type: 'string',\n          title: i18n.t('definitions.Instruction.destination.title', { ns: 'schemas' }),\n          description: `The field in the output object where the data will be written to`,\n        },\n        source: {\n          type: 'string',\n          description: `The field in the input object where the data will be read from`,\n        },\n      },\n      required: ['destination', 'source'],\n    },\n    Metadata: {\n      description: `Metadata for the whole mapping`,\n      properties: {\n        destination: {\n          type: 'object',\n          // type: 'string',\n          // format: 'data-url',\n        },\n        source: {\n          type: 'object',\n          // type: 'string',\n          // format: 'data-url',\n        },\n      },\n    },\n    FieldMapping: {\n      description: `Defines how incoming data should be transformed before being sent out.`,\n      properties: {\n        instructions: {\n          type: 'array',\n          title: i18n.t('definitions.FieldMapping.instructions.title', { ns: 'schemas' }),\n          description: i18n.t('definitions.FieldMapping.instructions.description', { ns: 'schemas' }),\n          items: {\n            $ref: '#/definitions/Instruction',\n          },\n        },\n        metadata: {\n          $ref: '#/definitions/Metadata',\n        },\n      },\n    },\n    SouthboundMapping: {\n      properties: {\n        maxQoS: {\n          $ref: '#/definitions/QoS',\n        },\n        tagName: {\n          title: 'Destination Tag name',\n          type: 'string',\n          description: 'The tag for which values should be collected and sent out.',\n          format: 'mqtt-tag',\n        },\n        topicFilter: {\n          type: 'string',\n          title: 'Source MQTT Topic Filter',\n          description: 'The filter defining what topics we will receive messages from',\n          format: 'mqtt-topic-filter',\n        },\n        fieldMapping: {\n          $ref: '#/definitions/FieldMapping',\n        },\n      },\n\n      required: ['topicFilter', 'tagName', 'maxQoS'],\n    },\n  },\n  properties: {\n    items: {\n      type: 'array',\n      items: {\n        $ref: '#/definitions/SouthboundMapping',\n      },\n    },\n  },\n}\n","import type { UiSchema } from '@rjsf/utils'\n\n/* istanbul ignore next -- @preserve */\nconst metadataWidget: UiSchema = {\n  // 'ui:widget': 'data-url',\n  'ui:options': {\n    accept: '.json',\n  },\n}\n\n/* istanbul ignore next -- @preserve */\nexport const southboundMappingListUISchema: UiSchema = {\n  'ui:submitButtonOptions': {\n    norender: true,\n  },\n\n  items: {\n    'ui:title': 'List of Southbound mappings',\n    'ui:description': 'The list of all the mappings delivering messages from Edge to the device',\n    'ui:field': 'mqtt:transform',\n    items: {\n      'ui:order': ['topicFilter', 'tagName', '*'],\n      'ui:collapsable': {\n        titleKey: 'topicFilter',\n      },\n      'ui:addButton': 'Create a new mapping',\n\n      topicFilter: {\n        'ui:format': 'mqtt-topic=xx',\n      },\n\n      maxQoS: {\n        'ui:enumNames': ['At most once (QoS 0)', 'At least once (QoS 1)', 'Exactly once (QoS 2)'],\n      },\n\n      fieldMapping: {\n        metadata: {\n          // 'ui:widget': 'hidden',\n          destination: {\n            ...metadataWidget,\n          },\n          source: {\n            ...metadataWidget,\n          },\n        },\n        instructions: {\n          items: {\n            'ui:addButton': 'Add a new set of transformation',\n          },\n        },\n      },\n    },\n  },\n}\n","import { useTranslation } from 'react-i18next'\nimport { useToast } from '@chakra-ui/react'\n\nimport { type SouthboundMappingList } from '@/api/__generated__'\nimport { useListSouthboundMappings } from '@/api/hooks/useProtocolAdapters/useListSouthboundMappings.ts'\nimport { useUpdateSouthboundMappings } from '@/api/hooks/useProtocolAdapters/useUpdateSouthboundMappings.ts'\n\nimport type { ManagerContextType, MappingManagerType } from '@/modules/Mappings/types.ts'\nimport { southboundMappingListSchema } from '@/api/schemas/southbound.json-schema.ts'\nimport { southboundMappingListUISchema } from '@/api/schemas/southbound.ui-schema.ts'\nimport { DEFAULT_TOAST_OPTION } from '@/hooks/useEdgeToast/toast-utils.ts'\n\nexport const useSouthboundMappingManager = (adapterId: string): MappingManagerType<SouthboundMappingList> => {\n  const { t } = useTranslation()\n  const toast = useToast({\n    duration: DEFAULT_TOAST_OPTION.duration,\n    isClosable: DEFAULT_TOAST_OPTION.isClosable,\n  })\n\n  const { data, isError, isLoading, error } = useListSouthboundMappings(adapterId)\n\n  const updateCollectionMutator = useUpdateSouthboundMappings()\n\n  const formatToast = (operation: string) => ({\n    success: {\n      title: t(`protocolAdapter.mapping.toast.${operation}.title`),\n      description: t(`protocolAdapter.mapping.toast.${operation}.description`, { context: 'success' }),\n    },\n    error: {\n      title: t(`protocolAdapter.mapping.toast.${operation}.title`),\n      description: t(`protocolAdapter.mapping.toast.${operation}.description`, { context: 'error' }),\n    },\n    loading: {\n      title: t(`protocolAdapter.mapping.toast.${operation}.title`),\n      description: t('protocolAdapter.mapping.toast.description', { context: 'loading' }),\n    },\n  })\n\n  const onUpdateCollection = (tags: SouthboundMappingList) => {\n    if (!adapterId) return\n    const promise = updateCollectionMutator.mutateAsync({ adapterId: adapterId, requestBody: tags })\n    toast.promise(promise, formatToast('updateCollection'))\n    return promise\n  }\n\n  const context: ManagerContextType<SouthboundMappingList> = {\n    schema: southboundMappingListSchema,\n    uiSchema: southboundMappingListUISchema,\n    formData: data,\n  }\n\n  return {\n    // The context of the operations\n    context,\n    // The CRUD operations\n    data: data,\n    onUpdateCollection,\n    onClose: () => toast.closeAll(),\n    // The state (as in ReactQuery)\n    isLoading: isLoading,\n    isError: isError,\n    error: error,\n    isPending: updateCollectionMutator.isPending,\n  }\n}\n","import { type FC, useEffect, useMemo } from 'react'\nimport type { Node } from 'reactflow'\nimport { useNavigate, useParams } from 'react-router-dom'\nimport { useTranslation } from 'react-i18next'\nimport {\n  Button,\n  Drawer,\n  DrawerBody,\n  DrawerCloseButton,\n  DrawerContent,\n  DrawerFooter,\n  DrawerHeader,\n  DrawerOverlay,\n  FormControl,\n  FormLabel,\n  Switch,\n  Text,\n  useBoolean,\n  useDisclosure,\n} from '@chakra-ui/react'\n\nimport config from '@/config'\n\nimport type { Adapter } from '@/api/__generated__'\nimport DrawerExpandButton from '@/components/Chakra/DrawerExpandButton.tsx'\nimport ErrorMessage from '@/components/ErrorMessage.tsx'\nimport MappingForm from '@/modules/Mappings/components/MappingForm.tsx'\nimport { useNorthboundMappingManager } from '@/modules/Mappings/hooks/useNorthboundMappingManager.ts'\nimport { NodeTypes } from '@/modules/Workspace/types.ts'\nimport useWorkspaceStore from '@/modules/Workspace/hooks/useWorkspaceStore.ts'\nimport { useSouthboundMappingManager } from '@/modules/Mappings/hooks/useSouthboundMappingManager.ts'\nimport { MappingType } from './types'\nimport NodeNameCard from '@/modules/Workspace/components/parts/NodeNameCard.tsx'\nimport { useGetAdapterTypes } from '@/api/hooks/useProtocolAdapters/useGetAdapterTypes.ts'\n\ninterface AdapterMappingManagerProps {\n  type: MappingType\n}\n\n// TODO[NVL] Ensure layout fully responsive\nconst AdapterMappingManager: FC<AdapterMappingManagerProps> = ({ type }) => {\n  const { t } = useTranslation()\n  const [isExpanded, setExpanded] = useBoolean(true)\n  const { isOpen, onOpen, onClose } = useDisclosure()\n  const navigate = useNavigate()\n  const { nodeId } = useParams()\n  const { nodes } = useWorkspaceStore()\n\n  const selectedNode = useMemo(() => {\n    return nodes.find((node) => node.id === nodeId && node.type === NodeTypes.ADAPTER_NODE) as Node<Adapter> | undefined\n  }, [nodeId, nodes])\n\n  const { data: protocols } = useGetAdapterTypes()\n  const adapterProtocol =\n    selectedNode?.type === NodeTypes.ADAPTER_NODE\n      ? protocols?.items?.find((e) => e.id === (selectedNode as Node<Adapter>).data.type)\n      : undefined\n\n  const handleClose = () => {\n    onClose()\n    navigate('/workspace')\n  }\n\n  useEffect(() => {\n    onOpen()\n  }, [onOpen])\n\n  const adapterId = selectedNode?.data.id\n  const manager = type === MappingType.NORTHBOUND ? useNorthboundMappingManager : useSouthboundMappingManager\n\n  const [showNativeWidgets, setShowNativeWidgets] = useBoolean()\n\n  return (\n    <Drawer isOpen={isOpen} placement=\"right\" size={isExpanded ? 'full' : 'lg'} onClose={handleClose} variant=\"hivemq\">\n      <DrawerOverlay />\n      <DrawerContent>\n        <DrawerCloseButton />\n        <DrawerExpandButton isExpanded={isExpanded} toggle={setExpanded.toggle} />\n        <DrawerHeader>\n          <Text>{t('protocolAdapter.mapping.manager.header', { context: type })}</Text>\n          <NodeNameCard\n            name={selectedNode?.data.id}\n            type={selectedNode?.type as NodeTypes}\n            icon={adapterProtocol?.logoUrl}\n            description={adapterProtocol?.name}\n          />\n        </DrawerHeader>\n        <DrawerBody display=\"flex\" flexDirection=\"column\" gap={6}>\n          {!adapterId && <ErrorMessage message={t('protocolAdapter.error.loading')} />}\n          {adapterId && (\n            <MappingForm\n              adapterId={adapterId}\n              adapterType={selectedNode?.data.type}\n              onSubmit={handleClose}\n              useManager={manager}\n              type={type}\n              showNativeWidgets={showNativeWidgets}\n            />\n          )}\n        </DrawerBody>\n        <DrawerFooter>\n          {config.environment === 'development' && (\n            <FormControl display=\"flex\" alignItems=\"center\">\n              <FormLabel htmlFor=\"email-alerts\" mb=\"0\">\n                {t('modals.native')}\n              </FormLabel>\n              <Switch id=\"email-alerts\" isChecked={showNativeWidgets} onChange={setShowNativeWidgets.toggle} />\n            </FormControl>\n          )}\n          <Button variant=\"primary\" type=\"submit\" form=\"adapter-mapping-form\">\n            {t('protocolAdapter.mapping.actions.submit')}\n          </Button>\n        </DrawerFooter>\n      </DrawerContent>\n    </Drawer>\n  )\n}\n\nexport default AdapterMappingManager\n"],"names":["MappingForm","adapterId","adapterType","useManager","type","showNativeWidgets","onSubmit","t","useTranslation","context","onUpdateCollection","validationSchemas","useState","onFormSubmit","useCallback","data","promise","ErrorMessage","contextExt","jsx","ChakraRJSForm","MappingType","customMappingValidate","useUpdateNorthboundMappings","appClient","useHttpClient","queryClient","useQueryClient","useMutation","requestBody","_data","variables","QUERY_KEYS","MqttUserProperty","QoS","QoSEnum","MOCK_MAX_QOS","northboundMappingListSchema","registerEntitySelectWidget","props","chakraProps","label","id","disabled","readonly","onChange","required","rawErrors","value","multiple","create","getUiOptions","Select","useMemo","CustomFormat","SelectTag","SelectTopic","SelectTopicFilter","Fragment","jsxs","FormControl","FormLabel","northboundMappingListUISchema","useNorthboundMappingManager","toast","useToast","DEFAULT_TOAST_OPTION","isError","isLoading","error","useListNorthboundMappings","updateCollectionMutator","formatToast","operation","tags","useUpdateSouthboundMappings","southboundMappingListSchema","i18n","metadataWidget","southboundMappingListUISchema","useSouthboundMappingManager","useListSouthboundMappings","AdapterMappingManager","isExpanded","setExpanded","useBoolean","isOpen","onOpen","onClose","useDisclosure","navigate","useNavigate","nodeId","useParams","nodes","useWorkspaceStore","selectedNode","node","NodeTypes","protocols","useGetAdapterTypes","adapterProtocol","_a","e","handleClose","useEffect","manager","setShowNativeWidgets","Drawer","DrawerOverlay","DrawerContent","DrawerCloseButton","DrawerExpandButton","DrawerHeader","Text","NodeNameCard","DrawerBody","DrawerFooter","config","Button"],"mappings":"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"}