{"version":3,"file":"LinkPropertyDrawer-CfapEimu.js","sources":["../../src/modules/Workspace/components/drawers/LinkPropertyDrawer.tsx"],"sourcesContent":["import type { FC } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport type { Node } from 'reactflow'\nimport { Drawer, DrawerBody, DrawerCloseButton, DrawerContent, DrawerHeader, Text } from '@chakra-ui/react'\n\nimport type { Adapter, Bridge } from '@/api/__generated__'\nimport { useGetAdapterTypes } from '@/api/hooks/useProtocolAdapters/useGetAdapterTypes.ts'\nimport MetricsContainer from '@/modules/Metrics/MetricsContainer.tsx'\nimport NodeNameCard from '@/modules/Workspace/components/parts/NodeNameCard.tsx'\nimport { NodeTypes } from '@/modules/Workspace/types.ts'\nimport { getDefaultMetricsFor } from '@/modules/Workspace/utils/nodes-utils.ts'\n\ninterface LinkPropertyDrawerProps {\n  nodeId: string\n  selectedNode: Node<Bridge | Adapter>\n  isOpen: boolean\n  onClose: () => void\n  onEditEntity: () => void\n}\n\nconst LinkPropertyDrawer: FC<LinkPropertyDrawerProps> = ({ nodeId, isOpen, selectedNode, onClose }) => {\n  const { t } = useTranslation()\n  const { data: protocols } = useGetAdapterTypes()\n  const adapterProtocol =\n    selectedNode.type === NodeTypes.ADAPTER_NODE\n      ? protocols?.items?.find((e) => e.id === (selectedNode as Node<Adapter>).data.type)\n      : undefined\n\n  return (\n    <Drawer isOpen={isOpen} placement=\"right\" size=\"md\" onClose={onClose} variant=\"hivemq\">\n      <DrawerContent>\n        <DrawerCloseButton />\n\n        <DrawerHeader>\n          <Text>{t('workspace.observability.header', { context: selectedNode.type })}</Text>\n          <NodeNameCard\n            name={selectedNode.data.id}\n            type={selectedNode.type as NodeTypes}\n            icon={adapterProtocol?.logoUrl}\n            description={adapterProtocol?.name}\n          />\n        </DrawerHeader>\n        <DrawerBody display=\"flex\" flexDirection=\"column\" gap={6}>\n          <MetricsContainer\n            nodeId={nodeId}\n            type={selectedNode.type as NodeTypes}\n            filters={[\n              {\n                id: selectedNode.data.id,\n                type:\n                  selectedNode.type === NodeTypes.ADAPTER_NODE\n                    ? `com.hivemq.edge.protocol-adapters.${(selectedNode as Node<Adapter>).data.type}`\n                    : 'com.hivemq.edge.bridge',\n              },\n            ]}\n            initMetrics={getDefaultMetricsFor(selectedNode)}\n          />\n        </DrawerBody>\n      </DrawerContent>\n    </Drawer>\n  )\n}\n\nexport default LinkPropertyDrawer\n"],"names":["LinkPropertyDrawer","nodeId","isOpen","selectedNode","onClose","t","useTranslation","protocols","useGetAdapterTypes","adapterProtocol","NodeTypes","_a","e","jsx","Drawer","jsxs","DrawerContent","DrawerCloseButton","DrawerHeader","Text","NodeNameCard","DrawerBody","MetricsContainer","getDefaultMetricsFor"],"mappings":"6xDAoBA,MAAMA,GAAkD,CAAC,CAAE,OAAAC,EAAQ,OAAAC,EAAQ,aAAAC,EAAc,QAAAC,KAAc,OAC/F,KAAA,CAAE,EAAAC,CAAE,EAAIC,EAAe,EACvB,CAAE,KAAMC,CAAU,EAAIC,EAAmB,EACzCC,EACJN,EAAa,OAASO,EAAU,cAC5BC,EAAAJ,GAAA,YAAAA,EAAW,QAAX,YAAAI,EAAkB,KAAMC,GAAMA,EAAE,KAAQT,EAA+B,KAAK,MAC5E,OAGJ,OAAAU,EAAAA,IAACC,EAAO,CAAA,OAAAZ,EAAgB,UAAU,QAAQ,KAAK,KAAK,QAAAE,EAAkB,QAAQ,SAC5E,SAAAW,EAAAA,KAACC,EACC,CAAA,SAAA,CAAAH,EAAA,IAACI,EAAkB,EAAA,SAElBC,EACC,CAAA,SAAA,CAACL,EAAAA,IAAAM,EAAA,CAAM,WAAE,iCAAkC,CAAE,QAAShB,EAAa,IAAM,CAAA,EAAE,EAC3EU,EAAA,IAACO,EAAA,CACC,KAAMjB,EAAa,KAAK,GACxB,KAAMA,EAAa,KACnB,KAAMM,GAAA,YAAAA,EAAiB,QACvB,YAAaA,GAAA,YAAAA,EAAiB,IAAA,CAAA,CAChC,EACF,QACCY,EAAW,CAAA,QAAQ,OAAO,cAAc,SAAS,IAAK,EACrD,SAAAR,EAAA,IAACS,EAAA,CACC,OAAArB,EACA,KAAME,EAAa,KACnB,QAAS,CACP,CACE,GAAIA,EAAa,KAAK,GACtB,KACEA,EAAa,OAASO,EAAU,aAC5B,qCAAsCP,EAA+B,KAAK,IAAI,GAC9E,wBAAA,CAEV,EACA,YAAaoB,EAAqBpB,CAAY,CAAA,CAAA,CAElD,CAAA,CAAA,CAAA,CACF,CACF,CAAA,CAEJ"}