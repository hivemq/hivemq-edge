{"version":3,"file":"BridgePage-BgUxXnZu.js","sources":["../../src/assets/app/bridges.svg","../../src/modules/Bridges/utils/formatters.tsx","../../src/modules/Bridges/components/overview/ConnectionSummary.tsx","../../src/modules/Bridges/components/overview/BridgeCard.tsx","../../src/modules/Bridges/Bridges.tsx","../../src/modules/Bridges/hooks/BridgeProvider.tsx","../../src/modules/Bridges/BridgePage.tsx"],"sourcesContent":["export default \"__VITE_ASSET__Bn8AEdMU__\"","export const leadSHA = (sha: string, length: number): string => {\n  return sha.slice(0, length)\n}\n\nexport const formatHost = (host: string | undefined, length = 7): string => {\n  if (!host) return ''\n\n  const [domain, ...rest] = host.split('.')\n  const reducedHost = leadSHA(domain, length)\n  return [reducedHost === domain ? reducedHost : reducedHost + '[...]', ...rest].join('.')\n}\n","import type { FC } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport { Box, Tooltip, chakra as Chakra, VisuallyHidden, Badge } from '@chakra-ui/react'\n\nimport type { Bridge } from '@/api/__generated__'\nimport { formatHost } from '../../utils/formatters.tsx'\n\ntype BridgeConnection = Pick<\n  Bridge,\n  'host' | 'port' | 'sessionExpiry' | 'clientId' | 'localSubscriptions' | 'remoteSubscriptions'\n>\n\nconst ConnectionSummary: FC<BridgeConnection> = ({ host, port, clientId, localSubscriptions, remoteSubscriptions }) => {\n  const { t } = useTranslation()\n\n  return (\n    <Chakra.dl display=\"grid\" gridTemplateColumns=\"repeat(2, minmax(0px, 1fr))\" columnGap={4} alignItems=\"center\">\n      <Chakra.dt>\n        <VisuallyHidden>{t('bridge.connection.host')}</VisuallyHidden>\n      </Chakra.dt>\n      <Chakra.dd gridColumn=\"1/ span 2\">\n        <Tooltip label={host} hasArrow placement=\"top\">\n          <Box overflow=\"hidden\" textOverflow=\"ellipsis\" fontWeight=\"bold\">\n            {formatHost(host, 20)}\n          </Box>\n        </Tooltip>\n      </Chakra.dd>\n      <Chakra.dt>{t('bridge.connection.port')}</Chakra.dt>\n      <Chakra.dd>{port}</Chakra.dd>\n      <Chakra.dt>{t('bridge.connection.clientId')}</Chakra.dt>\n      <Chakra.dd>{clientId}</Chakra.dd>\n      <Chakra.dt>\n        {t('bridge.subscription.type', { context: 'local', count: localSubscriptions?.length || 0 })}\n      </Chakra.dt>\n      <Chakra.dd>\n        <Badge variant=\"subtle\">{localSubscriptions?.length || 0}</Badge>\n      </Chakra.dd>\n      <Chakra.dt>\n        {t('bridge.subscription.type', { context: 'remote', count: remoteSubscriptions?.length || 0 })}\n      </Chakra.dt>\n      <Chakra.dd>\n        <Badge variant=\"subtle\">{remoteSubscriptions?.length || 0} </Badge>\n      </Chakra.dd>\n    </Chakra.dl>\n  )\n}\n\nexport default ConnectionSummary\n","import type { FC } from 'react'\nimport { useMemo } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport {\n  Box,\n  Card,\n  CardBody,\n  CardFooter,\n  CardHeader,\n  Flex,\n  Heading,\n  HStack,\n  Image,\n  Skeleton,\n  Text,\n} from '@chakra-ui/react'\nimport { EditIcon } from '@chakra-ui/icons'\n\nimport BridgeLogo from '@/assets/app/bridges.svg'\n\nimport type { Bridge } from '@/api/__generated__'\nimport { useGetBridgesStatus } from '@/api/hooks/useConnection/useGetBridgesStatus.ts'\nimport { DeviceTypes } from '@/api/types/api-devices.ts'\n\nimport { ConnectionStatusBadge } from '@/components/ConnectionStatusBadge'\nimport ConnectionController from '@/components/ConnectionController/ConnectionController.tsx'\n\nimport ConnectionSummary from './ConnectionSummary.tsx'\nimport IconButton from '@/components/Chakra/IconButton.tsx'\n\ninterface BridgeCardProps extends Bridge {\n  isLoading?: boolean\n  onNavigate?: (route: string) => void\n  role?: string\n}\n\nconst BridgeCard: FC<BridgeCardProps> = ({ isLoading, onNavigate, role, ...props }) => {\n  const { t } = useTranslation()\n\n  // const { isFetching } = useGetBridgeConnectionStatus(props.id)\n  const { isFetching, data: connections } = useGetBridgesStatus()\n\n  const status = useMemo(\n    () => connections?.items?.find((connection) => connection.id === props.id && connection.type === 'bridge'),\n    [connections, props.id]\n  )\n\n  return (\n    <Card overflow=\"hidden\" aria-labelledby=\"bridge-name\" role={role}>\n      <CardHeader>\n        <Skeleton isLoaded={!isLoading} display=\"flex\">\n          <Heading size=\"md\" flex={1} m=\"auto\" data-testid=\"bridge-name\" id=\"bridge-name\">\n            {props.id}\n          </Heading>\n          <Box>\n            <IconButton\n              aria-label={t('bridge.action.edit')}\n              icon={<EditIcon />}\n              onClick={() => onNavigate?.(`/mqtt-bridges/${props.id}`)}\n            />\n          </Box>\n        </Skeleton>\n      </CardHeader>\n      <CardBody py={0}>\n        <HStack>\n          <Skeleton isLoaded={!isLoading}>\n            <Image boxSize=\"100px\" src={BridgeLogo} alt={t('bridge.title')} />\n          </Skeleton>\n          <Skeleton isLoaded={!isLoading}>\n            <ConnectionSummary {...props} />\n          </Skeleton>\n        </HStack>\n      </CardBody>\n      <CardFooter>\n        <Skeleton isLoaded={!isLoading} as={Flex} w=\"100%\">\n          <Box flex={1}>\n            <span\n              style={{\n                display: 'inline-block',\n                marginLeft: '.2rem',\n                marginRight: '.2rem',\n                width: `.5rem`,\n                height: '.5rem',\n                background: isFetching ? 'lightgrey' : 'transparent',\n                transition: !isFetching ? 'all .3s ease' : 'none',\n                borderRadius: '100%',\n              }}\n            />\n            <Text as=\"span\" mr={2}>\n              {t('bridge.status.label')}\n            </Text>\n            <ConnectionStatusBadge status={status} />\n          </Box>\n          <Flex justifyContent=\"flex-end\" role=\"toolbar\">\n            <ConnectionController type={DeviceTypes.BRIDGE} id={props.id} status={props.status} />\n          </Flex>\n        </Skeleton>\n      </CardFooter>\n    </Card>\n  )\n}\n\nexport default BridgeCard\n","import type { FC } from 'react'\nimport { useMemo } from 'react'\nimport { Box, Flex, SimpleGrid } from '@chakra-ui/react'\nimport { useTranslation } from 'react-i18next'\nimport { useNavigate } from 'react-router-dom'\n\nimport BridgeEmptyLogo from '@/assets/app/bridge-empty.svg'\n\nimport type { ProblemDetails } from '@/api/types/http-problem-details.ts'\nimport { useListBridges } from '@/api/hooks/useGetBridges/useListBridges.ts'\nimport { mockBridge } from '@/api/hooks/useGetBridges/__handlers__'\n\nimport ErrorMessage from '@/components/ErrorMessage.tsx'\nimport WarningMessage from '@/components/WarningMessage.tsx'\n\nimport BridgeCard from '@/modules/Bridges/components/overview/BridgeCard.tsx'\n\nconst Bridges: FC = () => {\n  const { data, isLoading, isError, error } = useListBridges()\n  const { t } = useTranslation()\n  const isEmpty = useMemo(() => !data || data.length === 0, [data])\n  const navigate = useNavigate()\n\n  const handleNavigate = (route: string) => {\n    navigate(route)\n  }\n\n  if (isError) {\n    return (\n      <Box mt=\"20%\" mx=\"20%\" alignItems=\"center\">\n        <ErrorMessage\n          type={error?.message}\n          message={(error?.body as ProblemDetails)?.title || t('bridge.error.loading')}\n        />\n      </Box>\n    )\n  }\n\n  if (isLoading) {\n    return (\n      <Flex mt={8} flexDirection=\"row\" flexWrap=\"wrap\" gap=\"20px\">\n        <BridgeCard {...mockBridge} isLoading />\n      </Flex>\n    )\n  }\n  if (isEmpty)\n    return (\n      <WarningMessage\n        image={BridgeEmptyLogo}\n        prompt={t('bridge.noDataWarning.description')}\n        title={t('bridge.noDataWarning.title')}\n        alt={t('bridge.title')}\n        mt={10}\n      />\n    )\n\n  return (\n    <SimpleGrid\n      mt={8}\n      spacing={4}\n      templateColumns={{ base: 'repeat(1, 1fr)', lg: 'repeat(2, 1fr)', '2xl': 'repeat(3, 1fr)' }}\n      gap={6}\n      role=\"list\"\n      aria-label={t('bridge.list')}\n    >\n      {data?.map((bridge, i) => (\n        <BridgeCard key={`${bridge.id}-${i}`} {...bridge} onNavigate={handleNavigate} role=\"listitem\" />\n      ))}\n    </SimpleGrid>\n  )\n}\n\nexport default Bridges\n","import type { FunctionComponent, PropsWithChildren } from 'react'\nimport { useState } from 'react'\nimport type { Bridge } from '@/api/__generated__'\nimport { BridgeContext } from '@/modules/Bridges/hooks/BridgeContext.ts'\nimport { bridgeInitialState } from '@/modules/Bridges/hooks/useBridgeConfig.tsx'\n\nexport const BridgeProvider: FunctionComponent<PropsWithChildren> = ({ children }) => {\n  const [bridge, setBridge] = useState<Bridge>(bridgeInitialState)\n\n  return <BridgeContext.Provider value={{ bridge, setBridge }}>{children}</BridgeContext.Provider>\n}\n","import type { FC } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport { Button, Flex } from '@chakra-ui/react'\nimport { BiAddToQueue } from 'react-icons/bi'\nimport { useNavigate } from 'react-router-dom'\n\nimport SuspenseOutlet from '@/components/SuspenseOutlet.tsx'\nimport PageContainer from '@/components/PageContainer.tsx'\nimport Bridges from '@/modules/Bridges/Bridges.tsx'\nimport { useListBridges } from '@/api/hooks/useGetBridges/useListBridges.ts'\nimport { BridgeProvider } from '@/modules/Bridges/hooks/BridgeProvider.tsx'\n\nconst BridgePage: FC = () => {\n  const { t } = useTranslation()\n  const navigate = useNavigate()\n  const { isLoading, isError } = useListBridges()\n\n  return (\n    <PageContainer\n      title={t('bridge.title')}\n      subtitle={t('bridge.description')}\n      cta={\n        <Flex height=\"100%\" justifyContent=\"flex-end\" alignItems=\"flex-end\" pb={6}>\n          <Button\n            leftIcon={<BiAddToQueue />}\n            onClick={() => navigate('/mqtt-bridges/new')}\n            isDisabled={isLoading || isError}\n            variant=\"primary\"\n          >\n            {t('bridge.action.add')}\n          </Button>\n        </Flex>\n      }\n    >\n      <BridgeProvider>\n        <Bridges />\n        <SuspenseOutlet />\n      </BridgeProvider>\n    </PageContainer>\n  )\n}\n\nexport default BridgePage\n"],"names":["BridgeLogo","leadSHA","sha","length","formatHost","host","domain","rest","reducedHost","ConnectionSummary","port","clientId","localSubscriptions","remoteSubscriptions","t","useTranslation","jsxs","Chakra","jsx","VisuallyHidden","Tooltip","Box","Badge","BridgeCard","isLoading","onNavigate","role","props","isFetching","connections","useGetBridgesStatus","status","useMemo","_a","connection","Card","CardHeader","Skeleton","Heading","IconButton","EditIcon","CardBody","HStack","Image","CardFooter","Flex","Text","ConnectionStatusBadge","ConnectionController","DeviceTypes","Bridges","data","isError","error","useListBridges","isEmpty","navigate","useNavigate","handleNavigate","route","ErrorMessage","mockBridge","WarningMessage","BridgeEmptyLogo","SimpleGrid","bridge","i","BridgeProvider","children","setBridge","useState","bridgeInitialState","BridgeContext","BridgePage","PageContainer","Button","BiAddToQueue","SuspenseOutlet"],"mappings":"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"}