{"version":3,"file":"EventLogTable-5stkiocp.js","sources":["../../src/modules/EventLog/components/SeverityBadge.tsx","../../src/modules/EventLog/components/SourceLink.tsx","../../src/api/hooks/useEvents/__handlers__/index.ts","../../src/api/hooks/useEvents/useGetEvents.ts","../../src/modules/EventLog/components/table/EventLogTable.tsx"],"sourcesContent":["import type { FC } from 'react'\nimport type { AlertStatus } from '@chakra-ui/react'\nimport { Alert, AlertIcon, type AlertProps } from '@chakra-ui/react'\nimport { Event } from '@/api/__generated__'\n\ninterface SeverityBadgeProps extends AlertProps {\n  event: Event\n}\n\nconst SeverityBadge: FC<SeverityBadgeProps> = ({ event, ...alertProps }) => {\n  let status: AlertStatus = 'info'\n  switch (event.severity) {\n    case Event.severity.CRITICAL:\n      status = 'error'\n      break\n    case Event.severity.ERROR:\n      status = 'error'\n      break\n    case Event.severity.WARN:\n      status = 'warning'\n      break\n    case Event.severity.INFO:\n      status = 'info'\n      break\n  }\n\n  return (\n    <Alert status={status} {...alertProps} addRole={false} px={2} py=\"2px\" borderRadius=\"15px\">\n      <AlertIcon />\n      {event.severity}\n    </Alert>\n  )\n}\n\nexport default SeverityBadge\n","import type { FC } from 'react'\nimport { Link as ReactRouterLink } from 'react-router-dom'\nimport { Box, Icon, Link as ChakraLink } from '@chakra-ui/react'\nimport { PiBridgeThin, PiPlugsConnectedFill, PiUserFill } from 'react-icons/pi'\nimport { MdOutlineEventNote } from 'react-icons/md'\n\nimport { TypeIdentifier } from '@/api/__generated__'\nimport type { AdapterNavigateState } from '@/modules/ProtocolAdapters/types.ts'\nimport { ProtocolAdapterTabIndex } from '@/modules/ProtocolAdapters/types.ts'\n\ninterface SourceLinkProps {\n  source: TypeIdentifier | undefined\n  type?: TypeIdentifier | undefined\n}\n\nconst SourceLink: FC<SourceLinkProps> = ({ source, type }) => {\n  let icon: JSX.Element | undefined\n  let to: string | undefined\n  let state: AdapterNavigateState | undefined\n\n  switch (source?.type) {\n    case TypeIdentifier.type.ADAPTER:\n      icon = <Icon as={PiPlugsConnectedFill} mr={2} />\n      state = {\n        protocolAdapterTabIndex: ProtocolAdapterTabIndex.ADAPTERS,\n        protocolAdapterType: type?.identifier,\n      }\n      to = `/protocol-adapters/edit/${type?.identifier}/${source.identifier}`\n      break\n    case TypeIdentifier.type.ADAPTER_TYPE:\n      icon = <Icon as={PiPlugsConnectedFill} mr={2} />\n      break\n    case TypeIdentifier.type.BRIDGE:\n      icon = <Icon as={PiBridgeThin} fontSize=\"20px\" mr={2} />\n      to = `/mqtt-bridges/${source.identifier}`\n      break\n    case TypeIdentifier.type.EVENT:\n      icon = <Icon as={MdOutlineEventNote} mr={2} />\n      break\n    case TypeIdentifier.type.USER:\n      icon = <Icon as={PiUserFill} mr={2} />\n      break\n    default:\n      break\n  }\n\n  if (!to)\n    return (\n      <Box whiteSpace=\"nowrap\" display=\"inline-flex\">\n        {source?.identifier}\n      </Box>\n    )\n\n  return (\n    <ChakraLink as={ReactRouterLink} to={to} state={state} whiteSpace=\"nowrap\" display=\"inline-flex\">\n      {Boolean(icon) && icon}\n      {source?.identifier}\n    </ChakraLink>\n  )\n}\n\nexport default SourceLink\n","import { http, HttpResponse } from 'msw'\nimport type { EventList } from '@/api/__generated__'\nimport { Event, Payload, TypeIdentifier } from '@/api/__generated__'\n\nimport { DateTime } from 'luxon'\nimport { mockBridge } from '@/api/hooks/useGetBridges/__handlers__'\n\nconst MOCK_ID_SHIFT = 100\nconst makeID = (type: TypeIdentifier.type, inc: number): TypeIdentifier => ({\n  identifier: `${type}-${inc}`,\n  type: type,\n})\n\nconst lorem =\n  'Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. ' +\n  'At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren,'\n\nexport const mockXmlPayload = [\n  '<root><node/>',\n  ' <Sale price=\"100.00\">',\n  '   <segment>  0 LO4394L 14SEP PHXORD GK1</segment>',\n  '   <segment>  1 LO 999L 14SEP PHXORD GK1</segment>',\n  '   <segment>  2 LO 789L 15SEP WAWODS GK1</segment>',\n  '   <segment> 12 LO4394T 14SEP PHXORD GK1</segment>',\n  '   <name>Vasya Pupkin</name>' + ' </Sale>',\n  '</root>',\n].join('\\n')\n\nconst sourceKeys = Object.keys(TypeIdentifier.type)\nconst severityKeys = Object.keys(Event.severity)\nconst maxEvents = 200\n\nconst contentType = [\n  {\n    content: mockXmlPayload,\n    contentType: Payload.contentType.XML,\n  },\n  { content: JSON.stringify(mockBridge), contentType: Payload.contentType.JSON },\n  {\n    content: 'test,id,ff',\n    contentType: Payload.contentType.CSV,\n  },\n]\n\nexport const mockEdgeEvent = (n = maxEvents): Event[] =>\n  Array.from(Array(n), (_, x) => ({\n    identifier: makeID(TypeIdentifier.type.EVENT, x),\n\n    severity: severityKeys[x % severityKeys.length] as Event.severity,\n    message: lorem,\n    payload: contentType[x % 3],\n\n    source: makeID(sourceKeys[x % sourceKeys.length] as TypeIdentifier.type, x),\n    associatedObject: makeID(sourceKeys[x % sourceKeys.length] as TypeIdentifier.type, x + MOCK_ID_SHIFT),\n    created: DateTime.fromISO('2023-10-13T11:51:24.234')\n      .plus({ minutes: x % 100 })\n      .toISO({ format: 'basic' }) as string,\n    timestamp: DateTime.fromISO('2023-10-13T11:51:24.234')\n      .plus({ minutes: x % 100 })\n      .toUnixInteger(),\n  }))\n\nexport const handlers = [\n  http.get('**/management/events', () => {\n    return HttpResponse.json<EventList>({ items: [...mockEdgeEvent()] }, { status: 200 })\n  }),\n]\n","import { useQuery } from '@tanstack/react-query'\nimport { useHttpClient } from '@/api/hooks/useHttpClient/useHttpClient.ts'\nimport type { ApiError, EventList } from '@/api/__generated__'\nimport { QUERY_KEYS } from '@/api/utils.ts'\n\nexport const useGetEvents = () => {\n  const appClient = useHttpClient()\n\n  return useQuery<EventList, ApiError>({\n    queryKey: [QUERY_KEYS.EVENTS],\n    queryFn: () => appClient.events.getEvents(),\n  })\n}\n","import type { FC } from 'react'\nimport { useMemo } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport type { ColumnDef } from '@tanstack/react-table'\nimport { DateTime } from 'luxon'\nimport { Box, Button, Flex, Icon, Skeleton, Text } from '@chakra-ui/react'\nimport { MdOutlineEventNote } from 'react-icons/md'\nimport { BiRefresh } from 'react-icons/bi'\n\nimport type { Event } from '@/api/__generated__'\nimport type { ProblemDetails } from '@/api/types/http-problem-details.ts'\nimport { mockEdgeEvent } from '@/api/hooks/useEvents/__handlers__'\nimport { useGetEvents } from '@/api/hooks/useEvents/useGetEvents.ts'\nimport PaginatedTable from '@/components/PaginatedTable/PaginatedTable.tsx'\nimport ErrorMessage from '@/components/ErrorMessage.tsx'\nimport IconButton from '@/components/Chakra/IconButton.tsx'\n\nimport { compareSeverity } from '@/modules/ProtocolAdapters/utils/pagination-utils.ts'\nimport DateTimeRenderer from '@/components/DateTime/DateTimeRenderer.tsx'\n\nimport SourceLink from '../SourceLink.tsx'\nimport SeverityBadge from '../SeverityBadge.tsx'\n\ninterface EventLogTableProps {\n  onOpen?: (t: Event) => void\n  globalSourceFilter?: string[]\n  maxEvents?: number\n  variant?: 'full' | 'summary'\n  isSingleSource?: boolean\n}\n\nconst EventLogTable: FC<EventLogTableProps> = ({\n  onOpen,\n  globalSourceFilter,\n  variant = 'full',\n  maxEvents = 5,\n  isSingleSource = false,\n}) => {\n  const { t } = useTranslation()\n  const { data, isLoading, isFetching, error, refetch } = useGetEvents()\n\n  const safeData = useMemo<Event[]>(() => {\n    if (!data || !data?.items) return [...mockEdgeEvent(5)]\n    if (globalSourceFilter) {\n      return data.items\n        .filter((e: Event) => globalSourceFilter.includes(e.source?.identifier || ''))\n        .slice(0, maxEvents)\n    }\n\n    return data.items\n  }, [data, globalSourceFilter, maxEvents])\n\n  const allColumns = useMemo<ColumnDef<Event>[]>(() => {\n    return [\n      {\n        accessorKey: 'identifier.identifier',\n        width: '25%',\n        enableSorting: false,\n        enableColumnFilter: false,\n        header: t('eventLog.table.header.id'),\n        cell: (info) => {\n          return (\n            <Skeleton isLoaded={!isLoading}>\n              {info.row.original.payload ? (\n                <IconButton\n                  size=\"sm\"\n                  mr={2}\n                  onClick={() => onOpen?.(info.row.original)}\n                  aria-label={t('eventLog.table.cta.open')}\n                  icon={<MdOutlineEventNote />}\n                />\n              ) : null}\n            </Skeleton>\n          )\n        },\n      },\n      {\n        accessorKey: 'created',\n        sortType: 'datetime',\n        accessorFn: (row) => DateTime.fromISO(row.created).toMillis(),\n        cell: (info) => (\n          <Skeleton isLoaded={!isLoading} whiteSpace=\"nowrap\">\n            <DateTimeRenderer date={DateTime.fromMillis(info.getValue() as number)} isApprox />\n          </Skeleton>\n        ),\n        header: t('eventLog.table.header.created'),\n      },\n      {\n        accessorKey: 'severity',\n        header: t('eventLog.table.header.severity'),\n        sortingFn: (rowA, rowB) => compareSeverity(rowA.original.severity, rowB.original.severity),\n        cell: (info) => (\n          <Skeleton isLoaded={!isLoading}>\n            <SeverityBadge event={info.row.original} />\n          </Skeleton>\n        ),\n      },\n      {\n        accessorKey: 'source.identifier',\n        sortType: 'alphanumeric',\n        header: t('eventLog.table.header.source'),\n        cell: (info) => (\n          <Skeleton isLoaded={!isLoading}>\n            <SourceLink source={info.row.original.source} type={info.row.original.associatedObject} />\n          </Skeleton>\n        ),\n      },\n      {\n        accessorKey: 'message',\n        header: t('eventLog.table.header.message'),\n        enableColumnFilter: false,\n        cell: (info) => {\n          return (\n            <Skeleton isLoaded={!isLoading} overflow=\"hidden\">\n              <Text>{info.getValue() as string}</Text>\n            </Skeleton>\n          )\n        },\n      },\n    ]\n  }, [isLoading, onOpen, t])\n\n  const displayColumns = useMemo(() => {\n    const [, createdColumn, severityColumn, idColumn, messageColumn] = allColumns\n    if (variant === 'full') return allColumns\n    if (isSingleSource) return [createdColumn, severityColumn, messageColumn]\n    else return [createdColumn, idColumn, severityColumn, messageColumn]\n  }, [allColumns, isSingleSource, variant])\n\n  if (error) {\n    return (\n      <Box mt=\"20%\" mx=\"20%\" alignItems=\"center\">\n        <ErrorMessage\n          type={error?.message}\n          message={(error?.body as ProblemDetails)?.title || t('eventLog.error.loading')}\n        />\n      </Box>\n    )\n  }\n\n  return (\n    <>\n      {variant === 'full' && (\n        <Flex justifyContent=\"flex-end\">\n          <Button\n            isLoading={isFetching}\n            loadingText={t('eventLog.table.cta.refetch')}\n            variant=\"outline\"\n            size=\"sm\"\n            leftIcon={<Icon as={BiRefresh} fontSize={20} />}\n            onClick={() => refetch()}\n          >\n            {t('eventLog.table.cta.refetch')}\n          </Button>\n        </Flex>\n      )}\n      <PaginatedTable<Event>\n        aria-label={t('eventLog.title')}\n        data={safeData}\n        columns={displayColumns}\n        enablePaginationGoTo={variant === 'full'}\n        enablePaginationSizes={variant === 'full'}\n        enableColumnFilters={variant === 'full'}\n        // getRowStyles={(row) => {\n        //   return { backgroundColor: theme.colors.blue[50] }\n        // }}\n      />\n    </>\n  )\n}\n\nexport default EventLogTable\n"],"names":["SeverityBadge","event","alertProps","status","Event","jsxs","Alert","jsx","AlertIcon","SourceLink","source","type","icon","to","state","TypeIdentifier","Icon","PiPlugsConnectedFill","ProtocolAdapterTabIndex","PiBridgeThin","MdOutlineEventNote","PiUserFill","ChakraLink","ReactRouterLink","Box","MOCK_ID_SHIFT","makeID","inc","lorem","mockXmlPayload","sourceKeys","severityKeys","maxEvents","contentType","Payload","mockBridge","mockEdgeEvent","n","_","x","DateTime","http","HttpResponse","useGetEvents","appClient","useHttpClient","useQuery","QUERY_KEYS","EventLogTable","onOpen","globalSourceFilter","variant","isSingleSource","t","useTranslation","data","isLoading","isFetching","error","refetch","safeData","useMemo","e","_a","allColumns","info","Skeleton","IconButton","row","DateTimeRenderer","rowA","rowB","compareSeverity","Text","displayColumns","createdColumn","severityColumn","idColumn","messageColumn","ErrorMessage","Fragment","Flex","Button","BiRefresh","PaginatedTable"],"mappings":"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"}