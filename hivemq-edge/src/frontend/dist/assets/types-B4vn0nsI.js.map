{"version":3,"file":"types-B4vn0nsI.js","sources":["../../src/modules/ProtocolAdapters/types.ts"],"sourcesContent":["import type { UseFormReturn, FieldValues } from 'react-hook-form'\nimport type { IdSchema } from '@rjsf/utils'\nimport type { Adapter, ProtocolAdapter } from '@/api/__generated__'\nimport type { FlatJSONSchema7 } from '@/components/rjsf/MqttTransformation/utils/json-schema.utils.ts'\nimport type { Dispatch, SetStateAction } from 'react'\n\nexport enum WorkspaceAdapterCommand {\n  VIEW = 'VIEW',\n  TAGS = 'TAGS',\n  TOPIC_FILTERS = 'TOPIC_FILTERS',\n  MAPPINGS = 'MAPPINGS',\n}\n\nexport type SubscriptionType = 'remoteSubscriptions' | 'localSubscriptions'\n\nexport interface GenericPanelType<T extends FieldValues> {\n  isNew?: boolean\n  form: UseFormReturn<T>\n}\n\nexport interface AdapterType {\n  adapterType?: string\n}\n\nexport interface ProtocolFacetType {\n  search?: string | null\n  filter?: { key: keyof ProtocolAdapter; value: string } | null\n}\n\nexport enum ProtocolAdapterTabIndex {\n  PROTOCOLS,\n  ADAPTERS,\n}\n\nexport interface AdapterNavigateState {\n  protocolAdapterTabIndex: ProtocolAdapterTabIndex\n  protocolAdapterType?: string\n  selectedActiveAdapter?: {\n    isNew: boolean\n    isOpen: boolean\n    adapterId: string\n  }\n}\n\nexport type AdapterConfig = NonNullable<Adapter['config']>\n\nexport interface AdapterContext {\n  // TODO[NVL] Is that good enough for ANY form data?\n  onBatchUpload?: (idSchema: IdSchema<unknown>, batch: Record<string, unknown>[]) => void\n  isEditAdapter: boolean\n  isDiscoverable: boolean\n  adapterType?: string\n  adapterId?: string\n}\n\nexport interface MappingContext extends AdapterContext {\n  validationSchemas: [FlatJSONSchema7[] | undefined, Dispatch<SetStateAction<FlatJSONSchema7[] | undefined>>]\n}\n\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace ExportFormat {\n  export enum Type {\n    CONFIGURATION = 'CONFIGURATION',\n    MAPPINGS = 'MAPPINGS',\n  }\n}\n\nexport interface ExportFormat {\n  value: ExportFormat.Type\n  formats?: string[]\n  isDisabled?: (protocol?: ProtocolAdapter) => boolean\n  downloader?: (name: string, ext: string, source: Adapter, protocol: ProtocolAdapter, callback?: () => void) => void\n}\n\nexport interface ExportFormatDisplay extends ExportFormat {\n  label: string\n  description: string\n}\n\nexport class AdapterExportError extends Error {\n  constructor(message: string) {\n    super(message)\n    this.name = 'AdapterExportError'\n  }\n}\n"],"names":["WorkspaceAdapterCommand","ProtocolAdapterTabIndex","ProtocolAdapterTabIndex2","ExportFormat","Type","AdapterExportError","message"],"mappings":"qVAMY,IAAAA,GAAAA,IACVA,EAAA,KAAO,OACPA,EAAA,KAAO,OACPA,EAAA,cAAgB,gBAChBA,EAAA,SAAW,WAJDA,IAAAA,GAAA,CAAA,CAAA,EAuBAC,GAAAA,IACVA,EAAAC,EAAA,UAAA,CAAA,EAAA,YACAD,EAAAC,EAAA,SAAA,CAAA,EAAA,WAFUD,IAAAA,GAAA,CAAA,CAAA,EA+BKE,GAAAA,GAAV,EACOC,GAAL,CACLA,EAAA,cAAgB,gBAChBA,EAAA,SAAW,UAFD,GAAAD,EAAA,OAAAA,EAAA,KAAA,CAAA,EAAA,CAAA,GADGA,IAAAA,EAAA,CAAA,EAAA,EAmBV,MAAME,UAA2B,KAAM,CAC5C,YAAYC,EAAiB,CAC3B,MAAMA,CAAO,EACb,KAAK,KAAO,oBAAA,CAEhB"}