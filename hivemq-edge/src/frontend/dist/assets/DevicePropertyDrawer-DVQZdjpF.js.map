{"version":3,"file":"DevicePropertyDrawer-DVQZdjpF.js","sources":["../../src/modules/Device/utils/tags.utils.ts","../../src/api/hooks/useProtocolAdapters/useCreateDomainTags.ts","../../src/api/hooks/useProtocolAdapters/useDeleteDomainTags.ts","../../src/api/hooks/useProtocolAdapters/useUpdateAllDomainTags.ts","../../src/api/hooks/useProtocolAdapters/useUpdateDomainTags.ts","../../src/api/hooks/useDomainModel/useGetDomainTagSchema.ts","../../src/modules/Device/hooks/useTagManager.ts","../../src/modules/Device/components/DeviceTagList.tsx","../../src/modules/Workspace/components/drawers/DevicePropertyDrawer.tsx"],"sourcesContent":["import type { JsonNode } from '@/api/__generated__'\nimport type { RJSFSchema } from '@rjsf/utils'\n\nimport i18n from '@/config/i18n.config.ts'\n\nexport const formatTagDataPoint = (data?: JsonNode) => {\n  if (data) return JSON.stringify(data, null, 4)\n  return i18n.t('device.drawer.tagList.formatter.unknownFormat')\n}\n\nconst omit = (obj: JsonNode, ...props: string[]) => {\n  const result = { ...obj }\n  props.forEach(function (prop) {\n    delete result[prop]\n  })\n  return result\n}\n\n/**\n * @deprecated This is a mock, missing support for tags\n * Note that the stubs generated from the OpenAPI include schemas (see src/api/__generated__/schemas) but they are not usable\n * due to the lack of connection between the instances.\n * TheLibrary is not supported anymore; it needs replacement, see https://hivemq.kanbanize.com/ctrl_board/57/cards/24980/details/\n */\nexport const createSchema = (items: RJSFSchema) => {\n  // TODO[NVL] This is total rubbish. The DeviceDataPoint schema should be self-extracted from the OpenAPI specs rather than second-guessed\n  const sourceProperties = omit(\n    items.properties as JsonNode,\n    'mqttQos',\n    'mqttTopic',\n    'messageExpiryInterval',\n    'publishingInterval',\n    'serverQueueSize',\n    'includeTagNames',\n    'includeTimestamp',\n    'mqttUserProperties'\n  )\n  if (!Object.keys(sourceProperties).length) throw new Error(i18n.t('device.errors.noFormSchema'))\n\n  return {\n    $schema: 'https://json-schema.org/draft/2020-12/schema',\n    definitions: {\n      DeviceDataPoint: {\n        type: 'object',\n        title: 'Tag Address',\n        description: `The address of the data-point on the device.`,\n        properties: sourceProperties,\n      },\n      DomainTag: {\n        type: 'string',\n        title: 'Tag Name',\n        description: `The Tag associated with the data-point.`,\n        format: 'mqtt-tag',\n      },\n    },\n    properties: {\n      items: {\n        type: 'array',\n        title: 'List of tags',\n        description: 'The list of all tags defined in the device',\n        items: {\n          description: `A tag associated with a data point on a device connected to the adapter`,\n          required: ['tag'],\n          properties: {\n            tag: {\n              $ref: '#/definitions/DomainTag',\n            },\n            dataPoint: {\n              $ref: '#/definitions/DeviceDataPoint',\n            },\n          },\n        },\n      },\n    },\n  } as RJSFSchema\n}\n","import { useMutation, useQueryClient } from '@tanstack/react-query'\nimport type { ApiError } from '../../__generated__'\nimport { type DomainTag } from '../../__generated__'\n\nimport { useHttpClient } from '@/api/hooks/useHttpClient/useHttpClient.ts'\nimport { QUERY_KEYS } from '@/api/utils.ts'\n\ninterface CreateDomainTagsProps {\n  adapterId: string\n  requestBody: DomainTag\n}\n\nexport const useCreateDomainTags = () => {\n  const appClient = useHttpClient()\n  const queryClient = useQueryClient()\n\n  const createAdapterDomainTags = ({ adapterId, requestBody }: CreateDomainTagsProps) => {\n    return appClient.protocolAdapters.addAdapterDomainTags(adapterId, requestBody)\n  }\n\n  return useMutation<unknown, ApiError, CreateDomainTagsProps>({\n    mutationFn: createAdapterDomainTags,\n    onSuccess: (_data, variables) => {\n      queryClient.invalidateQueries({ queryKey: [QUERY_KEYS.ADAPTERS, variables.adapterId, QUERY_KEYS.DISCOVERY_TAGS] })\n    },\n  })\n}\n","import { useMutation, useQueryClient } from '@tanstack/react-query'\nimport type { ApiError } from '../../__generated__'\n\nimport { useHttpClient } from '@/api/hooks/useHttpClient/useHttpClient.ts'\nimport { QUERY_KEYS } from '@/api/utils.ts'\n\ninterface DeleteDomainTagsProps {\n  adapterId: string\n  tagId: string\n}\n\nexport const useDeleteDomainTags = () => {\n  const appClient = useHttpClient()\n  const queryClient = useQueryClient()\n\n  const deleteAdapterDomainTags = ({ adapterId, tagId }: DeleteDomainTagsProps) => {\n    return appClient.protocolAdapters.deleteAdapterDomainTags(adapterId, tagId)\n  }\n\n  return useMutation<unknown, ApiError, DeleteDomainTagsProps>({\n    mutationFn: deleteAdapterDomainTags,\n    onSuccess: (_data, variables) => {\n      queryClient.invalidateQueries({ queryKey: [QUERY_KEYS.ADAPTERS, variables.adapterId, QUERY_KEYS.DISCOVERY_TAGS] })\n    },\n  })\n}\n","import { useMutation, useQueryClient } from '@tanstack/react-query'\nimport type { ApiError } from '../../__generated__'\nimport { type DomainTagList } from '../../__generated__'\n\nimport { useHttpClient } from '@/api/hooks/useHttpClient/useHttpClient.ts'\nimport { QUERY_KEYS } from '@/api/utils.ts'\n\ninterface UpdateAllDomainTagsProps {\n  adapterId: string\n  requestBody: DomainTagList\n}\n\nexport const useUpdateAllDomainTags = () => {\n  const appClient = useHttpClient()\n  const queryClient = useQueryClient()\n\n  const updateAdapterDomainTags = ({ adapterId, requestBody }: UpdateAllDomainTagsProps) => {\n    return appClient.protocolAdapters.updateAdapterDomainTags(adapterId, requestBody)\n  }\n\n  return useMutation<unknown, ApiError, UpdateAllDomainTagsProps>({\n    mutationFn: updateAdapterDomainTags,\n    onSuccess: (_data, variables) => {\n      queryClient.invalidateQueries({ queryKey: [QUERY_KEYS.ADAPTERS, variables.adapterId, QUERY_KEYS.DISCOVERY_TAGS] })\n    },\n  })\n}\n","import { useMutation, useQueryClient } from '@tanstack/react-query'\nimport type { ApiError } from '../../__generated__'\nimport { type DomainTag } from '../../__generated__'\n\nimport { useHttpClient } from '@/api/hooks/useHttpClient/useHttpClient.ts'\nimport { QUERY_KEYS } from '@/api/utils.ts'\n\ninterface UpdateDomainTagsProps {\n  adapterId: string\n  tagId: string\n  requestBody: DomainTag\n}\n\nexport const useUpdateDomainTags = () => {\n  const appClient = useHttpClient()\n  const queryClient = useQueryClient()\n\n  const updateAdapterDomainTags = ({ adapterId, tagId, requestBody }: UpdateDomainTagsProps) => {\n    return appClient.protocolAdapters.updateAdapterDomainTag(adapterId, tagId, requestBody)\n  }\n\n  return useMutation<unknown, ApiError, UpdateDomainTagsProps>({\n    mutationFn: updateAdapterDomainTags,\n    onSuccess: (_data, variables) => {\n      queryClient.invalidateQueries({ queryKey: [QUERY_KEYS.ADAPTERS, variables.adapterId, QUERY_KEYS.DISCOVERY_TAGS] })\n    },\n  })\n}\n","import { useQuery } from '@tanstack/react-query'\nimport type { ApiError } from '@/api/__generated__'\nimport { type TagSchema } from '@/api/__generated__'\n\nimport { QUERY_KEYS } from '@/api/utils.ts'\nimport { useHttpClient } from '@/api/hooks/useHttpClient/useHttpClient.ts'\n\nexport const useGetDomainTagSchema = (protocolId: string | undefined) => {\n  const appClient = useHttpClient()\n\n  return useQuery<TagSchema, ApiError>({\n    queryKey: [QUERY_KEYS.DISCOVERY_TAGS, protocolId],\n    queryFn: () => appClient.protocolAdapters.getTagSchema(protocolId as string),\n    enabled: Boolean(protocolId),\n  })\n}\n","import { useMemo } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport type { RJSFSchema } from '@rjsf/utils'\nimport { useToast } from '@chakra-ui/react'\n\nimport type { DomainTag, DomainTagList } from '@/api/__generated__'\nimport { useGetDomainTags } from '@/api/hooks/useProtocolAdapters/useGetDomainTags.ts'\nimport { useCreateDomainTags } from '@/api/hooks/useProtocolAdapters/useCreateDomainTags.ts'\nimport { useDeleteDomainTags } from '@/api/hooks/useProtocolAdapters/useDeleteDomainTags.ts'\nimport { useUpdateAllDomainTags } from '@/api/hooks/useProtocolAdapters/useUpdateAllDomainTags.ts'\nimport { useUpdateDomainTags } from '@/api/hooks/useProtocolAdapters/useUpdateDomainTags.ts'\nimport { useGetDomainTagSchema } from '@/api/hooks/useDomainModel/useGetDomainTagSchema.ts'\nimport useGetAdapterInfo from '@/modules/ProtocolAdapters/hooks/useGetAdapterInfo.ts'\nimport type { ManagerContextType } from '@/modules/Mappings/types.ts'\n\nexport const useTagManager = (adapterId: string) => {\n  const { t } = useTranslation()\n  const toast = useToast()\n\n  const { protocol, isLoading: protocolLoad } = useGetAdapterInfo(adapterId)\n  const { data: tagSchema, isError: isSchemaError, error: errorSchema } = useGetDomainTagSchema(protocol?.id)\n  const { data: tagList, isLoading, isError: isTagError, error: errorTag } = useGetDomainTags(adapterId)\n\n  const createMutator = useCreateDomainTags()\n  const deleteMutator = useDeleteDomainTags()\n  const updateMutator = useUpdateDomainTags()\n  const updateCollectionMutator = useUpdateAllDomainTags()\n\n  const tagListSchema = useMemo<RJSFSchema | undefined>(() => {\n    if (!tagSchema) return undefined\n\n    const { $schema: sc, ...rest } = tagSchema?.configSchema as RJSFSchema\n    // TODO[28249] Handle manually until backend fixed\n    const { properties } = rest\n\n    const safeSchema = {\n      ...rest,\n      properties: {\n        ...properties,\n        protocolId: {\n          const: protocol?.id,\n          default: protocol?.id,\n        },\n      },\n    }\n\n    return {\n      // $schema: 'https://json-schema.org/draft/2020-12/schema',\n      definitions: {\n        TagSchema: safeSchema,\n      },\n      properties: {\n        items: {\n          type: 'array',\n          title: 'List of tags',\n          description: 'The list of all tags defined in the device',\n          items: {\n            $ref: '#/definitions/TagSchema',\n          },\n        },\n      },\n    }\n  }, [protocol?.id, tagSchema])\n\n  // TODO[NVL] Insert Edge-wide toast configuration (need refactoring)\n  const formatToast = (operation: string) => ({\n    success: {\n      title: t(`device.drawer.tagList.toast.${operation}.title`),\n      description: t(`device.drawer.tagList.toast.${operation}.description`, { context: 'success' }),\n    },\n    error: {\n      title: t(`device.drawer.tagList.toast.${operation}.title`),\n      description: t(`device.drawer.tagList.toast.${operation}.description`, { context: 'error' }),\n    },\n    loading: {\n      title: t(`device.drawer.tagList.toast.${operation}.title`),\n      description: t('device.drawer.tagList.toast.description', { context: 'loading' }),\n    },\n  })\n\n  const onDelete = (tagId: string) => {\n    if (!adapterId) return\n    toast.promise(\n      deleteMutator.mutateAsync({ adapterId: adapterId, tagId: encodeURIComponent(tagId) }),\n      formatToast('delete')\n    )\n  }\n\n  const onCreate = (tag: DomainTag) => {\n    if (!adapterId) return\n    toast.promise(createMutator.mutateAsync({ adapterId: adapterId, requestBody: tag }), formatToast('create'))\n  }\n\n  const onUpdate = (tagId: string, tag: DomainTag) => {\n    if (!adapterId) return\n    toast.promise(\n      updateMutator.mutateAsync({ adapterId: adapterId, tagId: encodeURIComponent(tagId), requestBody: tag }),\n      formatToast('update')\n    )\n  }\n\n  const onupdateCollection = (tags: DomainTagList) => {\n    if (!adapterId) return\n    toast.promise(\n      updateCollectionMutator.mutateAsync({ adapterId: adapterId, requestBody: tags }),\n      formatToast('updateCollection')\n    )\n  }\n\n  const context: ManagerContextType<DomainTagList> = {\n    schema: tagListSchema,\n    uiSchema: {\n      'ui:submitButtonOptions': {\n        norender: true,\n      },\n\n      items: {\n        items: {\n          'ui:order': ['name', 'description', '*'],\n          'ui:collapsable': {\n            titleKey: 'name',\n          },\n          protocolId: {\n            'ui:widget': 'hidden',\n          },\n        },\n      },\n    },\n    formData: tagList || { items: [] },\n  }\n\n  return {\n    // The context of the operations\n    context,\n    // The CRUD operations\n    data: tagList || { items: [] },\n    onCreate,\n    onDelete,\n    onUpdate,\n    onupdateCollection,\n    // The state (as in ReactQuery)\n    isLoading: isLoading || protocolLoad,\n    isError: isTagError || isSchemaError,\n    error: errorTag?.message || errorSchema?.message,\n    isPending:\n      createMutator.isPending ||\n      updateMutator.isPending ||\n      deleteMutator.isPending ||\n      updateCollectionMutator.isPending, // assuming only one operation at a time\n  }\n}\n","import type { FC } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport { Card, CardBody, CardHeader, Code, Flex, Heading, HStack, List, ListItem } from '@chakra-ui/react'\nimport { LuFileCog } from 'react-icons/lu'\n\nimport type { Adapter, DomainTagList } from '@/api/__generated__'\nimport IconButton from '@/components/Chakra/IconButton.tsx'\nimport LoaderSpinner from '@/components/Chakra/LoaderSpinner.tsx'\nimport ErrorMessage from '@/components/ErrorMessage.tsx'\nimport { PLCTag } from '@/components/MQTT/EntityTag.tsx'\nimport ArrayItemDrawer from '@/components/rjsf/SplitArrayEditor/components/ArrayItemDrawer.tsx'\nimport { formatTagDataPoint } from '@/modules/Device/utils/tags.utils.ts'\nimport { useTagManager } from '@/modules/Device/hooks/useTagManager.ts'\n\ninterface DeviceTagListProps {\n  adapter: Adapter\n}\n\nconst DeviceTagList: FC<DeviceTagListProps> = ({ adapter }) => {\n  const { t } = useTranslation()\n  const { data, isLoading, isError, context, onupdateCollection } = useTagManager(adapter.id)\n\n  const onHandleSubmit = (data: unknown) => {\n    if (data) onupdateCollection(data as DomainTagList)\n  }\n\n  return (\n    <Card size=\"sm\">\n      <CardHeader>\n        <Flex>\n          <Flex flex=\"1\" alignItems=\"center\" flexWrap=\"wrap\">\n            <Heading size=\"sm\">{t('device.drawer.tagList.title')}</Heading>\n          </Flex>\n          <ArrayItemDrawer\n            header={t('device.drawer.tagEditor.title')}\n            context={context}\n            onSubmit={onHandleSubmit}\n            trigger={({ onOpen: onOpenArrayDrawer }) => (\n              <IconButton\n                variant=\"primary\"\n                aria-label={t('device.drawer.tagList.cta.edit')}\n                icon={<LuFileCog />}\n                isDisabled={isLoading || isError}\n                onClick={onOpenArrayDrawer}\n              />\n            )}\n          />\n        </Flex>\n      </CardHeader>\n      <CardBody>\n        {isLoading && <LoaderSpinner />}\n        {isError && <ErrorMessage message={t('device.errors.noTagLoaded')} />}\n        {!isError && !isLoading && !data?.items?.length && (\n          <ErrorMessage message={t('device.errors.noTagCreated')} status=\"info\" />\n        )}\n        {!isError && !isLoading && data && (\n          // TODO[NVL] Too simple. Use a paginated table\n          <List data-testid=\"device-tags-list\">\n            {data.items?.map((domainTag) => (\n              <ListItem key={domainTag.name} m={1} display=\"flex\" justifyContent=\"space-between\">\n                <HStack w=\"100%\" justifyContent=\"space-between\">\n                  <PLCTag tagTitle={domainTag.name} />{' '}\n                  <Code size=\"xs\" textAlign=\"end\">\n                    {formatTagDataPoint(domainTag.definition)}\n                  </Code>\n                </HStack>\n              </ListItem>\n            ))}\n          </List>\n        )}\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default DeviceTagList\n","import type { FC } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport type { Node } from 'reactflow'\nimport { getIncomers } from 'reactflow'\nimport {\n  Drawer,\n  DrawerBody,\n  DrawerCloseButton,\n  DrawerContent,\n  DrawerHeader,\n  DrawerOverlay,\n  Text,\n} from '@chakra-ui/react'\n\nimport type { Adapter } from '@/api/__generated__'\nimport { useGetAdapterTypes } from '@/api/hooks/useProtocolAdapters/useGetAdapterTypes.ts'\nimport LoaderSpinner from '@/components/Chakra/LoaderSpinner.tsx'\nimport ErrorMessage from '@/components/ErrorMessage.tsx'\nimport DeviceTagList from '@/modules/Device/components/DeviceTagList.tsx'\nimport useWorkspaceStore from '@/modules/Workspace/hooks/useWorkspaceStore.ts'\nimport type { DeviceMetadata, NodeTypes } from '@/modules/Workspace/types.ts'\nimport NodeNameCard from '@/modules/Workspace/components/parts/NodeNameCard.tsx'\n\ninterface DevicePropertyDrawerProps {\n  nodeId: string\n  selectedNode: Node<DeviceMetadata>\n  isOpen: boolean\n  onClose: () => void\n  onEditEntity: () => void\n}\n\nconst DevicePropertyDrawer: FC<DevicePropertyDrawerProps> = ({ isOpen, selectedNode, onClose }) => {\n  const { t } = useTranslation()\n  const { nodes, edges } = useWorkspaceStore()\n  const { data, isError, isLoading } = useGetAdapterTypes()\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const incomers = getIncomers<Adapter, any>(selectedNode, nodes, edges)\n  const adapter = incomers.find(Boolean)?.data\n  const protocol = data?.items?.find((e) => e.id === adapter?.type)\n\n  if (isLoading) return <LoaderSpinner />\n  if (isError || !adapter || !protocol) return <ErrorMessage message={t('device.errors.noAdapter')} />\n\n  return (\n    <Drawer isOpen={isOpen} placement=\"right\" size=\"md\" onClose={onClose} variant=\"hivemq\">\n      <DrawerOverlay />\n      <DrawerContent aria-label={t('workspace.property.header', { context: selectedNode.type })}>\n        <DrawerCloseButton />\n        <DrawerHeader>\n          <Text> {t('workspace.property.header', { context: selectedNode.type })}</Text>\n          <NodeNameCard\n            name={selectedNode.data.name}\n            type={selectedNode.type as NodeTypes}\n            description={selectedNode.data.id}\n          />\n        </DrawerHeader>\n        <DrawerBody display=\"flex\" flexDirection=\"column\" gap={6}>\n          <DeviceTagList adapter={adapter} />\n        </DrawerBody>\n      </DrawerContent>\n    </Drawer>\n  )\n}\n\nexport default DevicePropertyDrawer\n"],"names":["formatTagDataPoint","data","i18n","useCreateDomainTags","appClient","useHttpClient","queryClient","useQueryClient","useMutation","adapterId","requestBody","_data","variables","QUERY_KEYS","useDeleteDomainTags","tagId","useUpdateAllDomainTags","useUpdateDomainTags","useGetDomainTagSchema","protocolId","useQuery","useTagManager","t","useTranslation","toast","useToast","protocol","protocolLoad","useGetAdapterInfo","tagSchema","isSchemaError","errorSchema","tagList","isLoading","isTagError","errorTag","useGetDomainTags","createMutator","deleteMutator","updateMutator","updateCollectionMutator","tagListSchema","useMemo","sc","rest","properties","formatToast","operation","tag","tags","DeviceTagList","adapter","isError","context","onupdateCollection","onHandleSubmit","jsxs","Card","jsx","CardHeader","Flex","Heading","ArrayItemDrawer","onOpenArrayDrawer","IconButton","LuFileCog","CardBody","LoaderSpinner","ErrorMessage","_a","List","domainTag","ListItem","HStack","PLCTag","Code","DevicePropertyDrawer","isOpen","selectedNode","onClose","nodes","edges","useWorkspaceStore","useGetAdapterTypes","getIncomers","_b","e","Drawer","DrawerOverlay","DrawerContent","DrawerCloseButton","DrawerHeader","Text","NodeNameCard","DrawerBody"],"mappings":"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"}