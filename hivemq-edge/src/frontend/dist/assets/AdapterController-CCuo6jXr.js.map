{"version":3,"file":"AdapterController-CCuo6jXr.js","sources":["../../src/api/hooks/useProtocolAdapters/useCreateProtocolAdapter.ts","../../src/api/hooks/useProtocolAdapters/useUpdateProtocolAdapter.ts","../../src/modules/ProtocolAdapters/components/drawers/AdapterInstanceDrawer.tsx","../../src/modules/ProtocolAdapters/components/AdapterController.tsx"],"sourcesContent":["import { useMutation, useQueryClient } from '@tanstack/react-query'\nimport type { Adapter, ApiError, StatusList } from '../../__generated__'\nimport { Status } from '../../__generated__'\n\nimport { useHttpClient } from '@/api/hooks/useHttpClient/useHttpClient.ts'\nimport { QUERY_KEYS } from '@/api/utils.ts'\n\ninterface CreateProtocolAdapterProps {\n  adapterType: string\n  requestBody: Adapter\n}\n\nexport const useCreateProtocolAdapter = () => {\n  const appClient = useHttpClient()\n  const queryClient = useQueryClient()\n\n  const createProtocolAdapter = ({ adapterType, requestBody }: CreateProtocolAdapterProps) => {\n    return appClient.protocolAdapters.addAdapter(adapterType, requestBody)\n  }\n\n  return useMutation<unknown, ApiError, CreateProtocolAdapterProps>({\n    mutationFn: createProtocolAdapter,\n    onMutate: (createProtocolAdapter) => {\n      queryClient.setQueryData<StatusList>([QUERY_KEYS.ADAPTERS, QUERY_KEYS.CONNECTION_STATUS], (old) => {\n        const optimisticUpdate: Status = {\n          connection: Status.connection.DISCONNECTED,\n          id: createProtocolAdapter.requestBody.id,\n          type: createProtocolAdapter.requestBody.type,\n        }\n        return {\n          items: [...(old?.items || []), optimisticUpdate],\n        }\n      })\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [QUERY_KEYS.ADAPTERS] })\n    },\n  })\n}\n","import { useMutation, useQueryClient } from '@tanstack/react-query'\nimport type { Adapter, ApiError } from '../../__generated__'\nimport { useHttpClient } from '@/api/hooks/useHttpClient/useHttpClient.ts'\nimport { QUERY_KEYS } from '@/api/utils.ts'\n\ninterface UpdateBridgeProps {\n  adapterId: string\n  requestBody: Adapter\n}\n\nexport const useUpdateProtocolAdapter = () => {\n  const appClient = useHttpClient()\n  const queryClient = useQueryClient()\n\n  const updateProtocolAdapter = ({ adapterId, requestBody }: UpdateBridgeProps) => {\n    return appClient.protocolAdapters.updateAdapter(adapterId, requestBody)\n  }\n\n  return useMutation<unknown, ApiError, UpdateBridgeProps>({\n    mutationFn: updateProtocolAdapter,\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [QUERY_KEYS.ADAPTERS] })\n    },\n  })\n}\n","import type { FC } from 'react'\nimport { useMemo } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport { useParams } from 'react-router-dom'\nimport type { IChangeEvent } from '@rjsf/core'\nimport type { RJSFSchema } from '@rjsf/utils'\n\nimport {\n  Button,\n  Drawer,\n  DrawerBody,\n  DrawerCloseButton,\n  DrawerContent,\n  DrawerFooter,\n  DrawerHeader,\n  DrawerOverlay,\n  Flex,\n  Text,\n} from '@chakra-ui/react'\n\nimport type { Adapter, ApiError, ProtocolAdapter } from '@/api/__generated__'\nimport { useGetAdapterTypes } from '@/api/hooks/useProtocolAdapters/useGetAdapterTypes.ts'\nimport { useListProtocolAdapters } from '@/api/hooks/useProtocolAdapters/useListProtocolAdapters.ts'\n\nimport LoaderSpinner from '@/components/Chakra/LoaderSpinner.tsx'\nimport { customUniqueAdapterValidate } from '@/modules/ProtocolAdapters/utils/validation-utils.ts'\nimport { getRequiredUiSchema } from '@/modules/ProtocolAdapters/utils/uiSchema.utils.ts'\nimport type { AdapterContext } from '@/modules/ProtocolAdapters/types.ts'\n\nimport ChakraRJSForm from '@/components/rjsf/Form/ChakraRJSForm.tsx'\nimport NodeNameCard from '@/modules/Workspace/components/parts/NodeNameCard.tsx'\nimport { NodeTypes } from '@/modules/Workspace/types.ts'\n\ninterface AdapterInstanceDrawerProps {\n  adapterType?: string\n  isNewAdapter?: boolean\n  isOpen: boolean\n  isSubmitting: boolean\n  error?: ApiError | null\n  onClose: () => void\n  onSubmit: (data: Adapter) => void\n  onDelete?: () => void\n}\n\nconst AdapterInstanceDrawer: FC<AdapterInstanceDrawerProps> = ({\n  adapterType,\n  isNewAdapter = false,\n  isOpen,\n  onClose,\n  onSubmit,\n}) => {\n  const { t } = useTranslation()\n  const { data } = useGetAdapterTypes()\n  const { data: allAdapters } = useListProtocolAdapters()\n  const { adapterId } = useParams()\n\n  const { schema, uiSchema, name, logo, isDiscoverable } = useMemo(() => {\n    const adapter: ProtocolAdapter | undefined = data?.items?.find((e) => e.id === adapterType)\n    const { configSchema, uiSchema, capabilities } = adapter || {}\n\n    return {\n      isDiscoverable: Boolean(capabilities?.includes('DISCOVER')),\n      schema: configSchema,\n      name: adapter?.name,\n      logo: adapter?.logoUrl,\n      uiSchema: getRequiredUiSchema(uiSchema, isNewAdapter),\n    }\n  }, [data?.items, isNewAdapter, adapterType])\n\n  const defaultValues = useMemo(() => {\n    if (isNewAdapter || !adapterId) return undefined\n    const { config } = allAdapters?.find((adapter) => adapter.id === adapterId) || {}\n\n    return config\n  }, [isNewAdapter, adapterId, allAdapters])\n\n  const onValidate = (data: IChangeEvent<Adapter, RJSFSchema>) => {\n    if (data.formData) onSubmit(data.formData)\n  }\n\n  const context: AdapterContext = {\n    isEditAdapter: !isNewAdapter,\n    isDiscoverable: isDiscoverable,\n    adapterType: adapterType,\n    adapterId: adapterId,\n  }\n\n  return (\n    <Drawer variant=\"hivemq\" closeOnOverlayClick={false} size=\"lg\" isOpen={isOpen} placement=\"right\" onClose={onClose}>\n      <DrawerOverlay />\n      <DrawerContent aria-label={t('protocolAdapter.drawer.label')}>\n        {!schema && <LoaderSpinner />}\n        {schema && (\n          <>\n            <DrawerCloseButton />\n            <DrawerHeader id=\"adapter-instance-header\" borderBottomWidth=\"1px\">\n              <Text>\n                {isNewAdapter ? t('protocolAdapter.drawer.title.create') : t('protocolAdapter.drawer.title.update')}\n              </Text>\n              <NodeNameCard name={name} type={NodeTypes.ADAPTER_NODE} icon={logo} />\n            </DrawerHeader>\n            <DrawerBody>\n              {schema && (\n                <ChakraRJSForm\n                  id=\"adapter-instance-form\"\n                  schema={schema}\n                  uiSchema={uiSchema}\n                  formData={defaultValues}\n                  formContext={context}\n                  onSubmit={onValidate}\n                  // TODO[NVL] Types need fixing\n                  // @ts-ignore\n                  customValidate={customUniqueAdapterValidate(schema, allAdapters)}\n                />\n              )}\n            </DrawerBody>\n\n            <DrawerFooter borderTopWidth=\"1px\">\n              <Flex flexGrow={1} justifyContent=\"flex-end\">\n                <Button variant=\"primary\" type=\"submit\" form=\"adapter-instance-form\">\n                  {isNewAdapter ? t('protocolAdapter.action.create') : t('protocolAdapter.action.update')}\n                </Button>\n              </Flex>\n            </DrawerFooter>\n          </>\n        )}\n      </DrawerContent>\n    </Drawer>\n  )\n}\n\nexport default AdapterInstanceDrawer\n","import type { FC, ReactNode } from 'react'\nimport { useEffect, useState } from 'react'\nimport { useDisclosure } from '@chakra-ui/react'\nimport { useLocation, useNavigate, useParams } from 'react-router-dom'\nimport type { SubmitHandler } from 'react-hook-form'\nimport { useTranslation } from 'react-i18next'\n\nimport type { Adapter, ApiError } from '@/api/__generated__'\nimport { useCreateProtocolAdapter } from '@/api/hooks/useProtocolAdapters/useCreateProtocolAdapter.ts'\nimport { useUpdateProtocolAdapter } from '@/api/hooks/useProtocolAdapters/useUpdateProtocolAdapter.ts'\n\nimport { useEdgeToast } from '@/hooks/useEdgeToast/useEdgeToast.tsx'\n\nimport type { AdapterNavigateState } from '@/modules/ProtocolAdapters/types.ts'\nimport { ProtocolAdapterTabIndex } from '@/modules/ProtocolAdapters/types.ts'\nimport AdapterInstanceDrawer from '@/modules/ProtocolAdapters/components/drawers/AdapterInstanceDrawer.tsx'\nimport { useListProtocolAdapters } from '@/api/hooks/useProtocolAdapters/useListProtocolAdapters.ts'\n\ninterface AdapterEditorProps {\n  isNew?: boolean\n  children?: ReactNode\n}\n\nconst AdapterController: FC<AdapterEditorProps> = ({ children, isNew }) => {\n  const { t } = useTranslation()\n  const { successToast, errorToast } = useEdgeToast()\n\n  const [adaptorType, setAdaptorType] = useState<string | undefined>(undefined)\n  const { isOpen: isInstanceOpen, onOpen: onInstanceOpen, onClose: onInstanceClose } = useDisclosure()\n  const createProtocolAdapter = useCreateProtocolAdapter()\n  const updateProtocolAdapter = useUpdateProtocolAdapter()\n  const navigate = useNavigate()\n  const { state } = useLocation()\n  const { data: allAdapters } = useListProtocolAdapters()\n  const { adapterId } = useParams()\n\n  useEffect(() => {\n    if ((state as AdapterNavigateState)?.protocolAdapterType) {\n      setAdaptorType(state.protocolAdapterType)\n    }\n  }, [state])\n\n  useEffect(() => {\n    if (!allAdapters) return\n    const instance = allAdapters?.find((adapter) => adapter.id === adapterId)\n    if (!isNew && !instance) {\n      errorToast(\n        {\n          id: 'adapter-open-noExist',\n          title: t('protocolAdapter.toast.view.title'),\n          description: t('protocolAdapter.toast.view.error'),\n        },\n        new Error(t('protocolAdapter.toast.view.noLongerExist', { id: adapterId }))\n      )\n      navigate('/protocol-adapters', { replace: true })\n      return\n    }\n\n    if (adaptorType) {\n      onInstanceOpen()\n    }\n  }, [adapterId, adaptorType, allAdapters, errorToast, isNew, navigate, onInstanceOpen, t])\n\n  const handleInstanceClose = () => {\n    onInstanceClose()\n    navigate('/protocol-adapters', { state: { protocolAdapterTabIndex: ProtocolAdapterTabIndex.PROTOCOLS } })\n  }\n\n  const handleInstanceSubmit: SubmitHandler<Adapter> = (props) => {\n    const { id, ...rest } = props\n\n    if (isNew) {\n      createProtocolAdapter\n        .mutateAsync({\n          adapterType: adaptorType as string,\n          requestBody: {\n            id: id,\n            type: adaptorType,\n            // @ts-ignore Need to review the type of the stub\n            config: { ...rest, id: id },\n          },\n        })\n        .then(() => {\n          successToast({\n            title: t('protocolAdapter.toast.create.title'),\n            description: t('protocolAdapter.toast.create.description'),\n          })\n        })\n        .catch((err: ApiError) =>\n          errorToast(\n            {\n              title: t('protocolAdapter.toast.create.title'),\n              description: t('protocolAdapter.toast.create.error'),\n            },\n            err\n          )\n        )\n    } else {\n      updateProtocolAdapter\n        .mutateAsync({\n          adapterId: id,\n          requestBody: {\n            id: id,\n            type: adaptorType,\n            // @ts-ignore Need to review the type of the stub\n            config: { ...rest, id: id },\n          },\n        })\n        .then(() => {\n          successToast({\n            title: t('protocolAdapter.toast.update.title'),\n            description: t('protocolAdapter.toast.update.description'),\n          })\n        })\n        .catch((err: ApiError) =>\n          errorToast(\n            {\n              title: t('protocolAdapter.toast.update.title'),\n              description: t('protocolAdapter.toast.update.error'),\n            },\n            err\n          )\n        )\n    }\n\n    onInstanceClose()\n    const adapterNavigateState: AdapterNavigateState = {\n      protocolAdapterTabIndex: ProtocolAdapterTabIndex.ADAPTERS,\n      selectedActiveAdapter: { isNew: !!isNew, isOpen: false, adapterId: id },\n    }\n    navigate('/protocol-adapters', {\n      state: adapterNavigateState,\n    })\n  }\n\n  return (\n    <div>\n      <AdapterInstanceDrawer\n        adapterType={adaptorType}\n        isNewAdapter={isNew}\n        isOpen={isInstanceOpen}\n        isSubmitting={false}\n        onSubmit={handleInstanceSubmit}\n        onClose={handleInstanceClose}\n      />\n      {children}\n    </div>\n  )\n}\n\nexport default AdapterController\n"],"names":["useCreateProtocolAdapter","appClient","useHttpClient","queryClient","useQueryClient","useMutation","adapterType","requestBody","createProtocolAdapter","QUERY_KEYS","old","optimisticUpdate","Status","useUpdateProtocolAdapter","adapterId","AdapterInstanceDrawer","isNewAdapter","isOpen","onClose","onSubmit","t","useTranslation","data","useGetAdapterTypes","allAdapters","useListProtocolAdapters","useParams","schema","uiSchema","name","logo","isDiscoverable","useMemo","adapter","_a","e","configSchema","capabilities","getRequiredUiSchema","defaultValues","config","onValidate","context","jsxs","Drawer","jsx","DrawerOverlay","DrawerContent","LoaderSpinner","Fragment","DrawerCloseButton","DrawerHeader","Text","NodeNameCard","NodeTypes","DrawerBody","ChakraRJSForm","customUniqueAdapterValidate","DrawerFooter","Flex","Button","AdapterController","children","isNew","successToast","errorToast","useEdgeToast","adaptorType","setAdaptorType","useState","isInstanceOpen","onInstanceOpen","onInstanceClose","useDisclosure","updateProtocolAdapter","navigate","useNavigate","state","useLocation","useEffect","instance","handleInstanceClose","ProtocolAdapterTabIndex","handleInstanceSubmit","props","id","rest","err","adapterNavigateState"],"mappings":"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"}