{"version":3,"file":"NodePropertyDrawer-zRGFy3sh.js","sources":["../../src/modules/Workspace/components/drawers/NodePropertyDrawer.tsx"],"sourcesContent":["import type { FC } from 'react'\nimport { Link as RouterLink } from 'react-router-dom'\nimport { useTranslation } from 'react-i18next'\nimport type { Node } from 'reactflow'\nimport {\n  Button,\n  Card,\n  CardBody,\n  CardFooter,\n  CardHeader,\n  Drawer,\n  DrawerBody,\n  DrawerCloseButton,\n  DrawerContent,\n  DrawerFooter,\n  DrawerHeader,\n  DrawerOverlay,\n  Flex,\n  Text,\n} from '@chakra-ui/react'\nimport { EditIcon } from '@chakra-ui/icons'\nimport { MdOutlineEventNote } from 'react-icons/md'\n\nimport type { Adapter, Bridge } from '@/api/__generated__'\nimport { DeviceTypes } from '@/api/types/api-devices.ts'\nimport ConnectionController from '@/components/ConnectionController/ConnectionController.tsx'\nimport EventLogTable from '@/modules/EventLog/components/table/EventLogTable.tsx'\nimport MetricsContainer from '@/modules/Metrics/MetricsContainer.tsx'\nimport { ChartType } from '@/modules/Metrics/types.ts'\n\nimport { NodeTypes } from '../../types.ts'\nimport { getDefaultMetricsFor } from '../../utils/nodes-utils.ts'\nimport NodeNameCard from '@/modules/Workspace/components/parts/NodeNameCard.tsx'\nimport { useGetAdapterTypes } from '@/api/hooks/useProtocolAdapters/useGetAdapterTypes.ts'\n\ninterface NodePropertyDrawerProps {\n  nodeId: string\n  selectedNode: Node<Bridge | Adapter>\n  isOpen: boolean\n  onClose: () => void\n  onEditEntity: () => void\n}\n\nconst NodePropertyDrawer: FC<NodePropertyDrawerProps> = ({ nodeId, isOpen, selectedNode, onClose, onEditEntity }) => {\n  const { t } = useTranslation()\n  const { data: protocols } = useGetAdapterTypes()\n  const adapterProtocol =\n    selectedNode.type === NodeTypes.ADAPTER_NODE\n      ? protocols?.items?.find((e) => e.id === (selectedNode as Node<Adapter>).data.type)\n      : undefined\n\n  return (\n    <Drawer isOpen={isOpen} placement=\"right\" size=\"md\" onClose={onClose} variant=\"hivemq\">\n      <DrawerOverlay />\n      <DrawerContent aria-label={t('workspace.property.header', { context: selectedNode.type })}>\n        <DrawerCloseButton />\n        <DrawerHeader>\n          <Text>{t('workspace.property.header', { context: selectedNode.type })}</Text>\n          <NodeNameCard\n            name={selectedNode.data.id}\n            type={selectedNode.type as NodeTypes}\n            icon={adapterProtocol?.logoUrl}\n            description={adapterProtocol?.name}\n          />\n        </DrawerHeader>\n        <DrawerBody display=\"flex\" flexDirection=\"column\" gap={6}>\n          <MetricsContainer\n            nodeId={nodeId}\n            type={selectedNode.type as NodeTypes}\n            filters={[\n              {\n                id: selectedNode.data.id,\n                type:\n                  selectedNode.type === NodeTypes.ADAPTER_NODE\n                    ? `com.hivemq.edge.protocol-adapters.${(selectedNode as Node<Adapter>).data.type}`\n                    : 'com.hivemq.edge.bridge',\n              },\n            ]}\n            initMetrics={getDefaultMetricsFor(selectedNode)}\n            defaultChartType={ChartType.SAMPLE}\n          />\n          <Card size=\"sm\">\n            <CardHeader>\n              <Text>\n                {t('workspace.property.eventLog.header', { type: selectedNode.type, id: selectedNode.data.id })}\n              </Text>\n            </CardHeader>\n            <CardBody>\n              <EventLogTable\n                globalSourceFilter={[(selectedNode?.data as Adapter).id]}\n                variant=\"summary\"\n                isSingleSource\n              />\n            </CardBody>\n            <CardFooter justifyContent=\"flex-end\" pt={0}>\n              <Button\n                data-testid=\"navigate-eventLog-filtered\"\n                variant=\"link\"\n                as={RouterLink}\n                // URL options not yet supported\n                to={`/event-logs?source=${selectedNode.data.id}`}\n                rightIcon={<MdOutlineEventNote />}\n                size=\"sm\"\n              >\n                {t('workspace.property.eventLog.showMore')}\n              </Button>\n            </CardFooter>\n          </Card>\n        </DrawerBody>\n        <DrawerFooter borderTopWidth=\"1px\">\n          <Flex flexGrow={1} justifyContent=\"flex-start\" gap={5}>\n            <Button\n              data-testid=\"protocol-create-adapter\"\n              variant=\"outline\"\n              size=\"sm\"\n              rightIcon={<EditIcon />}\n              onClick={onEditEntity}\n            >\n              {t('workspace.property.modify', { context: selectedNode.type })}\n            </Button>\n            <ConnectionController\n              type={selectedNode.type === NodeTypes.ADAPTER_NODE ? DeviceTypes.ADAPTER : DeviceTypes.BRIDGE}\n              id={selectedNode.data.id}\n              status={selectedNode.data.status}\n            />\n          </Flex>\n        </DrawerFooter>\n      </DrawerContent>\n    </Drawer>\n  )\n}\n\nexport default NodePropertyDrawer\n"],"names":["NodePropertyDrawer","nodeId","isOpen","selectedNode","onClose","onEditEntity","t","useTranslation","protocols","useGetAdapterTypes","adapterProtocol","NodeTypes","_a","e","jsxs","Drawer","jsx","DrawerOverlay","DrawerContent","DrawerCloseButton","DrawerHeader","Text","NodeNameCard","DrawerBody","MetricsContainer","getDefaultMetricsFor","ChartType","Card","CardHeader","CardBody","EventLogTable","CardFooter","Button","RouterLink","MdOutlineEventNote","DrawerFooter","Flex","EditIcon","ConnectionController","DeviceTypes"],"mappings":"i1EA2CM,MAAAA,GAAkD,CAAC,CAAE,OAAAC,EAAQ,OAAAC,EAAQ,aAAAC,EAAc,QAAAC,EAAS,aAAAC,KAAmB,OAC7G,KAAA,CAAE,EAAAC,CAAE,EAAIC,EAAe,EACvB,CAAE,KAAMC,CAAU,EAAIC,EAAmB,EACzCC,EACJP,EAAa,OAASQ,EAAU,cAC5BC,EAAAJ,GAAA,YAAAA,EAAW,QAAX,YAAAI,EAAkB,KAAMC,GAAMA,EAAE,KAAQV,EAA+B,KAAK,MAC5E,OAGJ,OAAAW,OAACC,GAAO,OAAAb,EAAgB,UAAU,QAAQ,KAAK,KAAK,QAAAE,EAAkB,QAAQ,SAC5E,SAAA,CAAAY,EAAA,IAACC,EAAc,EAAA,EACfH,EAAAA,KAACI,EAAc,CAAA,aAAYZ,EAAE,4BAA6B,CAAE,QAASH,EAAa,IAAM,CAAA,EACtF,SAAA,CAAAa,EAAA,IAACG,EAAkB,EAAA,SAClBC,EACC,CAAA,SAAA,CAACJ,EAAAA,IAAAK,EAAA,CAAM,WAAE,4BAA6B,CAAE,QAASlB,EAAa,IAAM,CAAA,EAAE,EACtEa,EAAA,IAACM,EAAA,CACC,KAAMnB,EAAa,KAAK,GACxB,KAAMA,EAAa,KACnB,KAAMO,GAAA,YAAAA,EAAiB,QACvB,YAAaA,GAAA,YAAAA,EAAiB,IAAA,CAAA,CAChC,EACF,SACCa,EAAW,CAAA,QAAQ,OAAO,cAAc,SAAS,IAAK,EACrD,SAAA,CAAAP,EAAA,IAACQ,EAAA,CACC,OAAAvB,EACA,KAAME,EAAa,KACnB,QAAS,CACP,CACE,GAAIA,EAAa,KAAK,GACtB,KACEA,EAAa,OAASQ,EAAU,aAC5B,qCAAsCR,EAA+B,KAAK,IAAI,GAC9E,wBAAA,CAEV,EACA,YAAasB,EAAqBtB,CAAY,EAC9C,iBAAkBuB,EAAU,MAAA,CAC9B,EACAZ,EAAAA,KAACa,EAAK,CAAA,KAAK,KACT,SAAA,CAAAX,MAACY,EACC,CAAA,SAAAZ,EAAAA,IAACK,EACE,CAAA,SAAAf,EAAE,qCAAsC,CAAE,KAAMH,EAAa,KAAM,GAAIA,EAAa,KAAK,EAAG,CAAC,CAChG,CAAA,EACF,QACC0B,EACC,CAAA,SAAAb,EAAA,IAACc,EAAA,CACC,mBAAoB,EAAE3B,GAAA,YAAAA,EAAc,MAAiB,EAAE,EACvD,QAAQ,UACR,eAAc,EAAA,CAAA,EAElB,EACCa,EAAA,IAAAe,EAAA,CAAW,eAAe,WAAW,GAAI,EACxC,SAAAf,EAAA,IAACgB,EAAA,CACC,cAAY,6BACZ,QAAQ,OACR,GAAIC,EAEJ,GAAI,sBAAsB9B,EAAa,KAAK,EAAE,GAC9C,gBAAY+B,EAAmB,EAAA,EAC/B,KAAK,KAEJ,WAAE,sCAAsC,CAAA,CAAA,CAE7C,CAAA,CAAA,CACF,CAAA,CAAA,EACF,EACAlB,EAAA,IAACmB,EAAa,CAAA,eAAe,MAC3B,SAAArB,EAAAA,KAACsB,EAAK,CAAA,SAAU,EAAG,eAAe,aAAa,IAAK,EAClD,SAAA,CAAApB,EAAA,IAACgB,EAAA,CACC,cAAY,0BACZ,QAAQ,UACR,KAAK,KACL,gBAAYK,EAAS,EAAA,EACrB,QAAShC,EAER,WAAE,4BAA6B,CAAE,QAASF,EAAa,IAAM,CAAA,CAAA,CAChE,EACAa,EAAA,IAACsB,EAAA,CACC,KAAMnC,EAAa,OAASQ,EAAU,aAAe4B,EAAY,QAAUA,EAAY,OACvF,GAAIpC,EAAa,KAAK,GACtB,OAAQA,EAAa,KAAK,MAAA,CAAA,CAC5B,CAAA,CACF,CACF,CAAA,CAAA,CACF,CAAA,CAAA,EACF,CAEJ"}