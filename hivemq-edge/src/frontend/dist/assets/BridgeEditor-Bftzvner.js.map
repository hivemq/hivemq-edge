{"version":3,"file":"BridgeEditor-Bftzvner.js","sources":["../../src/api/__generated__/schemas/$Bridge.ts","../../src/api/__generated__/schemas/$BridgeSubscription.ts","../../src/api/__generated__/schemas/$LocalBridgeSubscription.ts","../../src/api/__generated__/schemas/$TlsConfiguration.ts","../../src/api/hooks/useGetBridges/useCreateBridge.ts","../../src/api/hooks/useGetBridges/useUpdateBridge.ts","../../src/api/hooks/useGetBridges/useDeleteBridge.ts","../../src/modules/Bridges/components/panels/ConnectionPanel.tsx","../../src/modules/Bridges/components/panels/NamePanel.tsx","../../src/modules/Bridges/components/panels/OptionsPanel.tsx","../../src/modules/Bridges/components/panels/CustomUserProperties.tsx","../../src/modules/Bridges/components/panels/SubscriptionsPanel.tsx","../../src/modules/Bridges/utils/tlsConfiguration.ts","../../src/modules/Bridges/components/panels/SecurityPanel.tsx","../../src/modules/Bridges/components/panels/PersistencePanel.tsx","../../src/modules/Bridges/components/panels/WebSocketPanel.tsx","../../src/modules/Bridges/components/panels/BridgeMainDrawer.tsx","../../src/modules/Bridges/utils/defaults.utils.ts","../../src/modules/Bridges/components/panels/BridgeEditor.tsx"],"sourcesContent":["/* generated using openapi-typescript-codegen -- do no edit */\n/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $Bridge = {\n    properties: {\n        cleanStart: {\n            type: 'boolean',\n            description: `The cleanStart value associated the the MQTT connection.`,\n            isRequired: true,\n            format: 'boolean',\n        },\n        clientId: {\n            type: 'string',\n            description: `The client identifier associated the the MQTT connection.`,\n            isNullable: true,\n            format: 'string',\n            maxLength: 65535,\n        },\n        host: {\n            type: 'string',\n            description: `The host the bridge connects to - a well formed hostname, ipv4 or ipv6 value.`,\n            isRequired: true,\n            maxLength: 255,\n        },\n        id: {\n            type: 'string',\n            description: `The bridge id, must be unique and only contain alpha numeric characters with spaces and hyphens.`,\n            isRequired: true,\n            format: 'string',\n            maxLength: 500,\n            minLength: 1,\n            pattern: '^([a-zA-Z_0-9-_])*$',\n        },\n        keepAlive: {\n            type: 'number',\n            description: `The keepAlive associated the the MQTT connection.`,\n            isRequired: true,\n            format: 'int32',\n            maximum: 65535,\n        },\n        localSubscriptions: {\n            type: 'array',\n            contains: {\n                type: 'LocalBridgeSubscription',\n            },\n        },\n        loopPreventionEnabled: {\n            type: 'boolean',\n            description: `Is loop prevention enabled on the connection`,\n            format: 'boolean',\n        },\n        loopPreventionHopCount: {\n            type: 'number',\n            description: `Loop prevention hop count`,\n            format: 'int32',\n            maximum: 100,\n        },\n        password: {\n            type: 'string',\n            description: `The password value associated the the MQTT connection.`,\n            isNullable: true,\n            format: 'string',\n            maxLength: 65535,\n        },\n        persist: {\n            type: 'boolean',\n            description: `If this flag is set to true, any outgoing mqtt messages with QoS-1 or QoS-2 will be persisted on disc in case disc persistence is active.If this flag is set to false, the QoS of any outgoing mqtt messages will be set to QoS-0 and no traffic will be persisted on disc.`,\n            isNullable: true,\n        },\n        port: {\n            type: 'number',\n            description: `The port number to connect to`,\n            isRequired: true,\n            format: 'int32',\n            maximum: 65535,\n            minimum: 1,\n        },\n        remoteSubscriptions: {\n            type: 'array',\n            contains: {\n                type: 'BridgeSubscription',\n            },\n        },\n        sessionExpiry: {\n            type: 'number',\n            description: `The sessionExpiry associated the the MQTT connection.`,\n            isRequired: true,\n            format: 'int64',\n        },\n        status: {\n            type: 'Status',\n        },\n        tlsConfiguration: {\n            type: 'TlsConfiguration',\n        },\n        username: {\n            type: 'string',\n            description: `The username value associated the the MQTT connection.`,\n            isNullable: true,\n            format: 'string',\n            maxLength: 65535,\n        },\n        websocketConfiguration: {\n            type: 'WebsocketConfiguration',\n        },\n    },\n} as const;\n","/* generated using openapi-typescript-codegen -- do no edit */\n/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $BridgeSubscription = {\n    description: `remoteSubscriptions associated with the bridge`,\n    properties: {\n        customUserProperties: {\n            type: 'array',\n            contains: {\n                type: 'BridgeCustomUserProperty',\n            },\n        },\n        destination: {\n            type: 'string',\n            description: `The destination topic for this filter set.`,\n            isRequired: true,\n        },\n        filters: {\n            type: 'array',\n            contains: {\n                type: 'string',\n                description: `The filters for this subscription.`,\n            },\n            isRequired: true,\n        },\n        maxQoS: {\n            type: 'Enum',\n            isRequired: true,\n        },\n        preserveRetain: {\n            type: 'boolean',\n            description: `The preserveRetain for this subscription`,\n        },\n    },\n} as const;\n","/* generated using openapi-typescript-codegen -- do no edit */\n/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $LocalBridgeSubscription = {\n    description: `localSubscriptions associated with the bridge`,\n    properties: {\n        customUserProperties: {\n            type: 'array',\n            contains: {\n                type: 'BridgeCustomUserProperty',\n            },\n        },\n        destination: {\n            type: 'string',\n            description: `The destination topic for this filter set.`,\n            isRequired: true,\n        },\n        excludes: {\n            type: 'array',\n            contains: {\n                type: 'string',\n                description: `The exclusion patterns`,\n                isNullable: true,\n            },\n            isNullable: true,\n        },\n        filters: {\n            type: 'array',\n            contains: {\n                type: 'string',\n                description: `The filters for this subscription.`,\n            },\n            isRequired: true,\n        },\n        maxQoS: {\n            type: 'Enum',\n            isRequired: true,\n        },\n        preserveRetain: {\n            type: 'boolean',\n            description: `The preserveRetain for this subscription`,\n        },\n        queueLimit: {\n            type: 'number',\n            description: `The limit of this bridge for QoS-1 and QoS-2 messages.`,\n            isNullable: true,\n            format: 'int64',\n        },\n    },\n} as const;\n","/* generated using openapi-typescript-codegen -- do no edit */\n/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $TlsConfiguration = {\n    description: `tlsConfiguration associated with the bridge`,\n    properties: {\n        cipherSuites: {\n            type: 'array',\n            contains: {\n                type: 'string',\n                description: `The cipherSuites from the config`,\n            },\n        },\n        enabled: {\n            type: 'boolean',\n            description: `If TLS is used`,\n        },\n        handshakeTimeout: {\n            type: 'number',\n            description: `The handshakeTimeout from the config`,\n            format: 'int32',\n        },\n        keystorePassword: {\n            type: 'string',\n            description: `The keystorePassword from the config`,\n        },\n        keystorePath: {\n            type: 'string',\n            description: `The keystorePath from the config`,\n            isNullable: true,\n        },\n        keystoreType: {\n            type: 'string',\n            description: `The keystoreType from the config`,\n        },\n        privateKeyPassword: {\n            type: 'string',\n            description: `The privateKeyPassword from the config`,\n        },\n        protocols: {\n            type: 'array',\n            contains: {\n                type: 'string',\n                description: `The protocols from the config`,\n            },\n        },\n        truststorePassword: {\n            type: 'string',\n            description: `The truststorePassword from the config`,\n        },\n        truststorePath: {\n            type: 'string',\n            description: `The truststorePath from the config`,\n            isNullable: true,\n        },\n        truststoreType: {\n            type: 'string',\n            description: `The truststoreType from the config`,\n        },\n        verifyHostname: {\n            type: 'boolean',\n            description: `The verifyHostname from the config`,\n        },\n    },\n    isNullable: true,\n} as const;\n","import { useMutation, useQueryClient } from '@tanstack/react-query'\nimport type { ApiError, Bridge } from '../../__generated__'\n\nimport { useHttpClient } from '@/api/hooks/useHttpClient/useHttpClient.ts'\nimport { QUERY_KEYS } from '@/api/utils.ts'\n\nexport const useCreateBridge = () => {\n  const appClient = useHttpClient()\n  const queryClient = useQueryClient()\n\n  const createBridge = (requestBody: Bridge) => {\n    return appClient.bridges.addBridge(requestBody)\n  }\n\n  return useMutation<unknown, ApiError, Bridge>({\n    mutationFn: createBridge,\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [QUERY_KEYS.BRIDGES] })\n    },\n  })\n}\n","import { useMutation, useQueryClient } from '@tanstack/react-query'\nimport type { ApiError, Bridge } from '../../__generated__'\nimport { useHttpClient } from '@/api/hooks/useHttpClient/useHttpClient.ts'\nimport { QUERY_KEYS } from '@/api/utils.ts'\n\ninterface UpdateBridgeProps {\n  name: string\n  requestBody: Bridge\n}\n\nexport const useUpdateBridge = () => {\n  const appClient = useHttpClient()\n  const queryClient = useQueryClient()\n\n  const updateBridge = ({ name, requestBody }: UpdateBridgeProps) => {\n    return appClient.bridges.updateBridge(name, requestBody)\n  }\n\n  return useMutation<unknown, ApiError, UpdateBridgeProps>({\n    mutationFn: updateBridge,\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [QUERY_KEYS.BRIDGES] })\n    },\n  })\n}\n","import { useMutation, useQueryClient } from '@tanstack/react-query'\nimport type { ApiError } from '../../__generated__'\n\nimport { useHttpClient } from '@/api/hooks/useHttpClient/useHttpClient.ts'\nimport { QUERY_KEYS } from '@/api/utils.ts'\n\nexport const useDeleteBridge = () => {\n  const appClient = useHttpClient()\n  const queryClient = useQueryClient()\n\n  const deleteBridge = (name: string) => {\n    return appClient.bridges.removeBridge(name)\n  }\n\n  return useMutation<string, ApiError, string>({\n    mutationFn: deleteBridge,\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [QUERY_KEYS.BRIDGES] })\n    },\n  })\n}\n","import type { FC } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport {\n  Box,\n  Flex,\n  FormControl,\n  FormErrorMessage,\n  FormLabel,\n  Input,\n  NumberDecrementStepper,\n  NumberIncrementStepper,\n  NumberInput,\n  NumberInputField,\n  NumberInputStepper,\n} from '@chakra-ui/react'\n\nimport { $Bridge } from '@/api/__generated__'\nimport { useValidationRules } from '@/api/hooks/useValidationRules/useValidationRules.ts'\nimport type { BridgePanelType } from '@/modules/Bridges/types.ts'\n\nconst ConnectionPanel: FC<BridgePanelType> = ({ form }) => {\n  const { t } = useTranslation()\n  const getRulesForProperty = useValidationRules()\n  const {\n    register,\n    formState: { errors },\n  } = form\n\n  return (\n    <Flex flexDirection=\"column\" m=\"auto\" mt={4} mb={4} gap={4}>\n      <FormControl variant=\"hivemq\" flex={1} display=\"flex\" gap={4} as=\"fieldset\">\n        <FormControl isInvalid={!!errors.host} isRequired>\n          <FormLabel htmlFor=\"host\">{t('bridge.connection.host')}</FormLabel>\n          <Input id=\"host\" type=\"text\" required {...register('host', getRulesForProperty($Bridge.properties.host))} />\n          <FormErrorMessage>{errors.host && errors.host.message}</FormErrorMessage>\n        </FormControl>\n\n        <FormControl isInvalid={!!errors.port} isRequired w=\"unset\">\n          <FormLabel htmlFor=\"port\">{t('bridge.connection.port')}</FormLabel>\n          <NumberInput allowMouseWheel focusInputOnChange w=\"100px\" id=\"port\" step={1} min={1}>\n            <NumberInputField {...register('port', getRulesForProperty($Bridge.properties.port))} />\n            <NumberInputStepper>\n              <NumberIncrementStepper />\n              <NumberDecrementStepper />\n            </NumberInputStepper>\n          </NumberInput>\n          <FormErrorMessage>{errors.port && errors.port.message}</FormErrorMessage>\n        </FormControl>\n      </FormControl>\n\n      <FormControl variant=\"hivemq\" flexGrow={1} display=\"flex\" gap={4} as=\"fieldset\">\n        <Box flexGrow={1}>\n          <FormControl isInvalid={!!errors.username}>\n            <FormLabel htmlFor=\"username\">{t('bridge.connection.username')}</FormLabel>\n            <Input\n              id=\"username\"\n              type=\"text\"\n              autoComplete=\"username\"\n              {...register('username', getRulesForProperty($Bridge.properties.username))}\n            />\n            <FormErrorMessage>{errors.username && errors.username.message}</FormErrorMessage>\n          </FormControl>\n        </Box>\n        <Box flexGrow={1}>\n          <FormControl isInvalid={!!errors.password}>\n            <FormLabel htmlFor=\"password\">{t('bridge.connection.password')}</FormLabel>\n            <Input\n              id=\"password\"\n              type=\"password\"\n              autoComplete=\"current-password\"\n              {...register('password', getRulesForProperty($Bridge.properties.password))}\n            />\n            <FormErrorMessage>{errors.password && errors.password.message}</FormErrorMessage>\n          </FormControl>\n        </Box>\n      </FormControl>\n    </Flex>\n  )\n}\n\nexport default ConnectionPanel\n","import type { FC } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport { FormControl, FormErrorMessage, FormHelperText, FormLabel, Input } from '@chakra-ui/react'\n\nimport { $Bridge } from '@/api/__generated__'\nimport { useListBridges } from '@/api/hooks/useGetBridges/useListBridges.ts'\nimport { useValidationRules } from '@/api/hooks/useValidationRules/useValidationRules.ts'\nimport type { BridgePanelType } from '@/modules/Bridges/types.ts'\n\nconst NamePanel: FC<BridgePanelType> = ({ form, isNewBridge = false }) => {\n  const { t } = useTranslation()\n  const {\n    register,\n    formState: { errors: validationErrors },\n  } = form\n  const { data } = useListBridges()\n  const getRulesForProperty = useValidationRules()\n\n  return (\n    <FormControl as=\"fieldset\" variant=\"hivemq\" isInvalid={!!validationErrors.id} isRequired={isNewBridge}>\n      <FormLabel htmlFor=\"name\">{t('bridge.options.id.label')}</FormLabel>\n      <Input\n        isDisabled={!isNewBridge}\n        autoFocus\n        id=\"name\"\n        type=\"text\"\n        autoComplete=\"name\"\n        placeholder={t('bridge.options.id.placeholder')}\n        {...register('id', {\n          ...getRulesForProperty($Bridge.properties.id),\n          validate: {\n            notUnique: (value) => {\n              if (!isNewBridge) return true\n              const isIncluded = data?.map((e) => e.id).includes(value)\n              return !isIncluded || t('bridge.options.id.error.notUnique')\n            },\n          },\n        })}\n      />\n      {!validationErrors.id && <FormHelperText>{t('bridge.options.id.helper')}</FormHelperText>}\n      <FormErrorMessage>{validationErrors.id && validationErrors.id.message}</FormErrorMessage>\n    </FormControl>\n  )\n}\n\nexport default NamePanel\n","import type { FC } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport {\n  Checkbox,\n  FormControl,\n  FormErrorMessage,\n  FormHelperText,\n  FormLabel,\n  Input,\n  NumberDecrementStepper,\n  NumberIncrementStepper,\n  NumberInput,\n  NumberInputField,\n  NumberInputStepper,\n} from '@chakra-ui/react'\nimport { $Bridge } from '@/api/__generated__'\nimport { useValidationRules } from '@/api/hooks/useValidationRules/useValidationRules.ts'\nimport type { BridgePanelType } from '@/modules/Bridges/types.ts'\n\nconst OptionsPanel: FC<BridgePanelType> = ({ form }) => {\n  const { t } = useTranslation()\n  const {\n    register,\n    formState: { errors },\n  } = form\n  const getRulesForProperty = useValidationRules()\n\n  return (\n    <FormControl variant=\"hivemq\" flexGrow={1} display=\"flex\" flexDirection=\"column\" gap={4} as=\"fieldset\">\n      <FormControl isInvalid={!!errors.cleanStart}>\n        <Checkbox id=\"cleanStart\" {...register('cleanStart')}>\n          {t('bridge.options.cleanStart.label')}\n        </Checkbox>\n        <FormHelperText> {t('bridge.options.cleanStart.helper')}</FormHelperText>\n        <FormErrorMessage>{errors.cleanStart && errors.cleanStart.message}</FormErrorMessage>\n      </FormControl>\n\n      <FormControl isInvalid={!!errors.keepAlive}>\n        <FormLabel htmlFor=\"keepAlive\">{t('bridge.options.keepAlive.label')}</FormLabel>\n        <NumberInput id=\"keepAlive\" step={1}>\n          <NumberInputField\n            {...register('keepAlive', {\n              ...getRulesForProperty($Bridge.properties.keepAlive),\n            })}\n          />\n          <NumberInputStepper>\n            <NumberIncrementStepper />\n            <NumberDecrementStepper />\n          </NumberInputStepper>\n        </NumberInput>\n        <FormHelperText> {t('bridge.options.keepAlive.helper')}</FormHelperText>\n        <FormErrorMessage>{errors.keepAlive && errors.keepAlive.message}</FormErrorMessage>\n      </FormControl>\n\n      <FormControl>\n        <FormLabel htmlFor=\"sessionExpiry\">{t('bridge.options.sessionExpiry.label')}</FormLabel>\n        <NumberInput id=\"sessionExpiry\" step={1}>\n          <NumberInputField\n            {...register('sessionExpiry', {\n              ...getRulesForProperty($Bridge.properties.sessionExpiry),\n            })}\n          />\n          <NumberInputStepper>\n            <NumberIncrementStepper />\n            <NumberDecrementStepper />\n          </NumberInputStepper>\n        </NumberInput>\n        <FormHelperText> {t('bridge.options.sessionExpiry.helper')}</FormHelperText>\n      </FormControl>\n\n      <FormControl isInvalid={!!errors.loopPreventionEnabled} mt={3}>\n        <Checkbox\n          id=\"loopPreventionEnabled\"\n          {...register('loopPreventionEnabled', {\n            ...getRulesForProperty($Bridge.properties.loopPreventionEnabled),\n          })}\n        >\n          {t('bridge.options.loopPrevention.label')}\n        </Checkbox>\n        <FormErrorMessage>{errors.loopPreventionEnabled && errors.loopPreventionEnabled.message}</FormErrorMessage>\n      </FormControl>\n\n      <FormControl isInvalid={!!errors.loopPreventionHopCount}>\n        <FormLabel htmlFor=\"loopPreventionHopCount\">{t('bridge.options.hopCount.label')}</FormLabel>\n        <NumberInput id=\"loopPreventionHopCount\" step={1}>\n          <NumberInputField\n            {...register('loopPreventionHopCount', {\n              ...getRulesForProperty($Bridge.properties.loopPreventionHopCount),\n            })}\n          />\n          <NumberInputStepper>\n            <NumberIncrementStepper />\n            <NumberDecrementStepper />\n          </NumberInputStepper>\n        </NumberInput>\n        <FormHelperText> {t('bridge.options.hopCount.helper')}</FormHelperText>\n        <FormErrorMessage>{errors.loopPreventionHopCount && errors.loopPreventionHopCount.message}</FormErrorMessage>\n      </FormControl>\n\n      <FormControl isInvalid={!!errors.clientId}>\n        <FormLabel htmlFor=\"clientId\">{t('bridge.connection.clientId')}</FormLabel>\n        <Input\n          id=\"clientId\"\n          type=\"text\"\n          {...register('clientId', {\n            ...getRulesForProperty($Bridge.properties.clientId),\n          })}\n        />\n        <FormHelperText> {t('bridge.options.clientid.helper')}</FormHelperText>\n        <FormErrorMessage>{errors.clientId && errors.clientId.message}</FormErrorMessage>\n      </FormControl>\n    </FormControl>\n  )\n}\n\nexport default OptionsPanel\n","import type { FC } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport { Controller, useFieldArray } from 'react-hook-form'\nimport type { BridgePanelType, SubscriptionType } from '@/modules/Bridges/types.ts'\nimport { ButtonGroup, FormControl, FormLabel, Input, Table, Tbody, Td, Th, Thead, Tr } from '@chakra-ui/react'\nimport { AddIcon } from '@chakra-ui/icons'\nimport { MdRemove } from 'react-icons/md'\nimport IconButton from '@/components/Chakra/IconButton.tsx'\n\ninterface CustomUserPropertiesProps extends BridgePanelType {\n  type: SubscriptionType\n  subscriptionIndex: number\n}\n\nconst CustomUserProperties: FC<CustomUserPropertiesProps> = ({ form, subscriptionIndex, type }) => {\n  const { t } = useTranslation()\n  const { fields, append, remove } = useFieldArray({\n    control: form.control, // control props comes from useForm (optional: if you are using FormContext)\n    name: `${type}.${subscriptionIndex}.customUserProperties`, // unique name for your Field Array\n  })\n\n  return (\n    <FormControl>\n      <FormLabel htmlFor={`${type}.${subscriptionIndex}.customUserProperties`}>\n        {t('bridge.subscription.customUserProperties.label')}\n\n        <Table variant=\"unstyled\" size=\"sm\" id={`${type}.${subscriptionIndex}.customUserProperties`}>\n          {/*<TableCaption placement={'top'}>{t('bridge.subscription.type', { context: type })}</TableCaption>*/}\n          <Thead>\n            <Tr>\n              <Th w=\"50%\">{t('bridge.subscription.customUserProperties.headers.key')}</Th>\n              <Th w=\"50%\">{t('bridge.subscription.customUserProperties.headers.value')}</Th>\n              <Th>{t('bridge.subscription.customUserProperties.headers.action')}</Th>\n            </Tr>\n          </Thead>\n          <Tbody>\n            {fields.map((_, index) => {\n              return (\n                <Tr key={`${type}.${subscriptionIndex}.customUserProperties.${index}`}>\n                  <Td py={0} p={0}>\n                    <Controller\n                      name={`${type}.${subscriptionIndex}.customUserProperties.${index}.key`}\n                      render={({ field }) => (\n                        <Input\n                          sx={{\n                            fontFamily: 'var(--chakra-fonts-mono);',\n                            background: 'var(--badge-bg);',\n                            color: 'var(--badge-color);',\n                          }}\n                          {...field}\n                          id={`${type}.${subscriptionIndex}.customUserProperties.${index}.key`}\n                          type=\"text\"\n                          size=\"sm\"\n                          placeholder={t('bridge.options.id.placeholder')}\n                        />\n                      )}\n                      control={form.control}\n                    />\n                  </Td>\n                  <Td py={0} p={0}>\n                    <Controller\n                      name={`${type}.${subscriptionIndex}.customUserProperties.${index}.value`}\n                      render={({ field }) => (\n                        <Input\n                          sx={{\n                            fontFamily: 'var(--chakra-fonts-mono);',\n                            background: 'var(--badge-bg);',\n                            color: 'var(--badge-color);',\n                          }}\n                          {...field}\n                          id={`${type}.${subscriptionIndex}.customUserProperties.${index}.value`}\n                          type=\"text\"\n                          size=\"sm\"\n                          placeholder={t('bridge.options.id.placeholder')}\n                        />\n                      )}\n                      control={form.control}\n                    />\n                  </Td>\n                  <Td py={0}>\n                    <ButtonGroup size=\"sm\" isAttached variant=\"outline\">\n                      <IconButton\n                        variant=\"outline\"\n                        size=\"xs\"\n                        aria-label={t('bridge.subscription.customUserProperties.actions.delete')}\n                        icon={<MdRemove />}\n                        onClick={() => remove(index)}\n                      />\n                    </ButtonGroup>\n                  </Td>\n                </Tr>\n              )\n            })}\n            <Tr>\n              <Td colSpan={3}>\n                <ButtonGroup size=\"sm\" isAttached variant=\"outline\">\n                  <IconButton\n                    variant=\"outline\"\n                    size=\"xs\"\n                    aria-label={t('bridge.subscription.customUserProperties.actions.add')}\n                    icon={<AddIcon />}\n                    onClick={() => append({ key: '', value: '' })}\n                  />\n                </ButtonGroup>\n              </Td>\n            </Tr>\n          </Tbody>\n        </Table>\n      </FormLabel>\n    </FormControl>\n  )\n}\n\nexport default CustomUserProperties\n","import type { FC } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport { Controller, useFieldArray } from 'react-hook-form'\nimport { CreatableSelect } from 'chakra-react-select'\nimport {\n  Accordion,\n  AccordionItem,\n  AccordionButton,\n  AccordionPanel,\n  AccordionIcon,\n  Box,\n  ButtonGroup,\n  FormControl,\n  FormErrorMessage,\n  FormLabel,\n  VStack,\n  Flex,\n  Card,\n  CardBody,\n  FormHelperText,\n  Stack,\n  HStack,\n  CardHeader,\n  RadioGroup,\n  Radio,\n  Switch,\n  NumberInput,\n  NumberInputField,\n  NumberInputStepper,\n  NumberIncrementStepper,\n  NumberDecrementStepper,\n} from '@chakra-ui/react'\nimport { AddIcon, DeleteIcon } from '@chakra-ui/icons'\n\nimport { $BridgeSubscription, $LocalBridgeSubscription, Capability } from '@/api/__generated__'\nimport { useValidationRules } from '@/api/hooks/useValidationRules/useValidationRules.ts'\nimport { useGetCapability } from '@/api/hooks/useFrontendServices/useGetCapability.ts'\nimport { SelectTopicFilter } from '@/components/MQTT/EntityCreatableSelect.tsx'\n\nimport CustomUserProperties from './CustomUserProperties.tsx'\nimport type { BridgeSubscriptionsProps } from '../../types.ts'\nimport IconButton from '@/components/Chakra/IconButton.tsx'\n\nconst SubscriptionsPanel: FC<BridgeSubscriptionsProps> = ({ form, type }) => {\n  const { t } = useTranslation()\n  const { fields, prepend, remove } = useFieldArray({\n    control: form.control, // control props comes from useForm (optional: if you are using FormContext)\n    name: type, // unique name for your Field Array\n  })\n  const getRulesForProperty = useValidationRules()\n  const hasPersistence = useGetCapability(Capability.id.MQTT_PERSISTENCE)\n  const isPersistEnabled = form.watch('persist')\n\n  const {\n    register,\n    formState: { errors },\n  } = form\n\n  return (\n    <>\n      <VStack spacing={4} align=\"stretch\" mt={4} role=\"list\">\n        {fields.map((field, index) => {\n          const maxQoS = form.watch(`${type}.${index}.maxQoS`)\n          const isQoSValidForPersistence = maxQoS.toString() === '1' || maxQoS.toString() == '2'\n          return (\n            <Card shadow=\"xs\" flexDirection=\"column\" key={field.id} role=\"listitem\">\n              <HStack>\n                <CardBody>\n                  <Flex gap={4} flexDirection=\"column\">\n                    <FormControl\n                      data-testid={`${type}.${index}.filters`}\n                      isInvalid={!!errors[type]?.[index]?.filters}\n                      isRequired\n                    >\n                      <FormLabel htmlFor={`${type}.${index}.filters`}>\n                        {t('bridge.subscription.filters.label')}\n                      </FormLabel>\n                      <Controller\n                        name={`${type}.${index}.filters`}\n                        render={({ field }) => {\n                          const { value, onChange, ...rest } = field\n                          return (\n                            <SelectTopicFilter\n                              isMulti\n                              isCreatable\n                              onChange={(values) => onChange((values as string[])?.map((item) => item))}\n                              value={value}\n                              {...rest}\n                            />\n                          )\n                        }}\n                        control={form.control}\n                        rules={{\n                          ...getRulesForProperty($BridgeSubscription.properties.filters),\n                        }}\n                      />\n                      {!errors[type]?.[index]?.filters && (\n                        <FormHelperText>{t('bridge.subscription.filters.helper')}</FormHelperText>\n                      )}\n                      <FormErrorMessage>{errors[type]?.[index]?.filters?.message}</FormErrorMessage>\n                    </FormControl>\n\n                    <FormControl\n                      data-testid={`${type}.${index}.destination`}\n                      isInvalid={!!errors[type]?.[index]?.destination}\n                      isRequired\n                    >\n                      <FormLabel htmlFor={`${type}.${index}.destination`}>\n                        {t('bridge.subscription.destination.label')}\n                      </FormLabel>\n                      <Controller\n                        name={`${type}.${index}.destination`}\n                        render={({ field }) => {\n                          const { value, onChange, ...rest } = field\n                          const formatValue = { value: value, label: value }\n                          return (\n                            <CreatableSelect\n                              inputId={`${type}.${index}.destination`}\n                              {...rest}\n                              value={formatValue}\n                              onChange={(item) => onChange(item?.value)}\n                              options={[{ value: '{#}', label: '{#} - original message topic' }]}\n                              isClearable={true}\n                              isMulti={false}\n                              components={{\n                                DropdownIndicator: null,\n                              }}\n                            />\n                          )\n                        }}\n                        control={form.control}\n                        rules={{\n                          ...getRulesForProperty($BridgeSubscription.properties.destination),\n                        }}\n                      />\n                      {!errors[type]?.[index]?.destination && (\n                        <FormHelperText>{t('bridge.subscription.destination.helper')}</FormHelperText>\n                      )}\n                      <FormErrorMessage>{errors[type]?.[index]?.destination?.message}</FormErrorMessage>\n                    </FormControl>\n                  </Flex>\n                </CardBody>\n                <CardHeader alignSelf=\"flex-start\">\n                  <ButtonGroup size=\"sm\" isAttached variant=\"outline\">\n                    <IconButton\n                      onClick={() => remove(index)}\n                      aria-label={t('bridge.subscription.delete')}\n                      icon={<DeleteIcon />}\n                    />\n                  </ButtonGroup>\n                </CardHeader>\n              </HStack>\n              <CardBody p={0}>\n                <Accordion allowMultiple>\n                  <AccordionItem isDisabled={!!errors[type]?.[index]} data-testid={`${type}.${index}.advanced`}>\n                    <AccordionButton>\n                      <AccordionIcon />\n                      <Box as=\"span\" flex=\"1\" textAlign=\"left\">\n                        Advanced configuration\n                        <FormErrorMessage>{errors[type]?.[index]?.filters?.message}</FormErrorMessage>\n                      </Box>\n                    </AccordionButton>\n\n                    <AccordionPanel m={1} as={VStack} gap={4}>\n                      <FormControl>\n                        <FormLabel htmlFor={`${type}.${index}.maxQoS`} data-testid={`${type}.${index}.maxQoS`}>\n                          {t('bridge.subscription.maxQoS.label')}\n                        </FormLabel>\n                        <Controller\n                          name={`${type}.${index}.maxQoS`}\n                          control={form.control}\n                          render={({ field: { value, ...rest } }) => (\n                            <RadioGroup\n                              {...rest}\n                              value={value.toString()}\n                              id={`${type}.${index}.maxQoS`}\n                              data-testid={`${type}.${index}.maxQoS.options`}\n                            >\n                              <Stack direction=\"row\">\n                                <Radio value=\"0\">{t('bridge.subscription.maxQoS.values.0')}</Radio>\n                                <Radio value=\"1\">{t('bridge.subscription.maxQoS.values.1')}</Radio>\n                                <Radio value=\"2\">{t('bridge.subscription.maxQoS.values.2')}</Radio>\n                              </Stack>\n                            </RadioGroup>\n                          )}\n                          rules={{\n                            ...getRulesForProperty($BridgeSubscription.properties.maxQoS),\n                          }}\n                        />\n                      </FormControl>\n\n                      {hasPersistence && type === 'localSubscriptions' && (\n                        <FormControl\n                          isDisabled={!isPersistEnabled || !isQoSValidForPersistence}\n                          data-testid={`${type}.${index}.queueLimit`}\n                        >\n                          <FormLabel htmlFor=\"queueLimit\">{t('bridge.subscription.queueLimit.label')}</FormLabel>\n                          <NumberInput id=\"queueLimit\" min={0}>\n                            <NumberInputField\n                              {...register(`${type}.${index}.queueLimit`, {\n                                ...getRulesForProperty($LocalBridgeSubscription.properties.queueLimit),\n                              })}\n                            />\n                            <NumberInputStepper>\n                              <NumberIncrementStepper />\n                              <NumberDecrementStepper />\n                            </NumberInputStepper>\n                          </NumberInput>\n                          <FormHelperText> {t('bridge.subscription.queueLimit.helper')}</FormHelperText>\n                        </FormControl>\n                      )}\n\n                      {type === 'localSubscriptions' && (\n                        <FormControl>\n                          <FormLabel htmlFor={`${type}.${index}.excludes`}>\n                            {t('bridge.subscription.excludes')}\n                          </FormLabel>\n                          <Controller\n                            name={`${type}.${index}.excludes`}\n                            render={({ field }) => {\n                              const { value, onChange, ...rest } = field\n                              const formatValue = value?.map((e) => ({ value: e, label: e }))\n                              return (\n                                <CreatableSelect\n                                  {...rest}\n                                  value={formatValue}\n                                  onChange={(values) => onChange(values.map((item) => item.value))}\n                                  inputId={`${type}.${index}.excludes`}\n                                  // options={[{ value: 'ddfd', label: 'fgg' }]}\n                                  // menuIsOpen={false}\n                                  isClearable={true}\n                                  placeholder=\"add topic\"\n                                  isMulti={true}\n                                  components={{\n                                    DropdownIndicator: null,\n                                  }}\n                                />\n                              )\n                            }}\n                            control={form.control}\n                          />\n                          <FormErrorMessage>{errors[type]?.[index]?.filters?.message}</FormErrorMessage>\n                        </FormControl>\n                      )}\n\n                      <FormControl>\n                        <FormLabel htmlFor={`${type}.${index}.preserveRetain`}>\n                          {t('bridge.subscription.preserveRetain.label')}\n                        </FormLabel>\n                        <Switch\n                          id={`${type}.${index}.preserveRetain`}\n                          {...register(`${type}.${index}.preserveRetain`)}\n                        />\n                        <FormErrorMessage>{errors[type]?.[index]?.filters?.message}</FormErrorMessage>\n                      </FormControl>\n\n                      <CustomUserProperties type={type} subscriptionIndex={index} form={form} />\n                    </AccordionPanel>\n                  </AccordionItem>\n                </Accordion>\n              </CardBody>\n            </Card>\n          )\n        })}\n      </VStack>\n      <Box mt={4}>\n        <IconButton\n          data-testid=\"bridge-subscription-add\"\n          isDisabled={!!errors[type]}\n          aria-label={t('bridge.subscription.add')}\n          icon={<AddIcon />}\n          onClick={() => prepend({ destination: '', filters: [], maxQoS: 0 })}\n        />\n      </Box>\n    </>\n  )\n}\n\nexport default SubscriptionsPanel\n","/* istanbul ignore next -- @preserve */\nexport const TLS_PROTOCOLS: string[] = ['TLSv1.3', 'TLSv1.2', 'TLSv1.1', 'TLSv1.0']\n\n/* istanbul ignore next -- @preserve */\nexport const DEFAULT_CYPHER_SUITES: string[] = [\n  'TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384',\n  'TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256',\n  'TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256',\n  'TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA',\n  'TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA',\n  'TLS_RSA_WITH_AES_128_GCM_SHA256',\n  'TLS_RSA_WITH_AES_128_CBC_SHA',\n  'TLS_RSA_WITH_AES_256_CBC_SHA',\n]\n\n/* istanbul ignore next -- @preserve */\nexport const CYPHER_SUITES: string[] = [\n  'TLS_AES_256_GCM_SHA384',\n  'TLS_AES_128_GCM_SHA256',\n  'TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384',\n  'TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256',\n  'TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384',\n  'TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256',\n  'TLS_DHE_RSA_WITH_AES_256_GCM_SHA384',\n  'TLS_DHE_DSS_WITH_AES_256_GCM_SHA384',\n  'TLS_DHE_RSA_WITH_AES_128_GCM_SHA256',\n  'TLS_DHE_DSS_WITH_AES_128_GCM_SHA256',\n  'TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384',\n  'TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384',\n  'TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256',\n  'TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256',\n  'TLS_DHE_RSA_WITH_AES_256_CBC_SHA256',\n  'TLS_DHE_DSS_WITH_AES_256_CBC_SHA256',\n  'TLS_DHE_RSA_WITH_AES_128_CBC_SHA256',\n  'TLS_DHE_DSS_WITH_AES_128_CBC_SHA256',\n  'TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384',\n  'TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384',\n  'TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256',\n  'TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256',\n  'TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384',\n  'TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384',\n  'TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256',\n  'TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256',\n  'TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA',\n  'TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA',\n  'TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA',\n  'TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA',\n  'TLS_DHE_RSA_WITH_AES_256_CBC_SHA',\n  'TLS_DHE_DSS_WITH_AES_256_CBC_SHA',\n  'TLS_DHE_RSA_WITH_AES_128_CBC_SHA',\n  'TLS_DHE_DSS_WITH_AES_128_CBC_SHA',\n  'TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA',\n  'TLS_ECDH_RSA_WITH_AES_256_CBC_SHA',\n  'TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA',\n  'TLS_ECDH_RSA_WITH_AES_128_CBC_SHA',\n  'TLS_RSA_WITH_AES_256_GCM_SHA384',\n  'TLS_RSA_WITH_AES_128_GCM_SHA256',\n  'TLS_RSA_WITH_AES_256_CBC_SHA256',\n  'TLS_RSA_WITH_AES_128_CBC_SHA256',\n  'TLS_RSA_WITH_AES_256_CBC_SHA',\n  'TLS_RSA_WITH_AES_128_CBC_SHA',\n  'TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA',\n  'TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA',\n  'SSL_DHE_RSA_WITH_3DES_EDE_CBC_SHA',\n  'SSL_DHE_DSS_WITH_3DES_EDE_CBC_SHA',\n  'TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA',\n  'TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA',\n  'SSL_RSA_WITH_3DES_EDE_CBC_SHA',\n  'TLS_EMPTY_RENEGOTIATION_INFO_SCSV',\n  'TLS_DH_anon_WITH_AES_256_GCM_SHA384',\n  'TLS_DH_anon_WITH_AES_128_GCM_SHA256',\n  'TLS_DH_anon_WITH_AES_256_CBC_SHA256',\n  'TLS_ECDH_anon_WITH_AES_256_CBC_SHA',\n  'TLS_DH_anon_WITH_AES_256_CBC_SHA',\n  'TLS_DH_anon_WITH_AES_128_CBC_SHA256',\n  'TLS_ECDH_anon_WITH_AES_128_CBC_SHA',\n  'TLS_DH_anon_WITH_AES_128_CBC_SHA',\n  'TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA',\n  'SSL_DH_anon_WITH_3DES_EDE_CBC_SHA',\n  'TLS_ECDHE_ECDSA_WITH_RC4_128_SHA',\n  'TLS_ECDHE_RSA_WITH_RC4_128_SHA',\n  'SSL_RSA_WITH_RC4_128_SHA',\n  'TLS_ECDH_ECDSA_WITH_RC4_128_SHA',\n  'TLS_ECDH_RSA_WITH_RC4_128_SHA',\n  'SSL_RSA_WITH_RC4_128_MD5',\n  'TLS_ECDH_anon_WITH_RC4_128_SHA',\n  'SSL_DH_anon_WITH_RC4_128_MD5',\n  'SSL_RSA_WITH_DES_CBC_SHA',\n  'SSL_DHE_RSA_WITH_DES_CBC_SHA',\n  'SSL_DHE_DSS_WITH_DES_CBC_SHA',\n  'SSL_DH_anon_WITH_DES_CBC_SHA',\n  'SSL_RSA_EXPORT_WITH_DES40_CBC_SHA',\n  'SSL_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA',\n  'SSL_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA',\n  'SSL_DH_anon_EXPORT_WITH_DES40_CBC_SHA',\n  'SSL_RSA_EXPORT_WITH_RC4_40_MD5',\n  'SSL_DH_anon_EXPORT_WITH_RC4_40_MD5',\n  'TLS_RSA_WITH_NULL_SHA256',\n  'TLS_ECDHE_ECDSA_WITH_NULL_SHA',\n  'TLS_ECDHE_RSA_WITH_NULL_SHA',\n  'SSL_RSA_WITH_NULL_SHA',\n  'TLS_ECDH_ECDSA_WITH_NULL_SHA',\n  'TLS_ECDH_RSA_WITH_NULL_SHA',\n  'TLS_ECDH_anon_WITH_NULL_SHA',\n  'SSL_RSA_WITH_NULL_MD5',\n  'TLS_KRB5_WITH_3DES_EDE_CBC_SHA',\n  'TLS_KRB5_WITH_3DES_EDE_CBC_MD5',\n  'TLS_KRB5_WITH_RC4_128_SHA',\n  'TLS_KRB5_WITH_RC4_128_MD5',\n  'TLS_KRB5_WITH_DES_CBC_SHA',\n  'TLS_KRB5_WITH_DES_CBC_MD5',\n  'TLS_KRB5_EXPORT_WITH_DES_CBC_40_SHA',\n  'TLS_KRB5_EXPORT_WITH_DES_CBC_40_MD5',\n  'TLS_KRB5_EXPORT_WITH_RC4_40_SHA',\n  'TLS_KRB5_EXPORT_WITH_RC4_40_MD5',\n]\n","import type { FC } from 'react'\nimport { FormControl, FormHelperText, FormLabel, Input, HStack, Switch } from '@chakra-ui/react'\nimport { Select } from 'chakra-react-select'\nimport { useTranslation } from 'react-i18next'\nimport { Controller, useWatch } from 'react-hook-form'\n\nimport { useValidationRules } from '@/api/hooks/useValidationRules/useValidationRules.ts'\nimport { $TlsConfiguration } from '@/api/__generated__'\n\nimport { CYPHER_SUITES, TLS_PROTOCOLS } from '../../utils/tlsConfiguration.ts'\nimport type { BridgePanelType } from '../../types.ts'\n\nconst SecurityPanel: FC<BridgePanelType> = ({ form }) => {\n  const { t } = useTranslation()\n  const {\n    register,\n    formState: { errors },\n  } = form\n  const getRulesForProperty = useValidationRules()\n\n  const isTlsEnabled = useWatch({ name: 'tlsConfiguration.enabled', control: form.control })\n\n  return (\n    <FormControl variant=\"hivemq\" flexGrow={1} display=\"flex\" flexDirection=\"column\" gap={4} as=\"fieldset\">\n      <FormControl>\n        <FormLabel htmlFor=\"tlsConfiguration.enabled\">{t('bridge.security.enabled.label')}</FormLabel>\n        <Switch\n          id=\"tlsConfiguration.enabled\"\n          {...register('tlsConfiguration.enabled', {\n            ...getRulesForProperty($TlsConfiguration.properties.enabled),\n          })}\n        />\n        <FormHelperText>{t('bridge.security.enabled.helper')}</FormHelperText>\n      </FormControl>\n\n      {isTlsEnabled && (\n        <>\n          <FormControl isInvalid={!!errors.tlsConfiguration?.cipherSuites}>\n            <FormLabel htmlFor=\"tlsConfiguration.cipherSuites\">{t('bridge.security.cipherSuites.label')}</FormLabel>\n            <Controller\n              name=\"tlsConfiguration.cipherSuites\"\n              control={form.control}\n              render={({ field }) => (\n                <Select\n                  size=\"sm\"\n                  {...field}\n                  inputId=\"tlsConfiguration.cipherSuites\"\n                  // @ts-ignore TODO[NVL] Need to fix the Typescript definition\n                  // defaultValue={}\n                  // @ts-ignore\n                  options={CYPHER_SUITES.map((e) => ({ label: e, value: e }))}\n                  // menuIsOpen={false}\n                  isClearable={true}\n                  placeholder={t('bridge.security.cipherSuites.placeholder')}\n                  isMulti={true}\n                  components={{\n                    DropdownIndicator: null,\n                  }}\n                />\n              )}\n            />\n            <FormHelperText>{t('bridge.security.cipherSuites.helper')}</FormHelperText>\n          </FormControl>\n\n          <FormControl isInvalid={!!errors.tlsConfiguration?.protocols}>\n            <FormLabel htmlFor=\"tlsConfiguration.protocols\">{t('bridge.security.protocols.label')}</FormLabel>\n            <Controller\n              name=\"tlsConfiguration.protocols\"\n              control={form.control}\n              render={({ field }) => (\n                <Select\n                  size=\"sm\"\n                  {...field}\n                  inputId=\"tlsConfiguration.protocols\"\n                  // @ts-ignore TODO[NVL] Need to fix the Typescript definition\n                  // @ts-ignore\n                  options={TLS_PROTOCOLS.map((e) => ({ label: e, value: e }))}\n                  // menuIsOpen={false}\n                  isClearable={true}\n                  isMulti={true}\n                  isSearchable={true}\n                  components={{\n                    DropdownIndicator: null,\n                  }}\n                />\n              )}\n            />\n            <FormHelperText>{t('bridge.security.protocols.helper')}</FormHelperText>\n          </FormControl>\n\n          <FormControl as=\"fieldset\">\n            <FormLabel as=\"legend\">{t('bridge.security.keyStore.legend')}</FormLabel>\n\n            <HStack>\n              <FormControl isInvalid={!!errors.tlsConfiguration?.keystorePath}>\n                <FormLabel htmlFor=\"tlsConfiguration.keystorePath\">{t('bridge.security.keystorePath.label')}</FormLabel>\n                <Controller\n                  name=\"tlsConfiguration.keystorePath\"\n                  control={form.control}\n                  render={({ field }) => {\n                    const { value, ...rest } = field\n                    return <Input id=\"tlsConfiguration.keystorePath\" {...rest} value={value as string} />\n                  }}\n                />\n                <FormHelperText>{t('bridge.security.keystorePath.helper')}</FormHelperText>\n              </FormControl>\n\n              <FormControl isInvalid={!!errors.tlsConfiguration?.keystorePassword}>\n                <FormLabel htmlFor=\"tlsConfiguration.keystorePassword\">\n                  {t('bridge.security.keystorePassword.label')}\n                </FormLabel>\n                <Controller\n                  name=\"tlsConfiguration.keystorePassword\"\n                  control={form.control}\n                  render={({ field }) => (\n                    <Input\n                      autoComplete=\"current-password\"\n                      type=\"text\"\n                      id=\"tlsConfiguration.keystorePassword\"\n                      {...field}\n                    />\n                  )}\n                />\n                <FormHelperText>{t('bridge.security.keystorePassword.helper')}</FormHelperText>\n              </FormControl>\n            </HStack>\n          </FormControl>\n\n          <FormControl as=\"fieldset\">\n            <FormLabel as=\"legend\">{t('bridge.security.trustStore.legend')}</FormLabel>\n\n            <HStack>\n              <FormControl isInvalid={!!errors.tlsConfiguration?.truststorePath}>\n                <FormLabel htmlFor=\"tlsConfiguration.truststorePath\">\n                  {t('bridge.security.truststorePath.label')}\n                </FormLabel>\n                <Controller\n                  name=\"tlsConfiguration.truststorePath\"\n                  control={form.control}\n                  render={({ field }) => {\n                    const { value, ...rest } = field\n                    return <Input id=\"tlsConfiguration.truststorePath\" {...rest} value={value as string} />\n                  }}\n                />\n                <FormHelperText>{t('bridge.security.truststorePath.helper')}</FormHelperText>\n              </FormControl>\n\n              <FormControl isInvalid={!!errors.tlsConfiguration?.truststorePassword}>\n                <FormLabel htmlFor=\"tlsConfiguration.truststorePassword\">\n                  {t('bridge.security.truststorePassword.label')}\n                </FormLabel>\n                <Controller\n                  name=\"tlsConfiguration.truststorePassword\"\n                  control={form.control}\n                  render={({ field }) => (\n                    <Input\n                      autoComplete=\"current-password\"\n                      type=\"text\"\n                      id=\"tlsConfiguration.truststorePassword\"\n                      {...field}\n                    />\n                  )}\n                />\n                <FormHelperText>{t('bridge.security.truststorePassword.helper')}</FormHelperText>\n              </FormControl>\n            </HStack>\n          </FormControl>\n\n          <FormControl isInvalid={!!errors.tlsConfiguration?.privateKeyPassword}>\n            <FormLabel htmlFor=\"tlsConfiguration.privateKeyPassword\">\n              {t('bridge.security.privateKeyPassword.label')}\n            </FormLabel>\n            <Controller\n              name=\"tlsConfiguration.privateKeyPassword\"\n              control={form.control}\n              render={({ field }) => (\n                <Input\n                  type=\"text\"\n                  autoComplete=\"current-password\"\n                  id=\"tlsConfiguration.privateKeyPassword\"\n                  {...field}\n                />\n              )}\n            />\n            <FormHelperText>{t('bridge.security.privateKeyPassword.helper')}</FormHelperText>\n          </FormControl>\n        </>\n      )}\n    </FormControl>\n  )\n}\n\nexport default SecurityPanel\n","import type { FC } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport { Checkbox, FormControl, FormErrorMessage, FormHelperText } from '@chakra-ui/react'\n\nimport type { BridgePanelType } from '../../types.ts'\n\nconst PersistencePanel: FC<BridgePanelType> = ({ form }) => {\n  const { t } = useTranslation()\n  const {\n    register,\n    formState: { errors },\n  } = form\n\n  return (\n    <FormControl variant=\"hivemq\" flexGrow={1} display=\"flex\" flexDirection=\"column\" gap={4} as=\"fieldset\">\n      <FormControl isInvalid={!!errors.persist}>\n        <Checkbox {...register('persist')}>{t('bridge.persistence.persist.label')}</Checkbox>\n        <FormHelperText>{t('bridge.persistence.persist.helper')}</FormHelperText>\n        <FormErrorMessage>{errors.persist && errors.persist.message}</FormErrorMessage>\n      </FormControl>\n    </FormControl>\n  )\n}\n\nexport default PersistencePanel\n","import type { FC } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport { Checkbox, FormControl, FormErrorMessage, FormHelperText, FormLabel, Input, Text } from '@chakra-ui/react'\n\nimport type { BridgePanelType } from '../../types.ts'\n\nconst WebSocketPanel: FC<BridgePanelType> = ({ form }) => {\n  const { t } = useTranslation()\n  const {\n    register,\n    formState: { errors },\n  } = form\n\n  return (\n    <FormControl variant=\"hivemq\" flexGrow={1} display=\"flex\" flexDirection=\"column\" gap={4} as=\"fieldset\">\n      <Text>{t('bridge.websocket.description')}</Text>\n      <FormControl isInvalid={!!errors.websocketConfiguration?.enabled}>\n        <Checkbox {...register('websocketConfiguration.enabled')} data-testid=\"form-websocket-enabled\">\n          {t('bridge.websocket.enabled.label')}\n        </Checkbox>\n        <FormHelperText>{t('bridge.websocket.enabled.helper')}</FormHelperText>\n        <FormErrorMessage>\n          {errors.websocketConfiguration?.enabled && errors.websocketConfiguration.enabled.message}\n        </FormErrorMessage>\n      </FormControl>\n\n      <FormControl as=\"fieldset\" variant=\"hivemq\">\n        <FormLabel htmlFor=\"serverPath\">{t('bridge.websocket.serverPath.label')}</FormLabel>\n        <Input\n          data-testid=\"form-websocket-serverPath\"\n          autoFocus\n          id=\"serverPath\"\n          type=\"text\"\n          autoComplete=\"on\"\n          defaultValue=\"/mqtt\"\n          {...register('websocketConfiguration.serverPath')}\n        />\n        <FormHelperText>{t('bridge.websocket.serverPath.helper')}</FormHelperText>\n      </FormControl>\n\n      <FormControl as=\"fieldset\" variant=\"hivemq\">\n        <FormLabel htmlFor=\"subProtocol\">{t('bridge.websocket.subProtocol.label')}</FormLabel>\n        <Input\n          data-testid=\"form-websocket-subProtocol\"\n          autoFocus\n          id=\"subProtocol\"\n          type=\"text\"\n          autoComplete=\"on\"\n          defaultValue=\"mqtt\"\n          {...register('websocketConfiguration.subProtocol')}\n        />\n        <FormHelperText>{t('bridge.websocket.subProtocol.helper')}</FormHelperText>\n      </FormControl>\n    </FormControl>\n  )\n}\n\nexport default WebSocketPanel\n","import type { FC } from 'react'\nimport { useEffect } from 'react'\nimport {\n  Drawer,\n  DrawerBody,\n  DrawerFooter,\n  DrawerHeader,\n  DrawerOverlay,\n  DrawerContent,\n  DrawerCloseButton,\n  Button,\n  Tabs,\n  TabList,\n  Tab,\n  TabPanels,\n  TabPanel,\n  Flex,\n  Text,\n} from '@chakra-ui/react'\nimport { useTranslation } from 'react-i18next'\nimport { useForm } from 'react-hook-form'\n\nimport type { ApiError, Bridge } from '@/api/__generated__'\nimport { Capability } from '@/api/__generated__'\nimport { useGetCapability } from '@/api/hooks/useFrontendServices/useGetCapability.ts'\n\nimport ConnectionPanel from '../panels/ConnectionPanel.tsx'\nimport NamePanel from '../panels/NamePanel.tsx'\nimport OptionsPanel from '../panels/OptionsPanel.tsx'\nimport SubscriptionsPanel from '../panels/SubscriptionsPanel.tsx'\nimport SecurityPanel from '../panels/SecurityPanel.tsx'\nimport PersistencePanel from '../panels/PersistencePanel.tsx'\nimport { useBridgeSetup } from '../../hooks/useBridgeConfig.tsx'\nimport WebSocketPanel from '@/modules/Bridges/components/panels/WebSocketPanel.tsx'\n\ninterface BridgeMainDrawerProps {\n  isNewBridge?: boolean\n  isOpen: boolean\n  isSubmitting: boolean\n  error?: ApiError | null\n  onClose: () => void\n  onSubmit: (data: Bridge) => void\n  onDelete?: () => void\n}\n\nconst BridgeMainDrawer: FC<BridgeMainDrawerProps> = ({\n  isNewBridge = false,\n  isOpen,\n  isSubmitting,\n  onClose,\n  onSubmit,\n  onDelete,\n}) => {\n  const { t } = useTranslation()\n  const { bridge } = useBridgeSetup()\n  const hasPersistence = useGetCapability(Capability.id.MQTT_PERSISTENCE)\n  const form = useForm<Bridge>({\n    mode: 'all',\n    criteriaMode: 'all',\n    defaultValues: bridge,\n  })\n\n  useEffect(() => {\n    if (isOpen) form.reset(bridge)\n  }, [bridge, isOpen, form])\n\n  return (\n    <>\n      <Drawer\n        variant=\"hivemq\"\n        closeOnOverlayClick={false}\n        size=\"lg\"\n        isOpen={isOpen}\n        placement=\"right\"\n        onClose={onClose}\n      >\n        <DrawerOverlay />\n        <DrawerContent aria-label={t('bridge.drawer.label')}>\n          <DrawerCloseButton />\n          <DrawerHeader id=\"bridge-form-header\" borderBottomWidth=\"1px\">\n            {isNewBridge ? t('bridge.drawer.title.create') : t('bridge.drawer.title.update')}\n          </DrawerHeader>\n\n          <DrawerBody>\n            <form\n              id=\"bridge-form\"\n              onSubmit={form.handleSubmit(onSubmit)}\n              style={{ display: 'flex', flexDirection: 'column', gap: '18px' }}\n            >\n              <NamePanel form={form} isNewBridge={isNewBridge} />\n              <Tabs>\n                <TabList>\n                  <Tab>{t('bridge.drawer.connection')}</Tab>\n                  <Tab>{t('bridge.drawer.broker')}</Tab>\n                  <Tab>{t('bridge.drawer.security')}</Tab>\n                  <Tab>{t('bridge.drawer.websocket')}</Tab>\n                  {hasPersistence && <Tab>{t('bridge.drawer.persistence')}</Tab>}\n                </TabList>\n\n                <TabPanels>\n                  <TabPanel>\n                    <ConnectionPanel form={form} />\n                    <Tabs>\n                      <TabList>\n                        <Tab>{t('bridge.subscription.type', { context: 'local' })}</Tab>\n                        <Tab>{t('bridge.subscription.type', { context: 'remote' })}</Tab>\n                      </TabList>\n\n                      <TabPanels>\n                        <TabPanel px={0}>\n                          <Text fontSize={{ md: 'sm' }}>{t('bridge.subscription.local.info')}</Text>\n                          <SubscriptionsPanel form={form} type=\"localSubscriptions\" />\n                        </TabPanel>\n                        <TabPanel px={0}>\n                          <Text fontSize={{ md: 'sm' }}>{t('bridge.subscription.remote.info')}</Text>\n                          <SubscriptionsPanel form={form} type=\"remoteSubscriptions\" />\n                        </TabPanel>\n                      </TabPanels>\n                    </Tabs>\n                  </TabPanel>\n                  <TabPanel>\n                    <OptionsPanel form={form} />\n                  </TabPanel>\n\n                  <TabPanel>\n                    <SecurityPanel form={form} />\n                  </TabPanel>\n\n                  <TabPanel>\n                    <WebSocketPanel form={form} />\n                  </TabPanel>\n\n                  {hasPersistence && (\n                    <TabPanel>\n                      <PersistencePanel form={form} />\n                    </TabPanel>\n                  )}\n                </TabPanels>\n              </Tabs>\n            </form>\n          </DrawerBody>\n\n          <DrawerFooter borderTopWidth=\"1px\">\n            {!isNewBridge && (\n              <Button type=\"button\" variant=\"danger\" form=\"bridge-form\" onClick={onDelete}>\n                {t('bridge.action.delete')}\n              </Button>\n            )}\n            <Flex flexGrow={1} justifyContent=\"flex-end\">\n              <Button\n                isDisabled={!form.formState.isValid}\n                isLoading={isSubmitting}\n                variant=\"primary\"\n                type=\"submit\"\n                form=\"bridge-form\"\n              >\n                {isNewBridge ? t('bridge.action.create') : t('bridge.action.update')}\n              </Button>\n            </Flex>\n          </DrawerFooter>\n        </DrawerContent>\n      </Drawer>\n    </>\n  )\n}\n\nexport default BridgeMainDrawer\n","import type { Bridge } from '@/api/__generated__'\n\n// TODO[NVL] The number and booleans should all be coming from the openAPI specs since they are all mandatory (see $Bridge.properties.cleanStart.isRequired)\n/* istanbul ignore next -- @preserve */\nexport const bridgeInitialState: Bridge = {\n  cleanStart: true,\n  host: '',\n  keepAlive: 60,\n  id: '',\n  port: 1883,\n  sessionExpiry: 3600,\n  persist: true,\n  loopPreventionHopCount: 1,\n}\n","import type { FC, ReactNode } from 'react'\nimport { useEffect } from 'react'\nimport { useDisclosure } from '@chakra-ui/react'\nimport { useNavigate, useParams } from 'react-router-dom'\nimport type { SubmitHandler } from 'react-hook-form'\nimport { useTranslation } from 'react-i18next'\n\nimport type { ApiError, Bridge } from '@/api/__generated__'\nimport { useListBridges } from '@/api/hooks/useGetBridges/useListBridges.ts'\nimport { useCreateBridge } from '@/api/hooks/useGetBridges/useCreateBridge.ts'\nimport { useUpdateBridge } from '@/api/hooks/useGetBridges/useUpdateBridge.ts'\nimport { useDeleteBridge } from '@/api/hooks/useGetBridges/useDeleteBridge.ts'\n\nimport { useEdgeToast } from '@/hooks/useEdgeToast/useEdgeToast.tsx'\n\nimport ConfirmationDialog from '@/components/Modal/ConfirmationDialog.tsx'\nimport BridgeMainDrawer from '@/modules/Bridges/components/panels/BridgeMainDrawer.tsx'\nimport { useBridgeSetup } from '@/modules/Bridges/hooks/useBridgeConfig.tsx'\nimport { bridgeInitialState } from '@/modules/Bridges/utils/defaults.utils.ts'\nimport { NodeTypes } from '@/modules/Workspace/types.ts'\nimport useWorkspaceStore from '@/modules/Workspace/hooks/useWorkspaceStore.ts'\n\ninterface BridgeEditorProps {\n  isNew?: boolean\n  children?: ReactNode\n}\n\nconst BridgeEditor: FC<BridgeEditorProps> = ({ children }) => {\n  const { t } = useTranslation()\n  const { successToast, errorToast } = useEdgeToast()\n\n  const { isOpen, onOpen, onClose } = useDisclosure()\n  const { bridgeId } = useParams()\n  const { setBridge } = useBridgeSetup()\n  const { data } = useListBridges()\n  const navigate = useNavigate()\n  const createBridge = useCreateBridge()\n  const updateBridge = useUpdateBridge()\n  const deleteBridge = useDeleteBridge()\n  const { isOpen: isConfirmDeleteOpen, onOpen: onConfirmDeleteOpen, onClose: onConfirmDeleteClose } = useDisclosure()\n  const { onDeleteNode } = useWorkspaceStore()\n\n  useEffect(() => {\n    if (!data) return\n    if (bridgeId) {\n      const b = data?.find((e) => e.id === bridgeId)\n      if (b) {\n        setBridge(b)\n        onOpen()\n      } else {\n        errorToast(\n          {\n            id: 'bridge-open-noExist',\n            title: t('bridge.toast.view.title'),\n            description: t('bridge.toast.view.error'),\n          },\n          new Error(t('bridge.toast.view.noLongerExist', { id: bridgeId }))\n        )\n        navigate('/mqtt-bridges', { replace: true })\n      }\n    } else {\n      setBridge(bridgeInitialState)\n      onOpen()\n    }\n  }, [bridgeId, data, setBridge, onOpen, errorToast, t, navigate])\n\n  const handleEditorOnClose = () => {\n    onClose()\n    navigate('/mqtt-bridges')\n  }\n\n  const handleEditorOnSubmit: SubmitHandler<Bridge> = (data) => {\n    if (bridgeId) {\n      if (bridgeId === data.id) {\n        updateBridge\n          .mutateAsync({ name: bridgeId, requestBody: data })\n          .then(() => {\n            successToast({\n              title: t('bridge.toast.update.title'),\n              description: t('bridge.toast.update.description'),\n            })\n          })\n          .catch((err: ApiError) =>\n            errorToast(\n              {\n                title: t('bridge.toast.update.title'),\n                description: t('bridge.toast.update.error'),\n              },\n              err\n            )\n          )\n      }\n    } else {\n      createBridge\n        .mutateAsync(data)\n        .then(() => {\n          successToast({\n            title: t('bridge.toast.create.title'),\n            description: t('bridge.toast.create.description'),\n          })\n        })\n        .catch((err: ApiError) =>\n          errorToast(\n            {\n              title: t('bridge.toast.create.title'),\n              description: t('bridge.toast.create.error'),\n            },\n            err\n          )\n        )\n    }\n\n    handleEditorOnClose()\n  }\n\n  const handleEditorOnDelete = () => {\n    onClose()\n    onConfirmDeleteOpen()\n  }\n\n  const handleConfirmOnClose = () => {\n    onConfirmDeleteClose()\n    navigate('/mqtt-bridges')\n  }\n\n  const handleConfirmOnSubmit = () => {\n    if (bridgeId)\n      deleteBridge.mutateAsync(bridgeId).then(() => {\n        onDeleteNode(NodeTypes.BRIDGE_NODE, bridgeId)\n\n        successToast({\n          title: t('bridge.toast.delete.title'),\n          description: t('bridge.toast.delete.description'),\n        })\n      })\n  }\n\n  return (\n    <div>\n      <BridgeMainDrawer\n        isNewBridge={bridgeId === undefined}\n        isOpen={isOpen}\n        onClose={handleEditorOnClose}\n        onSubmit={handleEditorOnSubmit}\n        onDelete={handleEditorOnDelete}\n        isSubmitting={createBridge.isPending || updateBridge.isPending}\n        error={createBridge.error || updateBridge.error}\n      />\n      {children}\n      <ConfirmationDialog\n        isOpen={isConfirmDeleteOpen}\n        onClose={handleConfirmOnClose}\n        onSubmit={handleConfirmOnSubmit}\n        message={t('modals.generics.confirmation')}\n        header={t('modals.deleteBridgeDialog.header')}\n      />\n    </div>\n  )\n}\n\nexport default BridgeEditor\n"],"names":["$Bridge","$BridgeSubscription","$LocalBridgeSubscription","$TlsConfiguration","useCreateBridge","appClient","useHttpClient","queryClient","useQueryClient","useMutation","requestBody","QUERY_KEYS","useUpdateBridge","name","useDeleteBridge","ConnectionPanel","form","t","useTranslation","getRulesForProperty","useValidationRules","register","errors","jsxs","Flex","FormControl","jsx","FormLabel","Input","FormErrorMessage","NumberInput","NumberInputField","NumberInputStepper","NumberIncrementStepper","NumberDecrementStepper","Box","NamePanel","isNewBridge","validationErrors","data","useListBridges","value","e","FormHelperText","OptionsPanel","Checkbox","CustomUserProperties","subscriptionIndex","type","fields","append","remove","useFieldArray","Table","Thead","Tr","Th","Tbody","index","Td","Controller","field","ButtonGroup","IconButton","MdRemove","AddIcon","SubscriptionsPanel","prepend","hasPersistence","useGetCapability","Capability","isPersistEnabled","Fragment","VStack","maxQoS","isQoSValidForPersistence","Card","HStack","CardBody","_b","_a","onChange","rest","SelectTopicFilter","values","item","_d","_c","_g","_f","_e","_i","_h","formatValue","CreatableSelect","_k","_j","_n","_m","_l","CardHeader","DeleteIcon","Accordion","AccordionItem","_o","AccordionButton","AccordionIcon","_r","_q","_p","AccordionPanel","RadioGroup","Stack","Radio","_u","_t","_s","Switch","_x","_w","_v","TLS_PROTOCOLS","CYPHER_SUITES","SecurityPanel","isTlsEnabled","useWatch","Select","PersistencePanel","WebSocketPanel","Text","BridgeMainDrawer","isOpen","isSubmitting","onClose","onSubmit","onDelete","bridge","useBridgeSetup","useForm","useEffect","Drawer","DrawerOverlay","DrawerContent","DrawerCloseButton","DrawerHeader","DrawerBody","Tabs","TabList","Tab","TabPanels","TabPanel","DrawerFooter","Button","bridgeInitialState","BridgeEditor","children","successToast","errorToast","useEdgeToast","onOpen","useDisclosure","bridgeId","useParams","setBridge","navigate","useNavigate","createBridge","updateBridge","deleteBridge","isConfirmDeleteOpen","onConfirmDeleteOpen","onConfirmDeleteClose","onDeleteNode","useWorkspaceStore","b","handleEditorOnClose","handleEditorOnSubmit","err","handleEditorOnDelete","handleConfirmOnClose","handleConfirmOnSubmit","NodeTypes","ConfirmationDialog"],"mappings":"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"}