{"version":3,"file":"useWorkspaceStore-CGV4wV7X.js","sources":["../../src/modules/Workspace/hooks/useWorkspaceStore.ts"],"sourcesContent":["import { create } from 'zustand'\nimport type { EdgeChange, NodeChange, NodeAddChange, EdgeAddChange, Node } from 'reactflow'\nimport { addEdge, applyNodeChanges, applyEdgeChanges } from 'reactflow'\nimport type { Group, WorkspaceState, WorkspaceAction, DeviceMetadata } from '@/modules/Workspace/types.ts'\nimport { NodeTypes } from '@/modules/Workspace/types.ts'\nimport { persist, createJSONStorage } from 'zustand/middleware'\nimport type { Adapter } from '@/api/__generated__'\n\n// define the initial state\nconst initialState: WorkspaceState = {\n  nodes: [],\n  edges: [],\n}\n\nconst useWorkspaceStore = create<WorkspaceState & WorkspaceAction>()(\n  persist(\n    (set, get) => ({\n      ...initialState,\n      reset: () => {\n        set(initialState)\n      },\n      onNodesChange: (changes: NodeChange[]) => {\n        set({\n          nodes: applyNodeChanges(changes, get().nodes),\n        })\n      },\n      onEdgesChange: (changes: EdgeChange[]) => {\n        set({\n          edges: applyEdgeChanges(changes, get().edges),\n        })\n      },\n      onInsertGroupNode: (parentNode, edge, rect) => {\n        const nodeIds = parentNode.data.childrenNodeIds\n        // let pos = 0\n        set({\n          nodes: [\n            parentNode,\n            ...get().nodes.map((node) => {\n              if (nodeIds.includes(node.id)) {\n                return {\n                  ...node,\n                  position: { x: node.position.x - rect.x, y: node.position.y - rect.y },\n                  parentNode: parentNode.id,\n                  expandParent: true,\n                  selected: false,\n                }\n              }\n              return node\n            }),\n          ],\n        })\n\n        set({\n          edges: addEdge(edge, get().edges),\n        })\n      },\n      onAddNodes: (changes: NodeAddChange[]) => {\n        const nodeIDs = get().nodes.map((e) => e.id)\n\n        const addChanges: NodeChange[] = changes.filter((e) => !nodeIDs.includes(e.item.id))\n        if (addChanges.length)\n          set({\n            nodes: applyNodeChanges(addChanges, get().nodes),\n          })\n      },\n      onAddEdges: (changes: EdgeAddChange[]) => {\n        const ndID = get().edges.map((e) => e.id)\n\n        const addChanges: EdgeChange[] = changes.filter((e) => !ndID.includes(e.item.id))\n        if (addChanges.length)\n          set({\n            edges: applyEdgeChanges(addChanges, get().edges),\n          })\n      },\n      onDeleteNode: (type: NodeTypes, adapterId: string) => {\n        set({\n          nodes: get().nodes.filter((node) => {\n            const isThisTheAdapter = node.type === type && (node.data as Adapter).id === adapterId\n            const isThisTheDevice =\n              node.type === NodeTypes.DEVICE_NODE && (node.data as DeviceMetadata).sourceAdapterId == adapterId\n\n            return !isThisTheAdapter && !isThisTheDevice\n          }),\n        })\n      },\n      onToggleGroup: (node: Pick<Node<Group, NodeTypes.CLUSTER_NODE>, 'id' | 'data'>, showGroup: boolean) => {\n        set({\n          edges: get().edges.map((edge) => {\n            if (edge.source === node.id) return { ...edge, hidden: showGroup }\n            if (node.data?.childrenNodeIds.includes(edge.source)) return { ...edge, hidden: !showGroup }\n            return edge\n          }),\n        })\n      },\n      onGroupSetData: (id: string, group: Pick<Group, 'title' | 'colorScheme'>) => {\n        set({\n          nodes: get().nodes.map((n) => {\n            if (id === n.id) {\n              return {\n                ...n,\n                data: {\n                  ...n.data,\n                  ...group,\n                },\n              }\n            }\n            return n\n          }),\n        })\n      },\n    }),\n    {\n      name: 'edge.workspace',\n      storage: createJSONStorage(() => localStorage),\n    }\n  )\n)\n\nexport default useWorkspaceStore\n"],"names":["initialState","useWorkspaceStore","create","persist","set","get","changes","applyNodeChanges","applyEdgeChanges","parentNode","edge","rect","nodeIds","node","addEdge","nodeIDs","e","addChanges","ndID","type","adapterId","isThisTheAdapter","isThisTheDevice","NodeTypes","showGroup","_a","id","group","n","createJSONStorage"],"mappings":"+gBASA,MAAMA,EAA+B,CACnC,MAAO,CAAC,EACR,MAAO,CAAA,CACT,EAEMC,EAAoBC,EAAyC,EACjEC,EACE,CAACC,EAAKC,KAAS,CACb,GAAGL,EACH,MAAO,IAAM,CACXI,EAAIJ,CAAY,CAClB,EACA,cAAgBM,GAA0B,CACpCF,EAAA,CACF,MAAOG,EAAiBD,EAASD,IAAM,KAAK,CAAA,CAC7C,CACH,EACA,cAAgBC,GAA0B,CACpCF,EAAA,CACF,MAAOI,EAAiBF,EAASD,IAAM,KAAK,CAAA,CAC7C,CACH,EACA,kBAAmB,CAACI,EAAYC,EAAMC,IAAS,CACvC,MAAAC,EAAUH,EAAW,KAAK,gBAE5BL,EAAA,CACF,MAAO,CACLK,EACA,GAAGJ,EAAI,EAAE,MAAM,IAAKQ,GACdD,EAAQ,SAASC,EAAK,EAAE,EACnB,CACL,GAAGA,EACH,SAAU,CAAE,EAAGA,EAAK,SAAS,EAAIF,EAAK,EAAG,EAAGE,EAAK,SAAS,EAAIF,EAAK,CAAE,EACrE,WAAYF,EAAW,GACvB,aAAc,GACd,SAAU,EACZ,EAEKI,CACR,CAAA,CACH,CACD,EAEGT,EAAA,CACF,MAAOU,EAAQJ,EAAML,IAAM,KAAK,CAAA,CACjC,CACH,EACA,WAAaC,GAA6B,CAClC,MAAAS,EAAUV,IAAM,MAAM,IAAKW,GAAMA,EAAE,EAAE,EAErCC,EAA2BX,EAAQ,OAAQU,GAAM,CAACD,EAAQ,SAASC,EAAE,KAAK,EAAE,CAAC,EAC/EC,EAAW,QACTb,EAAA,CACF,MAAOG,EAAiBU,EAAYZ,IAAM,KAAK,CAAA,CAChD,CACL,EACA,WAAaC,GAA6B,CAClC,MAAAY,EAAOb,IAAM,MAAM,IAAKW,GAAMA,EAAE,EAAE,EAElCC,EAA2BX,EAAQ,OAAQU,GAAM,CAACE,EAAK,SAASF,EAAE,KAAK,EAAE,CAAC,EAC5EC,EAAW,QACTb,EAAA,CACF,MAAOI,EAAiBS,EAAYZ,IAAM,KAAK,CAAA,CAChD,CACL,EACA,aAAc,CAACc,EAAiBC,IAAsB,CAChDhB,EAAA,CACF,MAAOC,EAAI,EAAE,MAAM,OAAQQ,GAAS,CAClC,MAAMQ,EAAmBR,EAAK,OAASM,GAASN,EAAK,KAAiB,KAAOO,EACvEE,EACJT,EAAK,OAASU,EAAU,aAAgBV,EAAK,KAAwB,iBAAmBO,EAEnF,MAAA,CAACC,GAAoB,CAACC,CAC9B,CAAA,CAAA,CACF,CACH,EACA,cAAe,CAACT,EAAgEW,IAAuB,CACjGpB,EAAA,CACF,MAAOC,EAAI,EAAE,MAAM,IAAKK,GAAS,OAC3B,OAAAA,EAAK,SAAWG,EAAK,GAAW,CAAE,GAAGH,EAAM,OAAQc,CAAU,GAC7DC,EAAAZ,EAAK,OAAL,MAAAY,EAAW,gBAAgB,SAASf,EAAK,QAAgB,CAAE,GAAGA,EAAM,OAAQ,CAACc,CAAU,EACpFd,CACR,CAAA,CAAA,CACF,CACH,EACA,eAAgB,CAACgB,EAAYC,IAAgD,CACvEvB,EAAA,CACF,MAAOC,EAAI,EAAE,MAAM,IAAKuB,GAClBF,IAAOE,EAAE,GACJ,CACL,GAAGA,EACH,KAAM,CACJ,GAAGA,EAAE,KACL,GAAGD,CAAA,CAEP,EAEKC,CACR,CAAA,CACF,CAAA,CACH,GAEF,CACE,KAAM,iBACN,QAASC,EAAkB,IAAM,YAAY,CAAA,CAC/C,CAEJ"}