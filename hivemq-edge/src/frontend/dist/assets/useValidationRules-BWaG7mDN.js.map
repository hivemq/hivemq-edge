{"version":3,"file":"useValidationRules-BWaG7mDN.js","sources":["../../src/api/hooks/useValidationRules/useValidationRules.ts"],"sourcesContent":["import type { RegisterOptions } from 'react-hook-form'\nimport { useTranslation } from 'react-i18next'\n\n// See https://swagger.io/docs/specification/data-models/data-types/\nexport const useValidationRules = () => {\n  const { t } = useTranslation()\n\n  const getValidationRulesFor = (schema: Record<string, unknown>): RegisterOptions => {\n    const options: RegisterOptions = {}\n\n    const assert = (type: 'string' | 'number') => {\n      if (schema.type !== type) console.warn(`[openAPI - SyntaxError] Expecting type to be \"string\"`, { schema })\n    }\n\n    if (schema.isRequired) {\n      options.required = { value: true, message: t('validation.required') }\n    }\n    if (schema.maxLength) {\n      assert('string')\n      const length = schema.maxLength as number\n      options.maxLength = { value: length, message: t('validation.maxLength', { count: length }) }\n    }\n    if (schema.minimum) {\n      // TODO[NVL] exclusiveMinimum\n      assert('number')\n      const minimum = schema.minimum as number\n      options.min = { value: minimum, message: t('validation.minimum', { count: minimum }) }\n    }\n    if (schema.maximum) {\n      // TODO[NVL] exclusiveMaximum\n      assert('number')\n      const maximum = schema.maximum as number\n      options.max = { value: maximum, message: t('validation.maximum', { count: maximum }) }\n    }\n    if (schema.pattern) {\n      assert('string')\n      let patternString = schema.pattern as string\n      /* istanbul ignore next -- @preserve */\n      if (!patternString.startsWith('^')) patternString = `^${patternString}`\n      /* istanbul ignore next -- @preserve */\n      if (!patternString.endsWith('$')) patternString = `${patternString}$`\n      try {\n        const pattern = new RegExp(patternString)\n        options.pattern = { value: pattern, message: t('validation.pattern', { pattern: schema.pattern }) }\n      } catch (e: unknown) {\n        const error = e as Error\n        console.warn(`[openAPI - ${error.name}]`, error.message)\n      }\n    }\n    // TODO[NVL] multipleOf, minLength\n    return options\n  }\n\n  return getValidationRulesFor\n}\n"],"names":["useValidationRules","t","useTranslation","schema","options","assert","type","length","minimum","maximum","patternString","pattern","e","error"],"mappings":"4VAIO,MAAMA,EAAqB,IAAM,CAChC,KAAA,CAAE,EAAAC,CAAE,EAAIC,EAAe,EAgDtB,OA9CwBC,GAAqD,CAClF,MAAMC,EAA2B,CAAC,EAE5BC,EAAUC,GAA8B,CACxCH,EAAO,OAASG,GAAM,QAAQ,KAAK,wDAAyD,CAAE,OAAAH,EAAQ,CAC5G,EAKA,GAHIA,EAAO,aACTC,EAAQ,SAAW,CAAE,MAAO,GAAM,QAASH,EAAE,qBAAqB,CAAE,GAElEE,EAAO,UAAW,CACpBE,EAAO,QAAQ,EACf,MAAME,EAASJ,EAAO,UACdC,EAAA,UAAY,CAAE,MAAOG,EAAQ,QAASN,EAAE,uBAAwB,CAAE,MAAOM,CAAQ,CAAA,CAAE,CAAA,CAE7F,GAAIJ,EAAO,QAAS,CAElBE,EAAO,QAAQ,EACf,MAAMG,EAAUL,EAAO,QACfC,EAAA,IAAM,CAAE,MAAOI,EAAS,QAASP,EAAE,qBAAsB,CAAE,MAAOO,CAAS,CAAA,CAAE,CAAA,CAEvF,GAAIL,EAAO,QAAS,CAElBE,EAAO,QAAQ,EACf,MAAMI,EAAUN,EAAO,QACfC,EAAA,IAAM,CAAE,MAAOK,EAAS,QAASR,EAAE,qBAAsB,CAAE,MAAOQ,CAAS,CAAA,CAAE,CAAA,CAEvF,GAAIN,EAAO,QAAS,CAClBE,EAAO,QAAQ,EACf,IAAIK,EAAgBP,EAAO,QAAA,uCAEtBO,EAAc,WAAW,GAAG,IAAGA,EAAgB,IAAIA,CAAa,IAAA,uCAEhEA,EAAc,SAAS,GAAG,IAAGA,EAAgB,GAAGA,CAAa,KAC9D,GAAA,CACI,MAAAC,EAAU,IAAI,OAAOD,CAAa,EACxCN,EAAQ,QAAU,CAAE,MAAOO,EAAS,QAASV,EAAE,qBAAsB,CAAE,QAASE,EAAO,OAAS,CAAA,CAAE,QAC3FS,EAAY,CACnB,MAAMC,EAAQD,EACd,QAAQ,KAAK,cAAcC,EAAM,IAAI,IAAKA,EAAM,OAAO,CAAA,CACzD,CAGK,OAAAT,CACT,CAGF"}