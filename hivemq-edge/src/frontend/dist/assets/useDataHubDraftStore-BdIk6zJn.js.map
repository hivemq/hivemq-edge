{"version":3,"file":"useDataHubDraftStore-BdIk6zJn.js","sources":["../../src/extensions/datahub/designer/operation/OperationData.ts","../../src/extensions/datahub/utils/store.utils.ts","../../src/extensions/datahub/utils/edge.utils.ts","../../src/extensions/datahub/hooks/useDataHubDraftStore.ts"],"sourcesContent":["/* istanbul ignore file -- @preserve */\nimport type { PanelSpecs } from '@/extensions/datahub/types.ts'\nimport type { RJSFSchema } from '@rjsf/utils'\n\nimport schema from '@datahub/api/__generated__/schemas/OperationData.json'\n\nexport const MOCK_OPERATION_SCHEMA: PanelSpecs = {\n  schema: schema as RJSFSchema,\n  uiSchema: {\n    functionId: {\n      'ui:widget': 'datahub:function-selector',\n    },\n\n    formData: {\n      transform: {\n        'ui:options': {\n          readonly: true,\n          removable: false,\n          addable: false,\n        },\n      },\n      message: {\n        'ui:widget': 'datahub:message-interpolation',\n      },\n      incrementBy: {\n        'ui:widget': 'updown',\n      },\n      metricName: {\n        'ui:widget': 'datahub:metric-counter',\n      },\n    },\n  },\n}\n","import type { Edge, Node } from 'reactflow'\nimport type { RJSFSchema } from '@rjsf/utils'\n\nimport type { FunctionSpecs, WorkspaceState, WorkspaceStatus } from '@datahub/types.ts'\nimport { DesignerStatus } from '@datahub/types.ts'\nimport { MOCK_OPERATION_SCHEMA } from '@datahub/designer/operation/OperationData.ts'\n\nexport const getFunctions = (schema: RJSFSchema) => {\n  if (!schema) return []\n\n  const definitions = schema.definitions\n  if (!definitions) return []\n\n  // @ts-ignore TODO[NVL] A weird jsonschema structure to go through; better alternative?\n  const functionNames = definitions.functionId?.properties?.functionId?.enum as string[]\n\n  if (!functionNames) return []\n\n  return functionNames.map((functionName) => {\n    const definition = definitions[functionName]\n    if (!definition) return {} as FunctionSpecs\n\n    // @ts-ignore\n    const metadata: FunctionDefinition = definition.metadata\n    const functionSpec: FunctionSpecs = {\n      functionId: functionName,\n      schema: definition as RJSFSchema,\n      metadata,\n    }\n    return functionSpec\n  })\n}\n\nexport const initialStore = (): WorkspaceState & WorkspaceStatus => {\n  const nodes: Node[] = []\n  const edges: Edge[] = []\n\n  const functions = getFunctions(MOCK_OPERATION_SCHEMA.schema)\n\n  return { nodes, edges, functions: functions, name: '', status: DesignerStatus.DRAFT, type: undefined }\n}\n","import type { Edge } from 'reactflow'\nimport { MarkerType } from 'reactflow'\n\n// TODO[NVL] Too restrictive for theming; use custom edge\nexport const styleDefaultEdge: Pick<Edge, 'markerEnd' | 'markerStart' | 'style'> = {\n  markerEnd: {\n    type: MarkerType.ArrowClosed,\n    width: 15,\n    height: 20,\n    color: 'var(--chakra-colors-gray-500)',\n  },\n  style: {\n    strokeWidth: 2,\n    stroke: 'var(--chakra-colors-gray-500)',\n  },\n}\n","import type { Connection, EdgeAddChange, EdgeChange, NodeAddChange, NodeChange, Node } from 'reactflow'\nimport { addEdge, applyEdgeChanges, applyNodeChanges } from 'reactflow'\nimport { create } from 'zustand'\nimport { createJSONStorage, persist } from 'zustand/middleware'\n\nimport type {\n  BehaviorPolicyData,\n  DataPolicyData,\n  DesignerStatus,\n  FunctionSpecs,\n  WorkspaceAction,\n  WorkspaceState,\n  WorkspaceStatus,\n} from '../types.ts'\nimport { DataHubNodeType, EdgeTypes } from '../types.ts'\nimport { initialStore } from '../utils/store.utils.ts'\nimport { styleDefaultEdge } from '../utils/edge.utils.ts'\n\nconst useDataHubDraftStore = create<WorkspaceState & WorkspaceStatus & WorkspaceAction>()(\n  persist(\n    (set, get) => ({\n      ...initialStore(),\n      reset: () => {\n        set(initialStore())\n      },\n      isDirty: () => {\n        return get().nodes.length !== 0\n      },\n      isPolicyInDraft: () => {\n        return (\n          get().nodes.filter(\n            (node) => node.type === DataHubNodeType.DATA_POLICY || node.type === DataHubNodeType.BEHAVIOR_POLICY\n          ).length !== 0\n        )\n      },\n      onNodesChange: (changes: NodeChange[]) => {\n        set({\n          nodes: applyNodeChanges(changes, get().nodes),\n        })\n      },\n      onEdgesChange: (changes: EdgeChange[]) => {\n        set({\n          edges: applyEdgeChanges(changes, get().edges),\n        })\n      },\n      onConnect: (connection: Connection) => {\n        set({\n          edges: addEdge(\n            {\n              ...connection,\n              type: EdgeTypes.DATAHUB_EDGE,\n              markerEnd: styleDefaultEdge.markerEnd,\n            },\n            get().edges\n          ),\n        })\n      },\n      onAddNodes: (changes: NodeAddChange[]) => {\n        const nodeIDs = get().nodes.map((e) => e.id)\n\n        const addChanges: NodeChange[] = changes.filter((e) => !nodeIDs.includes(e.item.id))\n        if (addChanges.length) {\n          set({\n            nodes: applyNodeChanges(addChanges, get().nodes),\n          })\n        }\n      },\n      onAddEdges: (changes: EdgeAddChange[]) => {\n        const ndID = get().edges.map((e) => e.id)\n\n        const addChanges: EdgeChange[] = changes.filter((e) => !ndID.includes(e.item.id))\n        if (addChanges.length) {\n          set({\n            edges: applyEdgeChanges(addChanges, get().edges),\n          })\n        }\n      },\n      onUpdateNodes: <T>(item: string, data: T) => {\n        set({\n          nodes: get().nodes.map((node) => {\n            if (node.id === item) {\n              node.data = data\n            }\n            return node\n          }),\n        })\n      },\n      onAddFunctions: (changes: FunctionSpecs[]) => {\n        set({ functions: [...get().functions, ...changes] })\n      },\n      onSerializePolicy: (node: Node<DataPolicyData | BehaviorPolicyData>): string | undefined => {\n        if (node.type !== DataHubNodeType.BEHAVIOR_POLICY && node.type !== DataHubNodeType.DATA_POLICY) return undefined\n        return undefined\n      },\n      setStatus: (\n        status: DesignerStatus,\n        option?: { name?: string; type?: DataHubNodeType.DATA_POLICY | DataHubNodeType.BEHAVIOR_POLICY }\n      ) => {\n        set({ status: status })\n        if (option && option.name != undefined) set({ name: option.name })\n        if (option?.type) set({ type: option.type })\n      },\n    }),\n    {\n      name: 'datahub.workspace',\n      storage: createJSONStorage(() => localStorage),\n    }\n  )\n)\n\nexport default useDataHubDraftStore\n"],"names":["MOCK_OPERATION_SCHEMA","schema","getFunctions","definitions","functionNames","_c","_b","_a","functionName","definition","metadata","initialStore","nodes","edges","functions","DesignerStatus","styleDefaultEdge","MarkerType","useDataHubDraftStore","create","persist","set","get","node","DataHubNodeType","changes","applyNodeChanges","applyEdgeChanges","connection","addEdge","EdgeTypes","nodeIDs","e","addChanges","ndID","item","data","status","option","createJSONStorage"],"mappings":"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"}