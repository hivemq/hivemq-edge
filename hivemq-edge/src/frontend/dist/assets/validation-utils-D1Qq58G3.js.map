{"version":3,"file":"validation-utils-D1Qq58G3.js","sources":["../../src/modules/ProtocolAdapters/utils/validation-utils.ts"],"sourcesContent":["import type { FormValidation, RJSFSchema, StrictRJSFSchema, UiSchema } from '@rjsf/utils'\nimport type { Adapter, SouthboundMapping } from '@/api/__generated__'\n\nimport i18n from '@/config/i18n.config.ts'\n\nimport type { AdapterConfig } from '@/modules/ProtocolAdapters/types.ts'\n//\n// import {\n//   getOutwardMappingRootProperty,\n//   getOutwardMappingRootPropertyKey,\n// } from '@/modules/Workspace/utils/adapter.utils.ts'\n\n/**\n *\n * @param jsonSchema\n * @param existingAdapters\n *\n * The custom validation only exposes the form data and the UISchema configuration, NOT the JSONSchema.\n * This is potentially a gap when trying to create custom validation rules.\n *\n * TODO[#93] Principle: custom validation should be based\n *   - first on conditions from the JSONSchema\n *   - second on conditions from the uiSchema\n *   - then (last stand) on conditions from the property name (i.e. formData)\n *\n */\nexport const customUniqueAdapterValidate =\n  (jsonSchema: RJSFSchema, existingAdapters: Adapter[] | undefined) =>\n  (formData: Record<string, unknown>, errors: FormValidation<AdapterConfig>, uiSchema?: UiSchema<AdapterConfig>) => {\n    // Check for uniqueness of `id` ONLY if `format` = `identifier` and not `ui:disabled`\n    if (\n      !uiSchema?.id?.['ui:disabled'] &&\n      (jsonSchema.properties?.['id'] as StrictRJSFSchema)?.format === 'identifier'\n    ) {\n      if (existingAdapters?.map((e) => e.id).includes(formData.id as string)) {\n        errors.id?.addError(i18n.t('validation.identifier.adapter.unique'))\n      }\n    }\n    return errors\n  }\n\nexport const customMappingValidate =\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  (_adapterType: string) => (_formData: Record<string, SouthboundMapping[]>, errors: FormValidation) => {\n    return errors\n\n    // TODO[⚠ 28441 ⚠] This will not work anymore because of nested structure. DO NOT MERGE AND FIX\n    // const key = getOutwardMappingRootProperty(adapterType)\n    // const outwardMappingsKey = getOutwardMappingRootPropertyKey(adapterType)\n    // // @ts-ignore\n    // const outwardMappings = formData[key][outwardMappingsKey] as SouthboundMapping[]\n    //\n    // if (!outwardMappings.length) return errors\n    //\n    // // return outwardMappings.reduce((errors, currentMapping, index) => {\n    // return outwardMappings.reduce((errors) => {\n    //   // const { metadata, fieldMapping } = currentMapping\n    //   // if (!metadata) {\n    //   //   errors?.[key]?.[outwardMappingsKey]?.[index]?.fieldMapping?.addError(\n    //   //     i18n.t('components:rjsf.MqttTransformationField.validation.error.noValidation')\n    //   //   )\n    //   //   return errors\n    //   // }\n    //   //\n    //   // const { destination } = metadata\n    //   // if (!destination) {\n    //   //   // TODO[NVL] This is not necessarily an error\n    //   //   errors?.[key]?.[outwardMappingsKey]?.[index]?.fieldMapping?.addError(\n    //   //     i18n.t('components:rjsf.MqttTransformationField.validation.error.noSchema')\n    //   //   )\n    //   //   return errors\n    //   // }\n    //   //\n    //   // const countRequired = destination.length\n    //   //\n    //   // if (fieldMapping?.length !== countRequired) {\n    //   //   errors?.[key]?.[outwardMappingsKey]?.[index]?.fieldMapping?.addError(\n    //   //     i18n.t('components:rjsf.MqttTransformationField.validation.error.missingMapping')\n    //   //   )\n    //   //   return errors\n    //   // }\n    //\n    //   return errors\n    // }, errors)\n  }\n"],"names":["customUniqueAdapterValidate","jsonSchema","existingAdapters","formData","errors","uiSchema","_a","_c","_b","e","_d","i18n","customMappingValidate","_adapterType","_formData"],"mappings":"iWA0BO,MAAMA,EACX,CAACC,EAAwBC,IACzB,CAACC,EAAmCC,EAAuCC,IAAuC,aAG9G,MAAA,GAACC,EAAAD,GAAA,YAAAA,EAAU,KAAV,MAAAC,EAAe,mBACfC,GAAAC,EAAAP,EAAW,aAAX,YAAAO,EAAwB,KAAxB,YAAAD,EAAoD,UAAW,cAE5DL,GAAA,MAAAA,EAAkB,IAAKO,GAAMA,EAAE,IAAI,SAASN,EAAS,OACvDO,EAAAN,EAAO,KAAP,MAAAM,EAAW,SAASC,EAAK,EAAE,sCAAsC,IAG9DP,CACT,EAEWQ,EAEVC,GAAyB,CAACC,EAAgDV,IAClEA"}