{"version":3,"file":"ArrayItemDrawer-uF-ZCmSZ.js","sources":["../../src/modules/Device/utils/validation.utils.ts","../../src/modules/Device/components/DeviceTagForm.tsx","../../src/components/rjsf/SplitArrayEditor/components/ArrayItemDrawer.tsx"],"sourcesContent":["import type { FormValidation } from '@rjsf/utils'\nimport type { DomainTagList } from '@/api/__generated__'\n\nimport i18n from '@/config/i18n.config.ts'\n\nexport const customUniqueTagValidation =\n  (allTags: string[]) => (formData: DomainTagList, errors: FormValidation<DomainTagList>) => {\n    // initial names have already been checked and are excluded from the allTags\n\n    // Check for duplicate names in the current form\n    const allLocal = formData.items.map((tag) => tag.name)\n    const localDuplicates = formData.items.reduce<number[]>((acc, tag, currentIndex) => {\n      if (allLocal.indexOf(tag.name) !== currentIndex) {\n        acc.push(currentIndex)\n      }\n      return acc\n    }, [])\n\n    for (const duplicate of localDuplicates) {\n      errors?.items?.[duplicate]?.name?.addError(\n        i18n.t('validation.identifier.tag.uniqueDevice', { ns: 'translation' })\n      )\n    }\n\n    // Check for duplicate names across all devices\n    const edgeDuplicates = formData.items.reduce<number[]>((acc, item, currentIndex) => {\n      if (allTags.includes(item.name)) {\n        acc.push(currentIndex)\n      }\n      return acc\n    }, [])\n\n    for (const duplicate of edgeDuplicates) {\n      errors?.items?.[duplicate]?.name?.addError(i18n.t('validation.identifier.tag.uniqueEdge', { ns: 'translation' }))\n    }\n\n    return errors\n  }\n","import type { FC } from 'react'\nimport { useCallback } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport type { IChangeEvent } from '@rjsf/core'\n\nimport type { DomainTagList } from '@/api/__generated__'\nimport ErrorMessage from '@/components/ErrorMessage.tsx'\nimport type { ManagerContextType } from '@/modules/Mappings/types.ts'\nimport ChakraRJSForm from '@/components/rjsf/Form/ChakraRJSForm.tsx'\nimport { customUniqueTagValidation } from '@/modules/Device/utils/validation.utils.ts'\nimport { useListDomainTags } from '@/api/hooks/useDomainModel/useListDomainTags.ts'\n\ninterface DeviceTagFormProps {\n  context: ManagerContextType<DomainTagList>\n  onSubmit?: (data: DomainTagList | undefined) => void\n}\n\nconst DeviceTagForm: FC<DeviceTagFormProps> = ({ context, onSubmit }) => {\n  const { t } = useTranslation()\n  const { data } = useListDomainTags()\n\n  const allNames = (data?.items || []).map((e) => e.name)\n  const initialNames = [...(context.formData?.items || [])].map((e) => e.name)\n  // initial names have already been checked\n  const cleanNames = allNames.filter((e) => !initialNames.includes(e))\n\n  const onFormSubmit = useCallback(\n    (data: IChangeEvent<DomainTagList>) => {\n      onSubmit?.(data.formData)\n    },\n    [onSubmit]\n  )\n\n  if (!context.schema) return <ErrorMessage message={t('device.errors.noFormSchema')} />\n\n  return (\n    <ChakraRJSForm\n      id=\"domainTags-instance-form\"\n      schema={context.schema}\n      uiSchema={context.uiSchema}\n      formData={context.formData}\n      onSubmit={onFormSubmit}\n      // @ts-ignore Need to fix that TS error\n      customValidate={customUniqueTagValidation(cleanNames)}\n    />\n  )\n}\n\nexport default DeviceTagForm\n","import type { FC } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport type { UseDisclosureProps } from '@chakra-ui/react'\nimport {\n  Button,\n  Drawer,\n  DrawerBody,\n  DrawerCloseButton,\n  DrawerContent,\n  DrawerFooter,\n  DrawerHeader,\n  DrawerOverlay,\n  Text,\n  useDisclosure,\n} from '@chakra-ui/react'\n\nimport type { DomainTagList } from '@/api/__generated__'\nimport DeviceTagForm from '@/modules/Device/components/DeviceTagForm.tsx'\nimport type { ManagerContextType } from '@/modules/Mappings/types.ts'\n\ninterface DeviceTagDrawerProps<T> {\n  context: ManagerContextType<T>\n  // TODO[NVL] Make the component generic and pass the type\n  onSubmit?: (data: unknown) => void\n  trigger: (disclosureProps: UseDisclosureProps) => JSX.Element\n  header: string\n  submitLabel?: string\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst ArrayItemDrawer: FC<DeviceTagDrawerProps<any>> = ({ header, context, onSubmit, trigger, submitLabel }) => {\n  const { t } = useTranslation('components')\n  const props = useDisclosure()\n  const { isOpen, onClose } = props\n\n  const onHandleSubmit = (data: DomainTagList | undefined) => {\n    onSubmit?.(data)\n    onClose()\n  }\n\n  return (\n    <>\n      {trigger(props)}\n      <Drawer isOpen={isOpen} placement=\"right\" size=\"md\" onClose={onClose} closeOnOverlayClick={false}>\n        <DrawerOverlay />\n        <DrawerContent>\n          <DrawerCloseButton />\n          <DrawerHeader>\n            <Text>{header}</Text>\n          </DrawerHeader>\n\n          <DrawerBody>\n            <DeviceTagForm context={context} onSubmit={onHandleSubmit} />\n          </DrawerBody>\n\n          <DrawerFooter>\n            <Button variant=\"primary\" type=\"submit\" form=\"domainTags-instance-form\">\n              {submitLabel || t('rjsf.actions.submit.label')}\n            </Button>\n          </DrawerFooter>\n        </DrawerContent>\n      </Drawer>\n    </>\n  )\n}\n\nexport default ArrayItemDrawer\n"],"names":["customUniqueTagValidation","allTags","formData","errors","allLocal","tag","localDuplicates","acc","currentIndex","duplicate","_c","_b","_a","i18n","edgeDuplicates","item","_f","_e","_d","DeviceTagForm","context","onSubmit","t","useTranslation","data","useListDomainTags","allNames","e","initialNames","cleanNames","onFormSubmit","useCallback","jsx","ChakraRJSForm","ErrorMessage","ArrayItemDrawer","header","trigger","submitLabel","props","useDisclosure","isOpen","onClose","onHandleSubmit","jsxs","Fragment","Drawer","DrawerOverlay","DrawerContent","DrawerCloseButton","DrawerHeader","Text","DrawerBody","DrawerFooter","Button"],"mappings":"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"}