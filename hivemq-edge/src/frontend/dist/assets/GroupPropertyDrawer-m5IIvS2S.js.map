{"version":3,"file":"GroupPropertyDrawer-m5IIvS2S.js","sources":["../../src/components/Chakra/ColorPicker.tsx","../../src/modules/Workspace/components/parts/GroupMetadataEditor.tsx","../../src/modules/Workspace/components/parts/GroupContentEditor.tsx","../../src/modules/Workspace/components/drawers/GroupPropertyDrawer.tsx"],"sourcesContent":["import type { ButtonProps, PlacementWithLogical } from '@chakra-ui/react'\nimport {\n  Button,\n  Popover,\n  PopoverArrow,\n  PopoverContent,\n  PopoverTrigger,\n  SimpleGrid,\n  Box,\n  Flex,\n  Portal,\n  forwardRef,\n} from '@chakra-ui/react'\nimport { useState } from 'react'\nimport { useTranslation } from 'react-i18next'\n\n// TODO[NVL] Verify that they are valid colorScheme from the theme\nconst defaultColorSchemes = ['gray', 'red', 'orange', 'yellow', 'green', 'teal', 'blue', 'cyan', 'purple', 'pink']\n\ninterface ColorPickerProps extends Omit<ButtonProps, 'onChange'> {\n  colorScheme: string | undefined\n  onChange: (value: string) => void\n  colorSchemes?: string[]\n  isDisabled?: boolean\n  placement?: PlacementWithLogical\n}\n\nexport const ColorPicker = forwardRef<ColorPickerProps, 'div'>(\n  ({ onChange, isDisabled, colorScheme, colorSchemes, placement, ...props }: ColorPickerProps, ref) => {\n    const { t } = useTranslation('components')\n    const schemeOptions = colorSchemes || defaultColorSchemes\n    const [selectedColorScheme, setSelectedColorScheme] = useState<string>(colorScheme || schemeOptions[0])\n\n    return (\n      <Popover placement={placement || 'bottom'} isLazy>\n        <PopoverTrigger>\n          <Button\n            ref={ref}\n            isDisabled={isDisabled}\n            data-testid=\"colorPicker-trigger\"\n            data-color-scheme={selectedColorScheme}\n            aria-label={t('ColorPicker.trigger', { scheme: selectedColorScheme })}\n            bg={`${selectedColorScheme}.500`}\n            _hover={{ bg: `${selectedColorScheme}.500` }}\n            _active={{ bg: `${selectedColorScheme}.700` }}\n            {...props}\n          ></Button>\n        </PopoverTrigger>\n\n        <Portal>\n          <Box\n            // Fix for the portal's zIndex\n            sx={{\n              '& .chakra-popover__popper': {\n                zIndex: 'popover',\n              },\n            }}\n          >\n            <PopoverContent w=\"auto\" boxShadow=\"md\" data-testid=\"colorPicker-popover\" aria-label=\"ColorPicker.popover\">\n              <PopoverArrow backgroundColor={`${selectedColorScheme}.500`} />\n              <SimpleGrid columns={1}>\n                <Flex\n                  data-testid=\"colorPicker-sample\"\n                  alignItems=\"center\"\n                  justifyContent=\"center\"\n                  borderWidth={0}\n                  borderTopRadius=\"sm\"\n                  h={10}\n                  w=\"100%\"\n                  p={0}\n                  fontSize=\"lg\"\n                  bg={`${selectedColorScheme}.500`}\n                  color=\"black\"\n                >\n                  {selectedColorScheme}\n                </Flex>\n              </SimpleGrid>\n              <SimpleGrid columns={5} p={1} spacing={1}>\n                {schemeOptions.map((color, index) => {\n                  // const [a] = color.split('.')\n                  // const g = `${a}.${selectedColorScheme || 50}`\n                  return (\n                    <Button\n                      key={`color-picker-${color}-${index}`}\n                      data-testid={`colorPicker-selector-${index}`}\n                      data-color-scheme={color}\n                      aria-label={t('ColorPicker.option', { scheme: color })}\n                      onClick={() => {\n                        setSelectedColorScheme(color)\n                        onChange(color)\n                      }}\n                      h={6}\n                      w={6}\n                      minW={6}\n                      bg={`${color}.500`}\n                      _hover={{ bg: `${color}.500`, transform: 'scale(1.1)' }}\n                      _active={{ bg: `${color}.500` }}\n                    />\n                  )\n                })}\n              </SimpleGrid>\n            </PopoverContent>\n          </Box>\n        </Portal>\n      </Popover>\n    )\n  }\n)\n","import type { FC } from 'react'\nimport type { Node } from 'reactflow'\nimport { useTranslation } from 'react-i18next'\nimport { Controller, useForm } from 'react-hook-form'\nimport { Button, Card, CardBody, CardFooter, CardHeader, FormControl, FormLabel, Input } from '@chakra-ui/react'\n\nimport type { Group } from '@/modules/Workspace/types.ts'\nimport { ColorPicker } from '@/components/Chakra/ColorPicker.tsx'\n\ninterface GroupMetadataEditorProps {\n  group: Node<Group>\n  onSubmit: (data: Group) => void\n}\n\nconst GroupMetadataEditor: FC<GroupMetadataEditorProps> = ({ group, onSubmit }) => {\n  const { t } = useTranslation()\n  const { register, control, reset, formState, handleSubmit } = useForm<Group>({\n    mode: 'all',\n    criteriaMode: 'all',\n    defaultValues: group.data,\n  })\n\n  const handleFormSubmit = (data: Group) => {\n    onSubmit(data)\n    reset(data)\n  }\n\n  return (\n    <Card size=\"sm\">\n      <CardHeader data-testid=\"group-metadata-header\">{t('workspace.grouping.editor.title')}</CardHeader>\n      <CardBody>\n        <form\n          id=\"group-form\"\n          onSubmit={handleSubmit(handleFormSubmit)}\n          style={{ display: 'flex', flexDirection: 'row', gap: '18px' }}\n        >\n          <FormControl>\n            <FormLabel htmlFor=\"group-title\">{t('workspace.grouping.editor.input-title')}</FormLabel>\n            <Input id=\"group-title\" {...register('title')} />\n          </FormControl>\n\n          <FormControl as=\"fieldset\">\n            <FormLabel as=\"legend\">{t('workspace.grouping.editor.input-color')}</FormLabel>\n            <Controller\n              name=\"colorScheme\"\n              render={({ field }) => {\n                const { value, onChange, ...rest } = field\n                return <ColorPicker colorScheme={value} onChange={(value) => onChange(value)} {...rest} />\n              }}\n              control={control}\n            />\n          </FormControl>\n        </form>\n      </CardBody>\n      <CardFooter justifyContent=\"flex-end\">\n        <Button isDisabled={!formState.isDirty} type=\"submit\" form=\"group-form\" data-testid=\"form-submit\">\n          {t('workspace.grouping.editor.save')}\n        </Button>\n      </CardFooter>\n    </Card>\n  )\n}\n\nexport default GroupMetadataEditor\n","import type { FC } from 'react'\nimport { useMemo } from 'react'\nimport type { Node } from 'reactflow'\nimport { useTranslation } from 'react-i18next'\nimport type { ColumnDef } from '@tanstack/react-table'\nimport { ButtonGroup, Card, CardBody, CardFooter, CardHeader, Icon } from '@chakra-ui/react'\nimport { MdPlayArrow, MdRestartAlt, MdStop } from 'react-icons/md'\n\nimport IconButton from '@/components/Chakra/IconButton.tsx'\nimport PaginatedTable from '@/components/PaginatedTable/PaginatedTable.tsx'\nimport useWorkspaceStore from '@/modules/Workspace/hooks/useWorkspaceStore.ts'\nimport type { Group } from '@/modules/Workspace/types.ts'\nimport { AdapterStatusContainer } from '@/modules/ProtocolAdapters/components/adapters/AdapterStatusContainer.tsx'\nimport { ImUngroup } from 'react-icons/im'\n\ninterface GroupContentEditorProps {\n  group: Node<Group>\n}\n\nconst GroupContentEditor: FC<GroupContentEditorProps> = ({ group }) => {\n  const { t } = useTranslation()\n  const { nodes } = useWorkspaceStore()\n\n  const columns = useMemo<ColumnDef<Node>[]>(() => {\n    return [\n      {\n        accessorKey: 'type',\n        header: t('workspace.grouping.editor.content.header.type'),\n        cell: (info) => {\n          return t('workspace.device.type', { context: info.getValue<string>() })\n        },\n      },\n      {\n        accessorKey: 'data.status',\n        header: t('workspace.grouping.editor.content.header.status'),\n        cell: (info) => {\n          return <AdapterStatusContainer id={info.row.original.data.id} />\n        },\n      },\n      {\n        accessorKey: 'data.id',\n        header: t('workspace.grouping.editor.content.header.id'),\n      },\n      {\n        id: 'actions',\n        header: t('workspace.grouping.editor.content.header.actions'),\n        sortingFn: undefined,\n        cell: () => {\n          return (\n            <ButtonGroup isAttached size=\"xs\" isDisabled>\n              <IconButton\n                aria-label={t('workspace.grouping.editor.content.actions.ungroup')}\n                icon={<Icon as={ImUngroup} />}\n                onClick={() => undefined}\n              />\n            </ButtonGroup>\n          )\n        },\n        footer: () => {\n          return (\n            <ButtonGroup isAttached size=\"xs\" isDisabled>\n              <IconButton\n                aria-label={t('workspace.grouping.editor.content.actions.startAll')}\n                icon={<MdPlayArrow />}\n                onClick={() => undefined}\n              />\n              <IconButton\n                aria-label={t('workspace.grouping.editor.content.actions.stopAll')}\n                icon={<MdStop />}\n                onClick={() => undefined}\n              />\n              <IconButton\n                aria-label={t('workspace.grouping.editor.content.actions.restartAll')}\n                icon={<MdRestartAlt />}\n                onClick={() => undefined}\n              />\n            </ButtonGroup>\n          )\n        },\n      },\n    ]\n  }, [t])\n\n  const data = useMemo<Node[]>(() => {\n    return group.data.childrenNodeIds.map((e) => nodes.find((x) => x.id === e)).filter((e) => Boolean(e)) as Node[]\n  }, [group.data.childrenNodeIds, nodes])\n\n  return (\n    <Card size=\"sm\">\n      <CardHeader data-testid=\"group-content-header\">{t('Content Management')}</CardHeader>\n      <CardBody>\n        <PaginatedTable<Node>\n          aria-label={t('eventLog.title')}\n          data={data}\n          columns={columns}\n          enablePaginationSizes={false}\n          enablePaginationGoTo={false}\n        />\n      </CardBody>\n      <CardFooter justifyContent=\"flex-end\"></CardFooter>\n    </Card>\n  )\n}\n\nexport default GroupContentEditor\n","import type { FC } from 'react'\nimport { useMemo } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport type { Node } from 'reactflow'\nimport { Link as RouterLink } from 'react-router-dom'\nimport {\n  Button,\n  Card,\n  CardBody,\n  CardFooter,\n  CardHeader,\n  Drawer,\n  DrawerBody,\n  DrawerCloseButton,\n  DrawerContent,\n  DrawerHeader,\n  DrawerOverlay,\n  Tab,\n  TabList,\n  TabPanel,\n  TabPanels,\n  Tabs,\n  Text,\n  VStack,\n} from '@chakra-ui/react'\nimport { MdOutlineEventNote } from 'react-icons/md'\n\nimport MetricsContainer from '@/modules/Metrics/MetricsContainer.tsx'\n\nimport type { Group } from '../../types.ts'\nimport { NodeTypes } from '../../types.ts'\nimport useWorkspaceStore from '../../hooks/useWorkspaceStore.ts'\nimport { getDefaultMetricsFor } from '../../utils/nodes-utils.ts'\nimport GroupMetadataEditor from '../parts/GroupMetadataEditor.tsx'\nimport type { MetricsFilter } from '@/modules/Metrics/types.ts'\nimport { ChartType } from '@/modules/Metrics/types.ts'\nimport NodeNameCard from '@/modules/Workspace/components/parts/NodeNameCard.tsx'\nimport GroupContentEditor from '@/modules/Workspace/components/parts/GroupContentEditor.tsx'\nimport EventLogTable from '@/modules/EventLog/components/table/EventLogTable.tsx'\n\ninterface GroupPropertyDrawerProps {\n  nodeId: string\n  selectedNode: Node<Group>\n  nodes: Node[]\n  isOpen: boolean\n  showConfig?: boolean\n  onClose: () => void\n  onEditEntity: () => void\n}\n\nconst GroupPropertyDrawer: FC<GroupPropertyDrawerProps> = ({\n  nodeId,\n  isOpen,\n  showConfig = false,\n  selectedNode,\n  nodes,\n  onClose,\n}) => {\n  const { t } = useTranslation()\n  const { onGroupSetData } = useWorkspaceStore()\n\n  const adapterIDs = selectedNode.data.childrenNodeIds.map<Node | undefined>((e) => nodes.find((x) => x.id === e))\n  const metrics = adapterIDs.map((x) => (x ? getDefaultMetricsFor(x) : [])).flat()\n\n  const linkEventLog = useMemo(() => {\n    const searchParams = new URLSearchParams()\n    for (const node of adapterIDs) {\n      if (node) searchParams.append('source', node.data.id)\n    }\n    return `/event-logs?${searchParams.toString()}`\n  }, [adapterIDs])\n\n  const panelTitle = showConfig\n    ? t('workspace.property.header', { context: selectedNode.type })\n    : t('workspace.observability.header', { context: selectedNode.type })\n\n  const renderMetricsContainer = () => (\n    <MetricsContainer\n      nodeId={nodeId}\n      type={selectedNode.type as NodeTypes}\n      filters={adapterIDs.reduce<MetricsFilter[]>((acc, cur) => {\n        if (cur && cur.type === NodeTypes.ADAPTER_NODE) {\n          acc.push({ id: cur.data.id, type: `com.hivemq.edge.protocol-adapters.${cur.data.type}` })\n        }\n        return acc\n      }, [])}\n      initMetrics={metrics}\n      defaultChartType={showConfig ? ChartType.SAMPLE : undefined}\n    />\n  )\n\n  const renderGroupTabs = () => (\n    <Tabs>\n      <TabList>\n        <Tab>{t('workspace.grouping.editor.tabs.config')}</Tab>\n        <Tab>{t('workspace.grouping.editor.tabs.events')}</Tab>\n        <Tab>{t('workspace.grouping.editor.tabs.metrics')}</Tab>\n      </TabList>\n\n      <TabPanels>\n        <TabPanel px={0} as={VStack} alignItems=\"stretch\">\n          <GroupMetadataEditor\n            group={selectedNode}\n            onSubmit={(group) => {\n              onGroupSetData(nodeId, group)\n            }}\n          />\n          <GroupContentEditor group={selectedNode} />\n        </TabPanel>\n        <TabPanel px={0} as={VStack} alignItems=\"stretch\">\n          <Card size=\"sm\">\n            <CardHeader>\n              <Text>{t('workspace.grouping.editor.eventLog.header')}</Text>\n            </CardHeader>\n            <CardBody>\n              <EventLogTable\n                globalSourceFilter={adapterIDs.map((e) => e?.data.id)}\n                variant=\"summary\"\n                maxEvents={10}\n                isSingleSource={false}\n              />\n            </CardBody>\n            <CardFooter justifyContent=\"flex-end\" pt={0}>\n              <Button\n                data-testid=\"navigate-eventLog-filtered\"\n                variant=\"link\"\n                as={RouterLink}\n                // URL options not yet supported\n                to={linkEventLog}\n                rightIcon={<MdOutlineEventNote />}\n                size=\"sm\"\n              >\n                {t('workspace.grouping.editor.eventLog.showMore')}\n              </Button>\n            </CardFooter>\n          </Card>\n        </TabPanel>\n        <TabPanel px={0} as={VStack} alignItems=\"stretch\">\n          {renderMetricsContainer()}\n        </TabPanel>\n      </TabPanels>\n    </Tabs>\n  )\n\n  return (\n    <Drawer isOpen={isOpen} placement=\"right\" size=\"lg\" onClose={onClose} variant=\"hivemq\">\n      <DrawerOverlay />\n      <DrawerContent aria-label={panelTitle}>\n        <DrawerCloseButton />\n\n        <DrawerHeader>\n          <Text data-testid=\"group-panel-title\">{panelTitle}</Text>\n          <NodeNameCard\n            description={t('workspace.device.type', { context: selectedNode.type })}\n            type={selectedNode.type as NodeTypes}\n            name={selectedNode.data.title}\n          />\n        </DrawerHeader>\n        <DrawerBody display=\"flex\" flexDirection=\"column\" gap={6}>\n          {showConfig && renderGroupTabs()}\n          {!showConfig && renderMetricsContainer()}\n        </DrawerBody>\n      </DrawerContent>\n    </Drawer>\n  )\n}\n\nexport default GroupPropertyDrawer\n"],"names":["defaultColorSchemes","ColorPicker","forwardRef","onChange","isDisabled","colorScheme","colorSchemes","placement","props","ref","t","useTranslation","schemeOptions","selectedColorScheme","setSelectedColorScheme","useState","Popover","jsx","PopoverTrigger","Button","Portal","Box","jsxs","PopoverContent","PopoverArrow","SimpleGrid","Flex","color","index","GroupMetadataEditor","group","onSubmit","register","control","reset","formState","handleSubmit","useForm","handleFormSubmit","data","Card","CardHeader","CardBody","FormControl","FormLabel","Input","Controller","field","value","rest","CardFooter","GroupContentEditor","nodes","useWorkspaceStore","columns","useMemo","info","AdapterStatusContainer","ButtonGroup","IconButton","Icon","ImUngroup","MdPlayArrow","MdStop","MdRestartAlt","e","x","PaginatedTable","GroupPropertyDrawer","nodeId","isOpen","showConfig","selectedNode","onClose","onGroupSetData","adapterIDs","metrics","getDefaultMetricsFor","linkEventLog","searchParams","node","panelTitle","renderMetricsContainer","MetricsContainer","acc","cur","NodeTypes","ChartType","renderGroupTabs","Tabs","TabList","Tab","TabPanels","TabPanel","VStack","Text","EventLogTable","RouterLink","MdOutlineEventNote","Drawer","DrawerOverlay","DrawerContent","DrawerCloseButton","DrawerHeader","NodeNameCard","DrawerBody"],"mappings":"inFAiBA,MAAMA,GAAsB,CAAC,OAAQ,MAAO,SAAU,SAAU,QAAS,OAAQ,OAAQ,OAAQ,SAAU,MAAM,EAUpGC,GAAcC,EACzB,CAAC,CAAE,SAAAC,EAAU,WAAAC,EAAY,YAAAC,EAAa,aAAAC,EAAc,UAAAC,EAAW,GAAGC,CAAM,EAAqBC,IAAQ,CACnG,KAAM,CAAE,EAAAC,CAAA,EAAMC,EAAe,YAAY,EACnCC,EAAgBN,GAAgBN,GAChC,CAACa,EAAqBC,CAAsB,EAAIC,WAAiBV,GAAeO,EAAc,CAAC,CAAC,EAEtG,cACGI,GAAQ,CAAA,UAAWT,GAAa,SAAU,OAAM,GAC/C,SAAA,CAAAU,MAACC,GACC,CAAA,SAAAD,EAAA,IAACE,EAAA,CACC,IAAAV,EACA,WAAAL,EACA,cAAY,sBACZ,oBAAmBS,EACnB,aAAYH,EAAE,sBAAuB,CAAE,OAAQG,EAAqB,EACpE,GAAI,GAAGA,CAAmB,OAC1B,OAAQ,CAAE,GAAI,GAAGA,CAAmB,MAAO,EAC3C,QAAS,CAAE,GAAI,GAAGA,CAAmB,MAAO,EAC3C,GAAGL,CAAA,CAAA,EAER,QAECY,EACC,CAAA,SAAAH,EAAA,IAACI,EAAA,CAEC,GAAI,CACF,4BAA6B,CAC3B,OAAQ,SAAA,CAEZ,EAEA,SAAAC,EAAAA,KAACC,IAAe,EAAE,OAAO,UAAU,KAAK,cAAY,sBAAsB,aAAW,sBACnF,SAAA,CAAAN,EAAA,IAACO,GAAa,CAAA,gBAAiB,GAAGX,CAAmB,OAAQ,EAC7DI,EAAAA,IAACQ,EAAW,CAAA,QAAS,EACnB,SAAAR,EAAA,IAACS,EAAA,CACC,cAAY,qBACZ,WAAW,SACX,eAAe,SACf,YAAa,EACb,gBAAgB,KAChB,EAAG,GACH,EAAE,OACF,EAAG,EACH,SAAS,KACT,GAAI,GAAGb,CAAmB,OAC1B,MAAM,QAEL,SAAAA,CAAA,CAAA,EAEL,EACCI,EAAAA,IAAAQ,EAAA,CAAW,QAAS,EAAG,EAAG,EAAG,QAAS,EACpC,SAAcb,EAAA,IAAI,CAACe,EAAOC,IAIvBX,EAAA,IAACE,EAAA,CAEC,cAAa,wBAAwBS,CAAK,GAC1C,oBAAmBD,EACnB,aAAYjB,EAAE,qBAAsB,CAAE,OAAQiB,EAAO,EACrD,QAAS,IAAM,CACbb,EAAuBa,CAAK,EAC5BxB,EAASwB,CAAK,CAChB,EACA,EAAG,EACH,EAAG,EACH,KAAM,EACN,GAAI,GAAGA,CAAK,OACZ,OAAQ,CAAE,GAAI,GAAGA,CAAK,OAAQ,UAAW,YAAa,EACtD,QAAS,CAAE,GAAI,GAAGA,CAAK,MAAO,CAAA,EAbzB,gBAAgBA,CAAK,IAAIC,CAAK,EAcrC,CAEH,CACH,CAAA,CAAA,CACF,CAAA,CAAA,CAAA,CAEJ,CAAA,CAAA,EACF,CAAA,CAGN,EC7FMC,GAAoD,CAAC,CAAE,MAAAC,EAAO,SAAAC,KAAe,CAC3E,KAAA,CAAE,EAAArB,CAAE,EAAIC,EAAe,EACvB,CAAE,SAAAqB,EAAU,QAAAC,EAAS,MAAAC,EAAO,UAAAC,EAAW,aAAAC,GAAiBC,EAAe,CAC3E,KAAM,MACN,aAAc,MACd,cAAeP,EAAM,IAAA,CACtB,EAEKQ,EAAoBC,GAAgB,CACxCR,EAASQ,CAAI,EACbL,EAAMK,CAAI,CACZ,EAGE,OAAAjB,EAAA,KAACkB,EAAK,CAAA,KAAK,KACT,SAAA,CAAAvB,MAACwB,EAAW,CAAA,cAAY,wBAAyB,SAAA/B,EAAE,iCAAiC,EAAE,QACrFgC,EACC,CAAA,SAAApB,EAAA,KAAC,OAAA,CACC,GAAG,aACH,SAAUc,EAAaE,CAAgB,EACvC,MAAO,CAAE,QAAS,OAAQ,cAAe,MAAO,IAAK,MAAO,EAE5D,SAAA,CAAAhB,OAACqB,EACC,CAAA,SAAA,CAAA1B,MAAC2B,EAAU,CAAA,QAAQ,cAAe,SAAAlC,EAAE,uCAAuC,EAAE,QAC5EmC,EAAM,CAAA,GAAG,cAAe,GAAGb,EAAS,OAAO,CAAG,CAAA,CAAA,EACjD,EAEAV,EAAAA,KAACqB,EAAY,CAAA,GAAG,WACd,SAAA,CAAA1B,MAAC2B,EAAU,CAAA,GAAG,SAAU,SAAAlC,EAAE,uCAAuC,EAAE,EACnEO,EAAA,IAAC6B,EAAA,CACC,KAAK,cACL,OAAQ,CAAC,CAAE,MAAAC,KAAY,CACrB,KAAM,CAAE,MAAAC,EAAO,SAAA7C,EAAU,GAAG8C,CAAS,EAAAF,EAC9B,OAAA9B,MAAChB,GAAY,CAAA,YAAa+C,EAAO,SAAWA,GAAU7C,EAAS6C,CAAK,EAAI,GAAGC,CAAM,CAAA,CAC1F,EACA,QAAAhB,CAAA,CAAA,CACF,CACF,CAAA,CAAA,CAAA,CAAA,EAEJ,QACCiB,EAAW,CAAA,eAAe,WACzB,SAACjC,EAAAA,IAAAE,EAAA,CAAO,WAAY,CAACgB,EAAU,QAAS,KAAK,SAAS,KAAK,aAAa,cAAY,cACjF,SAAEzB,EAAA,gCAAgC,EACrC,CACF,CAAA,CAAA,EACF,CAEJ,EC1CMyC,GAAkD,CAAC,CAAE,MAAArB,KAAY,CAC/D,KAAA,CAAE,EAAApB,CAAE,EAAIC,EAAe,EACvB,CAAE,MAAAyC,CAAM,EAAIC,EAAkB,EAE9BC,EAAUC,EAAAA,QAA2B,IAClC,CACL,CACE,YAAa,OACb,OAAQ7C,EAAE,+CAA+C,EACzD,KAAO8C,GACE9C,EAAE,wBAAyB,CAAE,QAAS8C,EAAK,SAAA,EAAoB,CAE1E,EACA,CACE,YAAa,cACb,OAAQ9C,EAAE,iDAAiD,EAC3D,KAAO8C,SACGC,GAAuB,CAAA,GAAID,EAAK,IAAI,SAAS,KAAK,GAAI,CAElE,EACA,CACE,YAAa,UACb,OAAQ9C,EAAE,6CAA6C,CACzD,EACA,CACE,GAAI,UACJ,OAAQA,EAAE,kDAAkD,EAC5D,UAAW,OACX,KAAM,UAEDgD,EAAY,CAAA,WAAU,GAAC,KAAK,KAAK,WAAU,GAC1C,SAAAzC,EAAA,IAAC0C,EAAA,CACC,aAAYjD,EAAE,mDAAmD,EACjE,KAAMO,EAAAA,IAAC2C,EAAK,CAAA,GAAIC,EAAW,CAAA,EAC3B,QAAS,IAAM,EAAA,CAAA,EAEnB,EAGJ,OAAQ,WAEHH,EAAY,CAAA,WAAU,GAAC,KAAK,KAAK,WAAU,GAC1C,SAAA,CAAAzC,EAAA,IAAC0C,EAAA,CACC,aAAYjD,EAAE,oDAAoD,EAClE,WAAOoD,EAAY,EAAA,EACnB,QAAS,IAAM,EAAA,CACjB,EACA7C,EAAA,IAAC0C,EAAA,CACC,aAAYjD,EAAE,mDAAmD,EACjE,WAAOqD,EAAO,EAAA,EACd,QAAS,IAAM,EAAA,CACjB,EACA9C,EAAA,IAAC0C,EAAA,CACC,aAAYjD,EAAE,sDAAsD,EACpE,WAAOsD,EAAa,EAAA,EACpB,QAAS,IAAM,EAAA,CAAA,CACjB,EACF,CAEJ,CAEJ,EACC,CAACtD,CAAC,CAAC,EAEA6B,EAAOgB,EAAAA,QAAgB,IACpBzB,EAAM,KAAK,gBAAgB,IAAKmC,GAAMb,EAAM,KAAMc,GAAMA,EAAE,KAAOD,CAAC,CAAC,EAAE,OAAQA,GAAM,EAAQA,CAAE,EACnG,CAACnC,EAAM,KAAK,gBAAiBsB,CAAK,CAAC,EAGpC,OAAA9B,EAAA,KAACkB,EAAK,CAAA,KAAK,KACT,SAAA,CAAAvB,MAACwB,EAAW,CAAA,cAAY,uBAAwB,SAAA/B,EAAE,oBAAoB,EAAE,QACvEgC,EACC,CAAA,SAAAzB,EAAA,IAACkD,GAAA,CACC,aAAYzD,EAAE,gBAAgB,EAC9B,KAAA6B,EACA,QAAAe,EACA,sBAAuB,GACvB,qBAAsB,EAAA,CAAA,EAE1B,EACArC,EAAAA,IAACiC,EAAW,CAAA,eAAe,UAAW,CAAA,CAAA,EACxC,CAEJ,ECpDMkB,GAAoD,CAAC,CACzD,OAAAC,EACA,OAAAC,EACA,WAAAC,EAAa,GACb,aAAAC,EACA,MAAApB,EACA,QAAAqB,CACF,IAAM,CACE,KAAA,CAAE,EAAA/D,CAAE,EAAIC,EAAe,EACvB,CAAE,eAAA+D,CAAe,EAAIrB,EAAkB,EAEvCsB,EAAaH,EAAa,KAAK,gBAAgB,IAAuBP,GAAMb,EAAM,KAAMc,GAAMA,EAAE,KAAOD,CAAC,CAAC,EACzGW,EAAUD,EAAW,IAAKT,GAAOA,EAAIW,GAAqBX,CAAC,EAAI,CAAG,CAAA,EAAE,KAAK,EAEzEY,EAAevB,EAAAA,QAAQ,IAAM,CAC3B,MAAAwB,EAAe,IAAI,gBACzB,UAAWC,KAAQL,EACbK,GAAmBD,EAAA,OAAO,SAAUC,EAAK,KAAK,EAAE,EAE/C,MAAA,eAAeD,EAAa,SAAU,CAAA,EAAA,EAC5C,CAACJ,CAAU,CAAC,EAETM,EAAaV,EACf7D,EAAE,4BAA6B,CAAE,QAAS8D,EAAa,IAAA,CAAM,EAC7D9D,EAAE,iCAAkC,CAAE,QAAS8D,EAAa,KAAM,EAEhEU,EAAyB,IAC7BjE,EAAA,IAACkE,EAAA,CACC,OAAAd,EACA,KAAMG,EAAa,KACnB,QAASG,EAAW,OAAwB,CAACS,EAAKC,KAC5CA,GAAOA,EAAI,OAASC,GAAU,cAChCF,EAAI,KAAK,CAAE,GAAIC,EAAI,KAAK,GAAI,KAAM,qCAAqCA,EAAI,KAAK,IAAI,EAAA,CAAI,EAEnFD,GACN,EAAE,EACL,YAAaR,EACb,iBAAkBL,EAAagB,GAAU,OAAS,MAAA,CACpD,EAGIC,EAAkB,IACtBlE,EAAAA,KAACmE,GACC,CAAA,SAAA,CAAAnE,OAACoE,GACC,CAAA,SAAA,CAACzE,EAAA,IAAA0E,EAAA,CAAK,SAAEjF,EAAA,uCAAuC,CAAE,CAAA,EAChDO,EAAA,IAAA0E,EAAA,CAAK,SAAEjF,EAAA,uCAAuC,CAAE,CAAA,EAChDO,EAAAA,IAAA0E,EAAA,CAAK,SAAEjF,EAAA,wCAAwC,CAAE,CAAA,CAAA,EACpD,SAECkF,GACC,CAAA,SAAA,CAAAtE,OAACuE,GAAS,GAAI,EAAG,GAAIC,EAAQ,WAAW,UACtC,SAAA,CAAA7E,EAAA,IAACY,GAAA,CACC,MAAO2C,EACP,SAAW1C,GAAU,CACnB4C,EAAeL,EAAQvC,CAAK,CAAA,CAC9B,CACF,EACAb,EAAAA,IAACkC,GAAmB,CAAA,MAAOqB,CAAc,CAAA,CAAA,EAC3C,EACAvD,EAAA,IAAC4E,EAAS,CAAA,GAAI,EAAG,GAAIC,EAAQ,WAAW,UACtC,SAAAxE,EAAAA,KAACkB,EAAK,CAAA,KAAK,KACT,SAAA,CAAAvB,EAAAA,IAACwB,GACC,SAACxB,MAAA8E,EAAA,CAAM,SAAErF,EAAA,2CAA2C,EAAE,CACxD,CAAA,QACCgC,EACC,CAAA,SAAAzB,EAAA,IAAC+E,GAAA,CACC,mBAAoBrB,EAAW,IAAKV,GAAMA,GAAA,YAAAA,EAAG,KAAK,EAAE,EACpD,QAAQ,UACR,UAAW,GACX,eAAgB,EAAA,CAAA,EAEpB,EACChD,EAAA,IAAAiC,EAAA,CAAW,eAAe,WAAW,GAAI,EACxC,SAAAjC,EAAA,IAACE,EAAA,CACC,cAAY,6BACZ,QAAQ,OACR,GAAI8E,EAEJ,GAAInB,EACJ,gBAAYoB,EAAmB,EAAA,EAC/B,KAAK,KAEJ,WAAE,6CAA6C,CAAA,CAAA,CAEpD,CAAA,CAAA,CAAA,CACF,CACF,CAAA,EACAjF,EAAAA,IAAC4E,GAAS,GAAI,EAAG,GAAIC,EAAQ,WAAW,UACrC,SAAAZ,EAAA,CACH,CAAA,CAAA,CACF,CAAA,CAAA,EACF,EAIA,OAAA5D,OAAC6E,GAAO,OAAA7B,EAAgB,UAAU,QAAQ,KAAK,KAAK,QAAAG,EAAkB,QAAQ,SAC5E,SAAA,CAAAxD,EAAA,IAACmF,EAAc,EAAA,EACf9E,EAAAA,KAAC+E,EAAc,CAAA,aAAYpB,EACzB,SAAA,CAAAhE,EAAA,IAACqF,EAAkB,EAAA,SAElBC,EACC,CAAA,SAAA,CAACtF,EAAA,IAAA8E,EAAA,CAAK,cAAY,oBAAqB,SAAWd,EAAA,EAClDhE,EAAA,IAACuF,GAAA,CACC,YAAa9F,EAAE,wBAAyB,CAAE,QAAS8D,EAAa,KAAM,EACtE,KAAMA,EAAa,KACnB,KAAMA,EAAa,KAAK,KAAA,CAAA,CAC1B,EACF,SACCiC,EAAW,CAAA,QAAQ,OAAO,cAAc,SAAS,IAAK,EACpD,SAAA,CAAAlC,GAAciB,EAAgB,EAC9B,CAACjB,GAAcW,EAAuB,CAAA,CACzC,CAAA,CAAA,CACF,CAAA,CAAA,EACF,CAEJ"}