import{l,c6 as N,u as D,r as S}from"./index-cMih3SEP.js";import{M as L,u as M}from"./useDataHubDraftStore-BdIk6zJn.js";import{a as n,O as u,B as f,c as p,S as H,R as I,d as b,e as _,T as A,D as g,P as T}from"./types-CNm55BG_.js";import{v}from"./index-BXWYaCHO.js";import{a as C,b as w,c as F}from"./index-BTlOwmq4.js";import{r as V,A as q,B as j}from"./index-Dis5-5gm.js";(function(){try{var e=typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{},t=new e.Error().stack;t&&(e._sentryDebugIds=e._sentryDebugIds||{},e._sentryDebugIds[t]="60d1afca-914e-4724-87ef-13f01c80c01f",e._sentryDebugIdIdentifier="sentry-dbid-60d1afca-914e-4724-87ef-13f01c80c01f")}catch{}})();let y;const U=new Uint8Array(16);function x(){if(!y&&(y=typeof crypto<"u"&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto),!y))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return y(U)}const a=[];for(let e=0;e<256;++e)a.push((e+256).toString(16).slice(1));function $(e,t=0){return a[e[t+0]]+a[e[t+1]]+a[e[t+2]]+a[e[t+3]]+"-"+a[e[t+4]]+a[e[t+5]]+"-"+a[e[t+6]]+a[e[t+7]]+"-"+a[e[t+8]]+a[e[t+9]]+"-"+a[e[t+10]]+a[e[t+11]]+a[e[t+12]]+a[e[t+13]]+a[e[t+14]]+a[e[t+15]]}const B=typeof crypto<"u"&&crypto.randomUUID&&crypto.randomUUID.bind(crypto),E={randomUUID:B};function Y(e,t,i){if(E.randomUUID&&!e)return E.randomUUID();e=e||{};const s=e.random||(e.rng||x)();return s[6]=s[6]&15|64,s[8]=s[8]&63|128,$(s)}const Ke=`syntax = "proto3";

message GpsCoordinates {
  int32 longitude = 1;
  int32 latitude = 2;
}
`,k=`{
   "$schema":"https://json-schema.org/draft/2020-12/schema",
   "title":"",
   "description":"",
   "required":[],
   "type":"object",
   "properties":{}
}
`,Qe=`
/**
 *
 * @param {Object} publish
 * @param {string} publish.topic    The MQTT topic that is currently specified for this PUBLISH packet.
 * @param {Object} publish.payload  A list of the name and value of all user properties of the MQTT 5 PUBLISH packet. This setting has no effect on MQTT 3 clients.
 * @param {Record<string, string>[]} publish.userProperties The JSON object representation of the deserialized MQTT payload.
 * @param {Object} context
 * @param {Record<string, string>[]} context.arguments  The arguments provided to the script. Currently, arguments can only be provided via a data policy.
 * @param {string} context.policyId The policy id of the policy from which the transformation function is called.
 * @param {string} context.clientId The client Id of the client from which the MQTT publish was sent.
 * @returns {Object} The publish-object is passed as a parameter into the transform function. The same object or a new object is returned as the transformed object.
 */
function transform(publish, context) {
  return publish
}

`,J="object",K=`To start a policy, you have to indicate a topic (or a topic filter) to apply it on. This
         is a simple way to handle this operation, until we can use the Topic Tree Selector.
          `,Q={adapter:{type:"string",title:"Adapter source",description:"If an adapter is selected, the filters created below will be validated from the subscriptions"},topics:{type:"array",title:"Topic Filters",description:"Create handles on the workflow for specific topics or topic filters you want to add a policy to.",items:{type:"string",description:"The full topic to use as a starting point"}}},z={type:J,description:K,properties:Q};/* istanbul ignore file -- @preserve */const Z={schema:z,uiSchema:{adapter:{"ui:widget":"edge:adapter-selector"},topics:{"ui:options":{orderable:!1}}}},G="object",W=`To start a behavior policy, you have to indicate a client (or a group of client) to apply it on.
          `,X={clients:{type:"array",title:"Client Filters",description:"Create handles on the workflow for specific clients you want to add a policy to.",items:{type:"string",description:"The client id to use as a starting point"}}},ee={type:G,description:W,properties:X};/* istanbul ignore file -- @preserve */const te={schema:ee,uiSchema:{clients:{"ui:options":{orderable:!1}}}},ne="object",ie=["id"],se={id:{title:"id",description:"The unique id of this data policy",type:"string",pattern:"^[A-Za-z][A-Za-z0-9._-]{0,1023}$"}},oe={type:ne,required:ie,properties:se};/* istanbul ignore file -- @preserve */const re={schema:oe,uiSchema:{}},ae="object",ce={SchemaReference:{type:"object",required:["schemaId","version"],properties:{schemaId:{title:"ID of the schema",type:"string"},version:{title:"version of the schema",type:"string"}}}},de=["type","strategy"],ue={type:{title:"Validator Type",enum:["SCHEMA"],default:"SCHEMA"},strategy:{title:"Validation Strategy",enum:["ANY_OF","ALL_OF"],default:"ALL_OF"}},le={type:ae,definitions:ce,required:de,properties:ue};/* istanbul ignore file -- @preserve */const pe={schema:le},he="object",me="Data validation relies on the definition of schemas to interact with policies. The HiveMQ Data Hub supports schema definitions with JSON Schema or Protobuf formats:",fe=["name","type","version"],ye={name:{title:"Name",type:"string",pattern:"^([a-zA-Z_0-9-_])*$"},type:{title:"Schema",type:"string",enum:["JSON","PROTOBUF"],default:"JSON"},version:{title:"Version",type:"number"}},Te={type:{oneOf:[{properties:{type:{enum:["JSON"]},schemaSource:{type:"string"}}},{required:["messageType"],properties:{type:{enum:["PROTOBUF"]},schemaSource:{type:"string",format:"application/octet-stream"},messageType:{type:"string",description:"The name of the message to use for Data Hub, from the source"}}}]}},Ie={type:he,description:me,required:fe,properties:ye,dependencies:Te};/* istanbul ignore file -- @preserve */const be={schema:Ie},ge="object",Oe=["type","name","version"],Se={name:{title:"Name",type:"string",pattern:"^([a-zA-Z_0-9-_])*$"},type:{title:"Format",type:"string",enum:["Javascript"],default:"Javascript",readOnly:!0},version:{title:"Version",type:"number"},description:{title:"Description",type:"string"},sourceCode:{title:"Source",type:"string",default:`/**
 *
 * @param {Object} publish
 * @param {string} publish.topic    The MQTT topic that is currently specified for this PUBLISH packet.
 * @param {Object} publish.payload  A list of the name and value of all user properties of the MQTT 5 PUBLISH packet. This setting has no effect on MQTT 3 clients.
 * @param {Record<string, string>[]} publish.userProperties The JSON object representation of the deserialized MQTT payload.
 * @param {Object} context
 * @param {Record<string, string>[]} context.arguments  The arguments provided to the script. Currently, arguments can only be provided via a data policy.
 * @param {string} context.policyId The policy id of the policy from which the transformation function is called.
 * @param {string} context.clientId The client Id of the client from which the MQTT publish was sent.
 * @returns {Object} The publish-object is passed as a parameter into the transform function. The same object or a new object is returned as the transformed object.
 */
function transform(publish, context) {
  return publish
}`}},Ae={type:ge,required:Oe,properties:Se};/* istanbul ignore file -- @preserve */const Ce={schema:Ae},Ee={"Publish.quota":{type:"object",metadata:{states:[{name:"Connected",description:"State after client connected, but did not send any publishes yet.",type:"INTERMEDIATE"},{name:"Disconnected",description:"State, when the client disconnected and sent at least the minimum amount of publishes and not more than maximum publishes",type:"SUCCESS"},{name:"Initial",description:"Initial state before client connected.",type:"INITIAL"},{name:"Publishing",description:"State, when the client has published at least one publish, but not more than the configured maximum.",type:"INTERMEDIATE"},{name:"Violated",description:"State, when the client sent more than the configured maximum amount of publishes or disconnected before sending enough publishes.",type:"FAILED"}],transitions:[{fromState:"Initial",toState:"Connected",description:"Transition that gets triggered then the client connects.",event:"Mqtt.OnInboundConnect"},{fromState:"Connected",toState:"Publishing",description:"Transition that gets triggered then the client publishes the first time after connecting.",event:"Mqtt.OnInboundPublish"},{fromState:"Publishing",toState:"Violated",description:"Transition that gets triggered then the client sends more publishes than the maximum of publishes.",event:"Mqtt.OnInboundPublish"},{fromState:"Publishing",toState:"Publishing",description:"Transition that gets triggered then the client sends a publish, which does not exceed the maximum amount of publishes.",event:"Mqtt.OnInboundPublish"},{fromState:"Connected",toState:"Violated",description:"Transition that gets triggered then the client disconnects before sending any publish and there is a minimum pf publishes required.",event:"Connection.OnDisconnect"},{fromState:"Publishing",toState:"Violated",description:"Transition that gets triggered then the client sends a publish, which does not exceed the maximum amount of publishes.",event:"Connection.OnDisconnect"},{fromState:"Publishing",toState:"Disconnected",description:"Once the client connection is closed, the model transitions into the Disconnected state",event:"Connection.OnDisconnect"}]},properties:{arguments:{title:"Publish.quota options",description:"When you configure a publish-quota model, at least one of the available arguments must be present. Data Hub uses the default value for the missing parameter.\\nThe default value for minimum is 0. The default value for maxPublishes is -1 (UNLIMITED).",type:"object",required:["minPublishes","maxPublishes"],properties:{minPublishes:{title:"minPublishes",description:"Defines the minimal number of published messages that must be reached",type:"integer",minimum:0,default:0},maxPublishes:{title:"maxPublishes",description:"Defines the maximum number of published messages that must be reached",type:"integer",minimum:-1,default:-1}}}}},"Mqtt.events":{type:"object",metadata:{states:[{name:"Connected",description:"State while the client is connected.",type:"INTERMEDIATE"},{name:"Disconnected",description:"Final state before client disconnected.",type:"SUCCESS"},{name:"Initial",description:"Initial state before client connected.",type:"INITIAL"}],transitions:[{fromState:"Initial",toState:"Connected",description:"Transition that gets triggered then the client connects.",event:"Mqtt.OnInboundConnect"},{fromState:"Connected",toState:"Connected",description:"Transition that gets triggered then the connected client subscribes.",event:"Mqtt.OnInboundSubscribe"},{fromState:"Connected",toState:"Connected",description:"Transition that gets triggered then the connected client publishes.",event:"Mqtt.OnInboundPublish"},{fromState:"Connected",toState:"Connected",description:"Transition that gets triggered then the connected client disconnects.",event:"Mqtt.OnInboundDisconnect"},{fromState:"Connected",toState:"Disconnected",description:"Once the client connection is closed, the model transitions into the Disconnected state",event:"Connection.OnDisconnect"}]},properties:{arguments:{title:"Mqtt.events",description:"This FSM does not require any arguments.",type:"object",required:[],properties:{}}}},"Publish.duplicate":{type:"object",metadata:{states:[{name:"Connected",description:"State after client connected, but did not send any publishes yet.",type:"INTERMEDIATE"},{name:"Disconnected",description:"State, when the client disconnected and the last publish was not a duplicate.",type:"SUCCESS"},{name:"Duplicated",description:"State, when the client sent a publish with the same payload as the previous publish.",type:"INTERMEDIATE"},{name:"Initial",description:"Initial state before client connected.",type:"INITIAL"},{name:"NotDuplicated",description:"State, when the client sent an publish that was not a duplicate of the previous publish.",type:"INTERMEDIATE"},{name:"Violated",description:"State, when the client disconnected and the last publish was a duplicate.",type:"FAILED"}],transitions:[{fromState:"Initial",toState:"Connected",description:"Transition that gets triggered then the client connects.",event:"Mqtt.OnInboundConnect"},{fromState:"Connected",toState:"NotDuplicated",description:"Transition that gets triggered then the client sends the first publish.",event:"Mqtt.OnInboundPublish"},{fromState:"NotDuplicated",toState:"NotDuplicated",description:"Transition that gets triggered then the client sends a publish and the payload is different from the previous one.",event:"Mqtt.OnInboundPublish"},{fromState:"NotDuplicated",toState:"Duplicated",description:"Transition that gets triggered then the client sends a publish with the same payload as the previous publish.",event:"Mqtt.OnInboundPublish"},{fromState:"Duplicated",toState:"NotDuplicated",description:"Transition that gets triggered then the client sends a publish and the payload is different from the previous one while being in the DUPLICATE state.",event:"Mqtt.OnInboundPublish"},{fromState:"Duplicated",toState:"Duplicated",description:"Transition that gets triggered then the client sends a publish with the same payload as the previous publish while already being in the DUPLICATE state",event:"Mqtt.OnInboundPublish"},{fromState:"Duplicated",toState:"Violated",description:"Transition that gets triggered then the client disconnects while being in the DUPLICATE state.",event:"Connection.OnDisconnect"},{fromState:"NotDuplicated",toState:"Violated",description:"Transition that gets triggered then the client disconnects and the DUPLICATE state has every been reached during this connection.",event:"Connection.OnDisconnect"},{fromState:"Connected",toState:"Disconnected",description:"Once the client connection is closed, the model transitions into the Disconnected state",event:"Connection.OnDisconnect"},{fromState:"NotDuplicated",toState:"Disconnected",description:"Once the client connection is closed, the model transitions into the Disconnected state",event:"Connection.OnDisconnect"}]},properties:{arguments:{title:"Publish.duplicate options",description:"This FSM does not require any arguments.",type:"object",required:[],properties:{}}}}},Pe="object",Re=["id","model"],Ne={id:{title:"id",description:"The unique id of this behaviour policy",type:"string",pattern:"^[A-Za-z][A-Za-z0-9._-]{0,1023}$"},model:{title:"Behavior Model",default:"Mqtt.events",enum:["Publish.quota","Mqtt.events","Publish.duplicate"]}},De=[{if:{type:"object",properties:{model:{const:"Publish.quota"}}},then:{type:"object",$ref:"#/definitions/Publish.quota"}},{if:{type:"object",properties:{model:{const:"Mqtt.events"}}},then:{type:"object",$ref:"#/definitions/Mqtt.events"}},{if:{type:"object",properties:{model:{const:"Publish.duplicate"}}},then:{type:"object",$ref:"#/definitions/Publish.duplicate"}}],Le={definitions:Ee,type:Pe,required:Re,properties:Ne,allOf:De};/* istanbul ignore file -- @preserve */const Me={schema:Le,uiSchema:{arguments:{minPublishes:{"ui:widget":"updown"},maxPublishes:{"ui:widget":"updown"}}}};/* istanbul ignore file -- @preserve */const He={type:"object",required:["model","event"],properties:{model:{type:"string"},event:{type:"string"},from:{type:"string"},to:{type:"string"}}},_e={schema:He,uiSchema:{model:{"ui:readonly":!0},from:{"ui:readonly":!0,"ui:widget":"hidden"},to:{"ui:readonly":!0,"ui:widget":"hidden"},event:{"ui:widget":"datahub:transition-selector"}}},ve={[n.TOPIC_FILTER]:Z.schema,[n.CLIENT_FILTER]:te.schema,[n.DATA_POLICY]:re.schema,[n.VALIDATOR]:pe,[n.SCHEMA]:be.schema,[n.OPERATION]:L.schema,[n.FUNCTION]:Ce.schema,[n.BEHAVIOR_POLICY]:Me.schema,[n.TRANSITION]:_e.schema},m={status:404},we={notConnected:(e,t,i)=>({title:t.type,detail:i?l.t("datahub:error.dryRun.noHandleConnected",{source:e,target:t.type,handle:i}):l.t("datahub:error.dryRun.notConnected",{source:e,target:t.type}),type:"datahub.notConnected",...m,id:t.id}),cardinality:(e,t)=>({title:t.type,detail:l.t("datahub:error.dryRun.cardinality",{source:e,target:t.type}),type:"datahub.cardinality",...m,id:t.id}),notConfigured:(e,t)=>({title:e.type,detail:l.t("datahub:error.dryRun.notConfigured",{source:e.type,properties:t}),type:"datahub.notConfigured",...m,id:e.id}),notValidated:(e,t)=>({title:e.type,detail:l.t("datahub:error.dryRun.notValidated",{source:e.type,error:t}),type:"datahub.notConfigured",...m,id:e.id}),internal:(e,t)=>{let i;return t instanceof Error?i=t.message:i=String(t),{title:e.type,detail:l.t("datahub:error.dryRun.internal",{source:e.type,error:i}),type:"datahub.notConfigured",...m,id:e.id}}},ze=(e="node")=>`${e}_${Y()}`,Ze=(e,t)=>e===n.TOPIC_FILTER?{topics:["topic/example/1"]}:e===n.CLIENT_FILTER?{clients:["client/example/1"]}:e===n.VALIDATOR?{type:N.type.SCHEMA,strategy:H.ALL_OF,schemas:[{version:"1",schemaId:"first mock schema"}]}:e===n.OPERATION?{functionId:void 0}:e===n.SCHEMA?{name:t==null?void 0:t(n.SCHEMA),type:_.JSON,schemaSource:k,internalStatus:b.DRAFT,version:I.DRAFT}:{},Fe={[n.TOPIC_FILTER]:[[n.DATA_POLICY,p.Handle.TOPIC_FILTER]],[n.VALIDATOR]:[[n.DATA_POLICY,p.Handle.VALIDATION]],[n.DATA_POLICY]:[n.OPERATION],[n.OPERATION]:[n.OPERATION],[n.SCHEMA]:[n.VALIDATOR,[n.OPERATION,u.Handle.SCHEMA],[n.OPERATION,u.Handle.SERIALISER],[n.OPERATION,u.Handle.DESERIALISER]],[n.CLIENT_FILTER]:[[n.BEHAVIOR_POLICY,f.Handle.CLIENT_FILTER]],[n.BEHAVIOR_POLICY]:[n.TRANSITION],[n.TRANSITION]:[n.OPERATION],[n.FUNCTION]:[[n.OPERATION,u.Handle.FUNCTION]]},Ge=(e,t,i)=>{const s=t.find(c=>c.id===e.source),o=t.find(c=>c.id===e.target),r=(c,h=new Set)=>{if(h.has(c.id))return!1;h.add(c.id);for(const O of q(c,t,i))if(O.id===e.source||r(O,h))return!0;return!1};if(!s||!o||!s.type||o.id===s.id||r(o))return!1;const d=Fe[s.type];return d?d.some(c=>Array.isArray(c)?(o==null?void 0:o.type)===c[0]&&e.targetHandle===c[1]:(o==null?void 0:o.type)===c):!1};/* istanbul ignore next -- @preserve */const We=e=>{switch(e){case T.IDLE:return C;case T.SUCCESS:return F;case T.FAILURE:return w;default:return C}},P=e=>e.type===n.TOPIC_FILTER,Xe=e=>e.type===n.CLIENT_FILTER,et=e=>e.type===n.SCHEMA,tt=e=>e.type===n.FUNCTION,nt=e=>e.type===n.VALIDATOR,it=e=>e.type===n.TRANSITION,R=e=>e.type===n.DATA_POLICY,Ve=e=>e.type===n.BEHAVIOR_POLICY,st=(e,t)=>{if(e===n.TOPIC_FILTER)return{type:n.DATA_POLICY,handle:p.Handle.TOPIC_FILTER,isSource:!1};if(e===n.CLIENT_FILTER)return{type:n.BEHAVIOR_POLICY,handle:f.Handle.CLIENT_FILTER,isSource:!1};if(e===n.DATA_POLICY&&t===p.Handle.TOPIC_FILTER)return{type:n.TOPIC_FILTER,handle:null,isSource:!0};if(e===n.DATA_POLICY&&t===p.Handle.VALIDATION)return{type:n.VALIDATOR,handle:null,isSource:!0};if(e===n.DATA_POLICY&&(t===p.Handle.ON_SUCCESS||t===p.Handle.ON_ERROR))return{type:n.OPERATION,handle:null,isSource:!1};if(e===n.VALIDATOR&&t==="source")return{type:n.DATA_POLICY,handle:p.Handle.VALIDATION,isSource:!1};if(e===n.VALIDATOR&&t==="target")return{type:n.SCHEMA,handle:null,isSource:!0};if(e!==n.SCHEMA){if(e===n.OPERATION&&t===u.Handle.OUTPUT)return{type:n.OPERATION,handle:u.Handle.INPUT,isSource:!1};if(e===n.OPERATION&&t===u.Handle.INPUT)return{type:n.OPERATION,handle:u.Handle.OUTPUT,isSource:!0};if(e===n.OPERATION&&(t===u.Handle.SCHEMA||t===u.Handle.SERIALISER||t===u.Handle.DESERIALISER))return{type:n.SCHEMA,handle:null,isSource:!0};if(e===n.OPERATION&&t===u.Handle.FUNCTION)return{type:n.FUNCTION,handle:null,isSource:!0};if(e!==n.FUNCTION){if(e===n.BEHAVIOR_POLICY&&t===f.Handle.CLIENT_FILTER)return{type:n.CLIENT_FILTER,handle:null,isSource:!0};if(e===n.BEHAVIOR_POLICY&&t===f.Handle.TRANSITIONS)return{type:n.TRANSITION,handle:null,isSource:!1};if(e===n.TRANSITION&&t===A.Handle.BEHAVIOR_POLICY)return{type:n.BEHAVIOR_POLICY,handle:f.Handle.TRANSITIONS,isSource:!0};if(e===n.TRANSITION&&t===A.Handle.OPERATION)return{type:n.OPERATION,handle:null,isSource:!1}}}},qe=(e,t)=>t===g.DRAFT?{delete:!0}:P(e)?{delete:!1,error:l.t("datahub:workspace.guards.delete.topicFilter")}:Ve(e)||R(e)?{delete:!1,error:l.t("datahub:workspace.guards.delete.policyNode")}:{delete:!0},ot=(e,t,i)=>{if(i===g.DRAFT)return{delete:!0};if(t){const s=t.find(r=>r.id===e.source),o=t.find(r=>r.id===e.target);if(s&&o&&R(o)&&P(s))return{delete:!1,error:l.t("datahub:workspace.guards.delete.topicFilter")}}return{delete:!0}},je=(e,t,i,s=new Set)=>{if(s.has(e))return s;s.add(e);for(const o of V(e,t,i))je(o,t,i,s);return s},rt=(e,t)=>(i,s)=>{if(s.type===e){const{id:o,data:r}=s;r.id&&o!==t&&i.push(r.id)}return i},at=(e,t,i)=>typeof e.isConnectable=="number"?j([t],i).filter(r=>e.type==="source"?r.source===t.id&&r.sourceHandle===e.id:r.target===t.id&&r.targetHandle===e.id).length<e.isConnectable:e.isConnectable,ct=(e,t,i)=>{if(!e||!t)return i("error.noSet.select",{ns:"datahub"});const o=((r,d)=>r===I.DRAFT?d("workspace.nodes.status",{context:b.DRAFT,ns:"datahub"}):r===I.MODIFIED?d("workspace.nodes.status",{context:b.MODIFIED,ns:"datahub"}):r)(t,i);return`${e}:${o}`},Ue=e=>{if(!e.type)return{isValid:!1};const t=ve[e.type],i=v.ajv.compile(t);return{isValid:i(e.data),errors:i.errors}},dt=e=>{var i;const t=[];for(const s of e){const o=Ue(s);if(!o.isValid&&((i=o==null?void 0:o.errors)!=null&&i.length))for(const r of o.errors)t.push({node:s,error:we.notValidated(s,r.message)})}return t},ut=e=>{const{t}=D("datahub"),{status:i,nodes:s}=M(),o=S.useMemo(()=>s.find(h=>h.id===e),[e,s]),r=S.useMemo(()=>i!==g.LOADED,[i]),d=o&&qe(o,i);let c;return r?d&&!d.delete&&(c={title:t("workspace.guards.protected.title"),description:t("workspace.guards.protected.message")}):c={title:t("workspace.guards.readonly.title"),description:t("workspace.guards.readonly.message")},{status:i,isPolicyEditable:r,isNodeEditable:r&&d&&(d==null?void 0:d.delete),guardAlert:c}};export{Ke as A,be as B,_e as C,je as D,rt as E,Qe as F,Ce as G,Me as M,we as P,ut as a,Ve as b,qe as c,ot as d,at as e,We as f,st as g,ze as h,R as i,P as j,nt as k,et as l,Xe as m,tt as n,it as o,dt as p,Ge as q,ct as r,Ze as s,Z as t,$ as u,Y as v,te as w,re as x,pe as y,k as z};
//# sourceMappingURL=usePolicyGuards-DliXcvYq.js.map
