{"version":3,"file":"TopicFilterManager-1LHtgude.js","sources":["../../src/api/__generated__/schemas/$TopicFilter.ts","../../src/api/hooks/useTopicFilters/useCreateTopicFilter.ts","../../src/api/hooks/useTopicFilters/useDeleteTopicFilter.ts","../../src/api/hooks/useTopicFilters/useUpdateTopicFilter.ts","../../src/api/hooks/useTopicFilters/useUpdateAllTopicFilters.ts","../../src/modules/TopicFilters/hooks/useTopicFilterManager.ts","../../src/modules/TopicFilters/utils/topic-filter.schema.ts","../../src/modules/TopicFilters/components/SchemaUploader.tsx","../../src/modules/TopicFilters/components/SchemaSampler.tsx","../../src/modules/TopicFilters/components/TopicSchemaManager.tsx","../../src/modules/TopicFilters/components/TopicSchemaDrawer.tsx","../../src/modules/TopicFilters/components/SchemaValidationMark.tsx","../../src/modules/TopicFilters/TopicFilterManager.tsx"],"sourcesContent":["/* generated using openapi-typescript-codegen -- do no edit */\n/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $TopicFilter = {\n    description: `List of result items that are returned by this endpoint`,\n    properties: {\n        description: {\n            type: 'string',\n            description: `The name for this topic filter.`,\n        },\n        schema: {\n            type: 'string',\n            description: `The optional json schema for this topic filter in the data uri format.`,\n            format: 'data-url',\n        },\n        topicFilter: {\n            type: 'string',\n            description: `The topic filter according to the MQTT specification.`,\n            isRequired: true,\n            format: 'mqtt-topic-filter',\n        },\n    },\n} as const;\n","import { useMutation, useQueryClient } from '@tanstack/react-query'\nimport type { ApiError } from '../../__generated__'\nimport { type TopicFilter } from '../../__generated__'\n\nimport { useHttpClient } from '@/api/hooks/useHttpClient/useHttpClient.ts'\nimport { QUERY_KEYS } from '@/api/utils.ts'\n\ninterface CreateTopicFilterProps {\n  requestBody: TopicFilter\n}\n\nexport const useCreateTopicFilter = () => {\n  const appClient = useHttpClient()\n  const queryClient = useQueryClient()\n\n  const createTopicFilter = ({ requestBody }: CreateTopicFilterProps) => {\n    return appClient.topicFilters.addTopicFilters(requestBody)\n  }\n\n  return useMutation<CreateTopicFilterProps, ApiError, CreateTopicFilterProps>({\n    mutationFn: createTopicFilter,\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [QUERY_KEYS.DISCOVERY_TOPIC_FILTERS] })\n    },\n  })\n}\n","import { useMutation, useQueryClient } from '@tanstack/react-query'\nimport type { ApiError } from '../../__generated__'\n\nimport { useHttpClient } from '@/api/hooks/useHttpClient/useHttpClient.ts'\nimport { QUERY_KEYS } from '@/api/utils.ts'\n\ninterface DeleteTopicFilterProps {\n  name: string\n}\n\nexport const useDeleteTopicFilter = () => {\n  const appClient = useHttpClient()\n  const queryClient = useQueryClient()\n\n  const deleteTopicFilter = ({ name }: DeleteTopicFilterProps) => {\n    return appClient.topicFilters.deleteTopicFilter(encodeURIComponent(name))\n  }\n\n  return useMutation<DeleteTopicFilterProps, ApiError, DeleteTopicFilterProps>({\n    mutationFn: deleteTopicFilter,\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [QUERY_KEYS.DISCOVERY_TOPIC_FILTERS] })\n    },\n  })\n}\n","import { useMutation, useQueryClient } from '@tanstack/react-query'\nimport type { ApiError } from '../../__generated__'\nimport { type TopicFilter } from '../../__generated__'\n\nimport { useHttpClient } from '@/api/hooks/useHttpClient/useHttpClient.ts'\nimport { QUERY_KEYS } from '@/api/utils.ts'\n\ninterface UpdateTopicFilterProps {\n  name: string\n  requestBody?: TopicFilter\n}\n\nexport const useUpdateTopicFilter = () => {\n  const appClient = useHttpClient()\n  const queryClient = useQueryClient()\n\n  const updateTopicFilters = ({ name, requestBody }: UpdateTopicFilterProps) => {\n    return appClient.topicFilters.updateTopicFilter(encodeURIComponent(name), requestBody)\n  }\n\n  return useMutation<UpdateTopicFilterProps, ApiError, UpdateTopicFilterProps>({\n    mutationFn: updateTopicFilters,\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [QUERY_KEYS.DISCOVERY_TOPIC_FILTERS] })\n    },\n  })\n}\n","import { useMutation, useQueryClient } from '@tanstack/react-query'\nimport type { ApiError } from '../../__generated__'\nimport { type TopicFilterList } from '../../__generated__'\n\nimport { useHttpClient } from '@/api/hooks/useHttpClient/useHttpClient.ts'\nimport { QUERY_KEYS } from '@/api/utils.ts'\n\ninterface UpdateAllTopicFiltersProps {\n  requestBody?: TopicFilterList\n}\n\nexport const useUpdateAllTopicFilter = () => {\n  const appClient = useHttpClient()\n  const queryClient = useQueryClient()\n\n  return useMutation<UpdateAllTopicFiltersProps, ApiError, UpdateAllTopicFiltersProps>({\n    mutationFn: ({ requestBody }: UpdateAllTopicFiltersProps) => {\n      return appClient.topicFilters.updateTopicFilters(requestBody)\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [QUERY_KEYS.DISCOVERY_TOPIC_FILTERS] })\n    },\n  })\n}\n","import { useMemo } from 'react'\nimport type { RJSFSchema } from '@rjsf/utils'\nimport { useToast } from '@chakra-ui/react'\nimport { useTranslation } from 'react-i18next'\n\nimport { $TopicFilter, type TopicFilter, type TopicFilterList } from '@/api/__generated__'\n\nimport { useListTopicFilters } from '@/api/hooks/useTopicFilters/useListTopicFilters.ts'\nimport { useCreateTopicFilter } from '@/api/hooks/useTopicFilters/useCreateTopicFilter.ts'\nimport { useDeleteTopicFilter } from '@/api/hooks/useTopicFilters/useDeleteTopicFilter.ts'\nimport { useUpdateTopicFilter } from '@/api/hooks/useTopicFilters/useUpdateTopicFilter.ts'\nimport { useUpdateAllTopicFilter } from '@/api/hooks/useTopicFilters/useUpdateAllTopicFilters.ts'\nimport type { ManagerContextType } from '@/modules/Mappings/types.ts'\n\ninterface TopicFilterSchemas {\n  schema: RJSFSchema\n}\n\nexport const useTopicFilterManager = () => {\n  const { t } = useTranslation()\n  const toast = useToast()\n\n  const { data: topicFilterList, isLoading, isError, error } = useListTopicFilters()\n\n  const createMutator = useCreateTopicFilter()\n  const deleteMutator = useDeleteTopicFilter()\n  const updateMutator = useUpdateTopicFilter()\n  const updateCollectionMutator = useUpdateAllTopicFilter()\n\n  // TODO[24980] This is due to limitation of the openapi-typescript-codegen library\n  //  - schemas are not properly exported as reusable JSONSchema\n  //  - the split in different files doesn't allow programmatic manipulation\n  //  - some information (required, format ) is missing (partly due to limited quality of generated openAPI\n  const topicFilterSchemas = useMemo<TopicFilterSchemas>(() => {\n    return {\n      schema: {\n        // $schema: 'https://json-schema.org/draft/2020-12/schema',\n        definitions: {\n          // TODO[24980] Required is missing\n          TopicFilter: { ...$TopicFilter, required: ['topicFilter'] },\n        },\n        properties: {\n          items: {\n            type: 'array',\n            // title: 'List of tags',\n            // description: 'The list of all tags defined in the device',\n            items: {\n              $ref: '#/definitions/TopicFilter',\n            },\n          },\n        },\n      },\n    }\n  }, [])\n\n  // TODO[NVL] Insert Edge-wide toast configuration (need refactoring)\n  const formatToast = (operation: string) => ({\n    success: {\n      title: t(`topicFilter.toast.${operation}.title`),\n      description: t(`topicFilter.toast.${operation}.description`, { context: 'success' }),\n    },\n    error: {\n      title: t(`topicFilter.toast.${operation}.title`),\n      description: t(`topicFilter.toast.${operation}.description`, { context: 'error' }),\n    },\n    loading: {\n      title: t(`topicFilter.toast.${operation}.title`),\n      description: t('topicFilter.toast.description', { context: 'loading' }),\n    },\n  })\n\n  const onDelete = (topicName: string) => {\n    toast.promise(deleteMutator.mutateAsync({ name: topicName }), formatToast('delete'))\n  }\n\n  const onCreate = (requestBody: TopicFilter) => {\n    toast.promise(createMutator.mutateAsync({ requestBody: requestBody }), formatToast('create'))\n  }\n\n  const onUpdate = (filter: string, requestBody?: TopicFilter) => {\n    toast.promise(updateMutator.mutateAsync({ name: filter, requestBody: requestBody }), formatToast('update'))\n  }\n\n  const onUpdateCollection = (requestBody: TopicFilterList) => {\n    toast.promise(updateCollectionMutator.mutateAsync({ requestBody: requestBody }), formatToast('updateCollection'))\n  }\n\n  const context: ManagerContextType<TopicFilterList> = {\n    schema: topicFilterSchemas.schema,\n    uiSchema: {\n      'ui:submitButtonOptions': {\n        norender: true,\n      },\n      items: {\n        'ui:title': 'Topic Filters',\n        items: {\n          'ui:order': ['topicFilter', '*'],\n          schema: {\n            'ui:widget': 'hidden',\n          },\n        },\n      },\n    },\n    formData: topicFilterList,\n  }\n\n  return {\n    // The schema context\n    context,\n    // The CRUD operations\n    data: topicFilterList,\n    onCreate,\n    onDelete,\n    onUpdate,\n    onUpdateCollection,\n    // The state (as in ReactQuery)\n    isLoading,\n    isError,\n    error,\n    isPending:\n      createMutator.isPending ||\n      updateMutator.isPending ||\n      deleteMutator.isPending ||\n      updateCollectionMutator.isPending, // assuming only one operation at a time\n  }\n}\n","// data:content/type;base64,\nimport type { RJSFSchema } from '@rjsf/utils'\nimport type { Accept } from 'react-dropzone'\nimport validator from '@rjsf/validator-ajv8'\n\nimport i18n from '@/config/i18n.config.ts'\nimport type { JSONSchema7 } from 'json-schema'\nimport type { AlertStatus } from '@chakra-ui/react'\n\nexport const MIMETYPE_JSON = 'application/json'\nexport const MIMETYPE_JSON_SCHEMA = 'application/schema+json'\nexport const ACCEPT_JSON_SCHEMA: Accept = {\n  [MIMETYPE_JSON_SCHEMA]: ['.json'],\n}\nconst DECODE_HEADER_SEPARATOR = ','\nconst DECODE_SCHEME_SEPARATOR = ':'\nconst DECODE_MEDIA_TYPES_SEPARATOR = ';'\nconst DECODE_DATA = 'data'\nconst DECODE_BASE64 = 'base64'\n\nexport interface UriInfo {\n  mimeType: string\n  options?: string[]\n  body: RJSFSchema\n}\n\nexport const decodeDataUriJsonSchema = (dataUrl: string) => {\n  const [header, data] = dataUrl.split(DECODE_HEADER_SEPARATOR)\n  if (!data || !header) throw new Error(i18n.t('topicFilter.error.schema.noDataUri'))\n\n  const [scheme, mediaTypes] = header.split(DECODE_SCHEME_SEPARATOR)\n  if (!mediaTypes) throw new Error(i18n.t('topicFilter.error.schema.noScheme'))\n  if (scheme !== DECODE_DATA) throw new Error(i18n.t('topicFilter.error.schema.noSchemeData'))\n\n  const options = mediaTypes.split(DECODE_MEDIA_TYPES_SEPARATOR)\n  if (!options.includes(MIMETYPE_JSON)) throw new Error(i18n.t('topicFilter.error.schema.noJsonSchemaMimeType'))\n  if (!options.includes(DECODE_BASE64)) throw new Error(i18n.t('topicFilter.error.schema.noBase64MediaType'))\n\n  try {\n    const decoded = atob(data)\n    const json: RJSFSchema = JSON.parse(decoded)\n\n    // This will take care of some of the basic json error but not of a valid JSONSchema\n    validator.ajv.compile(json)\n\n    // TODO[NVL] We need to decide what we want to require on the schema\n    const { properties } = json\n    if (!properties) throw new Error(i18n.t('topicFilter.error.schema.ajvNoProperties'))\n\n    return { mimeType: MIMETYPE_JSON, options, body: json } as UriInfo\n  } catch (error) {\n    if (error instanceof SyntaxError) throw new Error(i18n.t('topicFilter.error.schema.noBase64Data'))\n    if (error instanceof DOMException) throw new Error(i18n.t('topicFilter.error.schema.noJSON'))\n    if (error instanceof Error) {\n      throw new Error(`${error.message}`)\n    }\n  }\n}\n\nexport const encodeDataUriJsonSchema = (schema: RJSFSchema) => {\n  return `data:${MIMETYPE_JSON};base64,${btoa(JSON.stringify(schema))}`\n}\n\nexport interface SchemaHandler {\n  schema?: JSONSchema7\n  error?: string\n  status: AlertStatus\n  message: string\n}\n\nexport const validateSchemaFromDataURI = (topicFilterSchema: string | undefined): SchemaHandler => {\n  if (!topicFilterSchema)\n    return {\n      status: 'warning',\n      message: i18n.t('topicFilter.schema.status.missing'),\n    }\n  try {\n    const schema = decodeDataUriJsonSchema(topicFilterSchema)\n    if (!schema?.body)\n      return {\n        error: 'no body from the base64 payload',\n        status: 'error',\n        message: i18n.t('topicFilter.schema.status.internalError'),\n      }\n    return {\n      schema: schema.body,\n      status: 'success',\n      message: i18n.t('topicFilter.schema.status.success'),\n    }\n  } catch (e) {\n    return {\n      error: (e as Error).message,\n      status: 'error',\n      message: i18n.t('topicFilter.schema.status.invalid'),\n    }\n  }\n}\n","import type { FC } from 'react'\nimport { useState } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport { useDropzone } from 'react-dropzone'\nimport type { AlertStatus } from '@chakra-ui/react'\nimport { Button, Card, CardBody, Text, useToast } from '@chakra-ui/react'\n\nimport { DEFAULT_TOAST_OPTION } from '@/hooks/useEdgeToast/toast-utils.ts'\nimport { getDropZoneBorder } from '@/modules/Theme/utils.ts'\nimport { ACCEPT_JSON_SCHEMA } from '@/modules/TopicFilters/utils/topic-filter.schema.ts'\n\ninterface SchemaUploaderProps {\n  onUpload: (s: string) => void\n}\n\nconst SchemaUploader: FC<SchemaUploaderProps> = ({ onUpload }) => {\n  const [loading, setLoading] = useState(false)\n  const { t } = useTranslation()\n  const toast = useToast()\n\n  const { getRootProps, getInputProps, isDragActive, open } = useDropzone({\n    noClick: true,\n    noKeyboard: true,\n    maxFiles: 1,\n    accept: ACCEPT_JSON_SCHEMA,\n    onDropRejected: (fileRejections) => {\n      const status: AlertStatus = 'error'\n      setLoading(false)\n      fileRejections.forEach((fileRejection) => {\n        toast({\n          ...DEFAULT_TOAST_OPTION,\n          status,\n          title: t('rjsf.batchUpload.dropZone.status', {\n            ns: 'components',\n            context: status,\n            fileName: fileRejection.file.name,\n          }),\n          description: fileRejection.errors[0].message,\n        })\n      })\n    },\n    onDropAccepted: async (files) => {\n      const [file] = files\n      const reader = new FileReader()\n      reader.readAsDataURL(file)\n      reader.onload = () => {\n        if (typeof reader.result === 'string') onUpload(reader.result as string)\n      }\n    },\n  })\n\n  return (\n    <Card variant=\"filled\">\n      <CardBody\n        {...getRootProps()}\n        {...getDropZoneBorder('blue.500')}\n        minHeight=\"calc(250px - 2rem)\"\n        display=\"flex\"\n        flexDirection=\"column\"\n        justifyContent=\"center\"\n        alignItems=\"center\"\n        id=\"dropzone\"\n      >\n        <input {...getInputProps()} data-testid=\"schema-dropzone\" />\n        {isDragActive && <Text>{t('rjsf.batchUpload.dropZone.dropping', { ns: 'components' })}</Text>}\n        {loading && <Text>{t('rjsf.batchUpload.dropZone.loading', { ns: 'components' })}</Text>}\n        {!isDragActive && !loading && (\n          <>\n            <Text>{t('topicFilter.schema.actions.upload')}</Text>\n            <Button onClick={open}>{t('rjsf.batchUpload.dropZone.selectFile', { ns: 'components' })}</Button>\n          </>\n        )}\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default SchemaUploader\n","import type { FC } from 'react'\nimport { useMemo } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport type { JSONSchema7 } from 'json-schema'\nimport { Button, Card, CardBody, CardFooter } from '@chakra-ui/react'\n\nimport type { TopicFilter } from '@/api/__generated__'\nimport { useSamplingForTopic } from '@/api/hooks/useDomainModel/useSamplingForTopic.ts'\nimport LoaderSpinner from '@/components/Chakra/LoaderSpinner.tsx'\nimport ErrorMessage from '@/components/ErrorMessage.tsx'\nimport JsonSchemaBrowser from '@/components/rjsf/MqttTransformation/JsonSchemaBrowser.tsx'\nimport { encodeDataUriJsonSchema } from '@/modules/TopicFilters/utils/topic-filter.schema.ts'\n\ninterface SchemaManagerProps {\n  topicFilter: TopicFilter\n  onUpload: (s: string) => void\n}\n\nconst SchemaSampler: FC<SchemaManagerProps> = ({ topicFilter, onUpload }) => {\n  const { t } = useTranslation()\n  const { schema, isLoading, isError, error } = useSamplingForTopic(topicFilter.topicFilter)\n\n  const isSchemaValid = useMemo(() => {\n    return schema && Object.keys(schema).length !== 0 && schema.constructor === Object\n  }, [schema])\n\n  if (isLoading) return <LoaderSpinner />\n  if (isError && error) return <ErrorMessage message={error.message} />\n  if (!isSchemaValid) return <ErrorMessage message={t('topicFilter.error.noSchemaSampled')} />\n\n  return (\n    <Card>\n      <CardBody>\n        <JsonSchemaBrowser schema={schema as JSONSchema7} />\n      </CardBody>\n      <CardFooter justifyContent=\"flex-end\">\n        <Button\n          data-testid=\"schema-sampler-upload\"\n          onClick={() => onUpload(encodeDataUriJsonSchema(schema as JSONSchema7))}\n        >\n          {t('topicFilter.schema.actions.assign')}\n        </Button>\n      </CardFooter>\n    </Card>\n  )\n}\n\nexport default SchemaSampler\n","import type { FC } from 'react'\nimport { useMemo } from 'react'\nimport {\n  Button,\n  Card,\n  CardBody,\n  CardFooter,\n  CardHeader,\n  Tab,\n  TabList,\n  TabPanel,\n  TabPanels,\n  Tabs,\n  Text,\n  VStack,\n} from '@chakra-ui/react'\n\nimport type { TopicFilter } from '@/api/__generated__'\n\nimport JsonSchemaBrowser from '@/components/rjsf/MqttTransformation/JsonSchemaBrowser.tsx'\nimport ErrorMessage from '@/components/ErrorMessage.tsx'\nimport SchemaUploader from '@/modules/TopicFilters/components/SchemaUploader.tsx'\nimport SchemaSampler from '@/modules/TopicFilters/components/SchemaSampler.tsx'\nimport { useTopicFilterManager } from '@/modules/TopicFilters/hooks/useTopicFilterManager.ts'\nimport type { SchemaHandler } from '@/modules/TopicFilters/utils/topic-filter.schema.ts'\nimport { validateSchemaFromDataURI } from '@/modules/TopicFilters/utils/topic-filter.schema.ts'\nimport { useTranslation } from 'react-i18next'\n\ninterface CurrentSchemaProps {\n  topicFilter: TopicFilter\n}\n\nconst TopicSchemaManager: FC<CurrentSchemaProps> = ({ topicFilter }) => {\n  const { t } = useTranslation()\n  const schemaHandler = useMemo<SchemaHandler>(\n    () => validateSchemaFromDataURI(topicFilter.schema),\n    [topicFilter.schema]\n  )\n  const { onUpdate } = useTopicFilterManager()\n\n  const onHandleUpload = (dataUri: string) => {\n    onUpdate(topicFilter.topicFilter, { ...topicFilter, schema: dataUri })\n  }\n\n  const onHandleClear = () => {\n    onUpdate(topicFilter.topicFilter, { ...topicFilter, schema: undefined })\n  }\n\n  return (\n    <VStack>\n      <ErrorMessage status={schemaHandler.status} type={schemaHandler.message} />\n\n      <Card size=\"sm\">\n        <CardHeader>\n          <Text>{t('topicFilter.schema.prompt')}</Text>\n        </CardHeader>\n        <CardBody>\n          <Tabs isLazy>\n            <TabList>\n              <Tab>{t('topicFilter.schema.tabs.current')}</Tab>\n              <Tab>{t('topicFilter.schema.tabs.infer')}</Tab>\n              <Tab>{t('topicFilter.schema.tabs.upload')}</Tab>\n            </TabList>\n\n            <TabPanels>\n              <TabPanel>\n                <Card>\n                  <CardBody>\n                    {schemaHandler.error && (\n                      <ErrorMessage message={schemaHandler.error} status={schemaHandler.status} />\n                    )}\n                    {schemaHandler.schema && <JsonSchemaBrowser schema={schemaHandler.schema} hasExamples />}\n                  </CardBody>\n                  <CardFooter justifyContent=\"flex-end\">\n                    <Button isDisabled={Boolean(!topicFilter.schema)} onClick={onHandleClear}>\n                      {t('topicFilter.schema.actions.remove')}\n                    </Button>\n                  </CardFooter>\n                </Card>\n              </TabPanel>\n              <TabPanel>\n                <SchemaSampler topicFilter={topicFilter} onUpload={onHandleUpload} />\n              </TabPanel>\n              <TabPanel>\n                <SchemaUploader onUpload={onHandleUpload} />\n              </TabPanel>\n            </TabPanels>\n          </Tabs>\n        </CardBody>\n      </Card>\n    </VStack>\n  )\n}\n\nexport default TopicSchemaManager\n","import type { FC } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport type { UseDisclosureProps } from '@chakra-ui/react'\nimport {\n  Button,\n  Card,\n  CardBody,\n  CardHeader,\n  Drawer,\n  DrawerBody,\n  DrawerCloseButton,\n  DrawerContent,\n  DrawerFooter,\n  DrawerHeader,\n  DrawerOverlay,\n  Text,\n  useDisclosure,\n} from '@chakra-ui/react'\n\nimport type { TopicFilter } from '@/api/__generated__'\nimport { Topic } from '@/components/MQTT/EntityTag.tsx'\nimport TopicSchemaManager from '@/modules/TopicFilters/components/TopicSchemaManager.tsx'\n\ninterface TopicSchemaDrawerProps {\n  topicFilter: TopicFilter\n  trigger: (disclosureProps: UseDisclosureProps) => JSX.Element\n}\n\n// TODO[NVL] Too similar to ArrayItemDrawer; combine?\nconst TopicSchemaDrawer: FC<TopicSchemaDrawerProps> = ({ topicFilter, trigger }) => {\n  const { t } = useTranslation()\n  const props = useDisclosure()\n  const { isOpen, onClose } = props\n\n  const onHandleSubmit = () => {\n    onClose()\n  }\n\n  return (\n    <>\n      {trigger(props)}\n      <Drawer isOpen={isOpen} placement=\"right\" size=\"lg\" onClose={onClose} closeOnOverlayClick={false}>\n        <DrawerOverlay />\n        <DrawerContent>\n          <DrawerCloseButton />\n          <DrawerHeader>\n            <Text>{t('topicFilter.schema.header')}</Text>\n          </DrawerHeader>\n\n          <DrawerBody>\n            <Card size=\"sm\">\n              <CardHeader>\n                <Text as=\"span\">{t('topicFilter.schema.title')}</Text>{' '}\n                <Topic tagTitle={topicFilter.topicFilter} mr={3} />\n              </CardHeader>\n              <CardBody>\n                <TopicSchemaManager topicFilter={topicFilter} />\n              </CardBody>\n            </Card>\n          </DrawerBody>\n\n          <DrawerFooter>\n            <Button variant=\"primary\" onClick={onHandleSubmit}>\n              {t('topicFilter.schema.submit.label')}\n            </Button>\n          </DrawerFooter>\n        </DrawerContent>\n      </Drawer>\n    </>\n  )\n}\n\nexport default TopicSchemaDrawer\n","import type { FC } from 'react'\nimport { useMemo } from 'react'\nimport { Alert, AlertIcon } from '@chakra-ui/react'\n\nimport type { TopicFilter } from '@/api/__generated__'\nimport type { SchemaHandler } from '@/modules/TopicFilters/utils/topic-filter.schema.ts'\nimport { validateSchemaFromDataURI } from '@/modules/TopicFilters/utils/topic-filter.schema.ts'\n\ninterface SchemaValidationMarkProps {\n  topicFilter: TopicFilter\n}\n\nconst SchemaValidationMark: FC<SchemaValidationMarkProps> = ({ topicFilter }) => {\n  const schemaHandler = useMemo<SchemaHandler>(\n    () => validateSchemaFromDataURI(topicFilter.schema),\n    [topicFilter.schema]\n  )\n\n  return (\n    <Alert status={schemaHandler.status} size=\"xs\" py={1} pl={2} w={10}>\n      <AlertIcon />\n    </Alert>\n  )\n}\n\nexport default SchemaValidationMark\n","import { type FC, useEffect, useMemo } from 'react'\nimport { useNavigate } from 'react-router-dom'\nimport { useTranslation } from 'react-i18next'\nimport type { ColumnDef } from '@tanstack/react-table'\nimport { Button, ButtonGroup, Card, CardBody, Text, useDisclosure } from '@chakra-ui/react'\nimport { LuClipboardEdit, LuPencil, LuTrash, LuView } from 'react-icons/lu'\n\nimport type { TopicFilter, TopicFilterList } from '@/api/__generated__'\nimport { useTopicFilterManager } from '@/modules/TopicFilters/hooks/useTopicFilterManager.ts'\nimport LoaderSpinner from '@/components/Chakra/LoaderSpinner.tsx'\nimport IconButton from '@/components/Chakra/IconButton.tsx'\nimport ErrorMessage from '@/components/ErrorMessage.tsx'\nimport ExpandableDrawer from '@/components/ExpandableDrawer/ExpandableDrawer.tsx'\nimport { Topic } from '@/components/MQTT/EntityTag.tsx'\nimport PaginatedTable from '@/components/PaginatedTable/PaginatedTable.tsx'\nimport ArrayItemDrawer from '@/components/rjsf/SplitArrayEditor/components/ArrayItemDrawer.tsx'\nimport TopicSchemaDrawer from '@/modules/TopicFilters/components/TopicSchemaDrawer.tsx'\nimport SchemaValidationMark from '@/modules/TopicFilters/components/SchemaValidationMark.tsx'\nimport NodeNameCard from '@/modules/Workspace/components/parts/NodeNameCard.tsx'\nimport { NodeTypes } from '@/modules/Workspace/types.ts'\n\nconst TopicFilterManager: FC = () => {\n  const { t } = useTranslation()\n  const { isOpen, onOpen, onClose } = useDisclosure()\n  const navigate = useNavigate()\n  const { data, context, isLoading, isError, onUpdateCollection } = useTopicFilterManager()\n\n  const handleClose = () => {\n    onClose()\n    navigate('/workspace')\n  }\n\n  useEffect(() => {\n    onOpen()\n  }, [onOpen])\n\n  const columns = useMemo<ColumnDef<TopicFilter>[]>(() => {\n    return [\n      {\n        accessorKey: 'topicFilter',\n        header: t('topicFilter.listing.column.topicFilter'),\n        cell: (info) => {\n          return <Topic tagTitle={info.getValue<string>()} mr={3} />\n        },\n      },\n      {\n        accessorKey: 'description',\n        header: t('topicFilter.listing.column.description'),\n        cell: (info) => {\n          return <Text as=\"span\">{info.getValue<string>()}</Text>\n        },\n      },\n      {\n        id: 'hasSchema',\n        header: t('topicFilter.listing.column.hasSchema'),\n        cell: (info) => {\n          return <SchemaValidationMark topicFilter={info.row.original} />\n        },\n      },\n      {\n        id: 'actions',\n        header: t('topicFilter.listing.column.action'),\n        sortingFn: undefined,\n        cell: (info) => {\n          return (\n            <ButtonGroup role=\"toolbar\">\n              <TopicSchemaDrawer\n                topicFilter={info.row.original}\n                trigger={({ onOpen: onOpenArrayDrawer }) => (\n                  <ButtonGroup size=\"sm\">\n                    <IconButton\n                      aria-label={t('topicFilter.listing.action.view.aria-label')}\n                      icon={<LuView />}\n                      onClick={onOpenArrayDrawer}\n                    />\n                  </ButtonGroup>\n                )}\n              />\n\n              <ButtonGroup isAttached size=\"sm\" isDisabled>\n                <IconButton\n                  aria-label={t('topicFilter.listing.action.edit.aria-label')}\n                  icon={<LuPencil />}\n                  onClick={() => console.log(info.row.index)}\n                />\n                <IconButton\n                  aria-label={t('topicFilter.listing.action.delete.aria-label')}\n                  icon={<LuTrash />}\n                  onClick={() => console.log(info.row.index)}\n                />\n              </ButtonGroup>\n            </ButtonGroup>\n          )\n        },\n        footer: () => {\n          return (\n            <ArrayItemDrawer\n              header={t('topicFilter.listing.aria-label')}\n              context={context}\n              onSubmit={(w) => {\n                onUpdateCollection(w as TopicFilterList)\n              }}\n              trigger={({ onOpen: onOpenArrayDrawer }) => (\n                <ButtonGroup isAttached size=\"sm\">\n                  <Button leftIcon={<LuClipboardEdit />} onClick={onOpenArrayDrawer}>\n                    {t('topicFilter.listing.action.add.aria-label')}\n                  </Button>\n                </ButtonGroup>\n              )}\n            />\n          )\n        },\n      },\n    ]\n  }, [context, onUpdateCollection, t])\n\n  return (\n    <ExpandableDrawer\n      header={t('topicFilter.manager.header')}\n      subHeader={<NodeNameCard type={NodeTypes.EDGE_NODE} name={t('branding.appName')} />}\n      isOpen={isOpen}\n      onClose={handleClose}\n      closeOnOverlayClick={false}\n    >\n      {isLoading && <LoaderSpinner />}\n      {isError && <ErrorMessage message={t('topicFilter.error.loading')} />}\n      {!isLoading && !isError && data?.items && (\n        <Card size=\"sm\">\n          <CardBody>\n            <PaginatedTable<TopicFilter>\n              aria-label={t('topicFilter.listing.aria-label')}\n              data={data.items}\n              columns={columns}\n              enablePagination={true}\n            />\n          </CardBody>\n        </Card>\n      )}\n    </ExpandableDrawer>\n  )\n}\n\nexport default TopicFilterManager\n"],"names":["$TopicFilter","useCreateTopicFilter","appClient","useHttpClient","queryClient","useQueryClient","useMutation","requestBody","QUERY_KEYS","useDeleteTopicFilter","name","useUpdateTopicFilter","useUpdateAllTopicFilter","useTopicFilterManager","useTranslation","toast","useToast","topicFilterList","isLoading","isError","error","useListTopicFilters","createMutator","deleteMutator","updateMutator","updateCollectionMutator","topicFilterSchemas","useMemo","formatToast","operation","onDelete","topicName","onCreate","onUpdate","filter","onUpdateCollection","MIMETYPE_JSON","MIMETYPE_JSON_SCHEMA","ACCEPT_JSON_SCHEMA","DECODE_HEADER_SEPARATOR","DECODE_SCHEME_SEPARATOR","DECODE_MEDIA_TYPES_SEPARATOR","DECODE_DATA","DECODE_BASE64","decodeDataUriJsonSchema","dataUrl","header","data","i18n","scheme","mediaTypes","options","decoded","json","validator","properties","encodeDataUriJsonSchema","schema","validateSchemaFromDataURI","topicFilterSchema","e","SchemaUploader","onUpload","loading","setLoading","useState","t","getRootProps","getInputProps","isDragActive","open","useDropzone","fileRejections","status","fileRejection","DEFAULT_TOAST_OPTION","files","file","reader","jsx","Card","jsxs","CardBody","getDropZoneBorder","Text","Fragment","Button","SchemaSampler","topicFilter","useSamplingForTopic","isSchemaValid","LoaderSpinner","ErrorMessage","JsonSchemaBrowser","CardFooter","TopicSchemaManager","schemaHandler","onHandleUpload","dataUri","onHandleClear","VStack","CardHeader","Tabs","TabList","Tab","TabPanels","TabPanel","TopicSchemaDrawer","trigger","props","useDisclosure","isOpen","onClose","onHandleSubmit","Drawer","DrawerOverlay","DrawerContent","DrawerCloseButton","DrawerHeader","DrawerBody","Topic","DrawerFooter","SchemaValidationMark","Alert","AlertIcon","TopicFilterManager","onOpen","navigate","useNavigate","context","handleClose","useEffect","columns","info","ButtonGroup","onOpenArrayDrawer","IconButton","LuView","LuPencil","LuTrash","ArrayItemDrawer","w","LuClipboardEdit","ExpandableDrawer","NodeNameCard","NodeTypes","PaginatedTable"],"mappings":"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"}