{"version":3,"file":"EvenLogPage-BS_8MoKX.js","sources":["../../src/modules/EventLog/utils/payload-utils.ts","../../src/modules/EventLog/components/panel/EventDrawer.tsx","../../src/modules/EventLog/EvenLogPage.tsx"],"sourcesContent":["export const prettyJSON = (payload: string | undefined) => {\n  if (!payload) return null\n  try {\n    return JSON.stringify(JSON.parse(payload), null, 2)\n  } catch (e) {\n    return null\n  }\n}\n\nexport const prettifyXml = (sourceXml: string | undefined) => {\n  if (!sourceXml) return null\n\n  const xmlDoc = new DOMParser().parseFromString(sourceXml, 'application/xml')\n  const xsltDoc = new DOMParser().parseFromString(\n    [\n      // describes how we want to modify the XML - indent everything\n      '<xsl:stylesheet xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" version=\"1\">',\n      '  <xsl:strip-space elements=\"*\"/>',\n      '  <xsl:template match=\"para[content-style][not(text())]\">', // change to just text() to strip space in text nodes\n      '    <xsl:value-of select=\"normalize-space(.)\"/>',\n      '  </xsl:template>',\n      '  <xsl:template match=\"node()|@*\">',\n      '    <xsl:copy><xsl:apply-templates select=\"node()|@*\"/></xsl:copy>',\n      '  </xsl:template>',\n      '  <xsl:output indent=\"yes\"/>',\n      '</xsl:stylesheet>',\n    ].join('\\n'),\n    'application/xml'\n  )\n\n  /* istanbul ignore next -- @preserve */\n  try {\n    const xsltProcessor = new XSLTProcessor()\n    xsltProcessor.importStylesheet(xsltDoc)\n    const resultDoc = xsltProcessor.transformToDocument(xmlDoc)\n    return new XMLSerializer().serializeToString(resultDoc)\n  } catch (e) {\n    return null\n  }\n}\n","import type { FC } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport { DateTime } from 'luxon'\n\nimport {\n  Drawer,\n  DrawerBody,\n  DrawerHeader,\n  DrawerContent,\n  DrawerCloseButton,\n  Text,\n  Card,\n  CardHeader,\n  CardBody,\n  Grid,\n  GridItem,\n  VStack,\n  Code,\n  Badge,\n} from '@chakra-ui/react'\n\nimport type { Event } from '@/api/__generated__'\nimport { Payload } from '@/api/__generated__'\nimport SeverityBadge from '@/modules/EventLog/components/SeverityBadge.tsx'\nimport { prettifyXml, prettyJSON } from '@/modules/EventLog/utils/payload-utils.ts'\nimport DateTimeRenderer from '@/components/DateTime/DateTimeRenderer.tsx'\n\nimport SourceLink from '../SourceLink.tsx'\n\ninterface BridgeMainDrawerProps {\n  event: Event\n  isOpen: boolean\n\n  onClose: () => void\n}\n\nconst EventDrawer: FC<BridgeMainDrawerProps> = ({ event, isOpen, onClose }) => {\n  const { t } = useTranslation()\n\n  const isJSON = event.payload?.contentType === Payload.contentType.JSON\n  const isXML = event.payload?.contentType === Payload.contentType.XML\n\n  const JSONFormat = isJSON && prettyJSON(event.payload?.content)\n  const XMLFormat = isXML && prettifyXml(event.payload?.content)\n\n  return (\n    <>\n      <Drawer variant=\"hivemq\" closeOnOverlayClick={true} size=\"lg\" isOpen={isOpen} placement=\"right\" onClose={onClose}>\n        <DrawerContent aria-label={t('bridge.drawer.label')}>\n          <DrawerCloseButton />\n          <DrawerHeader id=\"bridge-form-header\">{t('eventLog.panel.title')}</DrawerHeader>\n\n          <DrawerBody>\n            <VStack gap={2}>\n              <Card w=\"100%\">\n                <CardHeader>\n                  <SeverityBadge event={event} />\n                </CardHeader>\n                <CardBody>\n                  <Grid templateColumns=\"repeat(2, 1fr)\" gap={6}>\n                    <GridItem data-testid=\"event-title-created\">\n                      <Text>{t('eventLog.table.header.created')}</Text>\n                    </GridItem>\n                    <GridItem data-testid=\"event-value-created\">\n                      <DateTimeRenderer date={DateTime.fromISO(event?.created || '')} />\n                    </GridItem>\n                    <GridItem data-testid=\"event-title-source\">\n                      <Text>{t('eventLog.table.header.source')}</Text>\n                    </GridItem>\n                    <GridItem data-testid=\"event-value-source\">\n                      <SourceLink source={event?.source} type={event?.associatedObject} />\n                    </GridItem>\n                    <GridItem data-testid=\"event-title-associatedObject\">\n                      <Text>{t('eventLog.table.header.associatedObject')}</Text>\n                    </GridItem>\n                    <GridItem data-testid=\"event-value-associatedObject\">\n                      <SourceLink source={event?.associatedObject} />\n                    </GridItem>\n                  </Grid>\n                </CardBody>\n              </Card>\n\n              <Card w=\"100%\">\n                <CardBody data-testid=\"event-value-message\">{event.message}</CardBody>\n              </Card>\n\n              {event.payload && (\n                <Card w=\"100%\">\n                  <CardHeader data-testid=\"event-title-payload\">\n                    {t('eventLog.table.header.payload')}\n                    <Badge variant=\"outline\" mx={2}>\n                      {event.payload?.contentType}\n                    </Badge>\n                  </CardHeader>\n                  <CardBody pt={0}>\n                    <Code w=\"100%\" p={2} whiteSpace=\"pre-wrap\" overflow=\"auto\" sx={{ textWrap: 'nowrap' }} maxH={400}>\n                      {JSONFormat && JSONFormat}\n                      {XMLFormat && XMLFormat}\n                      {!isJSON && !isXML && event.payload?.content}\n                    </Code>\n                  </CardBody>\n                </Card>\n              )}\n            </VStack>\n          </DrawerBody>\n        </DrawerContent>\n      </Drawer>\n    </>\n  )\n}\n\nexport default EventDrawer\n","import type { FC } from 'react'\nimport { useState } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport { useDisclosure } from '@chakra-ui/react'\n\nimport type { Event } from '@/api/__generated__'\nimport PageContainer from '@/components/PageContainer.tsx'\n\nimport EventDrawer from './components/panel/EventDrawer.tsx'\nimport EventLogTable from './components/table/EventLogTable.tsx'\n\nconst EvenLogPage: FC = () => {\n  const { isOpen, onOpen, onClose } = useDisclosure()\n  const { t } = useTranslation()\n  const [selectedEvent, setSelectedEvent] = useState<Event | undefined>(undefined)\n\n  const handleEditorOnClose = () => {\n    setSelectedEvent(undefined)\n    onClose()\n  }\n\n  const handleEditorOpen = (evt: Event) => {\n    setSelectedEvent(evt)\n    onOpen()\n  }\n\n  return (\n    <PageContainer title={t('eventLog.title')} subtitle={t('eventLog.description')}>\n      <EventLogTable onOpen={handleEditorOpen} />\n      {selectedEvent && <EventDrawer isOpen={isOpen} onClose={handleEditorOnClose} event={selectedEvent} />}\n    </PageContainer>\n  )\n}\n\nexport default EvenLogPage\n"],"names":["prettyJSON","payload","prettifyXml","sourceXml","xmlDoc","xsltDoc","xsltProcessor","resultDoc","EventDrawer","event","isOpen","onClose","t","useTranslation","isJSON","_a","Payload","isXML","_b","JSONFormat","_c","XMLFormat","_d","jsx","Drawer","jsxs","DrawerContent","DrawerCloseButton","DrawerHeader","DrawerBody","VStack","Card","CardHeader","SeverityBadge","CardBody","Grid","GridItem","Text","DateTimeRenderer","DateTime","SourceLink","Badge","_e","Code","_f","EvenLogPage","onOpen","useDisclosure","selectedEvent","setSelectedEvent","useState","handleEditorOnClose","handleEditorOpen","evt","PageContainer","EventLogTable"],"mappings":"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"}