import{c as m}from"./index-UJo6opCj.js";import{p as l,c as h}from"./middleware-DWkoLS6u.js";import{D as y,a as o,E as g}from"./types-CNm55BG_.js";import"./index-cMih3SEP.js";import{M as b,b as c,c as p,d as T}from"./index-Dis5-5gm.js";(function(){try{var t=typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{},i=new t.Error().stack;i&&(t._sentryDebugIds=t._sentryDebugIds||{},t._sentryDebugIds[i]="5b960dab-feba-4159-9d88-14e20e1df18f",t._sentryDebugIdIdentifier="sentry-dbid-5b960dab-feba-4159-9d88-14e20e1df18f")}catch{}})();const D="#/definitions/functionId",S={"System.log":{title:"System.log",metadata:{isTerminal:!1},description:"Logs a message on the given level",required:["level","message"],type:"object",properties:{level:{type:"string",title:"Log Level",description:"Specifies the log level of the function in the hivemq.log file",enum:["DEBUG","ERROR","WARN","INFO","TRACE"]},message:{type:"string",title:"Message",description:"Adds a user-defined string that prints to the log file. For more information, see Example log message"}}},"Delivery.redirectTo":{title:"Delivery.redirectTo",metadata:{isTerminal:!0,isDataOnly:!0},description:"Redirects an MQTT PUBLISH message to a specified topic",required:["topic"],type:"object",properties:{topic:{type:"string",title:"Topic",description:"The destination MQTT topic according to MQTT specification"},applyPolicies:{type:"boolean",title:"Apply Policies",description:"Defines whether policies are executed after publishing to a different topic."}}},"Mqtt.UserProperties.add":{title:"Mqtt.UserProperties.add",metadata:{isTerminal:!1},description:"Adds a user property to the MQTT message",required:["name","value"],type:"object",properties:{name:{type:"string",title:"Property Name",description:"Specifies the name of the user property. Multiple user properties with the same name are allowed."},value:{type:"string",title:"Property Value",description:"Specifies the value of the user property."}}},"Serdes.deserialize":{title:"Serdes.deserialize",metadata:{isTerminal:!1,hasArguments:!0,isDataOnly:!0},description:"Deserializes a binary MQTT message payload into a data object based on the configured JSON Schema or Protobuf schema.",required:["schemaId","schemaVersion"],type:"object",properties:{schemaId:{type:"string",title:"Schema ID",description:"The identifier of the JSON Schema or Protobuf schema to be used for deserialization."},schemaVersion:{type:"string",title:"Schema Version",description:"The version of the schema to be used for deserialization."}}},"Serdes.serialize":{title:"Serdes.serialize",metadata:{isTerminal:!1,hasArguments:!0,isDataOnly:!0},description:"Serializes a data object into a binary MQTT message payload based on the configured JSON Schema or Protobuf schema.",required:["schemaId","schemaVersion"],type:"object",properties:{schemaId:{type:"string",title:"Schema ID",description:"The identifier of the JSON Shcema to be used for serialization"},schemaVersion:{type:"string",title:"Schema Version",description:"The version of the schema to be used for serialization."}}},"Metrics.Counter.increment":{title:"Metrics.Counter.increment",metadata:{isTerminal:!1},description:"Increments a metric of type counter, which can be accessed with monitoring",required:["metricName","incrementBy"],type:"object",properties:{metricName:{type:"string",title:"Metric Name",description:"Specifies the name of the metric to be incremented"},incrementBy:{type:"number",title:"IncrementBy",description:"Specifies the amount by which the counter should be incremented. Negative values are supported"}}},"Mqtt.disconnect":{title:"Mqtt.disconnect",metadata:{isTerminal:!0},description:"Redirects an MQTT PUBLISH message to a specified topic",properties:{}},"Mqtt.drop":{title:"Mqtt.drop",metadata:{isTerminal:!0},description:"Drops the MQTT packet that is currently processed",properties:{}},"DataHub.transform":{title:"Transformation",description:"The list of Javascript functions used in this transformation operation. Add them directly on the graph",metadata:{isTerminal:!1,hasArguments:!0},properties:{transform:{type:"array",title:"Execution order",description:"Change the order in which the transform functions will be executed",items:{type:"string",title:"Function name"}}}},functionId:{required:["id"],properties:{id:{title:"id",description:"The unique id of this pipeline operation",type:"string",pattern:"^[A-Za-z][A-Za-z0-9._-]{0,1023}$"},functionId:{title:"Function",description:`You can use two categories of functions in your policies. Non-terminal functions allow further operations in the pipeline to be executed,
                          while terminal functions end further operations in the pipeline`,enum:["System.log","Delivery.redirectTo","Mqtt.UserProperties.add","Serdes.deserialize","Serdes.serialize","Metrics.Counter.increment","Mqtt.disconnect","Mqtt.drop","DataHub.transform"]}},dependencies:{functionId:{oneOf:[{properties:{functionId:{enum:["System.log"]},formData:{$ref:"#/definitions/System.log"}}},{properties:{functionId:{enum:["Delivery.redirectTo"]},formData:{$ref:"#/definitions/Delivery.redirectTo"}}},{properties:{functionId:{enum:["Mqtt.UserProperties.add"]},formData:{$ref:"#/definitions/Mqtt.UserProperties.add"}}},{properties:{functionId:{enum:["Serdes.deserialize"]},formData:{$ref:"#/definitions/Serdes.deserialize"}}},{properties:{functionId:{enum:["Serdes.serialize"]},formData:{$ref:"#/definitions/Serdes.serialize"}}},{properties:{functionId:{enum:["Metrics.Counter.increment"]},formData:{$ref:"#/definitions/Metrics.Counter.increment"}}},{properties:{functionId:{enum:["Mqtt.disconnect"]},formData:{$ref:"#/definitions/Mqtt.disconnect"}}},{properties:{functionId:{enum:["Mqtt.drop"]},formData:{$ref:"#/definitions/Mqtt.drop"}}},{properties:{functionId:{enum:["DataHub.transform"]},formData:{$ref:"#/definitions/DataHub.transform"}}}]}}}},I={$ref:D,definitions:S};/* istanbul ignore file -- @preserve */const M={schema:I,uiSchema:{functionId:{"ui:widget":"datahub:function-selector"},formData:{transform:{"ui:options":{readonly:!0,removable:!1,addable:!1}},message:{"ui:widget":"datahub:message-interpolation"},incrementBy:{"ui:widget":"updown"},metricName:{"ui:widget":"datahub:metric-counter"}}}},A=t=>{var r,n,s;if(!t)return[];const i=t.definitions;if(!i)return[];const e=(s=(n=(r=i.functionId)==null?void 0:r.properties)==null?void 0:n.functionId)==null?void 0:s.enum;return e?e.map(d=>{const a=i[d];if(!a)return{};const u=a.metadata;return{functionId:d,schema:a,metadata:u}}):[]},f=()=>{const t=[],i=[],e=A(M.schema);return{nodes:t,edges:i,functions:e,name:"",status:y.DRAFT,type:void 0}},q={markerEnd:{type:b.ArrowClosed,width:15,height:20,color:"var(--chakra-colors-gray-500)"},style:{strokeWidth:2,stroke:"var(--chakra-colors-gray-500)"}},O=m()(l((t,i)=>({...f(),reset:()=>{t(f())},isDirty:()=>i().nodes.length!==0,isPolicyInDraft:()=>i().nodes.filter(e=>e.type===o.DATA_POLICY||e.type===o.BEHAVIOR_POLICY).length!==0,onNodesChange:e=>{t({nodes:p(e,i().nodes)})},onEdgesChange:e=>{t({edges:c(e,i().edges)})},onConnect:e=>{t({edges:T({...e,type:g.DATAHUB_EDGE,markerEnd:q.markerEnd},i().edges)})},onAddNodes:e=>{const r=i().nodes.map(s=>s.id),n=e.filter(s=>!r.includes(s.item.id));n.length&&t({nodes:p(n,i().nodes)})},onAddEdges:e=>{const r=i().edges.map(s=>s.id),n=e.filter(s=>!r.includes(s.item.id));n.length&&t({edges:c(n,i().edges)})},onUpdateNodes:(e,r)=>{t({nodes:i().nodes.map(n=>(n.id===e&&(n.data=r),n))})},onAddFunctions:e=>{t({functions:[...i().functions,...e]})},onSerializePolicy:e=>{e.type!==o.BEHAVIOR_POLICY&&(e.type,o.DATA_POLICY)},setStatus:(e,r)=>{t({status:e}),r&&r.name!=null&&t({name:r.name}),r!=null&&r.type&&t({type:r.type})}}),{name:"datahub.workspace",storage:h(()=>localStorage)}));export{M,q as s,O as u};
//# sourceMappingURL=useDataHubDraftStore-BdIk6zJn.js.map
