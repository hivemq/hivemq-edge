{"version":3,"file":"ConnectionController-DFWh8Ryw.js","sources":["../../node_modules/.pnpm/@chakra-ui+menu@2.2.1_@chakra-ui+system@2.6.2_framer-motion@10.12.21_react@18.2.0/node_modules/@chakra-ui/menu/dist/chunk-4CNGLKYX.mjs","../../node_modules/.pnpm/@chakra-ui+menu@2.2.1_@chakra-ui+system@2.6.2_framer-motion@10.12.21_react@18.2.0/node_modules/@chakra-ui/menu/dist/chunk-M565QO7N.mjs","../../node_modules/.pnpm/@chakra-ui+menu@2.2.1_@chakra-ui+system@2.6.2_framer-motion@10.12.21_react@18.2.0/node_modules/@chakra-ui/menu/dist/chunk-5TWLKMYI.mjs","../../src/api/types/api-devices.ts","../../src/api/hooks/useProtocolAdapters/useSetConnectionStatus.ts","../../src/api/hooks/useGetBridges/useSetConnectionStatus.ts","../../src/components/ConnectionController/components/ConnectionButton.tsx","../../src/components/ConnectionController/components/ConnectionMenu.tsx","../../src/components/ConnectionController/ConnectionController.tsx"],"sourcesContent":["'use client'\nimport {\n  useMenuStyles\n} from \"./chunk-UZJ3TPNQ.mjs\";\n\n// src/menu-command.tsx\nimport { chakra, forwardRef } from \"@chakra-ui/system\";\nimport { jsx } from \"react/jsx-runtime\";\nvar MenuCommand = forwardRef(\n  (props, ref) => {\n    const styles = useMenuStyles();\n    return /* @__PURE__ */ jsx(\n      chakra.span,\n      {\n        ref,\n        ...props,\n        __css: styles.command,\n        className: \"chakra-menu__command\"\n      }\n    );\n  }\n);\nMenuCommand.displayName = \"MenuCommand\";\n\nexport {\n  MenuCommand\n};\n//# sourceMappingURL=chunk-4CNGLKYX.mjs.map","'use client'\nimport {\n  useMenuStyles\n} from \"./chunk-UZJ3TPNQ.mjs\";\n\n// src/styled-menu-item.tsx\nimport { chakra, forwardRef } from \"@chakra-ui/system\";\nimport { useMemo } from \"react\";\nimport { jsx } from \"react/jsx-runtime\";\nvar StyledMenuItem = forwardRef(\n  (props, ref) => {\n    const { type, ...rest } = props;\n    const styles = useMenuStyles();\n    const btnType = rest.as || type ? type != null ? type : void 0 : \"button\";\n    const buttonStyles = useMemo(\n      () => ({\n        textDecoration: \"none\",\n        color: \"inherit\",\n        userSelect: \"none\",\n        display: \"flex\",\n        width: \"100%\",\n        alignItems: \"center\",\n        textAlign: \"start\",\n        flex: \"0 0 auto\",\n        outline: 0,\n        ...styles.item\n      }),\n      [styles.item]\n    );\n    return /* @__PURE__ */ jsx(chakra.button, { ref, type: btnType, ...rest, __css: buttonStyles });\n  }\n);\n\nexport {\n  StyledMenuItem\n};\n//# sourceMappingURL=chunk-M565QO7N.mjs.map","'use client'\nimport {\n  MenuCommand\n} from \"./chunk-4CNGLKYX.mjs\";\nimport {\n  StyledMenuItem\n} from \"./chunk-M565QO7N.mjs\";\nimport {\n  MenuIcon\n} from \"./chunk-HB6KBUMZ.mjs\";\nimport {\n  useMenuItem\n} from \"./chunk-SANI5SUM.mjs\";\n\n// src/menu-item.tsx\nimport { forwardRef } from \"@chakra-ui/system\";\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nvar MenuItem = forwardRef((props, ref) => {\n  const {\n    icon,\n    iconSpacing = \"0.75rem\",\n    command,\n    commandSpacing = \"0.75rem\",\n    children,\n    ...rest\n  } = props;\n  const menuitemProps = useMenuItem(rest, ref);\n  const shouldWrap = icon || command;\n  const _children = shouldWrap ? /* @__PURE__ */ jsx(\"span\", { style: { pointerEvents: \"none\", flex: 1 }, children }) : children;\n  return /* @__PURE__ */ jsxs(\n    StyledMenuItem,\n    {\n      ...menuitemProps,\n      className: cx(\"chakra-menu__menuitem\", menuitemProps.className),\n      children: [\n        icon && /* @__PURE__ */ jsx(MenuIcon, { fontSize: \"0.8em\", marginEnd: iconSpacing, children: icon }),\n        _children,\n        command && /* @__PURE__ */ jsx(MenuCommand, { marginStart: commandSpacing, children: command })\n      ]\n    }\n  );\n});\nMenuItem.displayName = \"MenuItem\";\n\nexport {\n  MenuItem\n};\n//# sourceMappingURL=chunk-5TWLKMYI.mjs.map","export enum DeviceTypes {\n  BRIDGE = 'BRIDGE',\n  ADAPTER = 'ADAPTER',\n}\n","import { useMutation, useQueryClient } from '@tanstack/react-query'\nimport type { ApiError, StatusTransitionCommand, StatusTransitionResult } from '../../__generated__'\n\nimport { useHttpClient } from '@/api/hooks/useHttpClient/useHttpClient.ts'\nimport { QUERY_KEYS } from '@/api/utils.ts'\n\ninterface SetConnectionStatusProps {\n  adapterId: string\n  requestBody: StatusTransitionCommand\n}\n\nexport const useSetConnectionStatus = () => {\n  const appClient = useHttpClient()\n  const queryClient = useQueryClient()\n\n  const changeStatus = ({ adapterId, requestBody }: SetConnectionStatusProps) => {\n    return appClient.protocolAdapters.transitionAdapterStatus(adapterId, requestBody)\n  }\n\n  return useMutation<StatusTransitionResult, ApiError, SetConnectionStatusProps>({\n    mutationFn: changeStatus,\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [QUERY_KEYS.ADAPTERS] })\n    },\n  })\n}\n","import { useMutation, useQueryClient } from '@tanstack/react-query'\nimport type { ApiError, StatusTransitionCommand, StatusTransitionResult } from '../../__generated__'\n\nimport { useHttpClient } from '@/api/hooks/useHttpClient/useHttpClient.ts'\nimport { QUERY_KEYS } from '@/api/utils.ts'\n\ninterface SetConnectionStatusProps {\n  name: string\n  requestBody: StatusTransitionCommand\n}\n\nexport const useSetConnectionStatus = () => {\n  const appClient = useHttpClient()\n  const queryClient = useQueryClient()\n\n  const setConnectionStatus = ({ name, requestBody }: SetConnectionStatusProps) => {\n    return appClient.bridges.transitionBridgeStatus(name, requestBody)\n  }\n\n  return useMutation<StatusTransitionResult, ApiError, SetConnectionStatusProps>({\n    mutationFn: setConnectionStatus,\n    onSuccess: () => {\n      // queryClient.invalidateQueries(['bridges', variables.name, QUERY_KEYS.CONNECTION_STATUS])\n      queryClient.invalidateQueries({ queryKey: [QUERY_KEYS.BRIDGES] })\n    },\n  })\n}\n","import type { FC } from 'react'\nimport { ButtonGroup } from '@chakra-ui/react'\nimport { MdPlayArrow, MdRestartAlt, MdStop } from 'react-icons/md'\nimport { StatusTransitionCommand } from '@/api/__generated__'\nimport type { ConnectionElementProps } from '@/components/ConnectionController/types.ts'\nimport IconButton from '@/components/Chakra/IconButton.tsx'\nimport { useTranslation } from 'react-i18next'\n\nconst ConnectionButton: FC<ConnectionElementProps> = ({ id, isRunning, onChangeStatus, isLoading }) => {\n  const { t } = useTranslation()\n\n  return (\n    <ButtonGroup size=\"sm\" isAttached>\n      {!isRunning && (\n        <IconButton\n          isDisabled={isLoading}\n          data-testid=\"device-action-start\"\n          aria-label={t('action.start')}\n          icon={<MdPlayArrow />}\n          onClick={() => onChangeStatus?.(id, StatusTransitionCommand.command.START)}\n        />\n      )}\n      {isRunning && (\n        <IconButton\n          isDisabled={isLoading}\n          data-testid=\"device-action-stop\"\n          aria-label={t('action.stop')}\n          icon={<MdStop />}\n          onClick={() => onChangeStatus?.(id, StatusTransitionCommand.command.STOP)}\n        />\n      )}\n      <IconButton\n        isDisabled={isLoading || !isRunning}\n        data-testid=\"device-action-restart\"\n        aria-label={t('action.restart')}\n        icon={<MdRestartAlt />}\n        onClick={() => onChangeStatus?.(id, StatusTransitionCommand.command.RESTART)}\n      />\n    </ButtonGroup>\n  )\n}\n\nexport default ConnectionButton\n","import type { FC } from 'react'\nimport type { ConnectionElementProps } from '@/components/ConnectionController/types.ts'\nimport { MenuItem } from '@chakra-ui/react'\nimport { StatusTransitionCommand } from '@/api/__generated__'\nimport { useTranslation } from 'react-i18next'\n\nconst ConnectionMenu: FC<ConnectionElementProps> = ({ id, isRunning, isLoading, onChangeStatus }) => {\n  const { t } = useTranslation()\n\n  return (\n    <>\n      {!isRunning && (\n        <MenuItem\n          isDisabled={isLoading}\n          data-testid=\"device-action-start\"\n          onClick={() => onChangeStatus?.(id, StatusTransitionCommand.command.START)}\n        >\n          {t('action.start')}\n        </MenuItem>\n      )}\n\n      {isRunning && (\n        <MenuItem\n          isDisabled={isLoading}\n          data-testid=\"device-action-stop\"\n          onClick={() => onChangeStatus?.(id, StatusTransitionCommand.command.STOP)}\n        >\n          {t('action.stop')}\n        </MenuItem>\n      )}\n\n      <MenuItem\n        isDisabled={isLoading || !isRunning}\n        data-testid=\"device-action-restart\"\n        onClick={() => onChangeStatus?.(id, StatusTransitionCommand.command.RESTART)}\n      >\n        {t('action.restart')}\n      </MenuItem>\n    </>\n  )\n}\n\nexport default ConnectionMenu\n","import type { FC } from 'react'\nimport { useEffect, useState } from 'react'\nimport { useTranslation } from 'react-i18next'\n\nimport type { ApiError, StatusTransitionCommand } from '@/api/__generated__'\nimport { Status } from '@/api/__generated__'\nimport { DeviceTypes } from '@/api/types/api-devices.ts'\nimport { useSetConnectionStatus as useSetAdapterConnectionStatus } from '@/api/hooks/useProtocolAdapters/useSetConnectionStatus.ts'\nimport { useSetConnectionStatus as useSetBridgeConnectionStatus } from '@/api/hooks/useGetBridges/useSetConnectionStatus.ts'\n\nimport { useEdgeToast } from '@/hooks/useEdgeToast/useEdgeToast.tsx'\n\nimport ConnectionButton from './components/ConnectionButton.tsx'\nimport ConnectionMenu from './components/ConnectionMenu.tsx'\nimport type { ConnectionElementProps } from '@/components/ConnectionController/types.ts'\n\ninterface ConnectionControllerProps {\n  type: DeviceTypes\n  id: string\n  status?: Status\n  variant?: 'button' | 'menuItem'\n}\n\nconst ConnectionController: FC<ConnectionControllerProps> = ({ type, id, status, variant = 'button' }) => {\n  const updateAdapterStatus = useSetAdapterConnectionStatus()\n  const updateBridgeStatus = useSetBridgeConnectionStatus()\n  const { successToast, errorToast } = useEdgeToast()\n  const { t } = useTranslation()\n  const [isLoading, setIsLoading] = useState(0)\n\n  const As: React.FC<ConnectionElementProps> = variant === 'button' ? ConnectionButton : ConnectionMenu\n\n  const isRunning = status?.runtime === Status.runtime.STARTED\n\n  useEffect(() => {\n    if (isLoading) {\n      const timer = setTimeout(() => {\n        setIsLoading(0)\n      }, isLoading)\n\n      return () => {\n        clearTimeout(timer)\n      }\n    }\n  }, [isLoading])\n\n  const handleOnStatusChange = (eventId: string, status: StatusTransitionCommand.command) => {\n    const statusPromise =\n      type === DeviceTypes.BRIDGE\n        ? updateBridgeStatus.mutateAsync({ name: eventId, requestBody: { command: status } })\n        : updateAdapterStatus.mutateAsync({ adapterId: eventId, requestBody: { command: status } })\n\n    statusPromise\n      .then((results) => {\n        const { callbackTimeoutMillis } = results\n        if (callbackTimeoutMillis) setIsLoading(callbackTimeoutMillis)\n        successToast({\n          title: t('protocolAdapter.toast.status.title'),\n          description: t('protocolAdapter.toast.status.description', {\n            context: status,\n            device: type,\n          }),\n        })\n      })\n      .catch((err: ApiError) =>\n        errorToast(\n          {\n            title: t('protocolAdapter.toast.status.title'),\n            description: t('protocolAdapter.toast.status.error', {\n              device: type,\n            }),\n          },\n          err\n        )\n      )\n  }\n\n  return <As id={id} isRunning={isRunning} onChangeStatus={handleOnStatusChange} isLoading={!!isLoading} />\n}\n\nexport default ConnectionController\n"],"names":["MenuCommand","forwardRef","props","ref","styles","useMenuStyles","jsx","chakra","StyledMenuItem","type","rest","btnType","buttonStyles","useMemo","MenuItem","icon","iconSpacing","command","commandSpacing","children","menuitemProps","useMenuItem","_children","jsxs","cx","MenuIcon","DeviceTypes","useSetConnectionStatus","appClient","useHttpClient","queryClient","useQueryClient","useMutation","adapterId","requestBody","QUERY_KEYS","name","ConnectionButton","id","isRunning","onChangeStatus","isLoading","t","useTranslation","ButtonGroup","IconButton","MdPlayArrow","StatusTransitionCommand","MdStop","MdRestartAlt","ConnectionMenu","Fragment","ConnectionController","status","variant","updateAdapterStatus","useSetAdapterConnectionStatus","updateBridgeStatus","useSetBridgeConnectionStatus","successToast","errorToast","useEdgeToast","setIsLoading","useState","As","Status","useEffect","timer","handleOnStatusChange","eventId","results","callbackTimeoutMillis","err"],"mappings":"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","x_google_ignoreList":[0,1,2]}