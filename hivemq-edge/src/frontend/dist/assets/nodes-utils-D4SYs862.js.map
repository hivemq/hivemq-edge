{"version":3,"file":"nodes-utils-D4SYs862.js","sources":["../../src/modules/Workspace/utils/status-utils.ts","../../src/modules/Workspace/utils/nodes-utils.ts"],"sourcesContent":["import type { Edge, Instance, Node } from 'reactflow'\nimport { MarkerType } from 'reactflow'\nimport type { WithCSSVar } from '@chakra-ui/react'\nimport type { Dict } from '@chakra-ui/utils'\n\nimport type { Adapter, Bridge, ProtocolAdapter } from '@/api/__generated__'\nimport { Status } from '@/api/__generated__'\n\nimport type { Group } from '../types.ts'\nimport { NodeTypes } from '../types.ts'\nimport { getBridgeTopics } from './topics-utils.ts'\nimport { isBidirectional } from '@/modules/Workspace/utils/adapter.utils.ts'\n\n/**\n * @param theme\n * @param status\n *\n * TODO[NVL] Unify the styling with ConnectionStatusBadge\n * @see ConnectionStatusBadge\n */\nexport const getThemeForStatus = (theme: Partial<WithCSSVar<Dict>>, status: Status | undefined) => {\n  if (status?.runtime === Status.runtime.STOPPED) return theme.colors.status.error[500]\n\n  if (status?.connection === Status.connection.CONNECTED) return theme.colors.status.connected[500]\n  if (status?.connection === Status.connection.DISCONNECTED) return theme.colors.status.disconnected[500]\n  if (status?.connection === Status.connection.STATELESS) return theme.colors.status.stateless[500]\n\n  // if (status?.connection === Status.connection.ERROR) return theme.colors.status.error[500]\n  // if (status?.connection === Status.connection.UNKNOWN) return theme.colors.status.error[500]\n  return theme.colors.status.error[500]\n}\n\nexport const updateNodeStatus = (currentNodes: Node[], updates: Status[]) => {\n  return currentNodes.map((n): Node<Bridge> => {\n    if (n.type === NodeTypes.BRIDGE_NODE) {\n      const newData = { ...n.data } as Bridge\n      const newStatus = updates.find((s) => s.id === newData.id)\n      if (!newStatus) return n\n      if (newStatus.connection === newData.status?.connection) return n\n\n      n.data = {\n        ...newData,\n        status: {\n          connection: newStatus.connection,\n        },\n      }\n      return n\n    }\n    if (n.type === NodeTypes.ADAPTER_NODE) {\n      const newData = { ...n.data } as Adapter\n      const newStatus = updates.find((s) => s.id === newData.id)\n      if (!newStatus) return n\n      // if (newStatus.connection === newData.status?.connection) return n\n\n      n.data = {\n        ...newData,\n        status: { ...newStatus },\n      }\n      return n\n    }\n    return n\n  })\n}\n\nexport type EdgeStyle = Pick<Edge, 'style' | 'animated' | 'markerEnd' | 'data'>\n\nexport const getEdgeStatus = (\n  isConnected: boolean,\n  hasTopics: boolean,\n  hasMarker: boolean,\n  themeForStatus: string\n): EdgeStyle => {\n  const edge: EdgeStyle = {}\n  edge.style = {\n    strokeWidth: 1.5,\n    stroke: themeForStatus,\n  }\n  edge.animated = isConnected && hasTopics\n\n  edge.markerEnd = hasMarker\n    ? {\n        type: MarkerType.ArrowClosed,\n        width: 20,\n        height: 20,\n        color: themeForStatus,\n      }\n    : undefined\n\n  edge.data = {\n    isConnected,\n    hasTopics,\n  }\n  return edge\n}\n\nexport const updateEdgesStatus = (\n  adapterTypes: ProtocolAdapter[],\n  currentEdges: Edge[],\n  updates: Status[],\n  getNode: Instance.GetNode<Partial<Bridge | Adapter>>,\n  theme: Partial<WithCSSVar<Dict>>\n): Edge[] => {\n  const newEdges: Edge[] = []\n\n  // NOTE (to test): This pattern only work because the groups have to be before the included nodes in the array but the\n  // group's edges are after the node's edges\n  currentEdges.forEach((edge) => {\n    if (edge.id.startsWith('connect-edge-group')) {\n      const group = getNode(edge.source)\n      if (!group || group.type !== NodeTypes.CLUSTER_NODE) return edge\n\n      const groupEdges = newEdges.filter((e) => (group as Node<Group>).data.childrenNodeIds.includes(e.source))\n      const isConnected = groupEdges.every((e) => e.data.isConnected)\n      const hasTopics = groupEdges.every((e) => e.data.hasTopics)\n      // status is mocked from the metadata\n      const status: Status = {\n        runtime: isConnected ? Status.runtime.STARTED : Status.runtime.STOPPED,\n        connection: isConnected ? Status.connection.CONNECTED : Status.connection.DISCONNECTED,\n      }\n\n      newEdges.push({ ...edge, ...getEdgeStatus(isConnected, hasTopics, true, getThemeForStatus(theme, status)) })\n      return\n    }\n\n    const [a, b] = edge.source.split('@')\n    const status = updates.find((e) => e.id === b && e.type === a)\n    if (!status) {\n      newEdges.push(edge)\n      return\n    }\n\n    const source = getNode(edge.source)\n    const target = getNode(edge.target)\n    const isConnected =\n      (status?.connection === Status.connection.CONNECTED || status?.connection === Status.connection.STATELESS) &&\n      status?.runtime === Status.runtime.STARTED\n\n    if (source && source.type === NodeTypes.ADAPTER_NODE) {\n      const type = adapterTypes?.find((e) => e.id === (source.data as Adapter).type)\n      if (target?.type === NodeTypes.DEVICE_NODE) {\n        newEdges.push({\n          ...edge,\n          ...getEdgeStatus(isConnected, false, isBidirectional(type), getThemeForStatus(theme, status)),\n        })\n      } else {\n        newEdges.push({\n          ...edge,\n          ...getEdgeStatus(isConnected, false, true, getThemeForStatus(theme, status)),\n        })\n      }\n\n      return\n    }\n\n    if (source && source.type === NodeTypes.BRIDGE_NODE) {\n      const { remote } = getBridgeTopics(source.data as Bridge)\n      newEdges.push({ ...edge, ...getEdgeStatus(isConnected, !!remote.length, true, getThemeForStatus(theme, status)) })\n      return\n    }\n    newEdges.push(edge)\n  })\n\n  return newEdges\n}\n","import type { Edge, Node, XYPosition } from 'reactflow'\nimport { MarkerType, Position } from 'reactflow'\nimport type { WithCSSVar } from '@chakra-ui/react'\nimport type { Dict } from '@chakra-ui/utils'\nimport type { GenericObjectType } from '@rjsf/utils'\n\nimport type { Adapter, Bridge, Listener, ProtocolAdapter } from '@/api/__generated__'\nimport { Status } from '@/api/__generated__'\n\nimport type { DeviceMetadata } from '../types.ts'\nimport { EdgeTypes, IdStubs, NodeTypes } from '../types.ts'\nimport { getBridgeTopics, discoverAdapterTopics } from '../utils/topics-utils.ts'\nimport { getThemeForStatus } from '@/modules/Workspace/utils/status-utils.ts'\n\nexport const CONFIG_ADAPTER_WIDTH = 245\n\nconst POS_SEPARATOR = 80\nconst POS_EDGE: XYPosition = { x: 300, y: 200 }\nconst POS_NODE_INC: XYPosition = { x: CONFIG_ADAPTER_WIDTH + POS_SEPARATOR, y: 400 }\nconst MAX_ADAPTERS = 10\n\nexport const gluedNodeDefinition: Record<string, [NodeTypes, number, 'target' | 'source']> = {\n  [NodeTypes.BRIDGE_NODE]: [NodeTypes.HOST_NODE, 200, 'target'],\n  [NodeTypes.ADAPTER_NODE]: [NodeTypes.DEVICE_NODE, -175, 'target'],\n  [NodeTypes.HOST_NODE]: [NodeTypes.BRIDGE_NODE, -200, 'source'],\n  [NodeTypes.DEVICE_NODE]: [NodeTypes.ADAPTER_NODE, 175, 'source'],\n}\n\nexport const createEdgeNode = (label: string, positionStorage?: Record<string, XYPosition>) => {\n  const nodeEdge: Node<unknown, NodeTypes.EDGE_NODE> = {\n    id: IdStubs.EDGE_NODE,\n    type: NodeTypes.EDGE_NODE,\n    data: { label: label },\n    position: positionStorage?.[IdStubs.EDGE_NODE] ?? POS_EDGE,\n  }\n  return nodeEdge\n}\n\nexport const createBridgeNode = (\n  bridge: Bridge,\n  nbBridge: number,\n  maxBridge: number,\n  theme: Partial<WithCSSVar<Dict>>,\n  positionStorage?: Record<string, XYPosition>\n) => {\n  const idBridge = `${IdStubs.BRIDGE_NODE}@${bridge.id}`\n  const isConnected =\n    bridge.status?.connection === Status.connection.CONNECTED ||\n    (bridge.status?.runtime === Status.runtime.STARTED && bridge.status?.connection === Status.connection.STATELESS)\n\n  const { local, remote } = getBridgeTopics(bridge)\n\n  const nodeBridge: Node<Bridge, NodeTypes.BRIDGE_NODE> = {\n    id: idBridge,\n    type: NodeTypes.BRIDGE_NODE,\n    sourcePosition: Position.Top,\n    data: bridge,\n    position: positionStorage?.[idBridge] ?? {\n      x: POS_EDGE.x + POS_NODE_INC.x * (nbBridge - (maxBridge - 1) / 2),\n      y: POS_EDGE.y + POS_NODE_INC.y,\n    },\n  }\n\n  const edgeConnector: Edge = {\n    id: `${IdStubs.CONNECTOR}-${IdStubs.EDGE_NODE}-${idBridge}`,\n    target: IdStubs.EDGE_NODE,\n    targetHandle: 'Bottom',\n    focusable: false,\n    source: idBridge,\n    type: EdgeTypes.REPORT_EDGE,\n    markerEnd: {\n      type: MarkerType.ArrowClosed,\n      width: 20,\n      height: 20,\n      color: getThemeForStatus(theme, bridge.status),\n    },\n    animated: isConnected && !!remote.length,\n    style: {\n      strokeWidth: 1.5,\n      stroke: getThemeForStatus(theme, bridge.status),\n    },\n  }\n\n  const idBridgeHost = `${IdStubs.HOST_NODE}@${bridge.id}`\n  const nodeHost: Node = {\n    id: idBridgeHost,\n    type: NodeTypes.HOST_NODE,\n    targetPosition: Position.Top,\n    data: { label: bridge.host },\n    position: positionStorage?.[idBridgeHost] ?? {\n      x: POS_EDGE.x + POS_NODE_INC.x * (nbBridge - (maxBridge - 1) / 2),\n      y: POS_EDGE.y + POS_NODE_INC.y + 250,\n    },\n  }\n\n  const hostConnector: Edge = {\n    id: `${IdStubs.CONNECTOR}-${IdStubs.HOST_NODE}@${bridge.id}`,\n    target: idBridgeHost,\n    sourceHandle: 'Bottom',\n    source: idBridge,\n    // type: EdgeTypes.REPORT_EDGE,\n    focusable: false,\n    markerEnd: {\n      type: MarkerType.ArrowClosed,\n      width: 20,\n      height: 20,\n      color: getThemeForStatus(theme, bridge.status),\n    },\n    animated: isConnected && !!local.length,\n    style: {\n      strokeWidth: 1.5,\n      stroke: getThemeForStatus(theme, bridge.status),\n    },\n  }\n\n  return { nodeBridge, edgeConnector, nodeHost, hostConnector }\n}\n\nexport const createListenerNode = (\n  listener: Listener,\n  nbListener: number,\n  positionStorage?: Record<string, XYPosition>\n) => {\n  const idListener = `${IdStubs.LISTENER_NODE}@${listener.name}`\n\n  const nodeListener: Node<Listener, NodeTypes.LISTENER_NODE> = {\n    id: idListener,\n    type: NodeTypes.LISTENER_NODE,\n    targetPosition: Position.Left,\n    data: listener,\n    position: positionStorage?.[idListener] ?? {\n      x: POS_EDGE.x - POS_NODE_INC.x,\n      y: POS_EDGE.y + 80 * nbListener,\n    },\n  }\n\n  const edgeConnector: Edge = {\n    id: `${IdStubs.CONNECTOR}-${IdStubs.EDGE_NODE}-${idListener}`,\n    source: IdStubs.EDGE_NODE,\n    targetHandle: 'Listeners',\n    target: idListener,\n    focusable: false,\n    // type: EdgeTypes.REPORT_EDGE,\n    markerEnd: {\n      type: MarkerType.ArrowClosed,\n      width: 20,\n      height: 20,\n    },\n  }\n\n  return { nodeListener, edgeConnector }\n}\n\nexport const createAdapterNode = (\n  type: ProtocolAdapter,\n  adapter: Adapter,\n  nbAdapter: number,\n  maxAdapter: number,\n  theme: Partial<WithCSSVar<Dict>>,\n  positionStorage?: Record<string, XYPosition>\n) => {\n  const idAdapter = `${IdStubs.ADAPTER_NODE}@${adapter.id}`\n  const isConnected =\n    adapter.status?.connection === Status.connection.CONNECTED ||\n    (adapter.status?.runtime === Status.runtime.STARTED && adapter.status?.connection === Status.connection.STATELESS)\n  const topics = discoverAdapterTopics(type, adapter.config as GenericObjectType)\n\n  const posX = nbAdapter % MAX_ADAPTERS\n  const posY = Math.floor(nbAdapter / MAX_ADAPTERS) + 1\n  const deltaX = Math.floor((Math.min(MAX_ADAPTERS, maxAdapter) - 1) / 2)\n\n  const nodeAdapter: Node<Adapter, NodeTypes.ADAPTER_NODE> = {\n    id: idAdapter,\n    type: NodeTypes.ADAPTER_NODE,\n    sourcePosition: Position.Bottom,\n    data: adapter,\n    position: positionStorage?.[idAdapter] ?? {\n      x: POS_EDGE.x + POS_NODE_INC.x * (posX - deltaX),\n      y: POS_EDGE.y - (POS_NODE_INC.y * posY) / 1.5,\n    },\n  }\n\n  const edgeConnector: Edge = {\n    id: `${IdStubs.CONNECTOR}-${IdStubs.EDGE_NODE}-${idAdapter}`,\n    target: IdStubs.EDGE_NODE,\n    targetHandle: 'Top',\n    source: idAdapter,\n    focusable: false,\n    type: EdgeTypes.REPORT_EDGE,\n    markerEnd: {\n      type: MarkerType.ArrowClosed,\n      width: 20,\n      height: 20,\n      color: getThemeForStatus(theme, adapter.status),\n    },\n    animated: isConnected && !!topics.length,\n    style: {\n      strokeWidth: 1.5,\n      stroke: getThemeForStatus(theme, adapter.status),\n    },\n  }\n\n  // let nodeDevice: Node<DeviceMetadata, NodeTypes.DEVICE_NODE> | undefined = undefined\n  // let deviceConnector: Edge | undefined = undefined\n\n  const idBAdapterDevice = `${IdStubs.DEVICE_NODE}@${idAdapter}`\n  const nodeDevice: Node<DeviceMetadata, NodeTypes.DEVICE_NODE> = {\n    id: idBAdapterDevice,\n    type: NodeTypes.DEVICE_NODE,\n    targetPosition: Position.Top,\n    data: { ...type, sourceAdapterId: adapter.id },\n    position: positionStorage?.[idBAdapterDevice] ?? {\n      x: nodeAdapter.position.x,\n      y: nodeAdapter.position.y + gluedNodeDefinition[NodeTypes.ADAPTER_NODE][1],\n    },\n  }\n\n  const deviceConnector: Edge = {\n    id: `${IdStubs.CONNECTOR}-${IdStubs.DEVICE_NODE}@${idAdapter}`,\n    target: idBAdapterDevice,\n    sourceHandle: 'Top',\n    source: idAdapter,\n    focusable: false,\n    markerEnd: {\n      type: MarkerType.ArrowClosed,\n      width: 20,\n      height: 20,\n      color: getThemeForStatus(theme, adapter.status),\n    },\n    animated: isConnected && !!topics.length,\n    style: {\n      strokeWidth: 1.5,\n      stroke: getThemeForStatus(theme, adapter.status),\n    },\n  }\n\n  return { nodeAdapter, edgeConnector, nodeDevice, deviceConnector }\n}\n\nexport const getDefaultMetricsFor = (node: Node): string[] => {\n  if (NodeTypes.ADAPTER_NODE === node.type) {\n    const data = node.data as Adapter\n    const suffix = 'com.hivemq.edge.protocol-adapters'\n    const prefix = 'read.publish.success.count'\n    return [`${suffix}.${data.type}.${data.id}.${prefix}`]\n  }\n  if (NodeTypes.BRIDGE_NODE === node.type) {\n    const data = node.data as Bridge\n    const suffix = 'com.hivemq.edge.bridge'\n    const prefix = 'forward.publish.count'\n    return [`${suffix}.${data.id}.${prefix}`]\n  }\n  return [] as string[]\n}\n"],"names":["getThemeForStatus","theme","status","Status","updateNodeStatus","currentNodes","updates","NodeTypes","newData","newStatus","s","_a","getEdgeStatus","isConnected","hasTopics","hasMarker","themeForStatus","edge","MarkerType","updateEdgesStatus","adapterTypes","currentEdges","getNode","newEdges","group","groupEdges","e","a","b","source","target","type","isBidirectional","remote","getBridgeTopics","CONFIG_ADAPTER_WIDTH","POS_SEPARATOR","POS_EDGE","POS_NODE_INC","MAX_ADAPTERS","gluedNodeDefinition","createEdgeNode","label","positionStorage","IdStubs","createBridgeNode","bridge","nbBridge","maxBridge","idBridge","_b","_c","local","nodeBridge","Position","edgeConnector","EdgeTypes","idBridgeHost","nodeHost","hostConnector","createListenerNode","listener","nbListener","idListener","nodeListener","createAdapterNode","adapter","nbAdapter","maxAdapter","idAdapter","topics","discoverAdapterTopics","posX","posY","deltaX","nodeAdapter","idBAdapterDevice","nodeDevice","deviceConnector","getDefaultMetricsFor","node","data"],"mappings":"4iBAoBa,MAAAA,EAAoB,CAACC,EAAkCC,KAC9DA,GAAA,YAAAA,EAAQ,WAAYC,EAAO,QAAQ,QAAgBF,EAAM,OAAO,OAAO,MAAM,GAAG,GAEhFC,GAAA,YAAAA,EAAQ,cAAeC,EAAO,WAAW,UAAkBF,EAAM,OAAO,OAAO,UAAU,GAAG,GAC5FC,GAAA,YAAAA,EAAQ,cAAeC,EAAO,WAAW,aAAqBF,EAAM,OAAO,OAAO,aAAa,GAAG,GAClGC,GAAA,YAAAA,EAAQ,cAAeC,EAAO,WAAW,UAAkBF,EAAM,OAAO,OAAO,UAAU,GAAG,EAIzFA,EAAM,OAAO,OAAO,MAAM,GAAG,EAGzBG,EAAmB,CAACC,EAAsBC,IAC9CD,EAAa,IAAK,GAAoB,OACvC,GAAA,EAAE,OAASE,EAAU,YAAa,CACpC,MAAMC,EAAU,CAAE,GAAG,EAAE,IAAK,EACtBC,EAAYH,EAAQ,KAAMI,GAAMA,EAAE,KAAOF,EAAQ,EAAE,EAEzD,MADI,CAACC,GACDA,EAAU,eAAeE,EAAAH,EAAQ,SAAR,YAAAG,EAAgB,cAE7C,EAAE,KAAO,CACP,GAAGH,EACH,OAAQ,CACN,WAAYC,EAAU,UAAA,CAE1B,GACO,CAAA,CAEL,GAAA,EAAE,OAASF,EAAU,aAAc,CACrC,MAAMC,EAAU,CAAE,GAAG,EAAE,IAAK,EACtBC,EAAYH,EAAQ,KAAMI,GAAMA,EAAE,KAAOF,EAAQ,EAAE,EACrD,OAACC,IAGL,EAAE,KAAO,CACP,GAAGD,EACH,OAAQ,CAAE,GAAGC,CAAU,CACzB,GACO,CAAA,CAEF,OAAA,CAAA,CACR,EAKUG,EAAgB,CAC3BC,EACAC,EACAC,EACAC,IACc,CACd,MAAMC,EAAkB,CAAC,EACzB,OAAAA,EAAK,MAAQ,CACX,YAAa,IACb,OAAQD,CACV,EACAC,EAAK,SAAWJ,GAAeC,EAE/BG,EAAK,UAAYF,EACb,CACE,KAAMG,EAAW,YACjB,MAAO,GACP,OAAQ,GACR,MAAOF,CAAA,EAET,OAEJC,EAAK,KAAO,CACV,YAAAJ,EACA,UAAAC,CACF,EACOG,CACT,EAEaE,EAAoB,CAC/BC,EACAC,EACAf,EACAgB,EACArB,IACW,CACX,MAAMsB,EAAmB,CAAC,EAIb,OAAAF,EAAA,QAASJ,GAAS,CAC7B,GAAIA,EAAK,GAAG,WAAW,oBAAoB,EAAG,CACtC,MAAAO,EAAQF,EAAQL,EAAK,MAAM,EACjC,GAAI,CAACO,GAASA,EAAM,OAASjB,EAAU,aAAqB,OAAAU,EAEtD,MAAAQ,EAAaF,EAAS,OAAQG,GAAOF,EAAsB,KAAK,gBAAgB,SAASE,EAAE,MAAM,CAAC,EAClGb,EAAcY,EAAW,MAAOC,GAAMA,EAAE,KAAK,WAAW,EACxDZ,EAAYW,EAAW,MAAOC,GAAMA,EAAE,KAAK,SAAS,EAEpDxB,EAAiB,CACrB,QAASW,EAAcV,EAAO,QAAQ,QAAUA,EAAO,QAAQ,QAC/D,WAAYU,EAAcV,EAAO,WAAW,UAAYA,EAAO,WAAW,YAC5E,EAEAoB,EAAS,KAAK,CAAE,GAAGN,EAAM,GAAGL,EAAcC,EAAaC,EAAW,GAAMd,EAAkBC,EAAOC,CAAM,CAAC,EAAG,EAC3G,MAAA,CAGF,KAAM,CAACyB,EAAGC,CAAC,EAAIX,EAAK,OAAO,MAAM,GAAG,EAC9Bf,EAASI,EAAQ,KAAMoB,GAAMA,EAAE,KAAOE,GAAKF,EAAE,OAASC,CAAC,EAC7D,GAAI,CAACzB,EAAQ,CACXqB,EAAS,KAAKN,CAAI,EAClB,MAAA,CAGI,MAAAY,EAASP,EAAQL,EAAK,MAAM,EAC5Ba,EAASR,EAAQL,EAAK,MAAM,EAC5BJ,IACHX,GAAA,YAAAA,EAAQ,cAAeC,EAAO,WAAW,YAAaD,GAAA,YAAAA,EAAQ,cAAeC,EAAO,WAAW,aAChGD,GAAA,YAAAA,EAAQ,WAAYC,EAAO,QAAQ,QAErC,GAAI0B,GAAUA,EAAO,OAAStB,EAAU,aAAc,CAC9C,MAAAwB,EAAOX,GAAA,YAAAA,EAAc,KAAMM,GAAMA,EAAE,KAAQG,EAAO,KAAiB,OACrEC,GAAA,YAAAA,EAAQ,QAASvB,EAAU,YAC7BgB,EAAS,KAAK,CACZ,GAAGN,EACH,GAAGL,EAAcC,EAAa,GAAOmB,EAAgBD,CAAI,EAAG/B,EAAkBC,EAAOC,CAAM,CAAC,CAAA,CAC7F,EAEDqB,EAAS,KAAK,CACZ,GAAGN,EACH,GAAGL,EAAcC,EAAa,GAAO,GAAMb,EAAkBC,EAAOC,CAAM,CAAC,CAAA,CAC5E,EAGH,MAAA,CAGF,GAAI2B,GAAUA,EAAO,OAAStB,EAAU,YAAa,CACnD,KAAM,CAAE,OAAA0B,CAAW,EAAAC,EAAgBL,EAAO,IAAc,EACxDN,EAAS,KAAK,CAAE,GAAGN,EAAM,GAAGL,EAAcC,EAAa,CAAC,CAACoB,EAAO,OAAQ,GAAMjC,EAAkBC,EAAOC,CAAM,CAAC,EAAG,EACjH,MAAA,CAEFqB,EAAS,KAAKN,CAAI,CAAA,CACnB,EAEMM,CACT,ECrJaY,EAAuB,IAE9BC,EAAgB,GAChBC,EAAuB,CAAE,EAAG,IAAK,EAAG,GAAI,EACxCC,EAA2B,CAAE,EAAGH,EAAuBC,EAAe,EAAG,GAAI,EAC7EG,EAAe,GAERC,EAAgF,CAC3F,CAACjC,EAAU,WAAW,EAAG,CAACA,EAAU,UAAW,IAAK,QAAQ,EAC5D,CAACA,EAAU,YAAY,EAAG,CAACA,EAAU,YAAa,KAAM,QAAQ,EAChE,CAACA,EAAU,SAAS,EAAG,CAACA,EAAU,YAAa,KAAM,QAAQ,EAC7D,CAACA,EAAU,WAAW,EAAG,CAACA,EAAU,aAAc,IAAK,QAAQ,CACjE,EAEakC,EAAiB,CAACC,EAAeC,KACS,CACnD,GAAIC,EAAQ,UACZ,KAAMrC,EAAU,UAChB,KAAM,CAAE,MAAAmC,CAAa,EACrB,SAAkDL,CACpD,GAIWQ,EAAmB,CAC9BC,EACAC,EACAC,EACA/C,EACA0C,IACG,WACH,MAAMM,EAAW,GAAGL,EAAQ,WAAW,IAAIE,EAAO,EAAE,GAC9CjC,IACJF,EAAAmC,EAAO,SAAP,YAAAnC,EAAe,cAAeR,EAAO,WAAW,aAC/C+C,EAAAJ,EAAO,SAAP,YAAAI,EAAe,WAAY/C,EAAO,QAAQ,WAAWgD,EAAAL,EAAO,SAAP,YAAAK,EAAe,cAAehD,EAAO,WAAW,UAElG,CAAE,MAAAiD,EAAO,OAAAnB,GAAWC,EAAgBY,CAAM,EAE1CO,EAAkD,CACtD,GAAIJ,EACJ,KAAM1C,EAAU,YAChB,eAAgB+C,EAAS,IACzB,KAAMR,EACN,SAAyC,CACvC,EAAGT,EAAS,EAAIC,EAAa,GAAKS,GAAYC,EAAY,GAAK,GAC/D,EAAGX,EAAS,EAAIC,EAAa,CAAA,CAEjC,EAEMiB,EAAsB,CAC1B,GAAI,GAAGX,EAAQ,SAAS,IAAIA,EAAQ,SAAS,IAAIK,CAAQ,GACzD,OAAQL,EAAQ,UAChB,aAAc,SACd,UAAW,GACX,OAAQK,EACR,KAAMO,EAAU,YAChB,UAAW,CACT,KAAMtC,EAAW,YACjB,MAAO,GACP,OAAQ,GACR,MAAOlB,EAAkBC,EAAO6C,EAAO,MAAM,CAC/C,EACA,SAAUjC,GAAe,CAAC,CAACoB,EAAO,OAClC,MAAO,CACL,YAAa,IACb,OAAQjC,EAAkBC,EAAO6C,EAAO,MAAM,CAAA,CAElD,EAEMW,EAAe,GAAGb,EAAQ,SAAS,IAAIE,EAAO,EAAE,GAChDY,EAAiB,CACrB,GAAID,EACJ,KAAMlD,EAAU,UAChB,eAAgB+C,EAAS,IACzB,KAAM,CAAE,MAAOR,EAAO,IAAK,EAC3B,SAA6C,CAC3C,EAAGT,EAAS,EAAIC,EAAa,GAAKS,GAAYC,EAAY,GAAK,GAC/D,EAAGX,EAAS,EAAIC,EAAa,EAAI,GAAA,CAErC,EAEMqB,EAAsB,CAC1B,GAAI,GAAGf,EAAQ,SAAS,IAAIA,EAAQ,SAAS,IAAIE,EAAO,EAAE,GAC1D,OAAQW,EACR,aAAc,SACd,OAAQR,EAER,UAAW,GACX,UAAW,CACT,KAAM/B,EAAW,YACjB,MAAO,GACP,OAAQ,GACR,MAAOlB,EAAkBC,EAAO6C,EAAO,MAAM,CAC/C,EACA,SAAUjC,GAAe,CAAC,CAACuC,EAAM,OACjC,MAAO,CACL,YAAa,IACb,OAAQpD,EAAkBC,EAAO6C,EAAO,MAAM,CAAA,CAElD,EAEA,MAAO,CAAE,WAAAO,EAAY,cAAAE,EAAe,SAAAG,EAAU,cAAAC,CAAc,CAC9D,EAEaC,EAAqB,CAChCC,EACAC,EACAnB,IACG,CACH,MAAMoB,EAAa,GAAGnB,EAAQ,aAAa,IAAIiB,EAAS,IAAI,GAEtDG,EAAwD,CAC5D,GAAID,EACJ,KAAMxD,EAAU,cAChB,eAAgB+C,EAAS,KACzB,KAAMO,EACN,SAA2C,CACzC,EAAGxB,EAAS,EAAIC,EAAa,EAC7B,EAAGD,EAAS,EAAI,GAAKyB,CAAA,CAEzB,EAEMP,EAAsB,CAC1B,GAAI,GAAGX,EAAQ,SAAS,IAAIA,EAAQ,SAAS,IAAImB,CAAU,GAC3D,OAAQnB,EAAQ,UAChB,aAAc,YACd,OAAQmB,EACR,UAAW,GAEX,UAAW,CACT,KAAM7C,EAAW,YACjB,MAAO,GACP,OAAQ,EAAA,CAEZ,EAEO,MAAA,CAAE,aAAA8C,EAAc,cAAAT,CAAc,CACvC,EAEaU,EAAoB,CAC/BlC,EACAmC,EACAC,EACAC,EACAnE,EACA0C,IACG,WACH,MAAM0B,EAAY,GAAGzB,EAAQ,YAAY,IAAIsB,EAAQ,EAAE,GACjDrD,IACJF,EAAAuD,EAAQ,SAAR,YAAAvD,EAAgB,cAAeR,EAAO,WAAW,aAChD+C,EAAAgB,EAAQ,SAAR,YAAAhB,EAAgB,WAAY/C,EAAO,QAAQ,WAAWgD,EAAAe,EAAQ,SAAR,YAAAf,EAAgB,cAAehD,EAAO,WAAW,UACpGmE,EAASC,EAAsBxC,EAAMmC,EAAQ,MAA2B,EAExEM,EAAOL,EAAY5B,EACnBkC,EAAO,KAAK,MAAMN,EAAY5B,CAAY,EAAI,EAC9CmC,EAAS,KAAK,OAAO,KAAK,IAAInC,EAAc6B,CAAU,EAAI,GAAK,CAAC,EAEhEO,EAAqD,CACzD,GAAIN,EACJ,KAAM9D,EAAU,aAChB,eAAgB+C,EAAS,OACzB,KAAMY,EACN,SAA0C,CACxC,EAAG7B,EAAS,EAAIC,EAAa,GAAKkC,EAAOE,GACzC,EAAGrC,EAAS,EAAKC,EAAa,EAAImC,EAAQ,GAAA,CAE9C,EAEMlB,EAAsB,CAC1B,GAAI,GAAGX,EAAQ,SAAS,IAAIA,EAAQ,SAAS,IAAIyB,CAAS,GAC1D,OAAQzB,EAAQ,UAChB,aAAc,MACd,OAAQyB,EACR,UAAW,GACX,KAAMb,EAAU,YAChB,UAAW,CACT,KAAMtC,EAAW,YACjB,MAAO,GACP,OAAQ,GACR,MAAOlB,EAAkBC,EAAOiE,EAAQ,MAAM,CAChD,EACA,SAAUrD,GAAe,CAAC,CAACyD,EAAO,OAClC,MAAO,CACL,YAAa,IACb,OAAQtE,EAAkBC,EAAOiE,EAAQ,MAAM,CAAA,CAEnD,EAKMU,EAAmB,GAAGhC,EAAQ,WAAW,IAAIyB,CAAS,GACtDQ,EAA0D,CAC9D,GAAID,EACJ,KAAMrE,EAAU,YAChB,eAAgB+C,EAAS,IACzB,KAAM,CAAE,GAAGvB,EAAM,gBAAiBmC,EAAQ,EAAG,EAC7C,SAAiD,CAC/C,EAAGS,EAAY,SAAS,EACxB,EAAGA,EAAY,SAAS,EAAInC,EAAoBjC,EAAU,YAAY,EAAE,CAAC,CAAA,CAE7E,EAEMuE,EAAwB,CAC5B,GAAI,GAAGlC,EAAQ,SAAS,IAAIA,EAAQ,WAAW,IAAIyB,CAAS,GAC5D,OAAQO,EACR,aAAc,MACd,OAAQP,EACR,UAAW,GACX,UAAW,CACT,KAAMnD,EAAW,YACjB,MAAO,GACP,OAAQ,GACR,MAAOlB,EAAkBC,EAAOiE,EAAQ,MAAM,CAChD,EACA,SAAUrD,GAAe,CAAC,CAACyD,EAAO,OAClC,MAAO,CACL,YAAa,IACb,OAAQtE,EAAkBC,EAAOiE,EAAQ,MAAM,CAAA,CAEnD,EAEA,MAAO,CAAE,YAAAS,EAAa,cAAApB,EAAe,WAAAsB,EAAY,gBAAAC,CAAgB,CACnE,EAEaC,EAAwBC,GAAyB,CACxD,GAAAzE,EAAU,eAAiByE,EAAK,KAAM,CACxC,MAAMC,EAAOD,EAAK,KAGX,MAAA,CAAC,qCAAaC,EAAK,IAAI,IAAIA,EAAK,EAAE,6BAAY,CAAA,CAEnD,OAAA1E,EAAU,cAAgByE,EAAK,KAI1B,CAAC,0BAHKA,EAAK,KAGQ,EAAE,wBAAY,EAEnC,CAAC,CACV"}