openapi: 3.0.1
info:
  contact:
    url: https://www.hivemq.com
  description: >
    # Introduction

    The HiveMQ Data Hub provides mechanisms to define how MQTT data and MQTT client behavior are handled in the HiveMQ broker.
    
    - Data Validation in the HiveMQ Data Hub allows you to implement declarative policies that check whether your data sources are sending data in the data format you expect.
    
    - Behavior Validation gives you the ability to model the behavior of your MQTT clients throughout the entire lifecycle of the client.

    ## Errors

    Conventional HTTP response codes are used to indicate the success or failure
    of an API request. Codes in the 2xx range generally indicate success. Codes
    in the 4xx range indicate an error that failed given the information
    provided (e.g., a required parameter was omitted). Codes in the 5xx range
    indicate an error on the server side.


    For all errors a JSON response with additional details is returned in the
    format [Problem JSON](https://tools.ietf.org/html/rfc7807).

    ## OpenAPI

    HiveMQ's REST API provides an OpenAPI 3.0 schema definition that can
    imported into popular API tooling (e.g. Postman) or can be used to generate
    client-code for multiple programming languages.
  title: HiveMQ Data Hub REST API
  version: 2025.10-SNAPSHOT
  x-logo:
    url: https://www.hivemq.com/img/svg/hivemq-bee.svg
tags:
  - description: >-
      This resource bundles endpoints for the available Finite State Machines
      (FSMs) for Behavior Policies for the HiveMQ Data Hub. Currently this is
      limited to getting the available FSMs.
    name: Data Hub - FSM
  - description: >-
      This resource bundles endpoints for the available Functions for the HiveMQ
      Data Hub. Currently this is limited to getting the available Functions.
    name: Data Hub - Functions
  - description: >-
      Policies describe how you want the HiveMQ broker to validate the behavior
      of MQTT clients.

      Each policy has four sections:


      - Matching: Specifies which clients the policy engine validates.

      - Deserialization: Specifies deserializers for different message payloads.

      - Behavior: Specifies the behavior that is considered valid for matched
      clients.

      - onTransitions: Specifies custom actions that are executed when a client
      transitions to a different state within the specified behavior model that
      is valid for that client.

      These endpoints can be used to create, update, delete, and list behavior
      policies.


      For more information on all capabilities the HiveMQ Data Hub offers, see
      the [HiveMQ
      documentation](https://docs.hivemq.com/hivemq/latest/data-hub/index.html).
    name: Data Hub - Behavior Policies
  - description: >-
      Data Policies describe how you want the HiveMQ broker to apply schemas to
      incoming MQTT message payload data and act on the validation results.

      Each policy has four sections:


      - Matching: Specifies which packets the policy engine validates.

      - Validation: Specifies how the packets are validated. For example, based
      on a JSON Schema.

      - OnSuccess: Defines which actions are executed when the outcome of a
      validation is successful.

      - OnFailure: Defines which actions are executed when the validation fails.


      These endpoints can be used to create, update, delete, and list data
      policies.


      For more information on all capabilities the HiveMQ Data Hub offers, see
      the [HiveMQ
      documentation](https://docs.hivemq.com/hivemq/latest/data-hub/index.html).
    name: Data Hub - Data Policies
  - description: >-
      A schema defines the expected structure and format of incoming MQTT
      message payload data.


      This endpoint can be used to create, get, and delete schemas.


      Schemas can be enforced with the use of a policy.


      Currently, the following schema definitions are supported:


      - [JSON Schema](https://json-schema.org/)

      - [Protocol Buffers (Protobuf)](https://protobuf.dev/)


      For more information on how to define and use a schema in HiveMQ, see
      [Schemas](https://docs.hivemq.com/hivemq/latest/data-hub/schemas.html).
    name: Data Hub - Schemas
  - description: >-
      A script represents custom logic that can be executed in response to MQTT
      messages.


      This endpoint can be used to create, get, and delete scripts.


      For more information on how to define and use a script in HiveMQ, see
      [Scripts](https://docs.hivemq.com/hivemq/latest/data-hub/scripts.html).
    name: Data Hub - Scripts
  - description: >+
      These endpoints can be used to retrieve states of clients for the Data
      Hub.

    name: Data Hub - State
paths:
  /api/v1/data-hub/behavior-validation/policies:
    $ref: paths/api_v1_data-hub_behavior-validation_policies.yaml
  /api/v1/data-hub/behavior-validation/policies/{policyId}:
    $ref: paths/api_v1_data-hub_behavior-validation_policies_{policyId}.yaml
  /api/v1/data-hub/behavior-validation/states/{clientId}:
    $ref: paths/api_v1_data-hub_behavior-validation_states_{clientId}.yaml
  /api/v1/data-hub/data-validation/policies:
    $ref: paths/api_v1_data-hub_data-validation_policies.yaml
  /api/v1/data-hub/data-validation/policies/{policyId}:
    $ref: paths/api_v1_data-hub_data-validation_policies_{policyId}.yaml
  /api/v1/data-hub/fsm:
    $ref: paths/api_v1_data-hub_fsm.yaml
  /api/v1/data-hub/functions:
    $ref: paths/api_v1_data-hub_functions.yaml
  /api/v1/data-hub/function-specs:
    $ref: paths/api_v1_data-hub_function-specs.yaml
  /api/v1/data-hub/schemas:
    $ref: paths/api_v1_data-hub_schemas.yaml
  /api/v1/data-hub/schemas/{schemaId}:
    $ref: paths/api_v1_data-hub_schemas_{schemaId}.yaml
  /api/v1/data-hub/scripts:
    $ref: paths/api_v1_data-hub_scripts.yaml
  /api/v1/data-hub/scripts/{scriptId}:
    $ref: paths/api_v1_data-hub_scripts_{scriptId}.yaml
