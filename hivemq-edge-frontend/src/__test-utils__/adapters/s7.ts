/* generated from Edge version 2025.5 -- do no edit */
import type { Adapter, ProtocolAdapter, TagSchema } from '@/api/__generated__'
import { Status } from '@/api/__generated__'

export const MOCK_PROTOCOL_S7: ProtocolAdapter = {
  id: 's7',
  protocol: 'S7',
  name: 'S7 Protocol Adapter',
  description: 'Connects HiveMQ Edge to S7-300, S7-400, S7-1200, S7-1500 & LOGO devices.',
  url: 'https://docs.hivemq.com/hivemq-edge/protocol-adapters.html#s7-adapter',
  version: 'Development Version',
  logoUrl: '/module/images/s7-icon.png',
  author: 'HiveMQ',
  installed: true,
  capabilities: ['READ'],
  category: {
    name: 'INDUSTRIAL',
    displayName: 'Industrial',
    description: 'Industrial, typically field bus protocols.',
  },
  tags: ['TCP', 'AUTOMATION', 'FACTORY'],
  configSchema: {
    $schema: 'https://json-schema.org/draft/2020-12/schema',
    type: 'object',
    properties: {
      controllerType: {
        type: 'string',
        enum: ['S7_300', 'S7_400', 'S7_1200', 'S7_1500', 'LOGO'],
        title: 'S7 Controller Type',
        description: 'The type of the S7 Controller',
        default: 'S7_300',
      },
      host: {
        type: 'string',
        title: 'Host',
        description: 'IP Address or hostname of the device you wish to connect to',
        format: 'hostname',
      },
      id: {
        type: 'string',
        title: 'Identifier',
        description: 'Unique identifier for this protocol adapter',
        writeOnly: true,
        minLength: 1,
        maxLength: 1024,
        format: 'identifier',
        pattern: '^([a-zA-Z_0-9-_])*$',
      },
      port: {
        type: 'integer',
        title: 'Port',
        description: 'The port number on the device you wish to connect to',
        default: 102,
        minimum: 1,
        maximum: 65535,
      },
      remoteRack: {
        type: 'integer',
        title: 'Remote Rack',
        description: 'Rack value for the remote main CPU (PLC).',
        default: 0,
      },
      remoteRack2: {
        type: 'integer',
        title: 'Remote Rack 2',
        description: 'Rack value for the remote secondary CPU (PLC).',
        default: 0,
      },
      remoteSlot: {
        type: 'integer',
        title: 'Remote Slot',
        description: 'Slot value for the remote main CPU (PLC).',
        default: 0,
      },
      remoteSlot2: {
        type: 'integer',
        title: 'Remote Slot 2',
        description: 'Slot value for the remote secondary CPU (PLC).',
        default: 0,
      },
      remoteTsap: {
        type: 'integer',
        title: 'Remote TSAP',
        description:
          'Remote TSAP value. The TSAP (Transport Services Access Point) mechanism is used as a further addressing level in the S7 PLC network. Usually only required for PLC from the LOGO series.',
        default: 0,
      },
      s7ToMqtt: {
        type: 'object',
        properties: {
          maxPollingErrorsBeforeRemoval: {
            type: 'integer',
            title: 'Max. Polling Errors',
            description:
              'Max. errors polling the endpoint before the polling daemon is stopped (-1 for unlimited retries)',
            default: 10,
            minimum: -1,
          },
          pollingIntervalMillis: {
            type: 'integer',
            title: 'Polling Interval [ms]',
            description: 'Time in millisecond that this endpoint will be polled',
            default: 1000,
            minimum: 1,
          },
          publishChangedDataOnly: {
            type: 'boolean',
            title: 'Only publish data items that have changed since last poll',
            default: true,
            format: 'boolean',
          },
        },
        title: 'S7 To MQTT Config',
        description: 'The configuration for a data stream from S7 to MQTT',
      },
    },
    required: ['controllerType', 'host', 'id', 'port', 's7ToMqtt'],
  },
  uiSchema: {
    'ui:tabs': [
      {
        id: 'coreFields',
        title: 'Connection',
        properties: ['id', 'host', 'port'],
      },
      {
        id: 'subFields',
        title: 'S7 To MQTT',
        properties: ['s7ToMqtt'],
      },
      {
        id: 's7',
        title: 'S7 Device',
        properties: ['controllerType', 'remoteRack', 'remoteSlot', 'remoteTsap', 'remoteRack2', 'remoteSlot2'],
      },
    ],
    id: {
      'ui:disabled': false,
    },
    port: {
      'ui:widget': 'updown',
    },
    'ui:order': ['id', 'host', 'port', '*'],
    s7ToMqtt: {
      'ui:batchMode': true,
      'ui:order': [
        's7ToMqttMappings',
        'maxPollingErrorsBeforeRemoval',
        'pollingIntervalMillis',
        'publishChangedDataOnly',
        '*',
      ],
      s7ToMqttMappings: {
        'ui:batchMode': true,
        items: {
          'ui:order': ['tagName', 'tagAddress', 'dataType', 'mqttTopic', 'mqttQos', '*'],
          'ui:collapsable': {
            titleKey: 'mqttTopic',
          },
        },
      },
    },
  },
}

export const MOCK_ADAPTER_S7: Adapter = {
  id: 's7-1',
  config: {
    port: 102,
    host: 'sd',
    controllerType: 'S7_300',
    remoteRack: 0,
    remoteRack2: 0,
    remoteSlot: 0,
    remoteSlot2: 0,
    remoteTsap: 0,
    s7ToMqtt: {
      pollingIntervalMillis: 1000,
      maxPollingErrorsBeforeRemoval: 10,
      publishChangedDataOnly: true,
    },
    id: 'df',
  },
  status: {
    id: 's7-1',
    connection: Status.connection.CONNECTED,
    startedAt: '2025-04-05T20:40:59.872Z',
    type: 'adapter',
  },
  type: 's7',
}

export const MOCK_SCHEMA_S7: TagSchema = {
  configSchema: {
    $schema: 'https://json-schema.org/draft/2020-12/schema',
    type: 'object',
    properties: {
      definition: {
        type: 'object',
        properties: {
          dataType: {
            type: 'string',
            enum: [
              'NULL',
              'BOOL',
              'BYTE',
              'WORD',
              'DWORD',
              'LWORD',
              'USINT',
              'UINT',
              'UDINT',
              'ULINT',
              'SINT',
              'INT',
              'DINT',
              'LINT',
              'REAL',
              'LREAL',
              'CHAR',
              'WCHAR',
              'STRING',
              'WSTRING',
              'TIME',
              'LTIME',
              'DATE',
              'LDATE',
              'TIME_OF_DAY',
              'LTIME_OF_DAY',
              'DATE_AND_TIME',
              'LDATE_AND_TIME',
              'RAW_BYTE_ARRAY',
            ],
            title: 'Data Type',
            description: 'The expected data type of the tag',
            enumNames: [
              'Null',
              'Boolean',
              'Byte',
              'Word (unit 16)',
              'DWord (uint 32)',
              'LWord (uint 64)',
              'USint (uint 8)',
              'Uint (uint 16)',
              'UDint (uint 32)',
              'ULint (uint 64)',
              'Sint (int 8)',
              'Int (int 16)',
              'Dint (int 32)',
              'Lint (int 64)',
              'Real (float 32)',
              'LReal (double 64)',
              'Char (1 byte char)',
              'WChar (2 byte char)',
              'String',
              'WString',
              'Timing (Duration ms)',
              'Long Timing (Duration ns)',
              'Date (DateStamp)',
              'Long Date (DateStamp)',
              'Time Of Day (TimeStamp)',
              'Long Time Of Day (TimeStamp)',
              'Date Time (DateTimeStamp)',
              'Long Date Time (DateTimeStamp)',
              'Raw Byte Array',
            ],
          },
          tagAddress: {
            type: 'string',
            title: 'Tag Address',
            description: 'The well formed address of the tag to read',
          },
        },
        required: ['dataType', 'tagAddress'],
        title: 'definition',
        description: 'The actual definition of the tag on the device',
      },
      description: {
        type: 'string',
        title: 'description',
        description: 'A human readable description of the tag',
      },
      name: {
        type: 'string',
        title: 'name',
        description: 'name of the tag to be used in mappings',
        format: 'mqtt-tag',
      },
    },
    required: ['definition', 'name'],
  },
  protocolId: 's7',
}
