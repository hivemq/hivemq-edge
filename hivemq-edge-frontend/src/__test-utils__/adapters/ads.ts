/* generated from Edge version 2025.5 -- do no edit */
import type { Adapter, ProtocolAdapter, TagSchema } from '@/api/__generated__'
import { Status } from '@/api/__generated__'

export const MOCK_PROTOCOL_ADS: ProtocolAdapter = {
  id: 'ads',
  protocol: 'ADS',
  name: 'ADS Protocol Adapter',
  description: 'Connects HiveMQ Edge to devices supporting ADS.',
  url: 'https://docs.hivemq.com/hivemq-edge/protocol-adapters.html#ads-adapter',
  version: 'Development Version',
  logoUrl: '/module/images/beckhoff-icon.gif',
  author: 'HiveMQ',
  installed: true,
  capabilities: ['READ'],
  category: {
    name: 'INDUSTRIAL',
    displayName: 'Industrial',
    description: 'Industrial, typically field bus protocols.',
  },
  tags: ['TCP', 'AUTOMATION', 'IIOT', 'FACTORY'],
  configSchema: {
    $schema: 'https://json-schema.org/draft/2020-12/schema',
    type: 'object',
    properties: {
      adsToMqtt: {
        type: 'object',
        properties: {
          maxPollingErrorsBeforeRemoval: {
            type: 'integer',
            title: 'Max. Polling Errors',
            description:
              'Max. errors polling the endpoint before the polling daemon is stopped (-1 for unlimited retries)',
            default: 10,
            minimum: -1,
          },
          pollingIntervalMillis: {
            type: 'integer',
            title: 'Polling Interval [ms]',
            description: 'Time in millisecond that this endpoint will be polled',
            default: 1000,
            minimum: 1,
          },
          publishChangedDataOnly: {
            type: 'boolean',
            title: 'Only publish data items that have changed since last poll',
            default: true,
            format: 'boolean',
          },
        },
        title: 'ADS To MQTT Config',
        description: 'The configuration for a data stream from ADS to MQTT',
      },
      host: {
        type: 'string',
        title: 'Host',
        description: 'IP Address or hostname of the device you wish to connect to',
        format: 'hostname',
      },
      id: {
        type: 'string',
        title: 'Identifier',
        description: 'Unique identifier for this protocol adapter',
        writeOnly: true,
        minLength: 1,
        maxLength: 1024,
        format: 'identifier',
        pattern: '^([a-zA-Z_0-9-_])*$',
      },
      port: {
        type: 'integer',
        title: 'Port',
        description: 'The port number on the device to connect to',
        default: 48898,
        minimum: 1,
        maximum: 65535,
      },
      sourceAmsNetId: {
        type: 'string',
        title: 'Source Ams Net Id',
        description: 'The AMS Net ID used by HiveMQ Edge',
        pattern: '\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}',
      },
      sourceAmsPort: {
        type: 'integer',
        title: 'Source AMS Port',
        description: 'The local AMS port number used by HiveMQ Edge',
        default: 48898,
        minimum: 1,
        maximum: 65535,
      },
      targetAmsNetId: {
        type: 'string',
        title: 'Target Ams Net Id',
        description: 'The AMS Net ID of the device to connect to',
        pattern: '\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}',
      },
      targetAmsPort: {
        type: 'integer',
        title: 'Target AMS Port',
        description: 'The AMS port number on the device to connect to',
        default: 851,
        minimum: 1,
        maximum: 65535,
      },
    },
    required: ['adsToMqtt', 'host', 'id', 'port', 'sourceAmsNetId', 'sourceAmsPort', 'targetAmsNetId', 'targetAmsPort'],
  },
  uiSchema: {
    'ui:tabs': [
      {
        id: 'coreFields',
        title: 'Connection',
        properties: ['id', 'host', 'port'],
      },
      {
        id: 'subFields',
        title: 'ADS To MQTT',
        properties: ['adsToMqtt'],
      },
      {
        id: 'ads',
        title: 'ADS Device',
        properties: ['sourceAmsPort', 'targetAmsPort', 'sourceAmsNetId', 'targetAmsNetId'],
      },
    ],
    id: {
      'ui:disabled': false,
    },
    port: {
      'ui:widget': 'updown',
    },
    'ui:order': ['id', 'host', 'port', '*'],
    adsToMqtt: {
      'ui:batchMode': true,
      'ui:order': [
        'adsToMqttMappings',
        'maxPollingErrorsBeforeRemoval',
        'pollingIntervalMillis',
        'publishChangedDataOnly',
        '*',
      ],
      adsToMqttMappings: {
        'ui:batchMode': true,
        items: {
          'ui:order': ['tagName', 'tagAddress', 'dataType', 'mqttTopic', 'mqttQos', '*'],
          'ui:collapsable': {
            titleKey: 'mqttTopic',
          },
        },
      },
    },
  },
}

export const MOCK_ADAPTER_ADS: Adapter = {
  id: 'test-ads',
  config: {
    port: 48898,
    host: 'test.jp',
    targetAmsPort: 851,
    sourceAmsPort: 48898,
    targetAmsNetId: '1.1.1.1.1.1',
    sourceAmsNetId: '1.1.1.1.1.1',
    adsToMqtt: {
      pollingIntervalMillis: 1000,
      maxPollingErrorsBeforeRemoval: 10,
      publishChangedDataOnly: true,
    },
    id: 'test-ads',
  },
  status: {
    connection: Status.connection.DISCONNECTED,
    id: 'test-ads',
    runtime: Status.runtime.STOPPED,
    startedAt: '2025-04-07T21:46:19.232Z',
    type: 'adapter',
  },
  type: 'ads',
}

export const MOCK_SCHEMA_ADS: TagSchema = {
  configSchema: {
    $schema: 'https://json-schema.org/draft/2020-12/schema',
    type: 'object',
    properties: {
      definition: {
        type: 'object',
        properties: {
          dataType: {
            type: 'string',
            enum: [
              'NULL',
              'BOOL',
              'BYTE',
              'WORD',
              'DWORD',
              'LWORD',
              'USINT',
              'UINT',
              'UDINT',
              'ULINT',
              'SINT',
              'INT',
              'DINT',
              'LINT',
              'REAL',
              'LREAL',
              'CHAR',
              'WCHAR',
              'STRING',
              'WSTRING',
              'TIME',
              'LTIME',
              'DATE',
              'LDATE',
              'TIME_OF_DAY',
              'LTIME_OF_DAY',
              'DATE_AND_TIME',
              'LDATE_AND_TIME',
              'RAW_BYTE_ARRAY',
            ],
            title: 'Data Type',
            description: 'The expected data type of the tag',
            enumNames: [
              'Null',
              'Boolean',
              'Byte',
              'Word (unit 16)',
              'DWord (uint 32)',
              'LWord (uint 64)',
              'USint (uint 8)',
              'Uint (uint 16)',
              'UDint (uint 32)',
              'ULint (uint 64)',
              'Sint (int 8)',
              'Int (int 16)',
              'Dint (int 32)',
              'Lint (int 64)',
              'Real (float 32)',
              'LReal (double 64)',
              'Char (1 byte char)',
              'WChar (2 byte char)',
              'String',
              'WString',
              'Timing (Duration ms)',
              'Long Timing (Duration ns)',
              'Date (DateStamp)',
              'Long Date (DateStamp)',
              'Time Of Day (TimeStamp)',
              'Long Time Of Day (TimeStamp)',
              'Date Time (DateTimeStamp)',
              'Long Date Time (DateTimeStamp)',
              'Raw Byte Array',
            ],
          },
          tagAddress: {
            type: 'string',
            title: 'Tag Address',
            description: 'The well formed address of the tag to read',
          },
        },
        required: ['dataType', 'tagAddress'],
        title: 'definition',
        description: 'The actual definition of the tag on the device',
      },
      description: {
        type: 'string',
        title: 'description',
        description: 'A human readable description of the tag',
      },
      name: {
        type: 'string',
        title: 'name',
        description: 'name of the tag to be used in mappings',
        format: 'mqtt-tag',
      },
    },
    required: ['definition', 'name'],
  },
  protocolId: 'ads',
}
