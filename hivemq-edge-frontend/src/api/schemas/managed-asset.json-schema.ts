import { AssetMapping } from '@/api/__generated__'
import type { JSONSchema7 } from 'json-schema'

/**
 * TODO[NVL] Required as the schema generated by the codegen is of an older version of JSONSchema (v5) and not well structured ($ref missing)
 *  Conditional properties are also not properly defined in the OpenAPI specs
 */
/* istanbul ignore next -- @preserve */
export const managedAssetJsonSchema: JSONSchema7 = {
  definitions: {
    Asset: {
      type: 'object',
      required: ['id', 'name', 'description', 'topic', 'schema'],
      properties: {
        id: {
          type: 'string',
          description: `The unique id of the asset`,
          readOnly: true,
          format: 'uuid',
        },
        name: {
          type: 'string',
          description: `The user-facing name of the asset`,
          readOnly: true,
        },
        description: {
          type: 'string',
          description: `The user-facing description of the asset`,
          readOnly: true,
        },
        topic: {
          type: 'string',
          description: `The topic associated with the asset`,
          readOnly: true,
          format: 'mqtt-topic',
        },
        schema: {
          type: 'string',
          description: `The schema associated with the asset, in a JSON Schema and data uri format.`,
          readOnly: true,
          format: 'data-url',
        },
      },
    },
    AssetMapping: {
      type: 'object',
      required: ['status'],
      properties: {
        status: {
          type: 'string',
          enum: [
            AssetMapping.status.MISSING,
            AssetMapping.status.UNMAPPED,
            AssetMapping.status.STREAMING,
            AssetMapping.status.DRAFT,
            AssetMapping.status.REQUIRES_REMAPPING,
          ],
        },
        mappingId: {
          type: 'string',
          description: `The id of a DataCombining payload that describes the mapping of that particular asset`,
          format: 'uuid',
        },
      },
    },
    ManagedAsset: {
      type: 'object',
      allOf: [
        { $ref: '#/definitions/Asset' },
        {
          type: 'object',
          required: ['name'],
          properties: {
            mapping: {
              $ref: '#/definitions/AssetMapping',
            },
          },
        },
      ],
    },
  },

  $ref: '#/definitions/ManagedAsset',
}
