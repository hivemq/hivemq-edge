//
// This file was generated by the Eclipse Implementation of JAXB, v4.0.5 
// See https://eclipse-ee4j.github.io/jaxb-ri 
// Any modifications to this file will be lost upon recompilation of the source schema. 
//


package com.hivemq.edge.adapters.mtconnect.schemas.devices.devices_2_0;

import jakarta.xml.bind.annotation.XmlAccessType;
import jakarta.xml.bind.annotation.XmlAccessorType;
import jakarta.xml.bind.annotation.XmlSeeAlso;
import jakarta.xml.bind.annotation.XmlType;


/**
 * This section provides semantic information for the
 *         {{block(SensorConfiguration)}} entity. {{term(sensor)}} is a unique type
 *         of a piece of equipment. A {{term(sensor)}} is typically comprised of
 *         two major components: a {{term(sensor unit)}} that provides signal
 *         processing, conversion, and communications and the {{termplural(sensing
 *         element)}} that provides a signal or measured value. The {{term(sensor
 *         unit)}} is modeled as a {{term(lower level)}} {{block(Component)}}
 *         called {{block(Sensor)}}. The {{term(sensing element)}} may be modeled
 *         as a {{block(Composition)}} element of a {{block(Sensor)}} element and
 *         the measured value would be modeled as a {{block(DataItem)}} (See
 *         {{sect(DataItems)}} for more information on {{block(DataItem)}}
 *         elements). Each {{term(sensor unit)}} may have multiple
 *         {{termplural(sensing element)}}; each representing the data for a
 *         variety of measured values. ![Sensing Element provided as a DataItem
 *         Example](figures/Sensing%20Element%20provided%20as%20a%20DataItem%20Example.png "Sensing Element provided as a DataItem Example"){: width="0.8"} > Note: See {{lst(example-of-sensing-element-provided-as-data-item-associated-with-a-component)}} for an {{term(XML)}} example. When a {{term(sensor unit)}} is modeled as a {{block(Component)}} or as a separate piece of equipment, it may provide additional configuration information for the {{termplural(sensor element)}} and the {{term(sensor unit)}} itself. ![Sensor for Rotary Axis Example](figures/Sensor%20for%20Rotary%20Axis%20Example.png "Sensor for Rotary Axis Example"){: width="0.8"} > Note: If a {{block(Sensor)}} provides vibration measurement data for the spindle on a piece of equipment, it could be modeled as a {{block(Sensor)}} for rotary axis named `C`. See {{lst(example-of-sensor-for-rotary-axis)}} for an {{term(XML)}} example. ![Sensor unit with Sensing Elements Example](figures/Sensor%20unit%20with%20Sensing%20Elements%20Example.png "Sensor unit with Sensing Elements Example"){: width="0.8"} > Note: If a {{block(Sensor)}} provides measurement data for multiple {{block(Component)}} elements within a piece of equipment and is not associated with any particular {{block(Component)}}, it **MAY** be modeled as an independent {{block(Component)}} and the data associated with measurements are associated with their associated {{block(Component)}} entities. See {{lst(example-of-sensor-unit-with-sensing-element)}} for an {{term(XML)}} example. {{block(Configuration)}} data provides information required for maintenance and support of the sensor. When {{block(Sensor)}} represents the {{term(sensor unit)}} for multiple {{term(sensing element)}}(s), each sensing element is represented by a {{block(Channel)}}. The {{term(sensor unit)}} itself and each {{block(Channel)}} representing one {{term(sensing element)}} **MAY** have its own configuration data. ![Sensor Configuration Example](figures/Sensor%20Configuration%20Example.png "Sensor Configuration Example"){: width="0.8"} > Note: See {{lst(example-of-configuration-data-for-sensor)}} for an {{term(XML)}} example.
 * 
 * <p>Java class for SensorType complex type</p>.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.</p>
 * 
 * <pre>{@code
 * <complexType name="SensorType">
 *   <complexContent>
 *     <extension base="{urn:mtconnect.org:MTConnectDevices:2.0}CommonComponentType">
 *     </extension>
 *   </complexContent>
 * </complexType>
 * }</pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@com.fasterxml.jackson.annotation.JsonTypeName(value = "SensorType")
@XmlType(name = "SensorType")
@XmlSeeAlso({
    ThermostatType.class,
    VibrationType.class
})
public class SensorType
    extends CommonComponentType
{


}
