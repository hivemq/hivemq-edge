//
// This file was generated by the Eclipse Implementation of JAXB, v4.0.5 
// See https://eclipse-ee4j.github.io/jaxb-ri 
// Any modifications to this file will be lost upon recompilation of the source schema. 
//


package com.hivemq.edge.adapters.mtconnect.schemas.assets.assets_1_6;

import jakarta.xml.bind.annotation.XmlAccessType;
import jakarta.xml.bind.annotation.XmlAccessorType;
import jakarta.xml.bind.annotation.XmlAttribute;
import jakarta.xml.bind.annotation.XmlType;
import jakarta.xml.bind.annotation.XmlValue;


/**
 * The value of the data item is not reset and accumulates for the entire
 *         life of the piece of equipment.
 * 
 * <p>Java class for LifeType complex type</p>.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.</p>
 * 
 * <pre>{@code
 * <complexType name="LifeType">
 *   <simpleContent>
 *     <extension base="<urn:mtconnect.org:MTConnectAssets:1.6>ToolLifeValueType">
 *       <attribute name="type" use="required" type="{urn:mtconnect.org:MTConnectAssets:1.6}ToolLifeTypeType" />
 *       <attribute name="countDirection" use="required" type="{urn:mtconnect.org:MTConnectAssets:1.6}ToolLifeDirectionType" />
 *       <attribute name="warning" type="{urn:mtconnect.org:MTConnectAssets:1.6}ToolLifeValueType" />
 *       <attribute name="limit" type="{urn:mtconnect.org:MTConnectAssets:1.6}ToolLifeValueType" />
 *       <attribute name="initial" type="{urn:mtconnect.org:MTConnectAssets:1.6}ToolLifeValueType" />
 *     </extension>
 *   </simpleContent>
 * </complexType>
 * }</pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@com.fasterxml.jackson.annotation.JsonTypeName(value = "LifeType")
@XmlType(name = "LifeType", propOrder = {
    "value"
})
public class LifeType {

    /**
     * The life of the tool in time, wear, or parts
     * 
     */
    @XmlValue
    protected float value;
    /**
     * The type of either a structural element or a dataitem being
     *               measured.
     * 
     */
    @com.fasterxml.jackson.annotation.JsonProperty(value = "type")
    @XmlAttribute(name = "type", required = true)
    protected ToolLifeTypeType type;
    /**
     * Indicates if the tool life counts from zero to maximum or maximum
     *               to zero.
     * 
     */
    @com.fasterxml.jackson.annotation.JsonProperty(value = "countDirection")
    @XmlAttribute(name = "countDirection", required = true)
    protected ToolLifeDirectionType countDirection;
    /**
     * Warning value for a condition element.
     * 
     */
    @com.fasterxml.jackson.annotation.JsonProperty(value = "warning")
    @XmlAttribute(name = "warning")
    protected Float warning;
    /**
     * The end of life limit for this tool.
     * 
     */
    @com.fasterxml.jackson.annotation.JsonProperty(value = "limit")
    @XmlAttribute(name = "limit")
    protected Float limit;
    /**
     * The initial life of the tool when it is new.
     * 
     */
    @com.fasterxml.jackson.annotation.JsonProperty(value = "initial")
    @XmlAttribute(name = "initial")
    protected Float initial;

    /**
     * The life of the tool in time, wear, or parts
     * 
     */
    public float getValue() {
        return value;
    }

    /**
     * Sets the value of the value property.
     * 
     */
    public void setValue(float value) {
        this.value = value;
    }

    /**
     * The type of either a structural element or a dataitem being
     *               measured.
     * 
     * @return
     *     possible object is
     *     {@link ToolLifeTypeType }
     *     
     */
    public ToolLifeTypeType getType() {
        return type;
    }

    /**
     * Sets the value of the type property.
     * 
     * @param value
     *     allowed object is
     *     {@link ToolLifeTypeType }
     *     
     * @see #getType()
     */
    public void setType(ToolLifeTypeType value) {
        this.type = value;
    }

    /**
     * Indicates if the tool life counts from zero to maximum or maximum
     *               to zero.
     * 
     * @return
     *     possible object is
     *     {@link ToolLifeDirectionType }
     *     
     */
    public ToolLifeDirectionType getCountDirection() {
        return countDirection;
    }

    /**
     * Sets the value of the countDirection property.
     * 
     * @param value
     *     allowed object is
     *     {@link ToolLifeDirectionType }
     *     
     * @see #getCountDirection()
     */
    public void setCountDirection(ToolLifeDirectionType value) {
        this.countDirection = value;
    }

    /**
     * Warning value for a condition element.
     * 
     * @return
     *     possible object is
     *     {@link Float }
     *     
     */
    public Float getWarning() {
        return warning;
    }

    /**
     * Sets the value of the warning property.
     * 
     * @param value
     *     allowed object is
     *     {@link Float }
     *     
     * @see #getWarning()
     */
    public void setWarning(Float value) {
        this.warning = value;
    }

    /**
     * The end of life limit for this tool.
     * 
     * @return
     *     possible object is
     *     {@link Float }
     *     
     */
    public Float getLimit() {
        return limit;
    }

    /**
     * Sets the value of the limit property.
     * 
     * @param value
     *     allowed object is
     *     {@link Float }
     *     
     * @see #getLimit()
     */
    public void setLimit(Float value) {
        this.limit = value;
    }

    /**
     * The initial life of the tool when it is new.
     * 
     * @return
     *     possible object is
     *     {@link Float }
     *     
     */
    public Float getInitial() {
        return initial;
    }

    /**
     * Sets the value of the initial property.
     * 
     * @param value
     *     allowed object is
     *     {@link Float }
     *     
     * @see #getInitial()
     */
    public void setInitial(Float value) {
        this.initial = value;
    }

}
